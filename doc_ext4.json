{
    "Ext.AbstractComponent": {
        "type": "Ext.AbstractComponent",
        "doc": "<p>An abstract base class which provides shared methods for Components across the Sencha product line.",
        "configs": [
            {
                "name": "autoEl",
                "type": "string/object",
                "doc": "<p>A tag name or DomHelper spec used to create the Element which will\nencapsulate this Component.</p>",
                "default": null
            },
            {
                "name": "autoRender",
                "type": "boolean/string/htmlelement/ext.element",
                "doc": "<p>This config is intended mainly for non-floating Components which may or may not be shown. Instead of using\nrenderTo in the configuration, and rendering upon construction, this allows a Component to render itself\nupon first <em>show</em>. If floating is true, the value of this config is omited as if it is <code>true</code>.</p>",
                "default": "false"
            },
            {
                "name": "autoShow",
                "type": "boolean",
                "doc": "<p>True to automatically show the component upon creation. This config option may only be used for\nfloating components or components that use autoRender. Defaults to false.</p>",
                "default": "false"
            },
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this components's element. This will also be prepended to elements within this\ncomponent like Panel's body will get a class x-panel-body. This means that if you create a subclass of Panel, and\nyou want it to get all the Panels styling for the element and the body, you leave the baseCls x-panel and use\ncomponentCls to add specific styling for this component.</p>",
                "default": "x-component"
            },
            {
                "name": "border",
                "type": "number/string",
                "doc": "<p>Specifies the border for this component. The border can be a single numeric value to apply to all sides or it can\nbe a CSS style specification for each style, for example: '10 5 3 10'.</p>",
                "default": null
            },
            {
                "name": "childEls",
                "type": "object[]",
                "doc": "<p>An array describing the child elements of the Component.</p>",
                "default": null
            },
            {
                "name": "cls",
                "type": "string",
                "doc": "<p>An optional extra CSS class that will be added to this component's Element. This can be useful\nfor adding customized styles to the component or any of its children using standard CSS rules.</p>",
                "default": ""
            },
            {
                "name": "componentCls",
                "type": "string",
                "doc": "<p>CSS Class to be added to a components root level element to give distinction to it via styling.</p>",
                "default": null
            },
            {
                "name": "componentLayout",
                "type": "string/object",
                "doc": "<p>The sizing and positioning of a Component's internal Elements is the responsibility of the Component's layout\nmanager which sizes a Component's internal structure in response to the Component being sized.</p>",
                "default": null
            },
            {
                "name": "contentEl",
                "type": "string",
                "doc": "<p>Specify an existing HTML element, or the <code>id</code> of an existing HTML element to use as the content for this component.</p>",
                "default": null
            },
            {
                "name": "data",
                "type": "object",
                "doc": "<p>The initial set of data to apply to the <code>tpl</code> to update the content area of the Component.</p>",
                "default": null
            },
            {
                "name": "disabled",
                "type": "boolean",
                "doc": "<p>True to disable the component.</p>",
                "default": "false"
            },
            {
                "name": "disabledCls",
                "type": "string",
                "doc": "<p>CSS class to add when the Component is disabled. Defaults to 'x-item-disabled'.</p>",
                "default": "x-item-disabled"
            },
            {
                "name": "draggable",
                "type": "boolean",
                "doc": "<p>Allows the component to be dragged.</p>",
                "default": "false"
            },
            {
                "name": "floating",
                "type": "boolean",
                "doc": "<p>Create the Component as a floating and use absolute positioning.</p>",
                "default": "false"
            },
            {
                "name": "frame",
                "type": "boolean",
                "doc": "<p>Specify as <code>true</code> to have the Component inject framing elements within the Component at render time to provide a\ngraphical rounded frame around the Component content.</p>",
                "default": null
            },
            {
                "name": "height",
                "type": "number",
                "doc": "<p>The height of this component in pixels.</p>",
                "default": null
            },
            {
                "name": "hidden",
                "type": "boolean",
                "doc": "<p>True to hide the component.</p>",
                "default": "false"
            },
            {
                "name": "hideMode",
                "type": "string",
                "doc": "<p>A String which specifies how this Component's encapsulating DOM element will be hidden.</p>",
                "default": "display"
            },
            {
                "name": "html",
                "type": "string/object",
                "doc": "<p>An HTML fragment, or a DomHelper specification to use as the layout element content.\nThe HTML content is added after the component is rendered, so the document will not contain this HTML at the time\nthe render event is fired. This content is inserted into the body <em>before</em> any configured contentEl\nis appended.</p>",
                "default": ""
            },
            {
                "name": "id",
                "type": "string",
                "doc": "<p>The <strong>unique id of this component instance.</strong></p>",
                "default": null
            },
            {
                "name": "itemId",
                "type": "string",
                "doc": "<p>An itemId can be used as an alternative way to get a reference to a component when no object reference is\navailable. Instead of using an <code>id</code> with Ext.getCmp, use <code>itemId</code> with\nExt.container.Container.getComponent which will retrieve\n<code>itemId</code>'s or id's. Since <code>itemId</code>'s are an index to the container's internal MixedCollection, the\n<code>itemId</code> is scoped locally to the container -- avoiding potential conflicts with Ext.ComponentManager\nwhich requires a <strong>unique</strong> <code>id</code>.</p>",
                "default": null
            },
            {
                "name": "loader",
                "type": "ext.componentloader/object",
                "doc": "<p>A configuration object or an instance of a Ext.ComponentLoader to load remote content for this Component.</p>",
                "default": null
            },
            {
                "name": "margin",
                "type": "number/string",
                "doc": "<p>Specifies the margin for this component. The margin can be a single numeric value to apply to all sides or it can\nbe a CSS style specification for each style, for example: '10 5 3 10'.</p>",
                "default": null
            },
            {
                "name": "maxHeight",
                "type": "number",
                "doc": "<p>The maximum value in pixels which this Component will set its height to.</p>",
                "default": null
            },
            {
                "name": "maxWidth",
                "type": "number",
                "doc": "<p>The maximum value in pixels which this Component will set its width to.</p>",
                "default": null
            },
            {
                "name": "minHeight",
                "type": "number",
                "doc": "<p>The minimum value in pixels which this Component will set its height to.</p>",
                "default": null
            },
            {
                "name": "minWidth",
                "type": "number",
                "doc": "<p>The minimum value in pixels which this Component will set its width to.</p>",
                "default": null
            },
            {
                "name": "overCls",
                "type": "string",
                "doc": "<p>An optional extra CSS class that will be added to this component's Element when the mouse moves over the Element,\nand removed when the mouse moves out. This can be useful for adding customized 'active' or 'hover' styles to the\ncomponent or any of its children using standard CSS rules.</p>",
                "default": ""
            },
            {
                "name": "padding",
                "type": "number/string",
                "doc": "<p>Specifies the padding for this component. The padding can be a single numeric value to apply to all sides or it\ncan be a CSS style specification for each style, for example: '10 5 3 10'.</p>",
                "default": null
            },
            {
                "name": "plugins",
                "type": "object/object[]",
                "doc": "<p>An object or array of objects that will provide custom functionality for this component. The only requirement for\na valid plugin is that it contain an init method that accepts a reference of type Ext.Component. When a component\nis created, if any plugins are available, the component will call the init method on each plugin, passing a\nreference to itself. Each plugin can then call methods or respond to events on the component as needed to provide\nits functionality.</p>",
                "default": null
            },
            {
                "name": "renderData",
                "type": "object",
                "doc": "<p>The data used by renderTpl in addition to the following property values of the component: id, ui, uiCls, baseCls, componentCls, frame.</p>",
                "default": null
            },
            {
                "name": "renderSelectors",
                "type": "object",
                "doc": "<p>An object containing properties specifying DomQuery selectors which identify child elements\ncreated by the render process.</p>",
                "default": null
            },
            {
                "name": "renderTo",
                "type": "string/htmlelement/ext.element",
                "doc": "<p>Specify the id of the element, a DOM element or an existing Element that this component will be rendered into.</p>",
                "default": null
            },
            {
                "name": "renderTpl",
                "type": "ext.xtemplate/string/string[]",
                "doc": "<p>An XTemplate used to create the internal structure inside this Component's encapsulating\nElement.</p>",
                "default": "null"
            },
            {
                "name": "style",
                "type": "string",
                "doc": "<p>A custom style specification to be applied to this component's Element. Should be a valid argument to\nExt.Element.applyStyles.</p>",
                "default": null
            },
            {
                "name": "styleHtmlCls",
                "type": "string",
                "doc": "<p>The class that is added to the content target when you set styleHtmlContent to true.</p>",
                "default": "x-html"
            },
            {
                "name": "styleHtmlContent",
                "type": "boolean",
                "doc": "<p>True to automatically style the html inside the content target of this component (body for panels).</p>",
                "default": "false"
            },
            {
                "name": "tpl",
                "type": "ext.xtemplate/ext.template/string/string[]",
                "doc": "<p>An Ext.Template, Ext.XTemplate or an array of strings to form an Ext.XTemplate. Used in\nconjunction with the <code>data</code> and <code>tplWriteMode</code> configurations.</p>",
                "default": null
            },
            {
                "name": "tplWriteMode",
                "type": "string",
                "doc": "<p>The Ext.(X)Template method to use when updating the content area of the Component.\nSee <code>Ext.XTemplate.overwrite</code> for information on default mode.</p>",
                "default": "overwrite"
            },
            {
                "name": "ui",
                "type": "string/string[]",
                "doc": "<p>A set style for a component. Can be a string or an Array of multiple strings (UIs)</p>",
                "default": "default"
            },
            {
                "name": "uiCls",
                "type": "string[]",
                "doc": "<p>An array of of classNames which are currently applied to this component</p>",
                "default": "[]"
            },
            {
                "name": "width",
                "type": "number",
                "doc": "<p>The width of this component in pixels.</p>",
                "default": null
            },
            {
                "name": "xtype",
                "type": "string",
                "doc": "<p>The <code>xtype</code> configuration option can be used to optimize Component creation and rendering. It serves as a\nshortcut to the full componet name. For example, the component <code>Ext.button.Button</code> has an xtype of <code>button</code>.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "activate",
                "params": "this(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires after a Component has been visually activated.</p>"
            },
            {
                "name": "added",
                "params": "this(Ext.Component) container(Ext.container.Container) pos(Number) eOpts(Object)",
                "doc": "<p>Fires after a Component had been added to a Container.</p>"
            },
            {
                "name": "afterrender",
                "params": "this(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires after the component rendering is finished.</p>"
            },
            {
                "name": "beforeactivate",
                "params": "this(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires before a Component has been visually activated. Returning false from an event listener can prevent\nthe activate from occurring.</p>"
            },
            {
                "name": "beforedeactivate",
                "params": "this(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires before a Component has been visually deactivated. Returning false from an event listener can\nprevent the deactivate from occurring.</p>"
            },
            {
                "name": "beforedestroy",
                "params": "this(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires before the component is destroyed. Return false from an event handler to stop the\ndestroy.</p>"
            },
            {
                "name": "beforehide",
                "params": "this(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires before the component is hidden when calling the hide method. Return false from an event\nhandler to stop the hide.</p>"
            },
            {
                "name": "beforerender",
                "params": "this(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires before the component is rendered. Return false from an event handler to stop the\nrender.</p>"
            },
            {
                "name": "beforeshow",
                "params": "this(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires before the component is shown when calling the show method. Return false from an event\nhandler to stop the show.</p>"
            },
            {
                "name": "deactivate",
                "params": "this(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires after a Component has been visually deactivated.</p>"
            },
            {
                "name": "destroy",
                "params": "this(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires after the component is destroyed.</p>"
            },
            {
                "name": "disable",
                "params": "this(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires after the component is disabled.</p>"
            },
            {
                "name": "enable",
                "params": "this(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires after the component is enabled.</p>"
            },
            {
                "name": "hide",
                "params": "this(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires after the component is hidden. Fires after the component is hidden when calling the hide\nmethod.</p>"
            },
            {
                "name": "move",
                "params": "this(Ext.Component) x(Number) y(Number) eOpts(Object)",
                "doc": "<p>Fires after the component is moved.</p>"
            },
            {
                "name": "removed",
                "params": "this(Ext.Component) ownerCt(Ext.container.Container) eOpts(Object)",
                "doc": "<p>Fires when a component is removed from an Ext.container.Container</p>"
            },
            {
                "name": "render",
                "params": "this(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires after the component markup is rendered.</p>"
            },
            {
                "name": "resize",
                "params": "this(Ext.Component) adjWidth(Number) adjHeight(Number) eOpts(Object)",
                "doc": "<p>Fires after the component is resized.</p>"
            },
            {
                "name": "show",
                "params": "this(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires after the component is shown when calling the show method.</p>"
            }
        ]
    },
    "Ext.AbstractManager": {
        "type": "Ext.AbstractManager",
        "doc": "<p>Base Manager class",
        "configs": [],
        "events": []
    },
    "Ext.AbstractPlugin": {
        "type": "Ext.AbstractPlugin",
        "doc": "<p>The AbstractPlugin class is the base class from which user-implemented plugins should inherit.",
        "configs": [],
        "events": []
    },
    "Ext.Action": {
        "type": "Ext.Action",
        "doc": "<p>An Action is a piece of reusable functionality that can be abstracted out of any particular component so that it\ncan be usefully shared among multiple components.  Actions let you share handlers, configuration options and UI\nupdates across any components that support the Action interface (primarily Ext.toolbar.Toolbar, Ext.button.Button\nand Ext.menu.Menu components).",
        "configs": [
            {
                "name": "disabled",
                "type": "boolean",
                "doc": "<p>True to disable all components configured by this Action, false to enable them.</p>",
                "default": "false"
            },
            {
                "name": "hidden",
                "type": "boolean",
                "doc": "<p>True to hide all components configured by this Action, false to show them.</p>",
                "default": "false"
            },
            {
                "name": "iconCls",
                "type": "string",
                "doc": "<p>The CSS class selector that specifies a background image to be used as the header icon for\nall components configured by this Action.</p>",
                "default": ""
            },
            {
                "name": "itemId",
                "type": "string",
                "doc": "<p>See Ext.Component.itemId.</p>",
                "default": null
            },
            {
                "name": "scope",
                "type": "object",
                "doc": "<p>The scope (this reference) in which the handler is executed.\nDefaults to the browser window.</p>",
                "default": null
            },
            {
                "name": "text",
                "type": "string",
                "doc": "<p>The text to set for all components configured by this Action.</p>",
                "default": ""
            }
        ],
        "events": []
    },
    "Ext.Ajax": {
        "type": "Ext.Ajax",
        "doc": "<p>A singleton instance of an Ext.data.Connection. This class\nis used to communicate with your server side code. It can be used as follows:",
        "configs": [],
        "events": []
    },
    "Ext.app.Application": {
        "type": "Ext.app.Application",
        "doc": "<p>Represents an Ext JS 4 application, which is typically a single page app using a Viewport.\nA typical Ext.app.Application might look like this:",
        "configs": [
            {
                "name": "appFolder",
                "type": "string",
                "doc": "<p>The path to the directory which contains all application's classes.\nThis path will be registered via Ext.Loader.setPath for the namespace specified in the name config.</p>",
                "default": "app"
            },
            {
                "name": "autoCreateViewport",
                "type": "boolean",
                "doc": "<p>True to automatically load and instantiate AppName.view.Viewport\nbefore firing the launch function.</p>",
                "default": "false"
            },
            {
                "name": "defaultUrl",
                "type": "string",
                "doc": "<p>When the app is first loaded, this url will be redirected to.</p>",
                "default": null
            },
            {
                "name": "enableQuickTips",
                "type": "boolean",
                "doc": "<p>True to automatically set up Ext.tip.QuickTip support.</p>",
                "default": "true"
            },
            {
                "name": "name",
                "type": "string",
                "doc": "<p>The name of your application. This will also be the namespace for your views, controllers\nmodels and stores. Don't use spaces or special characters in the name.</p>",
                "default": null
            },
            {
                "name": "scope",
                "type": "object",
                "doc": "<p>The scope to execute the launch function in. Defaults to the Application\ninstance.</p>",
                "default": "undefined"
            }
        ],
        "events": []
    },
    "Ext.app.Controller": {
        "type": "Ext.app.Controller",
        "doc": "<p>Controllers are the glue that binds an application together. All they really do is listen for events (usually from\nviews) and take some action. Here's how we might create a Controller to manage Users:",
        "configs": [
            {
                "name": "id",
                "type": "string",
                "doc": "<p>The id of this controller. You can use this id when dispatching.</p>",
                "default": null
            },
            {
                "name": "models",
                "type": "string[]",
                "doc": "<p>Array of models to require from AppName.model namespace.</p>",
                "default": null
            },
            {
                "name": "stores",
                "type": "string[]",
                "doc": "<p>Array of stores to require from AppName.store namespace.</p>",
                "default": null
            },
            {
                "name": "views",
                "type": "string[]",
                "doc": "<p>Array of views to require from AppName.view namespace.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.app.EventBus": {
        "type": "Ext.app.EventBus",
        "configs": [],
        "events": []
    },
    "Ext.Array": {
        "type": "Ext.Array",
        "doc": "<p>A set of useful static methods to deal with arrays; provide missing methods for older browsers.",
        "configs": [],
        "events": []
    },
    "Ext.Base": {
        "type": "Ext.Base",
        "doc": "<p>The root of all classes created with Ext.define.",
        "configs": [],
        "events": []
    },
    "Ext.button.Button": {
        "type": "Ext.button.Button",
        "doc": "<p>Create simple buttons with this component. Customisations include aligned\nicons, dropdown menus, tooltips\nand sizing options. Specify a handler to run code when\na user clicks the button, or use listeners for other events such as\nmouseover.",
        "configs": [
            {
                "name": "allowDepress",
                "type": "boolean",
                "doc": "<p>False to not allow a pressed Button to be depressed. Only valid when enableToggle is true.</p>",
                "default": "true"
            },
            {
                "name": "arrowAlign",
                "type": "string",
                "doc": "<p>The side of the Button box to render the arrow if the button has an associated menu.</p>",
                "default": "right"
            },
            {
                "name": "arrowCls",
                "type": "string",
                "doc": "<p>The className used for the inner arrow element if the button has a menu.</p>",
                "default": "arrow"
            },
            {
                "name": "autoWidth",
                "type": "boolean",
                "doc": "<p>By default, if a width is not specified the button will attempt to stretch horizontally to fit its content. If\nthe button is being managed by a width sizing layout (hbox, fit, anchor), set this to false to prevent the button\nfrom doing this automatic sizing.</p>",
                "default": null
            },
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to add to all buttons.</p>",
                "default": "x-btn"
            },
            {
                "name": "baseParams",
                "type": "object",
                "doc": "<p>An object literal of parameters to pass to the url when the href property is specified.</p>",
                "default": null
            },
            {
                "name": "clickEvent",
                "type": "string",
                "doc": "<p>The DOM event that will fire the handler of the button. This can be any valid event name (dblclick, contextmenu).</p>",
                "default": "click"
            },
            {
                "name": "cls",
                "type": "string",
                "doc": "<p>A CSS class string to apply to the button's main element.</p>",
                "default": null
            },
            {
                "name": "disabled",
                "type": "boolean",
                "doc": "<p>True to start disabled.</p>",
                "default": "true"
            },
            {
                "name": "enableToggle",
                "type": "boolean",
                "doc": "<p>True to enable pressed/not pressed toggling.</p>",
                "default": "false"
            },
            {
                "name": "focusCls",
                "type": "string",
                "doc": "<p>The CSS class to add to a button when it is in the focussed state.</p>",
                "default": "focus"
            },
            {
                "name": "handleMouseEvents",
                "type": "boolean",
                "doc": "<p>False to disable visual cues on mouseover, mouseout and mousedown.</p>",
                "default": "true"
            },
            {
                "name": "hidden",
                "type": "boolean",
                "doc": "<p>True to start hidden.</p>",
                "default": "false"
            },
            {
                "name": "href",
                "type": "string",
                "doc": "<p>The URL to visit when the button is clicked.</p>",
                "default": null
            },
            {
                "name": "icon",
                "type": "string",
                "doc": "<p>The path to an image to display in the button (the image will be set as the background-image CSS property of the\nbutton by default, so if you want a mixed icon/text button, set cls:'x-btn-text-icon')</p>",
                "default": null
            },
            {
                "name": "iconAlign",
                "type": "string",
                "doc": "<p>The side of the Button box to render the icon.</p>",
                "default": "left"
            },
            {
                "name": "iconCls",
                "type": "string",
                "doc": "<p>A css class which sets a background image to be used as the icon for this button.</p>",
                "default": null
            },
            {
                "name": "menu",
                "type": "ext.menu.menu/string/object",
                "doc": "<p>Standard menu attribute consisting of a reference to a menu object, a menu id or a menu config blob.</p>",
                "default": null
            },
            {
                "name": "menuActiveCls",
                "type": "string",
                "doc": "<p>The CSS class to add to a button when it's menu is active.</p>",
                "default": "menu-active"
            },
            {
                "name": "menuAlign",
                "type": "string",
                "doc": "<p>The position to align the menu to (see Ext.Element.alignTo for more details).</p>",
                "default": "tl-bl?"
            },
            {
                "name": "minWidth",
                "type": "number",
                "doc": "<p>The minimum width for this button (used to give a set of buttons a common width).\nSee also Ext.panel.Panel.minButtonWidth.</p>",
                "default": null
            },
            {
                "name": "overCls",
                "type": "string",
                "doc": "<p>The CSS class to add to a button when it is in the over (hovered) state.</p>",
                "default": "over"
            },
            {
                "name": "overflowText",
                "type": "string",
                "doc": "<p>If used in a Toolbar, the text to be used if this item is shown in the overflow menu.\nSee also Ext.toolbar.Item.<code>overflowText</code>.</p>",
                "default": null
            },
            {
                "name": "params",
                "type": "object",
                "doc": "<p>An object literal of parameters to pass to the url when the href property is specified. Any params\noverride baseParams. New params can be set using the setParams method.</p>",
                "default": null
            },
            {
                "name": "pressed",
                "type": "boolean",
                "doc": "<p>True to start pressed (only if enableToggle = true)</p>",
                "default": "false"
            },
            {
                "name": "pressedCls",
                "type": "string",
                "doc": "<p>The CSS class to add to a button when it is in the pressed state.</p>",
                "default": "pressed"
            },
            {
                "name": "preventDefault",
                "type": "boolean",
                "doc": "<p>True to prevent the default action when the clickEvent is processed.</p>",
                "default": "true"
            },
            {
                "name": "repeat",
                "type": "boolean/object",
                "doc": "<p>True to repeat fire the click event while the mouse is down. This can also be a\nClickRepeater config object.</p>",
                "default": "false"
            },
            {
                "name": "scale",
                "type": "string",
                "doc": "<p>The size of the Button.</p>",
                "default": "small"
            },
            {
                "name": "scope",
                "type": "object",
                "doc": "<p>The scope (<strong>this</strong> reference) in which the <code>handler</code> and <code>toggleHandler</code> is executed.\nDefaults to this Button.</p>",
                "default": null
            },
            {
                "name": "tabIndex",
                "type": "number",
                "doc": "<p>Set a DOM tabIndex for this button.</p>",
                "default": null
            },
            {
                "name": "text",
                "type": "string",
                "doc": "<p>The button text to be used as innerHTML (html tags are accepted).</p>",
                "default": null
            },
            {
                "name": "textAlign",
                "type": "string",
                "doc": "<p>The text alignment for this button (center, left, right).</p>",
                "default": "center"
            },
            {
                "name": "toggleGroup",
                "type": "string",
                "doc": "<p>The group this toggle button is a member of (only 1 per group can be pressed)</p>",
                "default": null
            },
            {
                "name": "tooltip",
                "type": "string/object",
                "doc": "<p>The tooltip for the button - can be a string to be used as innerHTML (html tags are accepted) or\nQuickTips config object.</p>",
                "default": null
            },
            {
                "name": "tooltipType",
                "type": "string",
                "doc": "<p>The type of tooltip to use. Either 'qtip' for QuickTips or 'title' for title attribute.</p>",
                "default": "qtip"
            },
            {
                "name": "type",
                "type": "string",
                "doc": "<p>The type of <code>&lt;input&gt;</code> to create: submit, reset or button.</p>",
                "default": "button"
            }
        ],
        "events": [
            {
                "name": "click",
                "params": "this(Ext.button.Button) e(Event) eOpts(Object)",
                "doc": "<p>Fires when this button is clicked</p>"
            },
            {
                "name": "menuhide",
                "params": "this(Ext.button.Button) menu(Ext.menu.Menu) eOpts(Object)",
                "doc": "<p>If this button has a menu, this event fires when it is hidden</p>"
            },
            {
                "name": "menushow",
                "params": "this(Ext.button.Button) menu(Ext.menu.Menu) eOpts(Object)",
                "doc": "<p>If this button has a menu, this event fires when it is shown</p>"
            },
            {
                "name": "menutriggerout",
                "params": "this(Ext.button.Button) menu(Ext.menu.Menu) e(Event) eOpts(Object)",
                "doc": "<p>If this button has a menu, this event fires when the mouse leaves the menu triggering element</p>"
            },
            {
                "name": "menutriggerover",
                "params": "this(Ext.button.Button) menu(Ext.menu.Menu) e(Event) eOpts(Object)",
                "doc": "<p>If this button has a menu, this event fires when the mouse enters the menu triggering element</p>"
            },
            {
                "name": "mouseout",
                "params": "this(Ext.button.Button) e(Event) eOpts(Object)",
                "doc": "<p>Fires when the mouse exits the button</p>"
            },
            {
                "name": "mouseover",
                "params": "this(Ext.button.Button) e(Event) eOpts(Object)",
                "doc": "<p>Fires when the mouse hovers over the button</p>"
            },
            {
                "name": "toggle",
                "params": "this(Ext.button.Button) pressed(Boolean) eOpts(Object)",
                "doc": "<p>Fires when the 'pressed' state of this button changes (only if enableToggle = true)</p>"
            }
        ]
    },
    "Ext.button.Cycle": {
        "type": "Ext.button.Cycle",
        "doc": "<p>A specialized SplitButton that contains a menu of Ext.menu.CheckItem elements. The button automatically\ncycles through each menu item on click, raising the button's change event for the active menu item.",
        "configs": [
            {
                "name": "forceIcon",
                "type": "string",
                "doc": "<p>A css class which sets an image to be used as the static icon for this button. This icon will always be displayed\nregardless of which item is selected in the dropdown list. This overrides the default behavior of changing the\nbutton's icon to match the selected item's icon on change.</p>",
                "default": null
            },
            {
                "name": "items",
                "type": "object[]",
                "doc": "<p>An array of Ext.menu.CheckItem <strong>config</strong> objects to be used when creating the button's menu items (e.g.,\n<code>{text:'Foo', iconCls:'foo-icon'}</code>)</p>",
                "default": null
            },
            {
                "name": "prependText",
                "type": "string",
                "doc": "<p>A static string to prepend before the active item's text when displayed as the button's text (only applies when\nshowText = true).</p>",
                "default": ""
            },
            {
                "name": "showText",
                "type": "boolean",
                "doc": "<p>True to display the active item's text as the button text. The Button will show its\nconfigured text if this config is omitted.</p>",
                "default": "false"
            }
        ],
        "events": [
            {
                "name": "change",
                "params": "this(Ext.button.Cycle) item(Ext.menu.CheckItem) eOpts(Object)",
                "doc": "<p>Fires after the button's active menu item has changed. Note that if a changeHandler function is\nset on this CycleButton, it will be called instead on active item change and this change event will not\nbe fired.</p>"
            }
        ]
    },
    "Ext.button.Split": {
        "type": "Ext.button.Split",
        "doc": "<p>A split button that provides a built-in dropdown arrow that can fire an event separately from the default click event\nof the button.",
        "configs": [
            {
                "name": "arrowTooltip",
                "type": "string",
                "doc": "<p>The title attribute of the arrow</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "arrowclick",
                "params": "this(Ext.button.Split) e(Event) eOpts(Object)",
                "doc": "<p>Fires when this button's arrow is clicked.</p>"
            }
        ]
    },
    "Ext.ButtonToggleManager": {
        "type": "Ext.ButtonToggleManager",
        "doc": "<p>Private utility class used by Button",
        "configs": [],
        "events": []
    },
    "Ext.chart.axis.Abstract": {
        "type": "Ext.chart.axis.Abstract",
        "doc": "<p>Base class for all axis classes.",
        "configs": [],
        "events": []
    },
    "Ext.chart.axis.Axis": {
        "type": "Ext.chart.axis.Axis",
        "doc": "<p>Defines axis for charts. The axis position, type, style can be configured.\nThe axes are defined in an axes array of configuration objects where the type,\nfield, grid and other configuration options can be set. To know more about how\nto create a Chart please check the Chart class documentation. Here's an example for the axes part:\nAn example of axis for a series (in this case for an area chart that has multiple layers of yFields) could be:",
        "configs": [
            {
                "name": "dashSize",
                "type": "number",
                "doc": "<p>The size of the dash marker. Default's 3.</p>",
                "default": "3"
            },
            {
                "name": "grid",
                "type": "boolean/object",
                "doc": "<p>The grid configuration enables you to set a background grid for an axis.\nIf set to <em>true</em> on a vertical axis, vertical lines will be drawn.\nIf set to <em>true</em> on a horizontal axis, horizontal lines will be drawn.\nIf both are set, a proper grid with horizontal and vertical lines will be drawn.</p>",
                "default": null
            },
            {
                "name": "length",
                "type": "number",
                "doc": "<p>Offset axis position. Default's 0.</p>",
                "default": "0"
            },
            {
                "name": "majorTickSteps",
                "type": "number",
                "doc": "<p>If <code>minimum</code> and <code>maximum</code> are specified it forces the number of major ticks to the specified value.</p>",
                "default": null
            },
            {
                "name": "minorTickSteps",
                "type": "number",
                "doc": "<p>The number of small ticks between two major ticks. Default is zero.</p>",
                "default": null
            },
            {
                "name": "position",
                "type": "string",
                "doc": "<p>Where to set the axis. Available options are <code>left</code>, <code>bottom</code>, <code>right</code>, <code>top</code>. Default's <code>bottom</code>.</p>",
                "default": "bottom"
            },
            {
                "name": "title",
                "type": "string",
                "doc": "<p>The title for the Axis</p>",
                "default": null
            },
            {
                "name": "width",
                "type": "number",
                "doc": "<p>Offset axis width. Default's 0.</p>",
                "default": "0"
            }
        ],
        "events": []
    },
    "Ext.chart.axis.Category": {
        "type": "Ext.chart.axis.Category",
        "doc": "<p>A type of axis that displays items in categories. This axis is generally used to\ndisplay categorical information like names of items, month names, quarters, etc.\nbut no quantitative values. For that other type of information <code>Number</code>\naxis are more suitable.",
        "configs": [],
        "events": []
    },
    "Ext.chart.axis.Gauge": {
        "type": "Ext.chart.axis.Gauge",
        "doc": "<p>Gauge Axis is the axis to be used with a Gauge series. The Gauge axis\ndisplays numeric data from an interval defined by the <code>minimum</code>, <code>maximum</code> and\n<code>step</code> configuration properties.",
        "configs": [
            {
                "name": "margin",
                "type": "number",
                "doc": "<p>The offset positioning of the tick marks and labels in pixels.</p>",
                "default": "10"
            },
            {
                "name": "maximum",
                "type": "number",
                "doc": "<p>The maximum value of the interval to be displayed in the axis.</p>",
                "default": null
            },
            {
                "name": "minimum",
                "type": "number",
                "doc": "<p>The minimum value of the interval to be displayed in the axis.</p>",
                "default": null
            },
            {
                "name": "steps",
                "type": "number",
                "doc": "<p>The number of steps and tick marks to add to the interval.</p>",
                "default": null
            },
            {
                "name": "title",
                "type": "string",
                "doc": "<p>The title for the Axis.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.chart.axis.Numeric": {
        "type": "Ext.chart.axis.Numeric",
        "doc": "<p>An axis to handle numeric values. This axis is used for quantitative data as\nopposed to the category axis. You can set mininum and maximum values to the\naxis so that the values are bound to that. If no values are set, then the\nscale will auto-adjust to the values.",
        "configs": [],
        "events": []
    },
    "Ext.chart.axis.Time": {
        "type": "Ext.chart.axis.Time",
        "doc": "<p>A type of axis whose units are measured in time values. Use this axis\nfor listing dates that you will want to group or dynamically change.\nIf you just want to display dates as categories then use the\nCategory class for axis instead.",
        "configs": [
            {
                "name": "aggregateOp",
                "type": "string",
                "doc": "<p>Aggregation operation when grouping. Possible options are 'sum', 'avg', 'max', 'min'. Default's 'sum'.",
                "href": "Time3.html#Ext-chart-axis-Time-cfg-aggregateOp"
            },
            {
                "name": "constrain",
                "type": "boolean",
                "doc": "<p>If true, the values of the chart will be rendered only if they belong between the fromDate and toDate.\nIf false, the time axis will adapt to the new values by adding/removing steps.</p>",
                "default": "false"
            },
            {
                "name": "dateFormat",
                "type": "string/boolean",
                "doc": "<p>Indicates the format the date will be rendered on.\nFor example: 'M d' will render the dates as 'Jan 30', etc.\nFor a list of possible format strings see Date</p>",
                "default": "false"
            },
            {
                "name": "fromDate",
                "type": "date",
                "doc": "<p>The starting date for the time axis.</p>",
                "default": "false"
            },
            {
                "name": "groupBy",
                "type": "string",
                "doc": "<p>Indicates the time unit to use for each step. Can be 'day', 'month', 'year'\nor a comma-separated combination of all of them. Default's 'year,month,day'.",
                "href": "Time3.html#Ext-chart-axis-Time-cfg-groupBy"
            },
            {
                "name": "step",
                "type": "array/boolean",
                "doc": "<p>An array with two components: The first is the unit of the step (day, month, year, etc).\nThe second one is the number of units for the step (1, 2, etc.).\nDefaults to <code>[Ext.Date.DAY, 1]</code>.</p>",
                "default": null
            },
            {
                "name": "toDate",
                "type": "date",
                "doc": "<p>The ending date for the time axis.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.chart.Callout": {
        "type": "Ext.chart.Callout",
        "doc": "<p>A mixin providing callout functionality for Ext.chart.series.Series.",
        "configs": [],
        "events": []
    },
    "Ext.chart.Chart": {
        "type": "Ext.chart.Chart",
        "doc": "<p>Charts provide a flexible way to achieve a wide range of data visualization capablitities.\nEach Chart gets its data directly from a Store, and automatically\nupdates its display whenever data in the Store changes.",
        "configs": [
            {
                "name": "animate",
                "type": "boolean/object",
                "doc": "<p>True for the default animation (easing: 'ease' and duration: 500) or a standard animation config\nobject to be used for default chart animations. Defaults to false.</p>",
                "default": "false"
            },
            {
                "name": "axes",
                "type": "ext.chart.axis.axis[]",
                "doc": "<p>Array of Axis instances or config objects.</p>",
                "default": null
            },
            {
                "name": "background",
                "type": "object/boolean",
                "doc": "<p>The chart background. This can be a gradient object, image, or color. Defaults to false for no\nbackground. For example, if <code>background</code> were to be a color we could set the object as</p>",
                "default": "false"
            },
            {
                "name": "enginePriority",
                "type": "string[]",
                "doc": "<p>Defines the priority order for which Surface implementation to use. The first one supported by the current\nenvironment will be used. Defaults to <code>['Svg', 'Vml']</code>.</p>",
                "default": "[Svg, Vml]"
            },
            {
                "name": "gradients",
                "type": "object[]",
                "doc": "<p>Define a set of gradients that can be used as <code>fill</code> property in sprites.</p>",
                "default": null
            },
            {
                "name": "insetPadding",
                "type": "number",
                "doc": "<p>The amount of inset padding in pixels for the chart. Defaults to 10.</p>",
                "default": "10"
            },
            {
                "name": "legend",
                "type": "boolean/object",
                "doc": "<p>True for the default legend display or a legend config object. Defaults to false.</p>",
                "default": "false"
            },
            {
                "name": "series",
                "type": "ext.chart.series.series[]",
                "doc": "<p>Array of Series instances or config objects.</p>",
                "default": null
            },
            {
                "name": "store",
                "type": "ext.data.store",
                "doc": "<p>The store that supplies data to this chart.</p>",
                "default": null
            },
            {
                "name": "theme",
                "type": "string",
                "doc": "<p>The name of the theme to be used. A theme defines the colors and other visual displays of tick marks\non axis, text, title text, line colors, marker colors and styles, etc. Possible theme values are 'Base', 'Green',\n'Sky', 'Red', 'Purple', 'Blue', 'Yellow' and also six category themes 'Category1' to 'Category6'. Default value\nis 'Base'.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "beforerefresh",
                "params": "this(Ext.chart.Chart) eOpts(Object)",
                "doc": "<p>Fires before a refresh to the chart data is called. If the beforerefresh handler returns false the\nrefresh action will be cancelled.</p>"
            },
            {
                "name": "refresh",
                "params": "this(Ext.chart.Chart) eOpts(Object)",
                "doc": "<p>Fires after the chart data has been refreshed.</p>"
            }
        ]
    },
    "Ext.chart.Highlight": {
        "type": "Ext.chart.Highlight",
        "doc": "<p>A mixin providing highlight functionality for Ext.chart.series.Series.",
        "configs": [],
        "events": []
    },
    "Ext.chart.Label": {
        "type": "Ext.chart.Label",
        "doc": "<p>Labels is a mixin to the Series class. Labels methods are implemented\nin each of the Series (Pie, Bar, etc) for label creation and placement.",
        "configs": [
            {
                "name": "label",
                "type": "object",
                "doc": "<p>Object with the following properties: display, color, contrast, field, minMargin, font, orientation, renderer.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.chart.Legend": {
        "type": "Ext.chart.Legend",
        "doc": "<p>Defines a legend for a chart's series.\nThe 'chart' member must be set prior to rendering.\nThe legend class displays a list of legend items each of them related with a\nseries being rendered.",
        "configs": [
            {
                "name": "boxFill",
                "type": "string",
                "doc": "<p>Fill style for the legend box</p>",
                "default": "#FFF"
            },
            {
                "name": "boxStroke",
                "type": "string",
                "doc": "<p>Style of the stroke for the legend box</p>",
                "default": "#000"
            },
            {
                "name": "boxStrokeWidth",
                "type": "string",
                "doc": "<p>Width of the stroke for the legend box</p>",
                "default": "1"
            },
            {
                "name": "boxZIndex",
                "type": "number",
                "doc": "<p>Sets the z-index for the legend. Defaults to 100.</p>",
                "default": "100"
            },
            {
                "name": "itemSpacing",
                "type": "number",
                "doc": "<p>Amount of space between legend items</p>",
                "default": "10"
            },
            {
                "name": "labelFont",
                "type": "string",
                "doc": "<p>Font to be used for the legend labels, eg '12px Helvetica'</p>",
                "default": "12px Helvetica, sans-serif"
            },
            {
                "name": "padding",
                "type": "number",
                "doc": "<p>Amount of padding between the legend box's border and its items</p>",
                "default": "5"
            },
            {
                "name": "position",
                "type": "string",
                "doc": "<p>The position of the legend in relation to the chart. One of: top,\nbottom, left, right, or float. If set to float, then the legend\nbox will be positioned at the point denoted by the x and y parameters.</p>",
                "default": "bottom"
            },
            {
                "name": "visible",
                "type": "boolean",
                "doc": "<p>Whether or not the legend should be displayed.</p>",
                "default": "true"
            },
            {
                "name": "x",
                "type": "number",
                "doc": "<p>X-position of the legend box. Used directly if position is set to float, otherwise\nit will be calculated dynamically.</p>",
                "default": "0"
            },
            {
                "name": "y",
                "type": "number",
                "doc": "<p>Y-position of the legend box. Used directly if position is set to float, otherwise\nit will be calculated dynamically.</p>",
                "default": "0"
            }
        ],
        "events": []
    },
    "Ext.chart.LegendItem": {
        "type": "Ext.chart.LegendItem",
        "doc": "<p>A single item of a legend (marker plus label)",
        "configs": [],
        "events": []
    },
    "Ext.chart.Mask": {
        "type": "Ext.chart.Mask",
        "doc": "<p>Defines a mask for a chart's series.\nThe 'chart' member must be set prior to rendering.",
        "configs": [],
        "events": []
    },
    "Ext.chart.Navigation": {
        "type": "Ext.chart.Navigation",
        "doc": "<p>Handles panning and zooming capabilities.",
        "configs": [],
        "events": []
    },
    "Ext.chart.series.Area": {
        "type": "Ext.chart.series.Area",
        "doc": "<p>Creates a Stacked Area Chart. The stacked area chart is useful when displaying multiple aggregated layers of information.\nAs with all other series, the Area Series must be appended in the <em>series</em> Chart array configuration. ",
        "configs": [
            {
                "name": "style",
                "type": "object",
                "doc": "<p>Append styling properties to this object for it to override theme properties.</p>",
                "default": "{}"
            }
        ],
        "events": []
    },
    "Ext.chart.series.Bar": {
        "type": "Ext.chart.series.Bar",
        "doc": "<p>Creates a Bar Chart. A Bar Chart is a useful visualization technique to display quantitative information for\ndifferent categories that can show some progression (or regression) in the dataset.",
        "configs": [
            {
                "name": "column",
                "type": "boolean",
                "doc": "<p>Whether to set the visualization as column chart or horizontal bar chart.</p>",
                "default": "false"
            },
            {
                "name": "groupGutter",
                "type": "number",
                "doc": "<p>The gutter space between groups of bars, as a percentage of the bar width</p>",
                "default": "38.2"
            },
            {
                "name": "gutter",
                "type": "number",
                "doc": "<p>The gutter space between single bars, as a percentage of the bar width</p>",
                "default": "38.2"
            },
            {
                "name": "style",
                "type": "object",
                "doc": "<p>Style properties that will override the theming series styles.</p>",
                "default": "{}"
            },
            {
                "name": "xPadding",
                "type": "number",
                "doc": "<p>Padding between the left/right axes and the bars</p>",
                "default": "0"
            },
            {
                "name": "yPadding",
                "type": "number",
                "doc": "<p>Padding between the top/bottom axes and the bars</p>",
                "default": "10"
            }
        ],
        "events": []
    },
    "Ext.chart.series.Cartesian": {
        "type": "Ext.chart.series.Cartesian",
        "doc": "<p>Common base class for series implementations which plot values using x/y coordinates.",
        "configs": [
            {
                "name": "axis",
                "type": "string",
                "doc": "<p>The position of the axis to bind the values to. Possible values are 'left', 'bottom', 'top' and 'right'.\nYou must explicitly set this value to bind the values of the line series to the ones in the axis, otherwise a\nrelative scale will be used.</p>",
                "default": "left"
            }
        ],
        "events": []
    },
    "Ext.chart.series.Column": {
        "type": "Ext.chart.series.Column",
        "doc": "<p>Creates a Column Chart. Much of the methods are inherited from Bar. A Column Chart is a useful\nvisualization technique to display quantitative information for different categories that can\nshow some progression (or regression) in the data set.",
        "configs": [
            {
                "name": "xPadding",
                "type": "number",
                "doc": "<p>Padding between the left/right axes and the bars</p>",
                "default": "10"
            },
            {
                "name": "yPadding",
                "type": "number",
                "doc": "<p>Padding between the top/bottom axes and the bars</p>",
                "default": "0"
            }
        ],
        "events": []
    },
    "Ext.chart.series.Gauge": {
        "type": "Ext.chart.series.Gauge",
        "doc": "<p>Creates a Gauge Chart. Gauge Charts are used to show progress in a certain variable. There are two ways of using the Gauge chart.\nOne is setting a store element into the Gauge and selecting the field to be used from that store.",
        "configs": [
            {
                "name": "angleField",
                "type": "string",
                "doc": "<p>The store record field name to be used for the pie angles.\nThe values bound to this field name must be positive real numbers.</p>",
                "default": "false"
            },
            {
                "name": "donut",
                "type": "boolean/number",
                "doc": "<p>Use the entire disk or just a fraction of it for the gauge. Default's false.</p>",
                "default": "false"
            },
            {
                "name": "highlightDuration",
                "type": "number",
                "doc": "<p>The duration for the pie slice highlight effect.</p>",
                "default": "150"
            },
            {
                "name": "needle",
                "type": "boolean",
                "doc": "<p>Use the Gauge Series as an area series or add a needle to it. Default's false.</p>",
                "default": "false"
            },
            {
                "name": "showInLegend",
                "type": "boolean",
                "doc": "<p>Whether to add the pie chart elements as legend items. Default's false.</p>",
                "default": "false"
            },
            {
                "name": "style",
                "type": "object",
                "doc": "<p>An object containing styles for overriding series styles from Theming.</p>",
                "default": "{}"
            }
        ],
        "events": []
    },
    "Ext.chart.series.Line": {
        "type": "Ext.chart.series.Line",
        "doc": "<p>Creates a Line Chart. A Line Chart is a useful visualization technique to display quantitative information for different\ncategories or other real values (as opposed to the bar chart), that can show some progression (or regression) in the dataset.",
        "configs": [
            {
                "name": "axis",
                "type": "string",
                "doc": "<p>The position of the axis to bind the values to. Possible values are 'left', 'bottom', 'top' and 'right'.\nYou must explicitly set this value to bind the values of the line series to the ones in the axis, otherwise a\nrelative scale will be used.</p>",
                "default": null
            },
            {
                "name": "fill",
                "type": "boolean",
                "doc": "<p>If true, the area below the line will be filled in using the eefill and\nopacity config properties. Defaults to false.</p>",
                "default": "false"
            },
            {
                "name": "markerConfig",
                "type": "object",
                "doc": "<p>The display style for the markers. Only used if showMarkers is true.\nThe markerConfig is a configuration object containing the same set of properties defined in\nthe Sprite class.</p>",
                "default": "{}"
            },
            {
                "name": "selectionTolerance",
                "type": "number",
                "doc": "<p>The offset distance from the cursor position to the line series to trigger events (then used for highlighting series, etc).</p>",
                "default": "20"
            },
            {
                "name": "showMarkers",
                "type": "boolean",
                "doc": "<p>Whether markers should be displayed at the data points along the line. If true,\nthen the markerConfig config item will determine the markers' styling.</p>",
                "default": "true"
            },
            {
                "name": "smooth",
                "type": "boolean/number",
                "doc": "<p>If set to <code>true</code> or a non-zero number, the line will be smoothed/rounded around its points; otherwise\nstraight line segments will be drawn.</p>",
                "default": "false"
            },
            {
                "name": "style",
                "type": "object",
                "doc": "<p>An object containing style properties for the visualization lines and fill.\nThese styles will override the theme styles.</p>",
                "default": "{}"
            }
        ],
        "events": []
    },
    "Ext.chart.series.Pie": {
        "type": "Ext.chart.series.Pie",
        "doc": "<p>Creates a Pie Chart. A Pie Chart is a useful visualization technique to display quantitative information for different\ncategories that also have a meaning as a whole.\nAs with all other series, the Pie Series must be appended in the <em>series</em> Chart array configuration.",
        "configs": [
            {
                "name": "angleField",
                "type": "string",
                "doc": "<p>The store record field name to be used for the pie angles.\nThe values bound to this field name must be positive real numbers.</p>",
                "default": "false"
            },
            {
                "name": "colorSet",
                "type": "array",
                "doc": "<p>An array of color values which will be used, in order, as the pie slice fill colors.</p>",
                "default": null
            },
            {
                "name": "donut",
                "type": "boolean/number",
                "doc": "<p>Whether to set the pie chart as donut chart.\nDefault's false. Can be set to a particular percentage to set the radius\nof the donut chart.</p>",
                "default": "false"
            },
            {
                "name": "highlightDuration",
                "type": "number",
                "doc": "<p>The duration for the pie slice highlight effect.</p>",
                "default": "150"
            },
            {
                "name": "lengthField",
                "type": "string",
                "doc": "<p>The store record field name to be used for the pie slice lengths.\nThe values bound to this field name must be positive real numbers.</p>",
                "default": "false"
            },
            {
                "name": "showInLegend",
                "type": "boolean",
                "doc": "<p>Whether to add the pie chart elements as legend items. Default's false.</p>",
                "default": "false"
            },
            {
                "name": "style",
                "type": "object",
                "doc": "<p>An object containing styles for overriding series styles from Theming.</p>",
                "default": "{}"
            }
        ],
        "events": []
    },
    "Ext.chart.series.Radar": {
        "type": "Ext.chart.series.Radar",
        "doc": "<p>Creates a Radar Chart. A Radar Chart is a useful visualization technique for comparing different quantitative values for\na constrained number of categories.",
        "configs": [
            {
                "name": "style",
                "type": "object",
                "doc": "<p>An object containing styles for overriding series styles from Theming.</p>",
                "default": "{}"
            }
        ],
        "events": []
    },
    "Ext.chart.series.Scatter": {
        "type": "Ext.chart.series.Scatter",
        "doc": "<p>Creates a Scatter Chart. The scatter plot is useful when trying to display more than two variables in the same visualization.\nThese variables can be mapped into x, y coordinates and also to an element's radius/size, color, etc.",
        "configs": [
            {
                "name": "axis",
                "type": "string/array",
                "doc": "<p>The position of the axis to bind the values to. Possible values are 'left', 'bottom', 'top' and 'right'.\nYou must explicitly set this value to bind the values of the line series to the ones in the axis, otherwise a\nrelative scale will be used. If multiple axes are being used, they should both be specified in in the configuration.</p>",
                "default": null
            },
            {
                "name": "markerConfig",
                "type": "object",
                "doc": "<p>The display style for the scatter series markers.</p>",
                "default": null
            },
            {
                "name": "style",
                "type": "object",
                "doc": "<p>Append styling properties to this object for it to override theme properties.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.chart.series.Series": {
        "type": "Ext.chart.series.Series",
        "doc": "<p>Series is the abstract class containing the common logic to all chart series. Series includes\nmethods from Labels, Highlights, Tips and Callouts mixins. This class implements the logic of handling\nmouse events, animating, hiding, showing all elements and returning the color of the series to be used as a legend item.",
        "configs": [
            {
                "name": "highlight",
                "type": "boolean/object",
                "doc": "<p>If set to <code>true</code> it will highlight the markers or the series when hovering\nwith the mouse. This parameter can also be an object with the same style\nproperties you would apply to a Ext.draw.Sprite to apply custom\nstyles to markers and series.</p>",
                "default": null
            },
            {
                "name": "listeners",
                "type": "object",
                "doc": "<p>An (optional) object with event callbacks. All event callbacks get the target <em>item</em> as first parameter.</p>",
                "default": null
            },
            {
                "name": "shadowAttributes",
                "type": "array",
                "doc": "<p>An array with shadow attributes</p>",
                "default": "null"
            },
            {
                "name": "showInLegend",
                "type": "boolean",
                "doc": "<p>Whether to show this series in the legend.</p>",
                "default": "true"
            },
            {
                "name": "tips",
                "type": "object",
                "doc": "<p>Add tooltips to the visualization's markers. The options for the tips are the\nsame configuration used with Ext.tip.ToolTip.</p>",
                "default": null
            },
            {
                "name": "title",
                "type": "string",
                "doc": "<p>The human-readable name of the series.</p>",
                "default": "null"
            },
            {
                "name": "type",
                "type": "string",
                "doc": "<p>The type of series. Set in subclasses.</p>",
                "default": "null"
            }
        ],
        "events": [
            {
                "name": "titlechange",
                "params": "title(String) index(Number) eOpts(Object)",
                "doc": "<p>Fires when the series title is changed via setTitle.</p>"
            }
        ]
    },
    "Ext.chart.theme.Theme": {
        "type": "Ext.chart.theme.Theme",
        "doc": "<p>Provides chart theming.",
        "configs": [],
        "events": []
    },
    "Ext.chart.Tip": {
        "type": "Ext.chart.Tip",
        "doc": "<p>Provides tips for Ext.chart.series.Series.",
        "configs": [],
        "events": []
    },
    "Ext.Class": {
        "type": "Ext.Class",
        "doc": "<p>Handles class creation throughout the framework. This is a low level factory that is used by Ext.ClassManager and generally\nshould not be used directly. If you choose to use Ext.Class you will lose out on the namespace, aliasing and depency loading\nfeatures made available by Ext.ClassManager. The only time you would use Ext.Class directly is to create an anonymous class.",
        "configs": [
            {
                "name": "alias",
                "type": "string[]",
                "doc": "<p>List of short aliases for class names.</p>",
                "default": null
            },
            {
                "name": "alternateClassName",
                "type": "string/string[]",
                "doc": "<p>Defines alternate names for this class.</p>",
                "default": null
            },
            {
                "name": "config",
                "type": "object",
                "doc": "<p>List of configuration options with their default values, for which automatically\naccessor methods are generated.</p>",
                "default": null
            },
            {
                "name": "extend",
                "type": "string",
                "doc": "<p>The parent class that this class extends.</p>",
                "default": null
            },
            {
                "name": "inheritableStatics",
                "type": "object",
                "doc": "<p>List of inheritable static methods for this class.\nOtherwise just like statics but subclasses inherit these methods.</p>",
                "default": null
            },
            {
                "name": "mixins",
                "type": "object",
                "doc": "<p>List of classes to mix into this class.</p>",
                "default": null
            },
            {
                "name": "override",
                "type": "string",
                "doc": "<p>Defines an override applied to a class. Note that <strong>overrides can only be created using\nExt.define.</strong> Ext.ClassManager.create only creates classes.</p>",
                "default": null
            },
            {
                "name": "requires",
                "type": "string[]",
                "doc": "<p>List of classes that have to be loaded before instantiating this class.\n</p>",
                "default": null
            },
            {
                "name": "singleton",
                "type": "boolean",
                "doc": "<p>When set to true, the class will be instantiated as singleton.</p>",
                "default": null
            },
            {
                "name": "statics",
                "type": "object",
                "doc": "<p>List of static methods for this class.</p>",
                "default": null
            },
            {
                "name": "uses",
                "type": "string[]",
                "doc": "<p>List of classes to load together with this class.  These aren't neccessarily loaded before\nthis class is instantiated.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.ClassManager": {
        "type": "Ext.ClassManager",
        "doc": "<p>Ext.ClassManager manages all classes and handles mapping from string class name to\nactual class objects throughout the whole framework. It is not generally accessed directly, rather through\nthese convenient shorthands:",
        "configs": [],
        "events": []
    },
    "Ext.Component": {
        "type": "Ext.Component",
        "doc": "<p>Base class for all Ext components. All subclasses of Component may participate in the automated Ext component\nlifecycle of creation, rendering and destruction which is provided by the Container\nclass.",
        "configs": [
            {
                "name": "autoScroll",
                "type": "boolean",
                "doc": "<p><code>true</code> to use overflow:'auto' on the components layout element and show scroll bars automatically when necessary,\n<code>false</code> to clip any overflowing content.</p>",
                "default": "false"
            },
            {
                "name": "draggable",
                "type": "boolean/object",
                "doc": "<p>Specify as true to make a floating Component draggable using the Component's encapsulating element as\nthe drag handle.</p>",
                "default": "false"
            },
            {
                "name": "floating",
                "type": "boolean",
                "doc": "<p>Specify as true to float the Component outside of the document flow using CSS absolute positioning.</p>",
                "default": "false"
            },
            {
                "name": "maintainFlex",
                "type": "boolean",
                "doc": "<p><strong>Only valid when a sibling element of a Splitter within a\nVBox or HBox layout.</strong></p>",
                "default": "false"
            },
            {
                "name": "resizable",
                "type": "boolean/object",
                "doc": "<p>Specify as <code>true</code> to apply a Resizer to this Component after rendering.</p>",
                "default": null
            },
            {
                "name": "resizeHandles",
                "type": "string",
                "doc": "<p>A valid Ext.resizer.Resizer handles config string. Only applies when resizable = true.</p>",
                "default": "all"
            },
            {
                "name": "toFrontOnShow",
                "type": "boolean",
                "doc": "<p>True to automatically call toFront when the show method is called on an already visible,\nfloating component.</p>",
                "default": "true"
            }
        ],
        "events": []
    },
    "Ext.ComponentLoader": {
        "type": "Ext.ComponentLoader",
        "doc": "<p>This class is used to load content via Ajax into a Ext.Component. In general\nthis class will not be instanced directly, rather a loader configuration will be passed to the\nconstructor of the Ext.Component.",
        "configs": [
            {
                "name": "loadMask",
                "type": "boolean/object",
                "doc": "<p>True or a Ext.LoadMask configuration to enable masking during loading.</p>",
                "default": "false"
            },
            {
                "name": "renderer",
                "type": "string/function",
                "doc": "<p>The type of content that is to be loaded into, which can be one of 3 types: html, data and component</p>",
                "default": "html"
            },
            {
                "name": "scripts",
                "type": "boolean",
                "doc": "<p>True to parse any inline script tags in the response. This only used when using the html\nrenderer.</p>",
                "default": null
            },
            {
                "name": "target",
                "type": "ext.component/string",
                "doc": "<p>The target Ext.Component for the loader.\nIf a string is passed it will be looked up via the id.</p>",
                "default": "null"
            }
        ],
        "events": []
    },
    "Ext.ComponentManager": {
        "type": "Ext.ComponentManager",
        "doc": "<p>Provides a registry of all Components (instances of Ext.Component or any subclass\nthereof) on a page so that they can be easily accessed by component\nid (see get, or the convenience method Ext.getCmp).",
        "configs": [],
        "events": []
    },
    "Ext.ComponentQuery": {
        "type": "Ext.ComponentQuery",
        "doc": "<p>Provides searching of Components within Ext.ComponentManager (globally) or a specific\nExt.container.Container on the document with a similar syntax to a CSS selector.",
        "configs": [],
        "events": []
    },
    "Ext.CompositeElement": {
        "type": "Ext.CompositeElement",
        "doc": "<p>This class encapsulates a <i>collection</i> of DOM elements, providing methods to filter\nmembers, or to perform collective actions upon the whole set.",
        "configs": [],
        "events": []
    },
    "Ext.CompositeElementLite": {
        "type": "Ext.CompositeElementLite",
        "doc": "<p>This class encapsulates a <i>collection</i> of DOM elements, providing methods to filter\nmembers, or to perform collective actions upon the whole set.",
        "configs": [],
        "events": []
    },
    "Ext.container.AbstractContainer": {
        "type": "Ext.container.AbstractContainer",
        "doc": "<p>An abstract base class which provides shared methods for Containers across the Sencha product line.",
        "configs": [
            {
                "name": "activeItem",
                "type": "string/number",
                "doc": "<p>A string component id or the numeric index of the component that should be initially activated within the\ncontainer's layout on render.  For example, activeItem: 'item-1' or activeItem: 0 (index 0 = the first\nitem in the container's collection).  activeItem only applies to layout styles that can display\nitems one at a time (like Ext.layout.container.Card and Ext.layout.container.Fit).</p>",
                "default": null
            },
            {
                "name": "autoDestroy",
                "type": "boolean",
                "doc": "<p>If true the container will automatically destroy any contained component that is removed from it, else\ndestruction must be handled manually.\nDefaults to true.</p>",
                "default": "true"
            },
            {
                "name": "bubbleEvents",
                "type": "string[]",
                "doc": "<p>An array of events that, when fired, should be bubbled to any parent container.\nSee Ext.util.Observable.enableBubble.\nDefaults to <code>['add', 'remove']</code>.\n\n",
                "default": "[add, remove]"
            },
            {
                "name": "defaultType",
                "type": "string",
                "doc": "<p>The default xtype of child Components to create in this Container when\na child item is specified as a raw configuration object, rather than as an instantiated Component.</p>",
                "default": "panel"
            },
            {
                "name": "defaults",
                "type": "object/function",
                "doc": "<p>This option is a means of applying default settings to all added items whether added through the items\nconfig or via the add or insert methods.</p>",
                "default": null
            },
            {
                "name": "items",
                "type": "object/object[]",
                "doc": "<p>A single item, or an array of child Components to be added to this container</p>",
                "default": null
            },
            {
                "name": "layout",
                "type": "string/object",
                "doc": "<p><b>Important</b>: In order for child items to be correctly sized and\npositioned, typically a layout manager <b>must</b> be specified through\nthe <code>layout</code> configuration option.</p>",
                "default": null
            },
            {
                "name": "suspendLayout",
                "type": "boolean",
                "doc": "<p>If true, suspend calls to doLayout.  Useful when batching multiple adds to a container and not passing them\nas multiple arguments or an array.</p>",
                "default": "false"
            }
        ],
        "events": [
            {
                "name": "add",
                "params": "this(Ext.container.Container) component(Ext.Component) index(Number) eOpts(Object)",
                "doc": "<p>@bubbles\nFires after any Ext.Component is added or inserted into the container.</p>"
            },
            {
                "name": "afterlayout",
                "params": "this(Ext.container.Container) layout(Ext.layout.container.Container) eOpts(Object)",
                "doc": "<p>Fires when the components in this container are arranged by the associated layout manager.</p>"
            },
            {
                "name": "beforeadd",
                "params": "this(Ext.container.Container) component(Ext.Component) index(Number) eOpts(Object)",
                "doc": "<p>Fires before any Ext.Component is added or inserted into the container.\nA handler can return false to cancel the add.</p>"
            },
            {
                "name": "beforeremove",
                "params": "this(Ext.container.Container) component(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires before any Ext.Component is removed from the container.  A handler can return\nfalse to cancel the remove.</p>"
            },
            {
                "name": "remove",
                "params": "this(Ext.container.Container) component(Ext.Component) eOpts(Object)",
                "doc": "<p>@bubbles\nFires after any Ext.Component is removed from the container.</p>"
            }
        ]
    },
    "Ext.container.ButtonGroup": {
        "type": "Ext.container.ButtonGroup",
        "doc": "<p>Provides a container for arranging a group of related Buttons in a tabular manner.",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>Defaults to <tt>'x-btn-group'</tt>.  See Ext.panel.Panel.baseCls.</p>",
                "default": "x-btn-group"
            },
            {
                "name": "columns",
                "type": "number",
                "doc": "<p>The <code>columns</code> configuration property passed to the\nconfigured layout manager. See Ext.layout.container.Table.columns.</p>",
                "default": null
            },
            {
                "name": "frame",
                "type": "boolean",
                "doc": "<p>Defaults to <tt>true</tt>.  See Ext.panel.Panel.frame.</p>",
                "default": "true"
            },
            {
                "name": "layout",
                "type": "object",
                "doc": "<p>Defaults to <tt>'table'</tt>.  See Ext.container.Container.layout.</p>",
                "default": "{type: table}"
            }
        ],
        "events": []
    },
    "Ext.container.Container": {
        "type": "Ext.container.Container",
        "doc": "<p>Base class for any Ext.Component that may contain other Components. Containers handle the basic behavior of\ncontaining items, namely adding, inserting and removing items.",
        "configs": [],
        "events": []
    },
    "Ext.container.Viewport": {
        "type": "Ext.container.Viewport",
        "doc": "<p>A specialized container representing the viewable application area (the browser viewport).",
        "configs": [
            {
                "name": "allowDomMove",
                "type": "boolean",
                "doc": "<p>Not applicable.</p>",
                "default": null
            },
            {
                "name": "applyTo",
                "type": "string/htmlelement/ext.element",
                "doc": "<p>Not applicable.</p>",
                "default": null
            },
            {
                "name": "autoHeight",
                "type": "boolean",
                "doc": "<p>Not applicable.</p>",
                "default": null
            },
            {
                "name": "autoWidth",
                "type": "boolean",
                "doc": "<p>Not applicable.</p>",
                "default": null
            },
            {
                "name": "deferHeight",
                "type": "boolean",
                "doc": "<p>Not applicable.</p>",
                "default": null
            },
            {
                "name": "height",
                "type": "number",
                "doc": "<p>Not applicable. Sets itself to viewport width.</p>",
                "default": null
            },
            {
                "name": "hideParent",
                "type": "boolean",
                "doc": "<p>Not applicable.</p>",
                "default": null
            },
            {
                "name": "monitorResize",
                "type": "boolean",
                "doc": "<p>Not applicable.</p>",
                "default": null
            },
            {
                "name": "renderTo",
                "type": "string/htmlelement/ext.element",
                "doc": "<p>Not applicable. Always renders to document body.</p>",
                "default": null
            },
            {
                "name": "width",
                "type": "number",
                "doc": "<p>Not applicable. Sets itself to viewport height.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.AbstractStore": {
        "type": "Ext.data.AbstractStore",
        "doc": "<p>AbstractStore is a superclass of Ext.data.Store and Ext.data.TreeStore. It's never used directly,\nbut offers a set of methods used by both of those subclasses.",
        "configs": [
            {
                "name": "autoLoad",
                "type": "boolean/object",
                "doc": "<p>If data is not specified, and if autoLoad is true or an Object, this store's load method is automatically called\nafter creation. If the value of autoLoad is an Object, this Object will be passed to the store's load method.\nDefaults to false.</p>",
                "default": "false"
            },
            {
                "name": "autoSync",
                "type": "boolean",
                "doc": "<p>True to automatically sync the Store with its Proxy after every edit to one of its Records. Defaults to false.</p>",
                "default": "false"
            },
            {
                "name": "fields",
                "type": "object[]",
                "doc": "<p>This may be used in place of specifying a model configuration. The fields should be a\nset of Ext.data.Field configuration objects. The store will automatically create a Ext.data.Model\nwith these fields. In general this configuration option should be avoided, it exists for the purposes of\nbackwards compatibility. For anything more complicated, such as specifying a particular id property or\nassocations, a Ext.data.Model should be defined and specified for the model\nconfig.</p>",
                "default": null
            },
            {
                "name": "model",
                "type": "string",
                "doc": "<p>Name of the Model associated with this store.\nThe string is used as an argument for Ext.ModelManager.getModel.</p>",
                "default": null
            },
            {
                "name": "proxy",
                "type": "string/ext.data.proxy.proxy/object",
                "doc": "<p>The Proxy to use for this Store. This can be either a string, a config object or a Proxy instance -\nsee setProxy for details.</p>",
                "default": null
            },
            {
                "name": "storeId",
                "type": "string",
                "doc": "<p>Unique identifier for this store. If present, this Store will be registered with the Ext.data.StoreManager,\nmaking it easy to reuse elsewhere. Defaults to undefined.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "add",
                "params": "store(Ext.data.Store) records(Ext.data.Model[]) index(Number) eOpts(Object)",
                "doc": "<p>Fired when a Model instance has been added to this Store</p>"
            },
            {
                "name": "beforeload",
                "params": "store(Ext.data.Store) operation(Ext.data.Operation) eOpts(Object)",
                "doc": "<p>Fires before a request is made for a new data object. If the beforeload handler returns false the load\naction will be canceled.</p>"
            },
            {
                "name": "beforesync",
                "params": "options(Object) eOpts(Object)",
                "doc": "<p>Fired before a call to sync is executed. Return false from any listener to cancel the synv</p>"
            },
            {
                "name": "clear",
                "params": "this(Ext.data.Store) eOpts(Object)",
                "doc": "<p>Fired after the removeAll method is called.</p>"
            },
            {
                "name": "datachanged",
                "params": "this(Ext.data.Store) eOpts(Object)",
                "doc": "<p>Fires whenever the records in the Store have changed in some way - this could include adding or removing\nrecords, or updating the data in existing records</p>"
            },
            {
                "name": "load",
                "params": "this(Ext.data.Store) records(Ext.data.Model[]) successful(Boolean) eOpts(Object)",
                "doc": "<p>Fires whenever the store reads data from a remote data source.</p>"
            },
            {
                "name": "remove",
                "params": "store(Ext.data.Store) record(Ext.data.Model) index(Number) eOpts(Object)",
                "doc": "<p>Fired when a Model instance has been removed from this Store</p>"
            },
            {
                "name": "update",
                "params": "this(Ext.data.Store) record(Ext.data.Model) operation(String) eOpts(Object)",
                "doc": "<p>Fires when a Model instance has been updated</p>"
            },
            {
                "name": "write",
                "params": "store(Ext.data.Store) operation(Ext.data.Operation) eOpts(Object)",
                "doc": "<p>Fires whenever a successful write has been made via the configured Proxy</p>"
            }
        ]
    },
    "Ext.data.ArrayStore": {
        "type": "Ext.data.ArrayStore",
        "doc": "<p>Small helper class to make creating Ext.data.Stores from Array data easier. An ArrayStore will be\nautomatically configured with a Ext.data.reader.Array.",
        "configs": [],
        "events": []
    },
    "Ext.data.Association": {
        "type": "Ext.data.Association",
        "doc": "<p>Associations enable you to express relationships between different Models. Let's say we're\nwriting an ecommerce system where Users can make Orders - there's a relationship between these Models that we can\nexpress like this:",
        "configs": [
            {
                "name": "associatedModel",
                "type": "string",
                "doc": "<p>The string name of the model that is being associated with.</p>",
                "default": null
            },
            {
                "name": "associationKey",
                "type": "string",
                "doc": "<p>The name of the property in the data to read the association from. Defaults to the name of the associated model.</p>",
                "default": null
            },
            {
                "name": "ownerModel",
                "type": "string",
                "doc": "<p>The string name of the model that owns the association.</p>",
                "default": null
            },
            {
                "name": "primaryKey",
                "type": "string",
                "doc": "<p>The name of the primary key on the associated model. In general this will be the\nExt.data.Model.idProperty of the Model.</p>",
                "default": "id"
            },
            {
                "name": "reader",
                "type": "ext.data.reader.reader",
                "doc": "<p>A special reader to read associated data</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.Batch": {
        "type": "Ext.data.Batch",
        "doc": "<p>Provides a mechanism to run one or more operations in a given order. Fires the 'operationcomplete' event\nafter the completion of each Operation, and the 'complete' event when all Operations have been successfully executed. Fires an 'exception'\nevent if any of the Operations encounter an exception.",
        "configs": [],
        "events": [
            {
                "name": "complete",
                "params": "batch(Ext.data.Batch) operation(Object) eOpts(Object)",
                "doc": "<p>Fired when all operations of this batch have been completed</p>"
            },
            {
                "name": "exception",
                "params": "batch(Ext.data.Batch) operation(Object) eOpts(Object)",
                "doc": "<p>Fired when a operation encountered an exception</p>"
            },
            {
                "name": "operationcomplete",
                "params": "batch(Ext.data.Batch) operation(Object) eOpts(Object)",
                "doc": "<p>Fired when each operation of the batch completes</p>"
            }
        ]
    },
    "Ext.data.BelongsToAssociation": {
        "type": "Ext.data.BelongsToAssociation",
        "doc": "<p>Represents a many to one association with another model. The owner model is expected to have\na foreign key which references the primary key of the associated model:",
        "configs": [
            {
                "name": "foreignKey",
                "type": "string",
                "doc": "<p>The name of the foreign key on the owner model that links it to the associated\nmodel. Defaults to the lowercased name of the associated model plus _id, e.g. an association with a\nmodel called Product would set up a product_id foreign key.</p>",
                "default": null
            },
            {
                "name": "getterName",
                "type": "string",
                "doc": "<p>The name of the getter function that will be added to the local model's prototype.\nDefaults to 'get' + the name of the foreign model, e.g. getCategory</p>",
                "default": null
            },
            {
                "name": "setterName",
                "type": "string",
                "doc": "<p>The name of the setter function that will be added to the local model's prototype.\nDefaults to 'set' + the name of the foreign model, e.g. setCategory</p>",
                "default": null
            },
            {
                "name": "type",
                "type": "string",
                "doc": "<p>The type configuration can be used when creating associations using a configuration object.\nUse 'belongsTo' to create a HasManyAssocation</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.Connection": {
        "type": "Ext.data.Connection",
        "doc": "<p>The Connection class encapsulates a connection to the page's originating domain, allowing requests to be made either\nto a configured URL, or to a URL specified at request time.",
        "configs": [
            {
                "name": "cors",
                "type": "boolean",
                "doc": "<p>True to enable CORS support on the XHR object. Currently the only effect of this option\nis to use the XDomainRequest object instead of XMLHttpRequest if the browser is IE8 or above.</p>",
                "default": "false"
            },
            {
                "name": "disableCaching",
                "type": "boolean",
                "doc": "<p>True to add a unique cache-buster param to GET requests.</p>",
                "default": "true"
            },
            {
                "name": "disableCachingParam",
                "type": "string",
                "doc": "<p>Change the parameter which is sent went disabling caching through a cache buster.</p>",
                "default": "_dc"
            },
            {
                "name": "extraParams",
                "type": "object",
                "doc": "<p>Any parameters to be appended to the request.</p>",
                "default": null
            },
            {
                "name": "timeout",
                "type": "number",
                "doc": "<p>The timeout in milliseconds to be used for requests.</p>",
                "default": "30000"
            },
            {
                "name": "withCredentials",
                "type": "boolean",
                "doc": "<p>True to set <code>withCredentials = true</code> on the XHR object</p>",
                "default": "false"
            }
        ],
        "events": [
            {
                "name": "beforerequest",
                "params": "conn(Ext.data.Connection) options(Object) eOpts(Object)",
                "doc": "<p>Fires before a network request is made to retrieve a data object.</p>"
            },
            {
                "name": "requestcomplete",
                "params": "conn(Ext.data.Connection) response(Object) options(Object) eOpts(Object)",
                "doc": "<p>Fires if the request was successfully completed.</p>"
            },
            {
                "name": "requestexception",
                "params": "conn(Ext.data.Connection) response(Object) options(Object) eOpts(Object)",
                "doc": "<p>Fires if an error HTTP status was returned from the server.\nSee HTTP Status Code Definitions\nfor details of HTTP status codes.</p>"
            }
        ]
    },
    "Ext.data.DirectStore": {
        "type": "Ext.data.DirectStore",
        "doc": "<p>Small helper class to create an Ext.data.Store configured with an Ext.data.proxy.Direct\nand Ext.data.reader.Json to make interacting with an Ext.direct.Manager server-side\nProvider easier.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.Errors": {
        "type": "Ext.data.Errors",
        "doc": "<p>Wraps a collection of validation error responses and provides convenient functions for\naccessing and errors for specific fields.",
        "configs": [],
        "events": []
    },
    "Ext.data.Field": {
        "type": "Ext.data.Field",
        "doc": "<p>Fields are used to define what a Model is. They aren't instantiated directly - instead, when we create a class that\nextends Ext.data.Model, it will automatically create a Field instance for each field configured in a Model.</p>",
        "configs": [
            {
                "name": "allowBlank",
                "type": "boolean",
                "doc": "<p>Used for validating a model. Defaults to true. An empty value here will cause\nExt.data.Model.isValid to evaluate to false.</p>",
                "default": "true"
            },
            {
                "name": "dateFormat",
                "type": "string",
                "doc": "<p>Used when converting received data into a Date when the type is specified as <code>date</code>.</p>",
                "default": "null"
            },
            {
                "name": "defaultValue",
                "type": "object",
                "doc": "<p>The default value used <strong>when a Model is being created by a Reader</strong>\nwhen the item referenced by the <code>mapping</code> does not exist in the data object\n(i.e. undefined). Defaults to .</p>",
                "default": ""
            },
            {
                "name": "mapping",
                "type": "string/number",
                "doc": "<p>(Optional) A path expression for use by the Ext.data.reader.Reader implementation that is creating the\nModel to extract the Field value from the data object. If the path expression is the same\nas the field name, the mapping may be omitted.</p>",
                "default": "null"
            },
            {
                "name": "name",
                "type": "string",
                "doc": "<p>The name by which the field is referenced within the Model. This is referenced by, for example, the <code>dataIndex</code>\nproperty in column definition objects passed to Ext.grid.property.HeaderContainer.</p>",
                "default": null
            },
            {
                "name": "persist",
                "type": "boolean",
                "doc": "<p>False to exclude this field from the Ext.data.Model.modified fields in a model. This will also exclude\nthe field from being written using a Ext.data.writer.Writer. This option is useful when model fields are\nused to keep state on the client but do not need to be persisted to the server. Defaults to true.</p>",
                "default": "true"
            },
            {
                "name": "sortDir",
                "type": "string",
                "doc": "<p>Initial direction to sort (<code>ASC</code> or <code>DESC</code>). Defaults to <code>ASC</code>.</p>",
                "default": "ASC"
            },
            {
                "name": "type",
                "type": "string/object",
                "doc": "<p>The data type for automatic conversion from received data to the <em>stored</em> value if\n<code>convert</code> has not been specified. This may be specified as a string value.\nPossible values are</p>",
                "default": null
            },
            {
                "name": "useNull",
                "type": "boolean",
                "doc": "<p>Use when converting received data into a Number type (either int or float). If the value cannot be\nparsed, null will be used if useNull is true, otherwise the value will be 0. Defaults to false.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.data.HasManyAssociation": {
        "type": "Ext.data.HasManyAssociation",
        "doc": "<p>Represents a one-to-many relationship between two models. Usually created indirectly via a model definition:",
        "configs": [
            {
                "name": "autoLoad",
                "type": "boolean",
                "doc": "<p>True to automatically load the related store from a remote source when instantiated.\nDefaults to <tt>false</tt>.</p>",
                "default": null
            },
            {
                "name": "filterProperty",
                "type": "string",
                "doc": "<p>Optionally overrides the default filter that is set up on the associated Store. If\nthis is not set, a filter is automatically created which filters the association based on the configured\nforeignKey. See intro docs for more details. Defaults to undefined</p>",
                "default": null
            },
            {
                "name": "foreignKey",
                "type": "string",
                "doc": "<p>The name of the foreign key on the associated model that links it to the owner\nmodel. Defaults to the lowercased name of the owner model plus _id, e.g. an association with a where a\nmodel called Group hasMany Users would create 'group_id' as the foreign key. When the remote store is loaded,\nthe store is automatically filtered so that only records with a matching foreign key are included in the\nresulting child store. This can be overridden by specifying the filterProperty.</p>",
                "default": null
            },
            {
                "name": "name",
                "type": "string",
                "doc": "<p>The name of the function to create on the owner model to retrieve the child store.\nIf not specified, the pluralized name of the child model is used.</p>",
                "default": null
            },
            {
                "name": "storeConfig",
                "type": "object",
                "doc": "<p>Optional configuration object that will be passed to the generated Store. Defaults to\nundefined.</p>",
                "default": null
            },
            {
                "name": "type",
                "type": "string",
                "doc": "<p>The type configuration can be used when creating associations using a configuration object.\nUse 'hasMany' to create a HasManyAssocation</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.IdGenerator": {
        "type": "Ext.data.IdGenerator",
        "doc": "<p>This class is a base for all id generators. It also provides lookup of id generators by\ntheir id.",
        "configs": [
            {
                "name": "id",
                "type": "string",
                "doc": "<p>The id by which to register a new instance. This instance can be found using the\nget static method.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.JsonP": {
        "type": "Ext.data.JsonP",
        "doc": "<p>This class is used to create JSONP requests. JSONP is a mechanism that allows for making\nrequests for data cross domain. More information is available here.",
        "configs": [],
        "events": []
    },
    "Ext.data.JsonPStore": {
        "type": "Ext.data.JsonPStore",
        "doc": "<p>Small helper class to make creating Ext.data.Stores from different domain JSON data easier.\nA JsonPStore will be automatically configured with a Ext.data.reader.Json and a JsonPProxy.",
        "configs": [],
        "events": []
    },
    "Ext.data.Model": {
        "type": "Ext.data.Model",
        "doc": "<p>A Model represents some object that your application manages. For example, one might define a Model for Users,\nProducts, Cars, or any other real-world object that we want to model in the system.</p>",
        "configs": [
            {
                "name": "associations",
                "type": "object[]",
                "doc": "<p>An array of associations for this model.</p>",
                "default": null
            },
            {
                "name": "belongsTo",
                "type": "string/object/string[]/object[]",
                "doc": "<p>One or more BelongsTo associations for this model.</p>",
                "default": null
            },
            {
                "name": "defaultProxyType",
                "type": "string",
                "doc": "<p>The string type of the default Model Proxy. Defaults to 'ajax'.</p>",
                "default": "ajax"
            },
            {
                "name": "fields",
                "type": "object[]/string[]",
                "doc": "<p>The fields for this model.</p>",
                "default": null
            },
            {
                "name": "hasMany",
                "type": "string/object/string[]/object[]",
                "doc": "<p>One or more HasMany associations for this model.</p>",
                "default": null
            },
            {
                "name": "idProperty",
                "type": "string",
                "doc": "<p>The name of the field treated as this Model's unique id. Defaults to 'id'.</p>",
                "default": "id"
            },
            {
                "name": "idgen",
                "type": "string/object",
                "doc": "<p>The id generator to use for this model. The default id generator does not generate\nvalues for the idProperty.</p>",
                "default": null
            },
            {
                "name": "persistenceProperty",
                "type": "string",
                "doc": "<p>The property on this Persistable object that its data is saved to. Defaults to 'data'\n(e.g. all persistable data resides in this.data.)</p>",
                "default": "data"
            },
            {
                "name": "proxy",
                "type": "string/object/ext.data.proxy.proxy",
                "doc": "<p>The proxy to use for this model.</p>",
                "default": null
            },
            {
                "name": "validations",
                "type": "object[]",
                "doc": "<p>An array of validations for this model.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.NodeInterface": {
        "type": "Ext.data.NodeInterface",
        "doc": "<p>This class is used as a set of methods that are applied to the prototype of a\nModel to decorate it with a Node API. This means that models used in conjunction with a tree\nwill have all of the tree related methods available on the model. In general this class will\nnot be used directly by the developer. This class also creates extra fields on the model if\nthey do not exist, to help maintain the tree state and UI. These fields are documented as\nconfig options.",
        "configs": [
            {
                "name": "allowDrag",
                "type": "boolean",
                "doc": "<p>Set to false to deny dragging of this node.</p>",
                "default": "true"
            },
            {
                "name": "allowDrop",
                "type": "boolean",
                "doc": "<p>Set to false to deny dropping on this node.</p>",
                "default": "true"
            },
            {
                "name": "checked",
                "type": "boolean",
                "doc": "<p>Set to true or false to show a checkbox alongside this node.</p>",
                "default": "null"
            },
            {
                "name": "children",
                "type": "ext.data.nodeinterface[]",
                "doc": "<p>Array of child nodes.</p>",
                "default": null
            },
            {
                "name": "cls",
                "type": "string",
                "doc": "<p>CSS class to apply for this node.</p>",
                "default": null
            },
            {
                "name": "depth",
                "type": "number",
                "doc": "<p>The number of parents this node has. A root node has depth 0, a child of it depth 1, and so on...</p>",
                "default": null
            },
            {
                "name": "expandable",
                "type": "boolean",
                "doc": "<p>Set to true to allow for expanding/collapsing of this node.</p>",
                "default": "false"
            },
            {
                "name": "expanded",
                "type": "boolean",
                "doc": "<p>True if the node is expanded.</p>",
                "default": "false"
            },
            {
                "name": "href",
                "type": "string",
                "doc": "<p>An URL for a link that's created when this config is specified.</p>",
                "default": null
            },
            {
                "name": "hrefTarget",
                "type": "string",
                "doc": "<p>Target for link. Only applicable when href also specified.</p>",
                "default": null
            },
            {
                "name": "icon",
                "type": "string",
                "doc": "<p>URL for this node's icon.</p>",
                "default": null
            },
            {
                "name": "iconCls",
                "type": "string",
                "doc": "<p>CSS class to apply for this node's icon.</p>",
                "default": null
            },
            {
                "name": "index",
                "type": "number",
                "doc": "<p>The position of the node inside its parent. When parent has 4 children and the node is third amongst them,\nindex will be 2.</p>",
                "default": null
            },
            {
                "name": "isFirst",
                "type": "boolean",
                "doc": "<p>True if this is the first node.</p>",
                "default": null
            },
            {
                "name": "isLast",
                "type": "boolean",
                "doc": "<p>True if this is the last node.</p>",
                "default": null
            },
            {
                "name": "leaf",
                "type": "boolean",
                "doc": "<p>Set to true to indicate that this child can have no children. The expand icon/arrow will then not be\nrendered for this node.</p>",
                "default": "false"
            },
            {
                "name": "loaded",
                "type": "boolean",
                "doc": "<p>True if the node has finished loading.</p>",
                "default": "false"
            },
            {
                "name": "loading",
                "type": "boolean",
                "doc": "<p>True if the node is currently loading.</p>",
                "default": "false"
            },
            {
                "name": "parentId",
                "type": "string",
                "doc": "<p>ID of parent node.</p>",
                "default": null
            },
            {
                "name": "qtip",
                "type": "string",
                "doc": "<p>Tooltip text to show on this node.</p>",
                "default": null
            },
            {
                "name": "qtitle",
                "type": "string",
                "doc": "<p>Tooltip title.</p>",
                "default": null
            },
            {
                "name": "root",
                "type": "boolean",
                "doc": "<p>True if this is the root node.</p>",
                "default": null
            },
            {
                "name": "text",
                "type": "string",
                "doc": "<p>The text for to show on node label.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "append",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) index(Number) eOpts(Object)",
                "doc": "<p>Fires when a new child node is appended</p>"
            },
            {
                "name": "beforeappend",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires before a new child is appended, return false to cancel the append.</p>"
            },
            {
                "name": "beforecollapse",
                "params": "this(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires before this node is collapsed.</p>"
            },
            {
                "name": "beforeexpand",
                "params": "this(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires before this node is expanded.</p>"
            },
            {
                "name": "beforeinsert",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) refNode(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires before a new child is inserted, return false to cancel the insert.</p>"
            },
            {
                "name": "beforemove",
                "params": "this(Ext.data.NodeInterface) oldParent(Ext.data.NodeInterface) newParent(Ext.data.NodeInterface) index(Number) eOpts(Object)",
                "doc": "<p>Fires before this node is moved to a new location in the tree. Return false to cancel the move.</p>"
            },
            {
                "name": "beforeremove",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires before a child is removed, return false to cancel the remove.</p>"
            },
            {
                "name": "collapse",
                "params": "this(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires when this node is collapsed.</p>"
            },
            {
                "name": "expand",
                "params": "this(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires when this node is expanded.</p>"
            },
            {
                "name": "insert",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) refNode(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires when a new child node is inserted.</p>"
            },
            {
                "name": "move",
                "params": "this(Ext.data.NodeInterface) oldParent(Ext.data.NodeInterface) newParent(Ext.data.NodeInterface) index(Number) eOpts(Object)",
                "doc": "<p>Fires when this node is moved to a new location in the tree</p>"
            },
            {
                "name": "remove",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires when a child node is removed</p>"
            },
            {
                "name": "sort",
                "params": "this(Ext.data.NodeInterface) childNodes(Ext.data.NodeInterface[]) eOpts(Object)",
                "doc": "<p>Fires when this node's childNodes are sorted.</p>"
            }
        ]
    },
    "Ext.data.Operation": {
        "type": "Ext.data.Operation",
        "doc": "<p>Represents a single read or write operation performed by a Proxy. Operation objects are\nused to enable communication between Stores and Proxies. Application developers should rarely need to interact with\nOperation objects directly.",
        "configs": [
            {
                "name": "action",
                "type": "string",
                "doc": "<p>The action being performed by this Operation. Should be one of 'create', 'read', 'update' or 'destroy'.</p>",
                "default": "undefined"
            },
            {
                "name": "batch",
                "type": "ext.data.batch",
                "doc": "<p>The batch that this Operation is a part of.</p>",
                "default": "undefined"
            },
            {
                "name": "filters",
                "type": "ext.util.filter[]",
                "doc": "<p>Optional array of filter objects. Only applies to 'read' actions.</p>",
                "default": "undefined"
            },
            {
                "name": "group",
                "type": "ext.util.grouper",
                "doc": "<p>Optional grouping configuration. Only applies to 'read' actions where grouping is desired.</p>",
                "default": "undefined"
            },
            {
                "name": "limit",
                "type": "number",
                "doc": "<p>The number of records to load. Used on 'read' actions when paging is being used.</p>",
                "default": "undefined"
            },
            {
                "name": "scope",
                "type": "object",
                "doc": "<p>Scope for the callback function.</p>",
                "default": "undefined"
            },
            {
                "name": "sorters",
                "type": "ext.util.sorter[]",
                "doc": "<p>Optional array of sorter objects. Only applies to 'read' actions.</p>",
                "default": "undefined"
            },
            {
                "name": "start",
                "type": "number",
                "doc": "<p>The start index (offset), used in paging when running a 'read' action.</p>",
                "default": "undefined"
            },
            {
                "name": "synchronous",
                "type": "boolean",
                "doc": "<p>True if this Operation is to be executed synchronously. This property is inspected by a\nBatch to see if a series of Operations can be executed in parallel or not.</p>",
                "default": "true"
            }
        ],
        "events": []
    },
    "Ext.data.proxy.Ajax": {
        "type": "Ext.data.proxy.Ajax",
        "doc": "<p>AjaxProxy is one of the most widely-used ways of getting data into your application. It uses AJAX requests to load\ndata from the server, usually to be placed into a Store.</p>",
        "configs": [
            {
                "name": "headers",
                "type": "object",
                "doc": "<p>Any headers to add to the Ajax request. Defaults to undefined.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.proxy.Client": {
        "type": "Ext.data.proxy.Client",
        "doc": "<p>Base class for any client-side storage. Used as a superclass for Memory and\nWeb Storage proxies. Do not use directly, use one of the subclasses instead.",
        "configs": [],
        "events": []
    },
    "Ext.data.proxy.Direct": {
        "type": "Ext.data.proxy.Direct",
        "doc": "<p>This class is used to send requests to the server using Ext.Direct. When a\nrequest is made, the transport mechanism is handed off to the appropriate\nProvider to complete the call.",
        "configs": [
            {
                "name": "api",
                "type": "object",
                "doc": "<p>The same as Ext.data.proxy.Server.api, however instead of providing urls, you should provide a direct\nfunction call.</p>",
                "default": null
            },
            {
                "name": "directFn",
                "type": "function/string",
                "doc": "<p>Function to call when executing a request. directFn is a simple alternative to defining the api configuration-parameter\nfor Store's which will not implement a full CRUD api. The directFn may also be a string reference to the fully qualified\nname of the function, for example: 'MyApp.company.GetProfile'. This can be useful when using dynamic loading. The string\nwill be looked up when the proxy is created.</p>"
            },
            {
                "name": "extraParams",
                "type": "object",
                "doc": "<p>Extra parameters that will be included on every read request. Individual requests with params\nof the same name will override these params when they are in conflict.</p>",
                "default": null
            },
            {
                "name": "paramOrder",
                "type": "string/string[]",
                "doc": "<p>Defaults to undefined. A list of params to be executed server side.  Specify the params in the order in\nwhich they must be executed on the server-side as either (1) an Array of String values, or (2) a String\nof params delimited by either whitespace, comma, or pipe.</p>",
                "default": "undefined"
            },
            {
                "name": "paramsAsHash",
                "type": "boolean",
                "doc": "<p>Send parameters as a collection of named arguments.\nProviding a paramOrder nullifies this configuration.</p>",
                "default": "true"
            }
        ],
        "events": []
    },
    "Ext.data.proxy.JsonP": {
        "type": "Ext.data.proxy.JsonP",
        "doc": "<p>The JsonP proxy is useful when you need to load data from a domain other than the one your application is running on.</p>",
        "configs": [
            {
                "name": "autoAppendParams",
                "type": "boolean",
                "doc": "<p>True to automatically append the request's params to the generated url. Defaults to true</p>",
                "default": "true"
            },
            {
                "name": "callbackKey",
                "type": "string",
                "doc": "<p>See Ext.data.JsonP.callbackKey.</p>",
                "default": "callback"
            },
            {
                "name": "recordParam",
                "type": "string",
                "doc": "<p>The param name to use when passing records to the server (e.g. 'records=someEncodedRecordString'). Defaults to\n'records'</p>",
                "default": "records"
            }
        ],
        "events": [
            {
                "name": "exception",
                "params": "this(Ext.data.proxy.Proxy) request(Ext.data.Request) operation(Ext.data.Operation) eOpts(Object)",
                "doc": "<p>Fires when the server returns an exception</p>"
            }
        ]
    },
    "Ext.data.proxy.LocalStorage": {
        "type": "Ext.data.proxy.LocalStorage",
        "doc": "<p>The LocalStorageProxy uses the new HTML5 localStorage API to save Model data locally on the\nclient browser. HTML5 localStorage is a key-value store (e.g. cannot save complex objects like JSON)",
        "configs": [],
        "events": []
    },
    "Ext.data.proxy.Memory": {
        "type": "Ext.data.proxy.Memory",
        "doc": "<p>In-memory proxy. This proxy simply uses a local variable for data storage/retrieval, so its contents are lost on\nevery page refresh.",
        "configs": [
            {
                "name": "data",
                "type": "ext.data.model[]",
                "doc": "<p>Optional array of Records to load into the Proxy</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.proxy.Proxy": {
        "type": "Ext.data.proxy.Proxy",
        "doc": "<p>Proxies are used by Stores to handle the loading and saving of Model\ndata. Usually developers will not need to create or interact with proxies directly.",
        "configs": [
            {
                "name": "batchActions",
                "type": "boolean",
                "doc": "<p>True to batch actions of a particular type when synchronizing the store. Defaults to true.</p>",
                "default": "true"
            },
            {
                "name": "batchOrder",
                "type": "string",
                "doc": "<p>Comma-separated ordering 'create', 'update' and 'destroy' actions when batching. Override this to set a different\norder for the batched CRUD actions to be executed in. Defaults to 'create,update,destroy'.</p>",
                "default": "create,update,destroy"
            },
            {
                "name": "defaultReaderType",
                "type": "string",
                "doc": "<p>The default registered reader type. Defaults to 'json'.</p>",
                "default": "json"
            },
            {
                "name": "defaultWriterType",
                "type": "string",
                "doc": "<p>The default registered writer type. Defaults to 'json'.</p>",
                "default": "json"
            },
            {
                "name": "model",
                "type": "string/ext.data.model",
                "doc": "<p>The name of the Model to tie to this Proxy. Can be either the string name of the Model, or a reference to the\nModel constructor. Required.</p>",
                "default": null
            },
            {
                "name": "reader",
                "type": "object/string/ext.data.reader.reader",
                "doc": "<p>The Ext.data.reader.Reader to use to decode the server's response or data read from client. This can either be a\nReader instance, a config object or just a valid Reader type name (e.g. 'json', 'xml').</p>",
                "default": null
            },
            {
                "name": "writer",
                "type": "object/string/ext.data.writer.writer",
                "doc": "<p>The Ext.data.writer.Writer to use to encode any request sent to the server or saved to client. This can either be\na Writer instance, a config object or just a valid Writer type name (e.g. 'json', 'xml').</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.proxy.Rest": {
        "type": "Ext.data.proxy.Rest",
        "doc": "<p>The Rest proxy is a specialization of the AjaxProxy which simply maps the four actions\n(create, read, update and destroy) to RESTful HTTP verbs.</p>",
        "configs": [
            {
                "name": "appendId",
                "type": "boolean",
                "doc": "<p>True to automatically append the ID of a Model instance when performing a request based on that single instance.\nSee Rest proxy intro docs for more details. Defaults to true.</p>",
                "default": "true"
            },
            {
                "name": "batchActions",
                "type": "boolean",
                "doc": "<p>True to batch actions of a particular type when synchronizing the store. Defaults to false.</p>",
                "default": "false"
            },
            {
                "name": "format",
                "type": "string",
                "doc": "<p>Optional data format to send to the server when making any request (e.g. 'json'). See the Rest proxy intro docs\nfor full details. Defaults to undefined.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.proxy.Server": {
        "type": "Ext.data.proxy.Server",
        "doc": "<p>ServerProxy is a superclass of JsonPProxy and AjaxProxy, and\nwould not usually be used directly.",
        "configs": [
            {
                "name": "api",
                "type": "object",
                "doc": "<p>Specific urls to call on CRUD action methods create, read, update and destroy.</p>",
                "default": null
            },
            {
                "name": "cacheString",
                "type": "string",
                "doc": "<p>The name of the cache param added to the url when using noCache. Defaults to _dc.</p>",
                "default": "_dc"
            },
            {
                "name": "directionParam",
                "type": "string",
                "doc": "<p>The name of the direction parameter to send in a request. <strong>This is only used when simpleSortMode is set to\ntrue.</strong> Defaults to 'dir'.</p>",
                "default": "dir"
            },
            {
                "name": "extraParams",
                "type": "object",
                "doc": "<p>Extra parameters that will be included on every request. Individual requests with params of the same name\nwill override these params when they are in conflict.</p>",
                "default": null
            },
            {
                "name": "filterParam",
                "type": "string",
                "doc": "<p>The name of the 'filter' parameter to send in a request. Defaults to 'filter'. Set this to undefined if you don't\nwant to send a filter parameter.</p>",
                "default": "filter"
            },
            {
                "name": "groupParam",
                "type": "string",
                "doc": "<p>The name of the 'group' parameter to send in a request. Defaults to 'group'. Set this to undefined if you don't\nwant to send a group parameter.</p>",
                "default": "group"
            },
            {
                "name": "limitParam",
                "type": "string",
                "doc": "<p>The name of the 'limit' parameter to send in a request. Defaults to 'limit'. Set this to undefined if you don't\nwant to send a limit parameter.</p>",
                "default": "limit"
            },
            {
                "name": "noCache",
                "type": "boolean",
                "doc": "<p>Disable caching by adding a unique parameter name to the request. Set to false to allow caching. Defaults to true.</p>",
                "default": "true"
            },
            {
                "name": "pageParam",
                "type": "string",
                "doc": "<p>The name of the 'page' parameter to send in a request. Defaults to 'page'. Set this to undefined if you don't\nwant to send a page parameter.</p>",
                "default": "page"
            },
            {
                "name": "simpleSortMode",
                "type": "boolean",
                "doc": "<p>Enabling simpleSortMode in conjunction with remoteSort will only send one sort property and a direction when a\nremote sort is requested. The directionParam and sortParam will be sent with the property name and either 'ASC'\nor 'DESC'.</p>",
                "default": "false"
            },
            {
                "name": "sortParam",
                "type": "string",
                "doc": "<p>The name of the 'sort' parameter to send in a request. Defaults to 'sort'. Set this to undefined if you don't\nwant to send a sort parameter.</p>",
                "default": "sort"
            },
            {
                "name": "startParam",
                "type": "string",
                "doc": "<p>The name of the 'start' parameter to send in a request. Defaults to 'start'. Set this to undefined if you don't\nwant to send a start parameter.</p>",
                "default": "start"
            },
            {
                "name": "timeout",
                "type": "number",
                "doc": "<p>The number of milliseconds to wait for a response. Defaults to 30000 milliseconds (30 seconds).</p>",
                "default": "30000"
            },
            {
                "name": "url",
                "type": "string",
                "doc": "<p>The URL from which to request the data object.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "exception",
                "params": "this(Ext.data.proxy.Proxy) response(Object) operation(Ext.data.Operation) eOpts(Object)",
                "doc": "<p>Fires when the server returns an exception</p>"
            }
        ]
    },
    "Ext.data.proxy.SessionStorage": {
        "type": "Ext.data.proxy.SessionStorage",
        "doc": "<p>Proxy which uses HTML5 session storage as its data storage/retrieval mechanism. A session storage proxy requires a\nunique ID which is used as a key in which all record data are stored in the session storage object.",
        "configs": [],
        "events": []
    },
    "Ext.data.proxy.WebStorage": {
        "type": "Ext.data.proxy.WebStorage",
        "doc": "<p>WebStorageProxy is simply a superclass for the LocalStorage and SessionStorage proxies. It uses the new HTML5 key/value client-side storage objects to\nsave model instances for offline use.",
        "configs": [
            {
                "name": "id",
                "type": "string",
                "doc": "<p>The unique ID used as the key in which all record data are stored in the local storage object.</p>",
                "default": "undefined"
            }
        ],
        "events": []
    },
    "Ext.data.reader.Array": {
        "type": "Ext.data.reader.Array",
        "doc": "<p>Data reader class to create an Array of Ext.data.Model objects from an Array.\nEach element of that Array represents a row of data fields.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.reader.Json": {
        "type": "Ext.data.reader.Json",
        "doc": "<p>The JSON Reader is used by a Proxy to read a server response that is sent back in JSON format.</p>",
        "configs": [
            {
                "name": "record",
                "type": "string",
                "doc": "<p>The optional location within the JSON response that the record data itself can be found at.\nSee the JsonReader intro docs for more details. This is not often needed.</p>",
                "default": null
            },
            {
                "name": "useSimpleAccessors",
                "type": "boolean",
                "doc": "<p>True to ensure that field names/mappings are treated as literals when\nreading values. Defalts to <tt>false</tt>.\nFor example, by default, using the mapping foo.bar.baz will try and read a property foo from the root, then a property bar\nfrom foo, then a property baz from bar. Setting the simple accessors to true will read the property with the name\nfoo.bar.baz direct from the root object.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.data.reader.Reader": {
        "type": "Ext.data.reader.Reader",
        "doc": "<p>Readers are used to interpret data to be loaded into a Model instance or a Store - often in response to an AJAX request. In general there is usually no need to create\na Reader instance directly, since a Reader is almost always used together with a Proxy,\nand is configured using the Proxy's reader configuration property:",
        "configs": [
            {
                "name": "idProperty",
                "type": "string",
                "doc": "<p>Name of the property within a row object that contains a record identifier value. Defaults to The id of the\nmodel. If an idProperty is explicitly specified it will override that of the one specified on the model</p>",
                "default": null
            },
            {
                "name": "implicitIncludes",
                "type": "boolean",
                "doc": "<p>True to automatically parse models nested within other models in a response object. See the\nExt.data.reader.Reader intro docs for full explanation. Defaults to true.</p>",
                "default": "true"
            },
            {
                "name": "messageProperty",
                "type": "string",
                "doc": "<p>The name of the property which contains a response message. This property is optional.</p>",
                "default": null
            },
            {
                "name": "root",
                "type": "string",
                "doc": "<p>The name of the property which contains the Array of row objects.  For JSON reader it's dot-separated list\nof property names.  For XML reader it's a CSS selector.  For array reader it's not applicable.</p>",
                "default": ""
            },
            {
                "name": "successProperty",
                "type": "string",
                "doc": "<p>Name of the property from which to retrieve the success attribute. Defaults to success. See\nExt.data.proxy.Server.exception for additional information.</p>",
                "default": "success"
            },
            {
                "name": "totalProperty",
                "type": "string",
                "doc": "<p>Name of the property from which to retrieve the total number of records in the dataset. This is only needed if\nthe whole dataset is not passed in one go, but is being paged from the remote server. Defaults to total.</p>",
                "default": "total"
            }
        ],
        "events": []
    },
    "Ext.data.reader.Xml": {
        "type": "Ext.data.reader.Xml",
        "doc": "<p>The XML Reader is used by a Proxy to read a server response that is sent back in XML format. This usually\nhappens as a result of loading a Store.</p>",
        "configs": [
            {
                "name": "record",
                "type": "string",
                "doc": "<p>The DomQuery path to the repeated element which contains record information.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.Request": {
        "type": "Ext.data.Request",
        "doc": "<p>Simple class that represents a Request that will be made by any Ext.data.proxy.Server subclass.\nAll this class does is standardize the representation of a Request as used by any ServerProxy subclass,\nit does not contain any actual logic or perform the request itself.",
        "configs": [
            {
                "name": "action",
                "type": "string",
                "doc": "<p>The name of the action this Request represents. Usually one of 'create', 'read', 'update' or 'destroy'.</p>",
                "default": "undefined"
            },
            {
                "name": "method",
                "type": "string",
                "doc": "<p>The HTTP method to use on this Request. Should be one of 'GET', 'POST', 'PUT' or 'DELETE'.</p>",
                "default": "GET"
            },
            {
                "name": "params",
                "type": "object",
                "doc": "<p>HTTP request params. The Proxy and its Writer have access to and can modify this object.</p>",
                "default": "undefined"
            },
            {
                "name": "url",
                "type": "string",
                "doc": "<p>The url to access on this Request</p>",
                "default": "undefined"
            }
        ],
        "events": []
    },
    "Ext.data.ResultSet": {
        "type": "Ext.data.ResultSet",
        "doc": "<p>Simple wrapper class that represents a set of records returned by a Proxy.",
        "configs": [
            {
                "name": "count",
                "type": "number",
                "doc": "<p>The number of records in this ResultSet. Note that total may differ from this number.</p>",
                "default": "0"
            },
            {
                "name": "loaded",
                "type": "boolean",
                "doc": "<p>True if the records have already been loaded. This is only meaningful when dealing with\nSQL-backed proxies.</p>",
                "default": "true"
            },
            {
                "name": "records",
                "type": "ext.data.model[]",
                "doc": "<p>The array of record instances.</p>",
                "default": null
            },
            {
                "name": "success",
                "type": "boolean",
                "doc": "<p>True if the ResultSet loaded successfully, false if any errors were encountered.</p>",
                "default": "false"
            },
            {
                "name": "total",
                "type": "number",
                "doc": "<p>The total number of records reported by the data source. This ResultSet may form a subset of\nthose records (see count).</p>",
                "default": "0"
            }
        ],
        "events": []
    },
    "Ext.data.SequentialIdGenerator": {
        "type": "Ext.data.SequentialIdGenerator",
        "doc": "<p>This class is a sequential id generator. A simple use of this class would be like so:",
        "configs": [
            {
                "name": "prefix",
                "type": "string",
                "doc": "<p>The string to place in front of the sequential number for each generated id. The\ndefault is blank.</p>",
                "default": ""
            },
            {
                "name": "seed",
                "type": "number",
                "doc": "<p>The number at which to start generating sequential id's. The default is 1.</p>",
                "default": "1"
            }
        ],
        "events": []
    },
    "Ext.data.SortTypes": {
        "type": "Ext.data.SortTypes",
        "doc": "<p>This class defines a series of static methods that are used on a\nExt.data.Field for performing sorting. The methods cast the\nunderlying values into a data type that is appropriate for sorting on\nthat particular field.  If a Ext.data.Field.type is specified,\nthe sortType will be set to a sane default if the sortType is not\nexplicitly defined on the field. The sortType will make any necessary\nmodifications to the value and return it.",
        "configs": [],
        "events": []
    },
    "Ext.data.Store": {
        "type": "Ext.data.Store",
        "doc": "<p>The Store class encapsulates a client side cache of Model objects. Stores load\ndata via a Proxy, and also provide functions for sorting,\nfiltering and querying the model instances contained within it.",
        "configs": [
            {
                "name": "buffered",
                "type": "boolean",
                "doc": "<p>Allow the store to buffer and pre-fetch pages of records. This is to be used in conjunction with a view will\ntell the store to pre-fetch records ahead of a time.</p>",
                "default": "false"
            },
            {
                "name": "clearOnPageLoad",
                "type": "boolean",
                "doc": "<p>True to empty the store when loading another page via loadPage,\nnextPage or previousPage. Setting to false keeps existing records, allowing\nlarge data sets to be loaded one page at a time but rendered all together.</p>",
                "default": "true"
            },
            {
                "name": "data",
                "type": "object[]/ext.data.model[]",
                "doc": "<p>Optional array of Model instances or data objects to load locally. See Inline data above for details.</p>",
                "default": null
            },
            {
                "name": "pageSize",
                "type": "number",
                "doc": "<p>The number of records considered to form a 'page'. This is used to power the built-in\npaging using the nextPage and previousPage functions. Defaults to 25.</p>",
                "default": "25"
            },
            {
                "name": "proxy",
                "type": "string/ext.data.proxy.proxy/object",
                "doc": "<p>The Proxy to use for this Store. This can be either a string, a config\nobject or a Proxy instance - see setProxy for details.</p>",
                "default": null
            },
            {
                "name": "purgePageCount",
                "type": "number",
                "doc": "<p>The number of pages to keep in the cache before purging additional records. A value of 0 indicates to never purge the prefetched data.\nThis option is only relevant when the buffered option is set to true.</p>",
                "default": "5"
            },
            {
                "name": "remoteFilter",
                "type": "boolean",
                "doc": "<p>True to defer any filtering operation to the server. If false, filtering is done locally on the client. Defaults to <tt>false</tt>.</p>",
                "default": "false"
            },
            {
                "name": "remoteGroup",
                "type": "boolean",
                "doc": "<p>True if the grouping should apply on the server side, false if it is local only.  If the\ngrouping is local, it can be applied immediately to the data.  If it is remote, then it will simply act as a\nhelper, automatically sending the grouping information to the server.</p>",
                "default": "false"
            },
            {
                "name": "remoteSort",
                "type": "boolean",
                "doc": "<p>True to defer any sorting operation to the server. If false, sorting is done locally on the client. Defaults to <tt>false</tt>.</p>",
                "default": "false"
            },
            {
                "name": "sortOnFilter",
                "type": "boolean",
                "doc": "<p>For local filtering only, causes sort to be called whenever filter is called,\ncausing the sorters to be reapplied after filtering. Defaults to true</p>",
                "default": "true"
            }
        ],
        "events": [
            {
                "name": "beforeprefetch",
                "params": "this(Ext.data.Store) operation(Ext.data.Operation) eOpts(Object)",
                "doc": "<p>Fires before a prefetch occurs. Return false to cancel.</p>"
            },
            {
                "name": "groupchange",
                "params": "store(Ext.data.Store) groupers(Ext.util.Grouper[]) eOpts(Object)",
                "doc": "<p>Fired whenever the grouping in the grid changes</p>"
            },
            {
                "name": "load",
                "params": "this(Ext.data.Store) records(Ext.util.Grouper[]) successful(Boolean) operation(Ext.data.Operation) eOpts(Object)",
                "doc": "<p>Fires whenever records have been prefetched</p>"
            }
        ]
    },
    "Ext.data.StoreManager": {
        "type": "Ext.data.StoreManager",
        "doc": "<p>Contains a collection of all stores that are created that have an identifier. An identifier can be assigned by\nsetting the storeId property. When a store is in the StoreManager, it can be\nreferred to via it's identifier:",
        "configs": [],
        "events": []
    },
    "Ext.data.Tree": {
        "type": "Ext.data.Tree",
        "doc": "<p>This class is used as a container for a series of nodes. The nodes themselves maintain\nthe relationship between parent/child. The tree itself acts as a manager. It gives functionality\nto retrieve a node by its identifier: getNodeById.",
        "configs": [],
        "events": [
            {
                "name": "append",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) index(Number) eOpts(Object)",
                "doc": "<p>Fires when a new child node is appended</p>"
            },
            {
                "name": "beforeappend",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires before a new child is appended, return false to cancel the append.</p>"
            },
            {
                "name": "beforecollapse",
                "params": "this(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires before this node is collapsed.</p>"
            },
            {
                "name": "beforeexpand",
                "params": "this(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires before this node is expanded.</p>"
            },
            {
                "name": "beforeinsert",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) refNode(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires before a new child is inserted, return false to cancel the insert.</p>"
            },
            {
                "name": "beforemove",
                "params": "this(Ext.data.NodeInterface) oldParent(Ext.data.NodeInterface) newParent(Ext.data.NodeInterface) index(Number) eOpts(Object)",
                "doc": "<p>Fires before this node is moved to a new location in the tree. Return false to cancel the move.</p>"
            },
            {
                "name": "beforeremove",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires before a child is removed, return false to cancel the remove.</p>"
            },
            {
                "name": "collapse",
                "params": "this(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires when this node is collapsed.</p>"
            },
            {
                "name": "expand",
                "params": "this(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires when this node is expanded.</p>"
            },
            {
                "name": "insert",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) refNode(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires when a new child node is inserted.</p>"
            },
            {
                "name": "move",
                "params": "this(Ext.data.NodeInterface) oldParent(Ext.data.NodeInterface) newParent(Ext.data.NodeInterface) index(Number) eOpts(Object)",
                "doc": "<p>Fires when this node is moved to a new location in the tree</p>"
            },
            {
                "name": "remove",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires when a child node is removed</p>"
            },
            {
                "name": "rootchange",
                "params": "root(Ext.data.Model) eOpts(Object)",
                "doc": "<p>Fires whenever the root node is changed in the tree.</p>"
            }
        ]
    },
    "Ext.data.TreeStore": {
        "type": "Ext.data.TreeStore",
        "doc": "<p>The TreeStore is a store implementation that is backed by by an Ext.data.Tree.\nIt provides convenience methods for loading nodes, as well as the ability to use\nthe hierarchical tree structure combined with a store.",
        "configs": [
            {
                "name": "clearOnLoad",
                "type": "boolean",
                "doc": "<p>Remove previously existing child nodes before loading. Default to true.</p>",
                "default": "true"
            },
            {
                "name": "defaultRootId",
                "type": "string",
                "doc": "<p>The default root id. Defaults to 'root'</p>",
                "default": "root"
            },
            {
                "name": "defaultRootProperty",
                "type": "string",
                "doc": "<p>The root property to specify on the reader if one is not explicitly defined.</p>",
                "default": "children"
            },
            {
                "name": "folderSort",
                "type": "boolean",
                "doc": "<p>Set to true to automatically prepend a leaf sorter. Defaults to <code>undefined</code>.</p>",
                "default": "false"
            },
            {
                "name": "nodeParam",
                "type": "string",
                "doc": "<p>The name of the parameter sent to the server which contains the identifier of the node.\nDefaults to 'node'.</p>",
                "default": "node"
            },
            {
                "name": "root",
                "type": "ext.data.model/ext.data.nodeinterface/object",
                "doc": "<p>The root node for this store.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "append",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) index(Number) eOpts(Object)",
                "doc": "<p>Fires when a new child node is appended</p>"
            },
            {
                "name": "beforeappend",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires before a new child is appended, return false to cancel the append.</p>"
            },
            {
                "name": "beforecollapse",
                "params": "this(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires before this node is collapsed.</p>"
            },
            {
                "name": "beforeexpand",
                "params": "this(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires before this node is expanded.</p>"
            },
            {
                "name": "beforeinsert",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) refNode(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires before a new child is inserted, return false to cancel the insert.</p>"
            },
            {
                "name": "beforemove",
                "params": "this(Ext.data.NodeInterface) oldParent(Ext.data.NodeInterface) newParent(Ext.data.NodeInterface) index(Number) eOpts(Object)",
                "doc": "<p>Fires before this node is moved to a new location in the tree. Return false to cancel the move.</p>"
            },
            {
                "name": "beforeremove",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires before a child is removed, return false to cancel the remove.</p>"
            },
            {
                "name": "collapse",
                "params": "this(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires when this node is collapsed.</p>"
            },
            {
                "name": "expand",
                "params": "this(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires when this node is expanded.</p>"
            },
            {
                "name": "insert",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) refNode(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires when a new child node is inserted.</p>"
            },
            {
                "name": "load",
                "params": "this(Ext.data.TreeStore) node(Ext.data.NodeInterface) records(Ext.data.Model[]) successful(Boolean) eOpts(Object)",
                "doc": "<p>Fires whenever the store reads data from a remote data source.</p>"
            },
            {
                "name": "move",
                "params": "this(Ext.data.NodeInterface) oldParent(Ext.data.NodeInterface) newParent(Ext.data.NodeInterface) index(Number) eOpts(Object)",
                "doc": "<p>Fires when this node is moved to a new location in the tree</p>"
            },
            {
                "name": "remove",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires when a child node is removed</p>"
            },
            {
                "name": "rootchange",
                "params": "root(Ext.data.Model) eOpts(Object)",
                "doc": "<p>Fires whenever the root node is changed in the tree.</p>"
            },
            {
                "name": "sort",
                "params": "node(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires when this TreeStore is sorted.</p>"
            }
        ]
    },
    "Ext.data.Types": {
        "type": "Ext.data.Types",
        "doc": "<p>This is a static class containing the system-supplied data types which may be given to a Field.<p/>\n<p>The properties in this class are used as type indicators in the Field class, so to\ntest whether a Field is of a certain type, compare the type property against properties\nof this class.",
        "configs": [],
        "events": []
    },
    "Ext.data.UuidGenerator": {
        "type": "Ext.data.UuidGenerator",
        "doc": "<p>This class generates UUID's according to RFC 4122. This class has a default id property.\nThis means that a single instance is shared unless the id property is overridden.</p>",
        "configs": [
            {
                "name": "version",
                "type": "number",
                "doc": "<p>The Version of UUID.</p>",
                "default": "4"
            }
        ],
        "events": []
    },
    "Ext.data.validations": {
        "type": "Ext.data.validations",
        "doc": "<p>This singleton contains a set of validation functions that can be used to validate any type of data. They are most\noften used in Models, where they are automatically set up and executed.",
        "configs": [],
        "events": []
    },
    "Ext.data.writer.Json": {
        "type": "Ext.data.writer.Json",
        "doc": "<p>This class is used to write Ext.data.Model data to the server in a JSON format.\nThe allowSingle configuration can be set to false to force the records to always be\nencoded in an array, even if there is only a single record being sent.",
        "configs": [
            {
                "name": "allowSingle",
                "type": "boolean",
                "doc": "<p>False to ensure that records are always wrapped in an array, even if there is only\none record being sent. When there is more than one record, they will always be encoded into an array.\nDefaults to <tt>true</tt>.</p>",
                "default": "true"
            },
            {
                "name": "encode",
                "type": "boolean",
                "doc": "<p>True to use Ext.encode() on the data before sending. Defaults to <tt>false</tt>.\nThe encode option should only be set to true when a root is defined, because the values will be\nsent as part of the request parameters as opposed to a raw post. The root will be the name of the parameter\nsent to the server.</p>",
                "default": "false"
            },
            {
                "name": "root",
                "type": "string",
                "doc": "<p>The key under which the records in this Writer will be placed. Defaults to <tt>undefined</tt>.</p>",
                "default": "undefined"
            }
        ],
        "events": []
    },
    "Ext.data.writer.Writer": {
        "type": "Ext.data.writer.Writer",
        "doc": "<p>Base Writer class used by most subclasses of Ext.data.proxy.Server. This class is responsible for taking a\nset of Ext.data.Operation objects and a Ext.data.Request object and modifying that request based on\nthe Operations.",
        "configs": [
            {
                "name": "nameProperty",
                "type": "string",
                "doc": "<p>This property is used to read the key for each value that will be sent to the server.</p>",
                "default": "name"
            },
            {
                "name": "writeAllFields",
                "type": "boolean",
                "doc": "<p>True to write all fields from the record to the server. If set to false it will only send the fields that were\nmodified. Note that any fields that have Ext.data.Field.persist set to false will still be ignored.</p>",
                "default": "true"
            }
        ],
        "events": []
    },
    "Ext.data.writer.Xml": {
        "type": "Ext.data.writer.Xml",
        "doc": "<p>This class is used to write Ext.data.Model data to the server in an XML format.\nThe documentRoot property is used to specify the root element in the XML document.",
        "configs": [
            {
                "name": "defaultDocumentRoot",
                "type": "string",
                "doc": "<p>The root to be used if documentRoot is empty and a root is required\nto form a valid XML document.</p>",
                "default": "xmlData"
            },
            {
                "name": "documentRoot",
                "type": "string",
                "doc": "<p>The name of the root element of the document. Defaults to <tt>'xmlData'</tt>.\nIf there is more than 1 record and the root is not specified, the default document root will still be used\nto ensure a valid XML document is created.</p>",
                "default": "xmlData"
            },
            {
                "name": "header",
                "type": "string",
                "doc": "<p>A header to use in the XML document (such as setting the encoding or version).\nDefaults to <tt>''</tt>.</p>",
                "default": ""
            },
            {
                "name": "record",
                "type": "string",
                "doc": "<p>The name of the node to use for each record. Defaults to <tt>'record'</tt>.</p>",
                "default": "record"
            }
        ],
        "events": []
    },
    "Ext.Date": {
        "type": "Ext.Date",
        "doc": "<p>A set of useful static methods to deal with date\nNote that if Ext.Date is required and loaded, it will copy all methods / properties to\nthis object for convenience",
        "configs": [],
        "events": []
    },
    "Ext.dd.DD": {
        "type": "Ext.dd.DD",
        "doc": "<p>A DragDrop implementation where the linked element follows the\nmouse cursor during a drag.",
        "configs": [],
        "events": []
    },
    "Ext.dd.DDProxy": {
        "type": "Ext.dd.DDProxy",
        "doc": "<p>A DragDrop implementation that inserts an empty, bordered div into\nthe document that follows the cursor during drag operations.  At the time of\nthe click, the frame div is resized to the dimensions of the linked html\nelement, and moved to the exact location of the linked element.",
        "configs": [],
        "events": []
    },
    "Ext.dd.DDTarget": {
        "type": "Ext.dd.DDTarget",
        "doc": "<p>A DragDrop implementation that does not move, but can be a drop\ntarget.  You would get the same result by simply omitting implementation\nfor the event callbacks, but this way we reduce the processing cost of the\nevent listener and the callbacks.",
        "configs": [],
        "events": []
    },
    "Ext.dd.DragDrop": {
        "type": "Ext.dd.DragDrop",
        "doc": "<p>Defines the interface and base operation of items that that can be\ndragged or can be drop targets.  It was designed to be extended, overriding\nthe event handlers for startDrag, onDrag, onDragOver and onDragOut.\nUp to three html elements can be associated with a DragDrop instance:",
        "configs": [],
        "events": []
    },
    "Ext.dd.DragDropManager.ElementWrapper": {
        "type": "Ext.dd.DragDropManager.ElementWrapper",
        "doc": "<p>Inner class for cached elements",
        "configs": [],
        "events": []
    },
    "Ext.dd.DragDropManager": {
        "type": "Ext.dd.DragDropManager",
        "doc": "<p>DragDropManager is a singleton that tracks the element interaction for\nall DragDrop items in the window.  Generally, you will not call\nthis class directly, but it does have helper methods that could\nbe useful in your DragDrop implementations.",
        "configs": [],
        "events": []
    },
    "Ext.dd.DragSource": {
        "type": "Ext.dd.DragSource",
        "doc": "<p>A simple class that provides the basic implementation needed to make any element draggable.",
        "configs": [
            {
                "name": "animRepair",
                "type": "boolean",
                "doc": "<p>If true, animates the proxy element back to the position of the handle element used to trigger the drag.</p>",
                "default": "true"
            },
            {
                "name": "ddGroup",
                "type": "string",
                "doc": "<p>A named drag drop group to which this object belongs.  If a group is specified, then this object will only\ninteract with other drag drop objects in the same group.</p>",
                "default": null
            },
            {
                "name": "dropAllowed",
                "type": "string",
                "doc": "<p>The CSS class returned to the drag source when drop is allowed.</p>",
                "default": "x-dd-drop-ok"
            },
            {
                "name": "dropNotAllowed",
                "type": "string",
                "doc": "<p>The CSS class returned to the drag source when drop is not allowed.</p>",
                "default": "x-dd-drop-nodrop"
            },
            {
                "name": "repairHighlightColor",
                "type": "string",
                "doc": "<p>The color to use when visually highlighting the drag source in the afterRepair\nmethod after a failed drop (defaults to light blue). The color must be a 6 digit hex value, without\na preceding '#'.</p>",
                "default": "c3daf9"
            }
        ],
        "events": []
    },
    "Ext.dd.DragTracker": {
        "type": "Ext.dd.DragTracker",
        "doc": "<p>A DragTracker listens for drag events on an Element and fires events at the start and end of the drag,\nas well as during the drag. This is useful for components such as Ext.slider.Multi, where there is\nan element that can be dragged around to change the Slider's value.\nDragTracker provides a series of template methods that should be overridden to provide functionality\nin response to detected drag operations. These are onBeforeStart, onStart, onDrag and onEnd.\nSee Ext.slider.Multi's initEvents function for an example implementation.",
        "configs": [
            {
                "name": "autoStart",
                "type": "boolean/number",
                "doc": "<p>Defaults to <code>false</code>. Specify <code>true</code> to defer trigger start by 1000 ms.\nSpecify a Number for the number of milliseconds to defer trigger start.</p>",
                "default": "false"
            },
            {
                "name": "constrainTo",
                "type": "ext.util.region/ext.element",
                "doc": "<p>A Region (Or an element from which a Region measurement will be read) which is used to constrain\nthe result of the getOffset call.</p>",
                "default": null
            },
            {
                "name": "delegate",
                "type": "string",
                "doc": "<p>Optional. <p>A DomQuery selector which identifies child elements within the DragTracker's encapsulating\nElement which are the tracked elements. This limits tracking to only begin when the matching elements are mousedowned.</p>",
                "default": null
            },
            {
                "name": "overCls",
                "type": "string",
                "doc": "<p>A CSS class to add to the DragTracker's target element when the element (or, if the delegate option is used,\nwhen a delegate element) is mouseovered.</p>",
                "default": null
            },
            {
                "name": "preventDefault",
                "type": "boolean",
                "doc": "<p>Specify <code>false</code> to enable default actions on onMouseDown events. Defaults to <code>true</code>.</p>",
                "default": null
            },
            {
                "name": "stopEvent",
                "type": "boolean",
                "doc": "<p>Specify <code>true</code> to stop the <code>mousedown</code> event from bubbling to outer listeners from the target element (or its delegates). Defaults to <code>false</code>.</p>",
                "default": null
            },
            {
                "name": "tolerance",
                "type": "number",
                "doc": "<p>Number of pixels the drag target must be moved before dragging is\nconsidered to have started. Defaults to <code>5</code>.</p>",
                "default": "5"
            },
            {
                "name": "trackOver",
                "type": "boolean",
                "doc": "<p>Defaults to <code>false</code>. Set to true to fire mouseover and mouseout events when the mouse enters or leaves the target element.</p>",
                "default": "false"
            }
        ],
        "events": [
            {
                "name": "beforestart",
                "params": "this(Object) e(Object) eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "drag",
                "params": "this(Object) e(Object) eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "dragend",
                "params": "this(Object) e(Object) eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "dragstart",
                "params": "this(Object) e(Object) eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "mousedown",
                "params": "this(Object) e(Object) eOpts(Object)",
                "doc": "<p>Fires when the mouse button is pressed down, but before a drag operation begins. The\ndrag operation begins after either the mouse has been moved by tolerance pixels, or after\nthe autoStart timer fires.</p>"
            },
            {
                "name": "mousemove",
                "params": "this(Object) e(Object) eOpts(Object)",
                "doc": "<p>Fired when the mouse is moved. Returning false cancels the drag operation.</p>"
            },
            {
                "name": "mouseout",
                "params": "this(Object) e(Object) eOpts(Object)",
                "doc": "<p><b>Only available when trackOver is <code>true</code></b></p>"
            },
            {
                "name": "mouseover",
                "params": "this(Object) e(Object) target(HTMLElement) eOpts(Object)",
                "doc": "<p><b>Only available when trackOver is <code>true</code></b></p>"
            },
            {
                "name": "mouseup",
                "params": "this(Object) e(Object) eOpts(Object)",
                "doc": "\n"
            }
        ]
    },
    "Ext.dd.DragZone": {
        "type": "Ext.dd.DragZone",
        "doc": "<p>This class provides a container DD instance that allows dragging of multiple child source nodes.",
        "configs": [
            {
                "name": "containerScroll",
                "type": "boolean",
                "doc": "<p>True to register this container with the Scrollmanager\nfor auto scrolling during drag operations.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.dd.DropTarget": {
        "type": "Ext.dd.DropTarget",
        "doc": "<p>A simple class that provides the basic implementation needed to make any element a drop target that can have\ndraggable items dropped onto it.  The drop has no effect until an implementation of notifyDrop is provided.",
        "configs": [
            {
                "name": "ddGroup",
                "type": "string",
                "doc": "<p>A named drag drop group to which this object belongs.  If a group is specified, then this object will only\ninteract with other drag drop objects in the same group.</p>",
                "default": null
            },
            {
                "name": "dropAllowed",
                "type": "string",
                "doc": "<p>The CSS class returned to the drag source when drop is allowed.</p>",
                "default": "x-dd-drop-ok"
            },
            {
                "name": "dropNotAllowed",
                "type": "string",
                "doc": "<p>The CSS class returned to the drag source when drop is not allowed.</p>",
                "default": "x-dd-drop-nodrop"
            },
            {
                "name": "overClass",
                "type": "string",
                "doc": "<p>The CSS class applied to the drop target element while the drag source is over it.</p>",
                "default": ""
            }
        ],
        "events": []
    },
    "Ext.dd.DropZone": {
        "type": "Ext.dd.DropZone",
        "doc": "<p>This class provides a container DD instance that allows dropping on multiple child target nodes.",
        "configs": [],
        "events": []
    },
    "Ext.dd.Registry": {
        "type": "Ext.dd.Registry",
        "doc": "<p>Provides easy access to all drag drop components that are registered on a page.  Items can be retrieved either\ndirectly by DOM node id, or by passing in the drag drop event that occurred and looking up the event target.",
        "configs": [],
        "events": []
    },
    "Ext.dd.ScrollManager": {
        "type": "Ext.dd.ScrollManager",
        "doc": "<p>Provides automatic scrolling of overflow regions in the page during drag operations.",
        "configs": [],
        "events": []
    },
    "Ext.dd.StatusProxy": {
        "type": "Ext.dd.StatusProxy",
        "doc": "<p>A specialized drag proxy that supports a drop status icon, Ext.Layer styles and auto-repair.  This is the\ndefault drag proxy used by all Ext.dd components.",
        "configs": [
            {
                "name": "dropAllowed",
                "type": "string",
                "doc": "<p>The CSS class to apply to the status element when drop is allowed.</p>",
                "default": "x-dd-drop-ok"
            },
            {
                "name": "dropNotAllowed",
                "type": "string",
                "doc": "<p>The CSS class to apply to the status element when drop is not allowed.</p>",
                "default": "x-dd-drop-nodrop"
            }
        ],
        "events": []
    },
    "Ext.direct.Event": {
        "type": "Ext.direct.Event",
        "doc": "<p>A base class for all Ext.direct events. An event is\ncreated after some kind of interaction with the server.\nThe event class is essentially just a data structure\nto hold a Direct response.",
        "configs": [],
        "events": []
    },
    "Ext.direct.ExceptionEvent": {
        "type": "Ext.direct.ExceptionEvent",
        "doc": "<p>An event that is fired when an exception is received from a Ext.direct.RemotingProvider",
        "configs": [],
        "events": []
    },
    "Ext.direct.JsonProvider": {
        "type": "Ext.direct.JsonProvider",
        "doc": "<p>A base provider for communicating using JSON. This is an abstract class\nand should not be instanced directly.",
        "configs": [],
        "events": []
    },
    "Ext.direct.Manager": {
        "type": "Ext.direct.Manager",
        "doc": "<p>Ext.Direct aims to streamline communication between the client and server by providing a single interface that\nreduces the amount of common code typically required to validate data and handle returned data packets (reading data,\nerror conditions, etc).",
        "configs": [],
        "events": [
            {
                "name": "event",
                "params": "e(Ext.direct.Event) provider(Ext.direct.Provider) eOpts(Object)",
                "doc": "<p>Fires after an event.</p>"
            },
            {
                "name": "exception",
                "params": "e(Ext.direct.Event) eOpts(Object)",
                "doc": "<p>Fires after an event exception.</p>"
            }
        ]
    },
    "Ext.direct.PollingProvider": {
        "type": "Ext.direct.PollingProvider",
        "doc": "<p>Provides for repetitive polling of the server at distinct intervals.\nThe initial request for data originates from the client, and then is responded to by the\nserver.",
        "configs": [
            {
                "name": "baseParams",
                "type": "object",
                "doc": "<p>An object containing properties which are to be sent as parameters on every polling request</p>",
                "default": null
            },
            {
                "name": "interval",
                "type": "number",
                "doc": "<p>How often to poll the server-side in milliseconds. Defaults to every 3 seconds.</p>",
                "default": "3000"
            },
            {
                "name": "url",
                "type": "string/function",
                "doc": "<p>The url which the PollingProvider should contact with each request. This can also be\nan imported Ext.Direct method which will accept the baseParams as its only argument.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "beforepoll",
                "params": "this(Ext.direct.PollingProvider) eOpts(Object)",
                "doc": "<p>Fired immediately before a poll takes place, an event handler can return false\nin order to cancel the poll.</p>"
            },
            {
                "name": "poll",
                "params": "this(Ext.direct.PollingProvider) eOpts(Object)",
                "doc": "<p>This event has not yet been implemented.</p>"
            }
        ]
    },
    "Ext.direct.Provider": {
        "type": "Ext.direct.Provider",
        "doc": "<p>Ext.direct.Provider is an abstract class meant to be extended.",
        "configs": [
            {
                "name": "id",
                "type": "string",
                "doc": "<p>The unique id of the provider (defaults to an auto-assigned id).\nYou should assign an id if you need to be able to access the provider later and you do\nnot have an object reference available, </p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "connect",
                "params": "provider(Ext.direct.Provider) eOpts(Object)",
                "doc": "<p>Fires when the Provider connects to the server-side</p>"
            },
            {
                "name": "data",
                "params": "provider(Ext.direct.Provider) e(Ext.direct.Event) eOpts(Object)",
                "doc": "<p>Fires when the Provider receives data from the server-side</p>"
            },
            {
                "name": "disconnect",
                "params": "provider(Ext.direct.Provider) eOpts(Object)",
                "doc": "<p>Fires when the Provider disconnects from the server-side</p>"
            },
            {
                "name": "exception",
                "params": "eOpts(Object)",
                "doc": "<p>Fires when the Provider receives an exception from the server-side</p>"
            }
        ]
    },
    "Ext.direct.RemotingEvent": {
        "type": "Ext.direct.RemotingEvent",
        "doc": "<p>An event that is fired when data is received from a\nExt.direct.RemotingProvider. Contains a method to the\nrelated transaction for the direct request, see getTransaction",
        "configs": [],
        "events": []
    },
    "Ext.direct.RemotingProvider": {
        "type": "Ext.direct.RemotingProvider",
        "doc": "<p>The RemotingProvider exposes access to\nserver side methods on the client (a remote procedure call (RPC) type of\nconnection where the client can initiate a procedure on the server).",
        "configs": [
            {
                "name": "actions",
                "type": "object",
                "doc": "<p>Object literal defining the server side actions and methods.</p>",
                "default": null
            },
            {
                "name": "enableBuffer",
                "type": "number/boolean",
                "doc": "<p><tt>true</tt> or <tt>false</tt> to enable or disable combining of method\ncalls. If a number is specified this is the amount of time in milliseconds\nto wait before sending a batched request.</p>",
                "default": "10"
            },
            {
                "name": "enableUrlEncode",
                "type": "string",
                "doc": "<p>Specify which param will hold the arguments for the method.\nDefaults to <tt>'data'</tt>.</p>",
                "default": null
            },
            {
                "name": "maxRetries",
                "type": "number",
                "doc": "<p>Number of times to re-attempt delivery on failure of a call.</p>",
                "default": "1"
            },
            {
                "name": "namespace",
                "type": "string/object",
                "doc": "<p>Namespace for the Remoting Provider (defaults to the browser global scope of <i>window</i>).\nExplicitly specify the namespace Object, or specify a String to have a\nnamespace created implicitly.</p>",
                "default": null
            },
            {
                "name": "timeout",
                "type": "number",
                "doc": "<p>The timeout to use for each request.</p>",
                "default": "undefined"
            },
            {
                "name": "url",
                "type": "string",
                "doc": "<p><b>Required</b>. The url to connect to the Ext.direct.Manager server-side router.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "beforecall",
                "params": "provider(Ext.direct.RemotingProvider) transaction(Ext.direct.Transaction) meta(Object) eOpts(Object)",
                "doc": "<p>Fires immediately before the client-side sends off the RPC call.\nBy returning false from an event handler you can prevent the call from\nexecuting.</p>"
            },
            {
                "name": "call",
                "params": "provider(Ext.direct.RemotingProvider) transaction(Ext.direct.Transaction) meta(Object) eOpts(Object)",
                "doc": "<p>Fires immediately after the request to the server-side is sent. This does\nNOT fire after the response has come back from the call.</p>"
            }
        ]
    },
    "Ext.direct.Transaction": {
        "type": "Ext.direct.Transaction",
        "doc": "<p>Supporting Class for Ext.Direct (not intended to be used directly).",
        "configs": [],
        "events": []
    },
    "Ext.DomHelper": {
        "type": "Ext.DomHelper",
        "doc": "<p>The DomHelper class provides a layer of abstraction from DOM and transparently supports creating\nelements via DOM or using HTML fragments. It also has the ability to create HTML fragment templates\nfrom your DOM building code.",
        "configs": [],
        "events": []
    },
    "Ext.DomQuery": {
        "type": "Ext.DomQuery",
        "doc": "<p>Provides high performance selector/xpath processing by compiling queries into reusable functions. New pseudo classes and matchers can be plugged. It works on HTML and XML documents (if a content node is passed in).",
        "configs": [],
        "events": []
    },
    "Ext.draw.Color": {
        "type": "Ext.draw.Color",
        "doc": "<p>Represents an RGB color and provides helper functions get\ncolor components in HSL color space.",
        "configs": [
            {
                "name": "lightnessFactor",
                "type": "number",
                "doc": "<p>The default factor to compute the lighter or darker color. Defaults to 0.2.</p>",
                "default": "0.2"
            }
        ],
        "events": []
    },
    "Ext.draw.Component": {
        "type": "Ext.draw.Component",
        "doc": "<p>The Draw Component is a surface in which sprites can be rendered. The Draw Component\nmanages and holds a <code>Surface</code> instance: an interface that has\nan SVG or VML implementation depending on the browser capabilities and where\nSprites can be appended.",
        "configs": [
            {
                "name": "autoSize",
                "type": "boolean",
                "doc": "<p>Turn on autoSize support which will set the bounding div's size to the natural size of the contents. Defaults to false.</p>",
                "default": "false"
            },
            {
                "name": "enginePriority",
                "type": "string[]",
                "doc": "<p>Defines the priority order for which Surface implementation to use. The first\none supported by the current environment will be used.</p>",
                "default": "[Svg, Vml]"
            },
            {
                "name": "gradients",
                "type": "object[]",
                "doc": "<p>(optional) Define a set of gradients that can be used as <code>fill</code> property in sprites.</p>",
                "default": null
            },
            {
                "name": "viewBox",
                "type": "boolean",
                "doc": "<p>Turn on view box support which will scale and position items in the draw component to fit to the component while\nmaintaining aspect ratio. Note that this scaling can override other sizing settings on yor items. Defaults to true.</p>",
                "default": "true"
            }
        ],
        "events": []
    },
    "Ext.draw.CompositeSprite": {
        "type": "Ext.draw.CompositeSprite",
        "doc": "<p>A composite Sprite handles a group of sprites with common methods to a sprite\nsuch as <code>hide</code>, <code>show</code>, <code>setAttributes</code>. These methods are applied to the set of sprites\nadded to the group.",
        "configs": [],
        "events": []
    },
    "Ext.draw.Draw": {
        "type": "Ext.draw.Draw",
        "doc": "<p>Base Drawing class.  Provides base drawing functions.",
        "configs": [],
        "events": []
    },
    "Ext.draw.engine.Svg": {
        "type": "Ext.draw.engine.Svg",
        "doc": "<p>Provides specific methods to draw with SVG.",
        "configs": [],
        "events": []
    },
    "Ext.draw.engine.Vml": {
        "type": "Ext.draw.engine.Vml",
        "doc": "<p>Provides specific methods to draw with VML.",
        "configs": [],
        "events": []
    },
    "Ext.draw.Sprite": {
        "type": "Ext.draw.Sprite",
        "doc": "<p>A Sprite is an object rendered in a Drawing surface.",
        "configs": [
            {
                "name": "draggable",
                "type": "boolean",
                "doc": "<p>True to make the sprite draggable.</p>",
                "default": null
            },
            {
                "name": "fill",
                "type": "string",
                "doc": "<p>The fill color</p>",
                "default": null
            },
            {
                "name": "font",
                "type": "string",
                "doc": "<p>Used with text type sprites. The full font description. Uses the same syntax as the CSS font parameter</p>",
                "default": null
            },
            {
                "name": "group",
                "type": "string/string[]",
                "doc": "<p>The group that this sprite belongs to, or an array of groups. Only relevant when added to a\nExt.draw.Surface</p>",
                "default": null
            },
            {
                "name": "height",
                "type": "number",
                "doc": "<p>Used in rectangle sprites, the height of the rectangle</p>",
                "default": null
            },
            {
                "name": "opacity",
                "type": "number",
                "doc": "<p>The opacity of the sprite</p>",
                "default": null
            },
            {
                "name": "path",
                "type": "array",
                "doc": "<p>Used in path sprites, the path of the sprite written in SVG-like path syntax</p>",
                "default": null
            },
            {
                "name": "radius",
                "type": "number",
                "doc": "<p>Used in circle sprites, the radius of the circle</p>",
                "default": null
            },
            {
                "name": "size",
                "type": "number",
                "doc": "<p>Used in square sprites, the dimension of the square</p>",
                "default": null
            },
            {
                "name": "stroke",
                "type": "string",
                "doc": "<p>The stroke color</p>",
                "default": null
            },
            {
                "name": "stroke-width",
                "type": "number",
                "doc": "<p>The width of the stroke</p>",
                "default": null
            },
            {
                "name": "text",
                "type": "string",
                "doc": "<p>Used with text type sprites. The text itself</p>",
                "default": null
            },
            {
                "name": "type",
                "type": "string",
                "doc": "<p>The type of the sprite. Possible options are 'circle', 'path', 'rect', 'text', 'square', 'image'</p>",
                "default": null
            },
            {
                "name": "width",
                "type": "number",
                "doc": "<p>Used in rectangle sprites, the width of the rectangle</p>",
                "default": null
            },
            {
                "name": "x",
                "type": "number",
                "doc": "<p>The position along the x-axis</p>",
                "default": null
            },
            {
                "name": "y",
                "type": "number",
                "doc": "<p>The position along the y-axis</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.draw.Surface": {
        "type": "Ext.draw.Surface",
        "doc": "<p>A Surface is an interface to render methods inside a draw Ext.draw.Component.\nA Surface contains methods to render sprites, get bounding boxes of sprites, add\nsprites to the canvas, initialize other graphic components, etc. One of the most used\nmethods for this class is the <code>add</code> method, to add Sprites to the surface.",
        "configs": [
            {
                "name": "height",
                "type": "number",
                "doc": "<p>The height of this component in pixels (defaults to auto).</p>",
                "default": null
            },
            {
                "name": "width",
                "type": "number",
                "doc": "<p>The width of this component in pixels (defaults to auto).</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.Editor": {
        "type": "Ext.Editor",
        "doc": "<p>\nThe Editor class is used to provide inline editing for elements on the page. The editor\nis backed by a Ext.form.field.Field that will be displayed to edit the underlying content.\nThe editor is a floating Component, when the editor is shown it is automatically aligned to\ndisplay over the top of the bound element it is editing. The Editor contains several options\nfor how to handle key presses:\n<ul>\n<li>completeOnEnter</li>\n<li>cancelOnEsc</li>\n<li>swallowKeys</li>\n</ul>\nIt also has options for how to use the value once the editor has been activated:\n<ul>\n<li>revertInvalid</li>\n<li>ignoreNoChange</li>\n<li>updateEl</li>\n</ul>\nSample usage:\n",
        "configs": [
            {
                "name": "alignment",
                "type": "string",
                "doc": "<p>The position to align to (see Ext.Element.alignTo for more details).</p>",
                "default": "c-c?"
            },
            {
                "name": "allowBlur",
                "type": "boolean",
                "doc": "<p>True to complete the editing process if in edit mode when the\nfield is blurred.</p>",
                "default": "true"
            },
            {
                "name": "autoSize",
                "type": "boolean/object",
                "doc": "<p>True for the editor to automatically adopt the size of the underlying field. Otherwise, an object\ncan be passed to indicate where to get each dimension. The available properties are 'boundEl' and\n'field'. If a dimension is not specified, it will use the underlying height/width specified on\nthe editor object.</p>",
                "default": null
            },
            {
                "name": "cancelOnEsc",
                "type": "boolean",
                "doc": "<p>True to cancel the edit when the escape key is pressed.</p>",
                "default": "true"
            },
            {
                "name": "completeOnEnter",
                "type": "boolean",
                "doc": "<p>True to complete the edit when the enter key is pressed.</p>",
                "default": "true"
            },
            {
                "name": "constrain",
                "type": "boolean",
                "doc": "<p>True to constrain the editor to the viewport</p>",
                "default": "false"
            },
            {
                "name": "field",
                "type": "ext.form.field.field",
                "doc": "<p>The Field object (or descendant) or config object for field</p>",
                "default": null
            },
            {
                "name": "hideEl",
                "type": "boolean",
                "doc": "<p>False to keep the bound element visible while the editor is displayed</p>",
                "default": "true"
            },
            {
                "name": "ignoreNoChange",
                "type": "boolean",
                "doc": "<p>True to skip the edit completion process (no save, no events fired) if the user completes an edit and\nthe value has not changed.  Applies only to string values - edits for other data types\nwill never be ignored.</p>",
                "default": "false"
            },
            {
                "name": "offsets",
                "type": "number[]",
                "doc": "<p>The offsets to use when aligning (see Ext.Element.alignTo for more details.</p>",
                "default": "[0, 0]"
            },
            {
                "name": "parentEl",
                "type": "string/htmlelement/ext.element",
                "doc": "<p>An element to render to. Defaults to the <tt>document.body</tt>.</p>",
                "default": null
            },
            {
                "name": "revertInvalid",
                "type": "boolean",
                "doc": "<p>True to automatically revert the field value and cancel the edit when the user completes an edit and the field\nvalidation fails</p>",
                "default": "true"
            },
            {
                "name": "shadow",
                "type": "boolean/string",
                "doc": "<p>sides for sides/bottom only, frame for 4-way shadow, and drop for bottom-right shadow.</p>",
                "default": "frame"
            },
            {
                "name": "swallowKeys",
                "type": "boolean",
                "doc": "<p>Handle the keydown/keypress events so they don't propagate</p>",
                "default": "true"
            },
            {
                "name": "updateEl",
                "type": "boolean",
                "doc": "<p>True to update the innerHTML of the bound element when the update completes</p>",
                "default": "false"
            },
            {
                "name": "value",
                "type": "object",
                "doc": "<p>The data value of the underlying field</p>",
                "default": ""
            }
        ],
        "events": [
            {
                "name": "beforecomplete",
                "params": "this(Ext.Editor) value(Object) startValue(Object) eOpts(Object)",
                "doc": "<p>Fires after a change has been made to the field, but before the change is reflected in the underlying\nfield.  Saving the change to the field can be canceled by returning false from the handler of this event.\nNote that if the value has not changed and ignoreNoChange = true, the editing will still end but this\nevent will not fire since no edit actually occurred.</p>"
            },
            {
                "name": "beforestartedit",
                "params": "this(Ext.Editor) boundEl(Ext.Element) value(Object) eOpts(Object)",
                "doc": "<p>Fires when editing is initiated, but before the value changes.  Editing can be canceled by returning\nfalse from the handler of this event.</p>"
            },
            {
                "name": "canceledit",
                "params": "this(Ext.Editor) value(Object) startValue(Object) eOpts(Object)",
                "doc": "<p>Fires after editing has been canceled and the editor's value has been reset.</p>"
            },
            {
                "name": "complete",
                "params": "this(Ext.Editor) value(Object) startValue(Object) eOpts(Object)",
                "doc": "<p>Fires after editing is complete and any changed value has been written to the underlying field.</p>"
            },
            {
                "name": "specialkey",
                "params": "this(Ext.Editor) The(Ext.form.field.Field) event(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\nExt.EventObject.getKey to determine which key was pressed.</p>"
            },
            {
                "name": "startedit",
                "params": "this(Ext.Editor) boundEl(Ext.Element) value(Object) eOpts(Object)",
                "doc": "<p>Fires when this editor is displayed</p>"
            }
        ]
    },
    "Ext.Element": {
        "type": "Ext.Element",
        "doc": "<p>Encapsulates a DOM element, adding simple DOM manipulation facilities, normalizing for browser differences.",
        "configs": [],
        "events": [
            {
                "name": "DOMActivate",
                "params": "e(Ext.EventObject) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Where supported. Fires when an element is activated, for instance, through a mouse click or a keypress.</p>"
            },
            {
                "name": "DOMAttrModified",
                "params": "e(Ext.EventObject) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Where supported. Fires when an attribute has been modified.</p>"
            },
            {
                "name": "DOMCharacterDataModified",
                "params": "e(Ext.EventObject) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Where supported. Fires when the character data has been modified.</p>"
            },
            {
                "name": "DOMFocusIn",
                "params": "e(Ext.EventObject) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Where supported. Similar to HTML focus event, but can be applied to any focusable element.</p>"
            },
            {
                "name": "DOMFocusOut",
                "params": "e(Ext.EventObject) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Where supported. Similar to HTML blur event, but can be applied to any focusable element.</p>"
            },
            {
                "name": "DOMNodeInserted",
                "params": "e(Ext.EventObject) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Where supported. Fires when a node has been added as a child of another node.</p>"
            },
            {
                "name": "DOMNodeInsertedIntoDocument",
                "params": "e(Ext.EventObject) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Where supported. Fires when a node is being inserted into a document.</p>"
            },
            {
                "name": "DOMNodeRemoved",
                "params": "e(Ext.EventObject) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Where supported. Fires when a descendant node of the element is removed.</p>"
            },
            {
                "name": "DOMNodeRemovedFromDocument",
                "params": "e(Ext.EventObject) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Where supported. Fires when a node is being removed from a document.</p>"
            },
            {
                "name": "DOMSubtreeModified",
                "params": "e(Ext.EventObject) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Where supported. Fires when the subtree is modified.</p>"
            },
            {
                "name": "abort",
                "params": "e(Ext.EventObject) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when an object/image is stopped from loading before completely loaded.</p>"
            },
            {
                "name": "blur",
                "params": "e(Ext.EventObject) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when an element loses focus either via the pointing device or by tabbing navigation.</p>"
            },
            {
                "name": "change",
                "params": "e(Ext.EventObject) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when a control loses the input focus and its value has been modified since gaining focus.</p>"
            },
            {
                "name": "click",
                "params": "e(Ext.EventObject) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when a mouse click is detected within the element.</p>"
            },
            {
                "name": "contextmenu",
                "params": "e(Ext.EventObject) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when a right click is detected within the element.</p>"
            },
            {
                "name": "dblclick",
                "params": "e(Ext.EventObject) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when a mouse double click is detected within the element.</p>"
            },
            {
                "name": "error",
                "params": "e(Ext.EventObject) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when an object/image/frame cannot be loaded properly.</p>"
            },
            {
                "name": "focus",
                "params": "e(Ext.EventObject) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when an element receives focus either via the pointing device or by tab navigation.</p>"
            },
            {
                "name": "keydown",
                "params": "e(Ext.EventObject) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when a keydown is detected within the element.</p>"
            },
            {
                "name": "keypress",
                "params": "e(Ext.EventObject) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when a keypress is detected within the element.</p>"
            },
            {
                "name": "keyup",
                "params": "e(Ext.EventObject) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when a keyup is detected within the element.</p>"
            },
            {
                "name": "load",
                "params": "e(Ext.EventObject) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when the user agent finishes loading all content within the element. Only supported by window, frames,\nobjects and images.</p>"
            },
            {
                "name": "mousedown",
                "params": "e(Ext.EventObject) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when a mousedown is detected within the element.</p>"
            },
            {
                "name": "mouseenter",
                "params": "e(Ext.EventObject) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when the mouse enters the element.</p>"
            },
            {
                "name": "mouseleave",
                "params": "e(Ext.EventObject) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when the mouse leaves the element.</p>"
            },
            {
                "name": "mousemove",
                "params": "e(Ext.EventObject) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when a mousemove is detected with the element.</p>"
            },
            {
                "name": "mouseout",
                "params": "e(Ext.EventObject) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when a mouseout is detected with the element.</p>"
            },
            {
                "name": "mouseover",
                "params": "e(Ext.EventObject) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when a mouseover is detected within the element.</p>"
            },
            {
                "name": "mouseup",
                "params": "e(Ext.EventObject) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when a mouseup is detected within the element.</p>"
            },
            {
                "name": "reset",
                "params": "e(Ext.EventObject) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when a form is reset.</p>"
            },
            {
                "name": "resize",
                "params": "e(Ext.EventObject) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when a document view is resized.</p>"
            },
            {
                "name": "scroll",
                "params": "e(Ext.EventObject) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when a document view is scrolled.</p>"
            },
            {
                "name": "select",
                "params": "e(Ext.EventObject) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when a user selects some text in a text field, including input and textarea.</p>"
            },
            {
                "name": "submit",
                "params": "e(Ext.EventObject) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when a form is submitted.</p>"
            },
            {
                "name": "unload",
                "params": "e(Ext.EventObject) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when the user agent removes all content from a window or frame. For elements, it fires when the target\nelement or any of its content has been removed.</p>"
            }
        ]
    },
    "Ext.ElementLoader": {
        "type": "Ext.ElementLoader",
        "doc": "<p>A class used to load remote content to an Element. Sample usage:",
        "configs": [
            {
                "name": "ajaxOptions",
                "type": "object",
                "doc": "<p>Any additional options to be passed to the request, for example timeout or headers.</p>",
                "default": "null"
            },
            {
                "name": "autoLoad",
                "type": "boolean/object",
                "doc": "<p>True to have the loader make a request as soon as it is created.\nThis argument can also be a set of options that will be passed to load is called.</p>",
                "default": "false"
            },
            {
                "name": "baseParams",
                "type": "object",
                "doc": "<p>Params that will be attached to every request. These parameters\nwill not be overridden by any params in the load options.</p>",
                "default": "null"
            },
            {
                "name": "loadMask",
                "type": "boolean/string",
                "doc": "<p>True or a string to show when the element is loading.</p>",
                "default": "false"
            },
            {
                "name": "params",
                "type": "object",
                "doc": "<p>Any params to be attached to the Ajax request. These parameters will\nbe overridden by any params in the load options.</p>",
                "default": "null"
            },
            {
                "name": "scope",
                "type": "object",
                "doc": "<p>The scope to execute the success and failure functions in.</p>",
                "default": null
            },
            {
                "name": "scripts",
                "type": "boolean",
                "doc": "<p>True to parse any inline script tags in the response.</p>",
                "default": "false"
            },
            {
                "name": "target",
                "type": "htmlelement/ext.element/string",
                "doc": "<p>The target element for the loader. It can be the DOM element, the id or an Ext.Element.</p>",
                "default": "null"
            },
            {
                "name": "url",
                "type": "string",
                "doc": "<p>The url to retrieve the content from.</p>",
                "default": "null"
            }
        ],
        "events": [
            {
                "name": "beforeload",
                "params": "this(Ext.ElementLoader) options(Object) eOpts(Object)",
                "doc": "<p>Fires before a load request is made to the server.\nReturning false from an event listener can prevent the load\nfrom occurring.</p>"
            },
            {
                "name": "exception",
                "params": "this(Ext.ElementLoader) response(Object) options(Object) eOpts(Object)",
                "doc": "<p>Fires after an unsuccessful load.</p>"
            },
            {
                "name": "load",
                "params": "this(Ext.ElementLoader) response(Object) options(Object) eOpts(Object)",
                "doc": "<p>Fires after a successful load.</p>"
            }
        ]
    },
    "Ext.env.Browser": {
        "type": "Ext.env.Browser",
        "doc": "<p>Provides useful information about the current browser.\nShould not be manually instantiated unless for unit-testing; access the global instance\nstored in Ext.browser instead. Example:",
        "configs": [],
        "events": []
    },
    "Ext.env.FeatureDetector": {
        "type": "Ext.env.FeatureDetector",
        "doc": "<p>Provides useful information about the current browser features.\nDon't instantiate directly, but use the Ext.features property instead.",
        "configs": [],
        "events": []
    },
    "Ext.env.OS": {
        "type": "Ext.env.OS",
        "doc": "<p>Provides useful information about the current operating system environment.\nAccess the global instance stored in Ext.os. Example:",
        "configs": [],
        "events": []
    },
    "Ext.Error": {
        "type": "Ext.Error",
        "doc": "<p>A wrapper class for the native JavaScript Error object that adds a few useful capabilities for handling\nerrors in an Ext application. When you use Ext.Error to raise an error from within any class that\nuses the Ext 4 class system, the Error class can automatically add the source class and method from which\nthe error was raised. It also includes logic to automatically log the eroor to the console, if available,\nwith additional metadata about the error. In all cases, the error will always be thrown at the end so that\nexecution will halt.",
        "configs": [],
        "events": []
    },
    "Ext.EventManager": {
        "type": "Ext.EventManager",
        "doc": "<p>Registers event handlers that want to receive a normalized EventObject instead of the standard browser event and provides\nseveral useful events directly.\nSee Ext.EventObject for more details on normalized event objects.",
        "configs": [],
        "events": []
    },
    "Ext.EventObject": {
        "type": "Ext.EventObject",
        "doc": "<p>Just as Ext.Element wraps around a native DOM node, Ext.EventObject\nwraps the browser's native event-object normalizing cross-browser differences,\nsuch as which mouse button is clicked, keys pressed, mechanisms to stop\nevent-propagation along with a method to prevent default actions from taking place.",
        "configs": [],
        "events": []
    },
    "Ext.flash.Component": {
        "type": "Ext.flash.Component",
        "doc": "<p>A simple Component for displaying an Adobe Flash SWF movie. The movie will be sized and can participate\nin layout like any other Component.",
        "configs": [
            {
                "name": "backgroundColor",
                "type": "string",
                "doc": "<p>The background color of the SWF movie. Defaults to <tt>'#ffffff'</tt>.</p>",
                "default": "#ffffff"
            },
            {
                "name": "expressInstall",
                "type": "boolean",
                "doc": "<p>True to prompt the user to install flash if not installed. Note that this uses\nExt.FlashComponent.EXPRESS_INSTALL_URL, which should be set to the local resource. Defaults to <tt>false</tt>.</p>",
                "default": "false"
            },
            {
                "name": "flashAttributes",
                "type": "object",
                "doc": "<p>A set of key value pairs to be passed to the flash object as attributes. Defaults to <tt>undefined</tt>.</p>",
                "default": null
            },
            {
                "name": "flashParams",
                "type": "object",
                "doc": "<p>A set of key value pairs to be passed to the flash object as parameters. Possible parameters can be found here:\nhttp://kb2.adobe.com/cps/127/tn_12701.html Defaults to <tt>undefined</tt>.</p>",
                "default": null
            },
            {
                "name": "flashVars",
                "type": "object",
                "doc": "<p>A set of key value pairs to be passed to the flash object as flash variables. Defaults to <tt>undefined</tt>.</p>",
                "default": null
            },
            {
                "name": "flashVersion",
                "type": "string",
                "doc": "<p>Indicates the version the flash content was published for. Defaults to <tt>'9.0.115'</tt>.</p>",
                "default": "9.0.115"
            },
            {
                "name": "swfHeight",
                "type": "string/number",
                "doc": "<p>The height of the embedded SWF movie inside the component. Defaults to 100%\nso that the movie matches the height of the component.</p>",
                "default": "100%"
            },
            {
                "name": "swfWidth",
                "type": "string/number",
                "doc": "<p>The width of the embedded SWF movie inside the component. Defaults to 100%\nso that the movie matches the width of the component.</p>",
                "default": "100%"
            },
            {
                "name": "url",
                "type": "string",
                "doc": "<p>The URL of the SWF file to include. Required.</p>",
                "default": null
            },
            {
                "name": "wmode",
                "type": "string",
                "doc": "<p>The wmode of the flash object. This can be used to control layering. Defaults to <tt>'opaque'</tt>.\nSet to 'transparent' to ignore the backgroundColor and make the background of the Flash\nmovie transparent.</p>",
                "default": "opaque"
            }
        ],
        "events": [
            {
                "name": "failure",
                "params": "this(Ext.flash.Component) eOpts(Object)",
                "doc": "<p>Fired when the Flash movie embedding fails</p>"
            },
            {
                "name": "success",
                "params": "this(Ext.flash.Component) eOpts(Object)",
                "doc": "<p>Fired when the Flash movie has been successfully embedded</p>"
            }
        ]
    },
    "Ext.FocusManager": {
        "type": "Ext.FocusManager",
        "doc": "<p>The FocusManager is responsible for globally:",
        "configs": [],
        "events": [
            {
                "name": "beforecomponentfocus",
                "params": "fm(Ext.FocusManager) cmp(Ext.Component) previousCmp(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires before a component becomes focused. Return <code>false</code> to prevent\nthe component from gaining focus.</p>"
            },
            {
                "name": "componentfocus",
                "params": "fm(Ext.FocusManager) cmp(Ext.Component) previousCmp(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires after a component becomes focused.</p>"
            },
            {
                "name": "disable",
                "params": "fm(Ext.FocusManager) eOpts(Object)",
                "doc": "<p>Fires when the FocusManager is disabled</p>"
            },
            {
                "name": "enable",
                "params": "fm(Ext.FocusManager) eOpts(Object)",
                "doc": "<p>Fires when the FocusManager is enabled</p>"
            }
        ]
    },
    "Ext.form.action.Action": {
        "type": "Ext.form.action.Action",
        "doc": "<p>The subclasses of this class provide actions to perform upon Forms.",
        "configs": [
            {
                "name": "form",
                "type": "ext.form.basic",
                "doc": "<p>The BasicForm instance that\nis invoking this Action. Required.</p>",
                "default": null
            },
            {
                "name": "headers",
                "type": "object",
                "doc": "<p>Extra headers to be sent in the AJAX request for submit and load actions. See\nExt.data.proxy.Ajax.headers.</p>",
                "default": null
            },
            {
                "name": "method",
                "type": "string",
                "doc": "<p>The HTTP method to use to access the requested URL. Defaults to the\nBasicForm's method, or 'POST' if not specified.</p>",
                "default": null
            },
            {
                "name": "params",
                "type": "object/string",
                "doc": "<p>Extra parameter values to pass. These are added to the Form's\nExt.form.Basic.baseParams and passed to the specified URL along with the Form's\ninput fields.</p>",
                "default": null
            },
            {
                "name": "reset",
                "type": "boolean",
                "doc": "<p>When set to <tt><b>true</b></tt>, causes the Form to be\nreset on Action success. If specified, this happens\nbefore the success callback is called and before the Form's\nactioncomplete event fires.</p>",
                "default": null
            },
            {
                "name": "scope",
                "type": "object",
                "doc": "<p>The scope in which to call the configured <tt>success</tt> and <tt>failure</tt>\ncallback functions (the <tt>this</tt> reference for the callback functions).</p>",
                "default": null
            },
            {
                "name": "submitEmptyText",
                "type": "boolean",
                "doc": "<p>If set to <tt>true</tt>, the emptyText value will be sent with the form\nwhen it is submitted. Defaults to <tt>true</tt>.</p>",
                "default": "true"
            },
            {
                "name": "timeout",
                "type": "number",
                "doc": "<p>The number of seconds to wait for a server response before\nfailing with the failureType as CONNECT_FAILURE. If not specified,\ndefaults to the configured <tt>timeout</tt> of the\nform.</p>",
                "default": null
            },
            {
                "name": "url",
                "type": "string",
                "doc": "<p>The URL that the Action is to invoke. Will default to the url\nconfigured on the form.</p>",
                "default": null
            },
            {
                "name": "waitMsg",
                "type": "string",
                "doc": "<p>The message to be displayed by a call to Ext.window.MessageBox.wait\nduring the time the action is being processed.</p>",
                "default": null
            },
            {
                "name": "waitTitle",
                "type": "string",
                "doc": "<p>The title to be displayed by a call to Ext.window.MessageBox.wait\nduring the time the action is being processed.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.form.action.DirectLoad": {
        "type": "Ext.form.action.DirectLoad",
        "doc": "<p>Provides Ext.direct.Manager support for loading form data.",
        "configs": [],
        "events": []
    },
    "Ext.form.action.DirectSubmit": {
        "type": "Ext.form.action.DirectSubmit",
        "doc": "<p>Provides Ext.direct support for submitting form data.",
        "configs": [],
        "events": []
    },
    "Ext.form.action.Load": {
        "type": "Ext.form.action.Load",
        "doc": "<p>A class which handles loading of data from a server into the Fields of an Ext.form.Basic.",
        "configs": [],
        "events": []
    },
    "Ext.form.action.StandardSubmit": {
        "type": "Ext.form.action.StandardSubmit",
        "doc": "<p>A class which handles submission of data from Forms using a standard\n<tt>&lt;form&gt;</tt> element submit. It does not handle the response from the submit.",
        "configs": [
            {
                "name": "target",
                "type": "string",
                "doc": "<p>Optional <tt>target</tt> attribute to be used for the form when submitting. If not specified,\nthe target will be the current window/frame.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.form.action.Submit": {
        "type": "Ext.form.action.Submit",
        "doc": "<p>A class which handles submission of data from Forms\nand processes the returned response.",
        "configs": [
            {
                "name": "clientValidation",
                "type": "boolean",
                "doc": "<p>Determines whether a Form's fields are validated\nin a final call to isValid prior to submission.\nPass <tt>false</tt> in the Form's submit options to prevent this. Defaults to true.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.form.Basic": {
        "type": "Ext.form.Basic",
        "doc": "<p>Provides input field management, validation, submission, and form loading services for the collection\nof Field instances within a Ext.container.Container. It is recommended\nthat you use a Ext.form.Panel as the form container, as that has logic to automatically\nhook up an instance of Ext.form.Basic (plus other conveniences related to field configuration.)",
        "configs": [
            {
                "name": "api",
                "type": "object",
                "doc": "<p>(Optional) If specified, load and submit actions will be handled\nwith Ext.form.action.DirectLoad and Ext.form.action.DirectLoad.\nMethods which have been imported by Ext.direct.</p>",
                "default": null
            },
            {
                "name": "baseParams",
                "type": "object",
                "doc": "<p>Parameters to pass with all requests. e.g. baseParams: {id: '123', foo: 'bar'}.</p>",
                "default": null
            },
            {
                "name": "errorReader",
                "type": "ext.data.reader.reader",
                "doc": "<p>An Ext.data.DataReader (e.g. Ext.data.reader.Xml) to be used to\nread field error messages returned from 'submit' actions. This is optional\nas there is built-in support for processing JSON responses.</p>",
                "default": null
            },
            {
                "name": "method",
                "type": "string",
                "doc": "<p>The request method to use (GET or POST) for form actions if one isn't supplied in the action options.</p>",
                "default": null
            },
            {
                "name": "paramOrder",
                "type": "string/string[]",
                "doc": "<p>A list of params to be executed server side.\nDefaults to <tt>undefined</tt>. Only used for the <code>api</code>\n<code>load</code> configuration.</p>",
                "default": null
            },
            {
                "name": "paramsAsHash",
                "type": "boolean",
                "doc": "<p>Only used for the <code>api</code>\n<code>load</code> configuration. If <tt>true</tt>, parameters will be sent as a\nsingle hash collection of named arguments. Providing a\n<tt>paramOrder</tt> nullifies this configuration.</p>",
                "default": "false"
            },
            {
                "name": "reader",
                "type": "ext.data.reader.reader",
                "doc": "<p>An Ext.data.DataReader (e.g. Ext.data.reader.Xml) to be used to read\ndata when executing 'load' actions. This is optional as there is built-in\nsupport for processing JSON responses.</p>",
                "default": null
            },
            {
                "name": "standardSubmit",
                "type": "boolean",
                "doc": "<p>If set to true, a standard HTML form submit is used instead of a XHR (Ajax) style form submission.\nAll of the field values, plus any additional params configured via baseParams\nand/or the <code>options</code> to submit, will be included in the values submitted in the form.</p>",
                "default": null
            },
            {
                "name": "timeout",
                "type": "number",
                "doc": "<p>Timeout for form actions in seconds (default is 30 seconds).</p>",
                "default": "30"
            },
            {
                "name": "trackResetOnLoad",
                "type": "boolean",
                "doc": "<p>If set to true, reset() resets to the last loaded or setValues() data instead of\nwhen the form was first created.</p>",
                "default": "false"
            },
            {
                "name": "url",
                "type": "string",
                "doc": "<p>The URL to use for form actions if one isn't supplied in the\ndoAction options.</p>",
                "default": null
            },
            {
                "name": "waitMsgTarget",
                "type": "string/htmlelement/ext.element",
                "doc": "<p>By default wait messages are displayed with Ext.MessageBox.wait. You can target a specific\nelement by passing it or its id or mask the form itself by passing in true.</p>",
                "default": null
            },
            {
                "name": "waitTitle",
                "type": "string",
                "doc": "<p>The default title to show for the waiting message box</p>",
                "default": "Please Wait..."
            }
        ],
        "events": [
            {
                "name": "actioncomplete",
                "params": "this(Ext.form.Basic) action(Ext.form.action.Action) eOpts(Object)",
                "doc": "<p>Fires when an action is completed.</p>"
            },
            {
                "name": "actionfailed",
                "params": "this(Ext.form.Basic) action(Ext.form.action.Action) eOpts(Object)",
                "doc": "<p>Fires when an action fails.</p>"
            },
            {
                "name": "beforeaction",
                "params": "this(Ext.form.Basic) action(Ext.form.action.Action) eOpts(Object)",
                "doc": "<p>Fires before any action is performed. Return false to cancel the action.</p>"
            },
            {
                "name": "dirtychange",
                "params": "this(Ext.form.Basic) dirty(Boolean) eOpts(Object)",
                "doc": "<p>Fires when the dirty state of the entire form changes.</p>"
            },
            {
                "name": "validitychange",
                "params": "this(Ext.form.Basic) valid(Boolean) eOpts(Object)",
                "doc": "<p>Fires when the validity of the entire form changes.</p>"
            }
        ]
    },
    "Ext.form.CheckboxGroup": {
        "type": "Ext.form.CheckboxGroup",
        "doc": "<p>A field container which has a specialized layout for arranging\nExt.form.field.Checkbox controls into columns, and provides convenience\nExt.form.field.Field methods for getting, setting,\nand validating the group of checkboxes as a whole.",
        "configs": [
            {
                "name": "allowBlank",
                "type": "boolean",
                "doc": "<p>False to validate that at least one item in the group is checked. If no items are selected at\nvalidation time, blankText will be used as the error text.</p>",
                "default": "true"
            },
            {
                "name": "blankText",
                "type": "string",
                "doc": "<p>Error text to display if the allowBlank validation fails</p>",
                "default": "You must select at least one item in this group"
            },
            {
                "name": "columns",
                "type": "string/number/number[]",
                "doc": "<p>Specifies the number of columns to use when displaying grouped checkbox/radio controls using automatic layout.</p>",
                "default": "auto"
            },
            {
                "name": "fieldBodyCls",
                "type": "string",
                "doc": "<p>An extra CSS class to be applied to the body content element in addition to baseBodyCls.\nDefaults to 'x-form-checkboxgroup-body'.</p>",
                "default": "x-form-checkboxgroup-body"
            },
            {
                "name": "items",
                "type": "ext.form.field.checkbox[]/object[]",
                "doc": "<p>An Array of Checkboxes or Checkbox config objects to arrange in the group.</p>",
                "default": null
            },
            {
                "name": "vertical",
                "type": "boolean",
                "doc": "<p>True to distribute contained controls across columns, completely filling each column top to bottom before\nstarting on the next column. The number of controls in each column will be automatically calculated to keep\ncolumns as even as possible. The default value is false, so that controls will be added to columns one at a time,\ncompletely filling each row left to right before starting on the next row.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.form.CheckboxManager": {
        "type": "Ext.form.CheckboxManager",
        "doc": "<p>Private utility class for managing all Ext.form.field.Checkbox fields grouped by name.",
        "configs": [],
        "events": []
    },
    "Ext.form.field.Base": {
        "type": "Ext.form.field.Base",
        "doc": "<p>Base class for form fields that provides default event handling, rendering, and other common functionality\nneeded by all form field types. Utilizes the Ext.form.field.Field mixin for value handling and validation,\nand the Ext.form.Labelable mixin to provide label and error message display.",
        "configs": [
            {
                "name": "checkChangeBuffer",
                "type": "number",
                "doc": "<p>Defines a timeout in milliseconds for buffering checkChangeEvents that fire in rapid succession.\nDefaults to 50 milliseconds.</p>",
                "default": "50"
            },
            {
                "name": "checkChangeEvents",
                "type": "string[]",
                "doc": "<p>A list of event names that will be listened for on the field's input element, which will cause\nthe field's value to be checked for changes. If a change is detected, the change event will be\nfired, followed by validation if the validateOnChange option is enabled.</p>",
                "default": null
            },
            {
                "name": "dirtyCls",
                "type": "string",
                "doc": "<p>The CSS class to use when the field value is dirty.</p>",
                "default": "x-form-dirty"
            },
            {
                "name": "fieldCls",
                "type": "string",
                "doc": "<p>The default CSS class for the field input</p>",
                "default": "x-form-field"
            },
            {
                "name": "fieldStyle",
                "type": "string",
                "doc": "<p>Optional CSS style(s) to be applied to the field input element. Should be a valid argument to\nExt.Element.applyStyles. Defaults to undefined. See also the setFieldStyle method for changing\nthe style after initialization.</p>",
                "default": null
            },
            {
                "name": "fieldSubTpl",
                "type": "ext.xtemplate",
                "doc": "<p>The content of the field body is defined by this config option.</p>",
                "default": "[<input id={id} type={type} , <tpl if=name>name={name} </tpl>, <tpl if=size>size={size} </tpl>, <tpl if=tabIdx>tabIndex={tabIdx} </tpl>, class={fieldCls} {typeCls} autocomplete=off />, {compiled: true, disableFormats: true}]"
            },
            {
                "name": "focusCls",
                "type": "string",
                "doc": "<p>The CSS class to use when the field receives focus</p>",
                "default": "x-form-focus"
            },
            {
                "name": "inputId",
                "type": "string",
                "doc": "<p>The id that will be given to the generated input DOM element. Defaults to an automatically generated id. If you\nconfigure this manually, you must make sure it is unique in the document.</p>",
                "default": null
            },
            {
                "name": "inputType",
                "type": "string",
                "doc": "<p>The type attribute for input fields -- e.g. radio, text, password, file. The extended types\nsupported by HTML5 inputs (url, email, etc.) may also be used, though using them will cause older browsers to\nfall back to 'text'.</p>",
                "default": "text"
            },
            {
                "name": "invalidText",
                "type": "string",
                "doc": "<p>The error text to use when marking a field invalid and no message is provided</p>",
                "default": "The value in this field is invalid"
            },
            {
                "name": "name",
                "type": "string",
                "doc": "<p>The name of the field. This is used as the parameter name when including the field value\nin a form submit(). If no name is configured, it falls back to the inputId.\nTo prevent the field from being included in the form submit, set submitValue to false.</p>",
                "default": null
            },
            {
                "name": "readOnly",
                "type": "boolean",
                "doc": "<p>true to mark the field as readOnly in HTML.</p>",
                "default": "false"
            },
            {
                "name": "readOnlyCls",
                "type": "string",
                "doc": "<p>The CSS class applied to the component's main element when it is readOnly.</p>",
                "default": "x-form-readonly"
            },
            {
                "name": "tabIndex",
                "type": "number",
                "doc": "<p>The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via\napplyTo</p>",
                "default": null
            },
            {
                "name": "validateOnBlur",
                "type": "boolean",
                "doc": "<p>Whether the field should validate when it loses focus. This will cause fields to be validated\nas the user steps through the fields in the form regardless of whether they are making changes to those fields\nalong the way. See also validateOnChange.</p>",
                "default": "true"
            }
        ],
        "events": [
            {
                "name": "blur",
                "params": "this(Ext.form.field.Base) eOpts(Object)",
                "doc": "<p>Fires when this field loses input focus.</p>"
            },
            {
                "name": "focus",
                "params": "this(Ext.form.field.Base) eOpts(Object)",
                "doc": "<p>Fires when this field receives input focus.</p>"
            },
            {
                "name": "specialkey",
                "params": "this(Ext.form.field.Base) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed. To handle other keys\nsee Ext.util.KeyMap. You can check Ext.EventObject.getKey to determine which key was\npressed.</p>"
            }
        ]
    },
    "Ext.form.field.Checkbox": {
        "type": "Ext.form.field.Checkbox",
        "doc": "<p>Single checkbox field. Can be used as a direct replacement for traditional checkbox fields. Also serves as a\nparent class for radio buttons.",
        "configs": [
            {
                "name": "boxLabel",
                "type": "string",
                "doc": "<p>An optional text label that will appear next to the checkbox. Whether it appears before or after the checkbox is\ndetermined by the boxLabelAlign config.</p>",
                "default": null
            },
            {
                "name": "boxLabelAlign",
                "type": "string",
                "doc": "<p>The position relative to the checkbox where the boxLabel should appear. Recognized values are 'before'\nand 'after'.</p>",
                "default": "after"
            },
            {
                "name": "boxLabelCls",
                "type": "string",
                "doc": "<p>The CSS class to be applied to the boxLabel element</p>",
                "default": "x-form-cb-label"
            },
            {
                "name": "checked",
                "type": "boolean",
                "doc": "<p>true if the checkbox should render initially checked</p>",
                "default": "false"
            },
            {
                "name": "checkedCls",
                "type": "string",
                "doc": "<p>The CSS class added to the component's main element when it is in the checked state.</p>",
                "default": "x-form-cb-checked"
            },
            {
                "name": "fieldBodyCls",
                "type": "string",
                "doc": "<p>An extra CSS class to be applied to the body content element in addition to fieldBodyCls.\n.</p>",
                "default": "x-form-cb-wrap"
            },
            {
                "name": "fieldCls",
                "type": "string",
                "doc": "<p>The default CSS class for the checkbox</p>",
                "default": "x-form-field"
            },
            {
                "name": "focusCls",
                "type": "string",
                "doc": "<p>The CSS class to use when the checkbox receives focus</p>",
                "default": "x-form-cb-focus"
            },
            {
                "name": "inputValue",
                "type": "string",
                "doc": "<p>The value that should go into the generated input element's value attribute and should be used as the parameter\nvalue when submitting as part of a form.</p>",
                "default": "on"
            },
            {
                "name": "scope",
                "type": "object",
                "doc": "<p>An object to use as the scope ('this' reference) of the handler function (defaults to this Checkbox).</p>",
                "default": null
            },
            {
                "name": "uncheckedValue",
                "type": "string",
                "doc": "<p>If configured, this will be submitted as the checkbox's value during form submit if the checkbox is unchecked. By\ndefault this is undefined, which results in nothing being submitted for the checkbox field when the form is\nsubmitted (the default behavior of HTML checkboxes).</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.form.field.ComboBox": {
        "type": "Ext.form.field.ComboBox",
        "doc": "<p>A combobox control with support for autocomplete, remote loading, and many other features.",
        "configs": [
            {
                "name": "allQuery",
                "type": "string",
                "doc": "<p>The text query to send to the server to return all records for the list with no filtering</p>",
                "default": ""
            },
            {
                "name": "autoSelect",
                "type": "boolean",
                "doc": "<p><code>true</code> to automatically highlight the first result gathered by the data store in the dropdown list when it is\nopened. A false value would cause nothing in the list to be highlighted automatically, so\nthe user would have to manually highlight an item before pressing the enter or tab key to\nselect it (unless the value of (typeAhead) were true), or use the mouse to select a value.</p>",
                "default": "true"
            },
            {
                "name": "defaultListConfig",
                "type": "object",
                "doc": "<p>Set of options that will be used as defaults for the user-configured listConfig object.</p>",
                "default": "{emptyText: , loadingText: Loading..., loadingHeight: 70, minWidth: 70, maxHeight: 300, shadow: sides}"
            },
            {
                "name": "delimiter",
                "type": "string",
                "doc": "<p>The character(s) used to separate the display values of multiple selected items when\n<code>multiSelect = true</code>.</p>",
                "default": ", "
            },
            {
                "name": "displayField",
                "type": "string",
                "doc": "<p>The underlying data field name to bind to this ComboBox.</p>",
                "default": "text"
            },
            {
                "name": "forceSelection",
                "type": "boolean",
                "doc": "<p><code>true</code> to restrict the selected value to one of the values in the list, <code>false</code> to allow the user to set\narbitrary text into the field.</p>",
                "default": "false"
            },
            {
                "name": "hiddenDataCls",
                "type": "string",
                "doc": "<p>CSS class used to find the hiddenDataEl</p>",
                "default": "x-hide-display "
            },
            {
                "name": "listConfig",
                "type": "object",
                "doc": "<p>An optional set of configuration properties that will be passed to the Ext.view.BoundList's constructor.\nAny configuration that is valid for BoundList can be included.</p>",
                "default": null
            },
            {
                "name": "minChars",
                "type": "number",
                "doc": "<p>The minimum number of characters the user must type before autocomplete and typeAhead activate (defaults\nto <code>4</code> if <code>queryMode = 'remote'</code> or <code>0</code> if <code>queryMode = 'local'</code>, does not apply if\n<code>editable = false</code>).</p>",
                "default": null
            },
            {
                "name": "multiSelect",
                "type": "boolean",
                "doc": "<p>If set to <code>true</code>, allows the combo field to hold more than one value at a time, and allows selecting multiple\nitems from the dropdown list. The combo's text field will show all selected values separated by the\ndelimiter.</p>",
                "default": "false"
            },
            {
                "name": "pageSize",
                "type": "number",
                "doc": "<p>If greater than <code>0</code>, a Ext.toolbar.Paging is displayed in the footer of the dropdown list and the\nfilter queries will execute with page start and limit\nparameters. Only applies when <code>queryMode = 'remote'</code>.</p>",
                "default": "0"
            },
            {
                "name": "queryDelay",
                "type": "number",
                "doc": "<p>The length of time in milliseconds to delay between the start of typing and sending the query to filter the\ndropdown list (defaults to <code>500</code> if <code>queryMode = 'remote'</code> or <code>10</code> if <code>queryMode = 'local'</code>)</p>",
                "default": null
            },
            {
                "name": "queryMode",
                "type": "string",
                "doc": "<p>The mode in which the ComboBox uses the configured Store.</p>",
                "default": "remote"
            },
            {
                "name": "queryParam",
                "type": "string",
                "doc": "<p>Name of the parameter used by the Store to pass the typed string when the ComboBox is configured with\n<code>queryMode: 'remote'</code>. If explicitly set to a falsy value it will not be sent.</p>",
                "default": "query"
            },
            {
                "name": "selectOnTab",
                "type": "boolean",
                "doc": "<p>Whether the Tab key should select the currently highlighted item.</p>",
                "default": "true"
            },
            {
                "name": "store",
                "type": "ext.data.store/array",
                "doc": "<p>The data source to which this combo is bound.</p>",
                "default": null
            },
            {
                "name": "transform",
                "type": "string/htmlelement/ext.element",
                "doc": "<p>The id, DOM node or Ext.Element of an existing HTML <code>&lt;select&gt;</code> element to convert into a ComboBox. The\ntarget select's options will be used to build the options in the ComboBox dropdown; a configured store\nwill take precedence over this.</p>",
                "default": null
            },
            {
                "name": "triggerAction",
                "type": "string",
                "doc": "<p>The action to execute when the trigger is clicked.</p>",
                "default": "all"
            },
            {
                "name": "triggerCls",
                "type": "string",
                "doc": "<p>An additional CSS class used to style the trigger button. The trigger will always get the triggerBaseCls\nby default and <code>triggerCls</code> will be <strong>appended</strong> if specified.</p>",
                "default": "x-form-arrow-trigger"
            },
            {
                "name": "typeAhead",
                "type": "boolean",
                "doc": "<p><code>true</code> to populate and autoselect the remainder of the text being typed after a configurable delay\n(typeAheadDelay) if it matches a known value.</p>",
                "default": "false"
            },
            {
                "name": "typeAheadDelay",
                "type": "number",
                "doc": "<p>The length of time in milliseconds to wait until the typeahead text is displayed if <code>typeAhead = true</code></p>",
                "default": "250"
            },
            {
                "name": "valueField",
                "type": "string",
                "doc": "<p>The underlying data value name to bind to this ComboBox (defaults to match\nthe value of the displayField config).</p>",
                "default": null
            },
            {
                "name": "valueNotFoundText",
                "type": "string",
                "doc": "<p>When using a name/value combo, if the value passed to setValue is not found in the store, valueNotFoundText will\nbe displayed as the field text if defined. If this default text is used, it means there\nis no value set and no validation will occur on this field.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "beforedeselect",
                "params": "combo(Ext.form.field.ComboBox) record(Ext.data.Record) index(Number) eOpts(Object)",
                "doc": "<p>Fires before the deselected item is removed from the collection</p>"
            },
            {
                "name": "beforequery",
                "params": "queryEvent(Object) eOpts(Object)",
                "doc": "<p>Fires before all queries are processed. Return false to cancel the query or set the queryEvent's cancel\nproperty to true.</p>"
            },
            {
                "name": "beforeselect",
                "params": "combo(Ext.form.field.ComboBox) record(Ext.data.Record) index(Number) eOpts(Object)",
                "doc": "<p>Fires before the selected item is added to the collection</p>"
            },
            {
                "name": "select",
                "params": "combo(Ext.form.field.ComboBox) records(Array) eOpts(Object)",
                "doc": "<p>Fires when at least one list item is selected.</p>"
            }
        ]
    },
    "Ext.form.field.Date": {
        "type": "Ext.form.field.Date",
        "doc": "<p>Provides a date input field with a date picker dropdown and automatic date\nvalidation.",
        "configs": [
            {
                "name": "altFormats",
                "type": "string",
                "doc": "<p>Multiple date formats separated by | to try when parsing a user input value and it does not match the defined\nformat.</p>",
                "default": "m/d/Y|n/j/Y|n/j/y|m/j/y|n/d/y|m/j/Y|n/d/Y|m-d-y|m-d-Y|m/d|m-d|md|mdy|mdY|d|Y-m-d|n-j|n/j"
            },
            {
                "name": "disabledDates",
                "type": "string[]",
                "doc": "<p>An array of dates to disable, as strings. These strings will be used to build a dynamic regular expression so\nthey are very powerful.</p>",
                "default": null
            },
            {
                "name": "disabledDatesText",
                "type": "string",
                "doc": "<p>The tooltip text to display when the date falls on a disabled date.</p>",
                "default": "Disabled"
            },
            {
                "name": "disabledDays",
                "type": "number[]",
                "doc": "<p>An array of days to disable, 0 based.</p>",
                "default": null
            },
            {
                "name": "disabledDaysText",
                "type": "string",
                "doc": "<p>The tooltip to display when the date falls on a disabled day.</p>",
                "default": "Disabled"
            },
            {
                "name": "format",
                "type": "string",
                "doc": "<p>The default date format string which can be overriden for localization support. The format must be valid\naccording to Ext.Date.parse.</p>",
                "default": "m/d/Y"
            },
            {
                "name": "invalidText",
                "type": "string",
                "doc": "<p>The error text to display when the date in the field is invalid.</p>",
                "default": "{0} is not a valid date - it must be in the format {1}"
            },
            {
                "name": "maxText",
                "type": "string",
                "doc": "<p>The error text to display when the date in the cell is after maxValue.</p>",
                "default": "The date in this field must be equal to or before {0}"
            },
            {
                "name": "maxValue",
                "type": "date/string",
                "doc": "<p>The maximum allowed date. Can be either a Javascript date object or a string date in a valid format.</p>",
                "default": null
            },
            {
                "name": "minText",
                "type": "string",
                "doc": "<p>The error text to display when the date in the cell is before minValue.</p>",
                "default": "The date in this field must be equal to or after {0}"
            },
            {
                "name": "minValue",
                "type": "date/string",
                "doc": "<p>The minimum allowed date. Can be either a Javascript date object or a string date in a valid format.</p>",
                "default": null
            },
            {
                "name": "showToday",
                "type": "boolean",
                "doc": "<p>false to hide the footer area of the Date picker containing the Today button and disable the keyboard handler for\nspacebar that selects the current date.</p>",
                "default": "true"
            },
            {
                "name": "startDay",
                "type": "number",
                "doc": "<p>Day index at which the week should begin, 0-based (defaults to Sunday)</p>",
                "default": "0"
            },
            {
                "name": "submitFormat",
                "type": "string",
                "doc": "<p>The date format string which will be submitted to the server. The format must be valid according to Ext.Date.parse (defaults to format).</p>",
                "default": null
            },
            {
                "name": "triggerCls",
                "type": "string",
                "doc": "<p>An additional CSS class used to style the trigger button. The trigger will always get the class 'x-form-trigger'\nand triggerCls will be <strong>appended</strong> if specified (default class displays a calendar icon).</p>",
                "default": "x-form-date-trigger"
            }
        ],
        "events": []
    },
    "Ext.form.field.Display": {
        "type": "Ext.form.field.Display",
        "doc": "<p>A display-only text field which is not validated and not submitted. This is useful for when you want to display a\nvalue from a form's loaded data but do not want to allow the user to edit or submit that\nvalue.",
        "configs": [
            {
                "name": "fieldCls",
                "type": "string",
                "doc": "<p>The default CSS class for the field.</p>",
                "default": "x-form-display-field"
            },
            {
                "name": "htmlEncode",
                "type": "boolean",
                "doc": "<p>false to skip HTML-encoding the text when rendering it. This might be useful if you want to\ninclude tags in the field's innerHTML rather than rendering them as string literals per the default logic.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.form.field.Field": {
        "type": "Ext.form.field.Field",
        "doc": "<p>This mixin provides a common interface for the logical behavior and state of form fields, including:",
        "configs": [
            {
                "name": "disabled",
                "type": "boolean",
                "doc": "<p>True to disable the field. Disabled Fields will not be submitted.</p>",
                "default": "false"
            },
            {
                "name": "name",
                "type": "string",
                "doc": "<p>The name of the field. By default this is used as the parameter name when including the\nfield value in a form submit(). To prevent the field from\nbeing included in the form submit, set submitValue to false.</p>",
                "default": null
            },
            {
                "name": "submitValue",
                "type": "boolean",
                "doc": "<p>Setting this to false will prevent the field from being submitted even when it is\nnot disabled.</p>",
                "default": "true"
            },
            {
                "name": "validateOnChange",
                "type": "boolean",
                "doc": "<p>Specifies whether this field should be validated immediately whenever a change in its value is detected.\nIf the validation results in a change in the field's validity, a validitychange event will be\nfired. This allows the field to show feedback about the validity of its contents immediately as the user is\ntyping.</p>",
                "default": "true"
            },
            {
                "name": "value",
                "type": "object",
                "doc": "<p>A value to initialize this field with.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "change",
                "params": "this(Ext.form.field.Field) newValue(Object) oldValue(Object) eOpts(Object)",
                "doc": "<p>Fires when a user-initiated change is detected in the value of the field.</p>"
            },
            {
                "name": "dirtychange",
                "params": "this(Ext.form.field.Field) isDirty(Boolean) eOpts(Object)",
                "doc": "<p>Fires when a change in the field's isDirty state is detected.</p>"
            },
            {
                "name": "validitychange",
                "params": "this(Ext.form.field.Field) isValid(Boolean) eOpts(Object)",
                "doc": "<p>Fires when a change in the field's validity is detected.</p>"
            }
        ]
    },
    "Ext.form.field.File": {
        "type": "Ext.form.field.File",
        "doc": "<p>A file upload field.\nIt uses a hidden file input element behind the scenes to allow user selection of a file and to\nperform the actual upload during form submit.",
        "configs": [
            {
                "name": "buttonConfig",
                "type": "object",
                "doc": "<p>A standard Ext.button.Button config object.</p>",
                "default": null
            },
            {
                "name": "buttonMargin",
                "type": "number",
                "doc": "<p>The number of pixels of space reserved between the button and the text field. Note that this only\napplies if buttonOnly = false.</p>",
                "default": "3"
            },
            {
                "name": "buttonOnly",
                "type": "boolean",
                "doc": "<p>True to display the file upload field as a button with no visible text field. If true, all\ninherited Text members will still be available.</p>",
                "default": "false"
            },
            {
                "name": "buttonText",
                "type": "string",
                "doc": "<p>The button text to display on the upload button. Note that if you supply a value for\nbuttonConfig, the buttonConfig.text value will be used instead if available.</p>",
                "default": "Browse..."
            },
            {
                "name": "fieldBodyCls",
                "type": "string",
                "doc": "<p>An extra CSS class to be applied to the body content element in addition to fieldBodyCls.</p>",
                "default": "x-form-file-wrap"
            },
            {
                "name": "readOnly",
                "type": "boolean",
                "doc": "<p>Unlike with other form fields, the readOnly config defaults to true in File field.</p>",
                "default": "true"
            }
        ],
        "events": [
            {
                "name": "change",
                "params": "this(Ext.ux.form.FileUploadField) value(String) eOpts(Object)",
                "doc": "<p>Fires when the underlying file input field's value has changed from the user selecting a new file from the system\nfile selection dialog.</p>"
            }
        ]
    },
    "Ext.form.field.Hidden": {
        "type": "Ext.form.field.Hidden",
        "doc": "<p>A basic hidden field for storing hidden values in forms that need to be passed in the form submit.",
        "configs": [],
        "events": []
    },
    "Ext.form.field.HtmlEditor": {
        "type": "Ext.form.field.HtmlEditor",
        "doc": "<p>Provides a lightweight HTML Editor component. Some toolbar features are not supported by Safari and will be\nautomatically hidden when needed. These are noted in the config options where appropriate.",
        "configs": [
            {
                "name": "createLinkText",
                "type": "string",
                "doc": "<p>The default text for the create link prompt</p>",
                "default": "Please enter the URL for the link:"
            },
            {
                "name": "defaultLinkValue",
                "type": "string",
                "doc": "<p>The default value for the create link prompt</p>",
                "default": "http://"
            },
            {
                "name": "defaultValue",
                "type": "string",
                "doc": "<p>A default value to be put into the editor to resolve focus issues (defaults to (Non-breaking space) in Opera\nand IE6, ​(Zero-width space) in all other browsers).</p>",
                "default": null
            },
            {
                "name": "enableAlignments",
                "type": "boolean",
                "doc": "<p>Enable the left, center, right alignment buttons</p>",
                "default": "true"
            },
            {
                "name": "enableColors",
                "type": "boolean",
                "doc": "<p>Enable the fore/highlight color buttons</p>",
                "default": "true"
            },
            {
                "name": "enableFont",
                "type": "boolean",
                "doc": "<p>Enable font selection. Not available in Safari.</p>",
                "default": "true"
            },
            {
                "name": "enableFontSize",
                "type": "boolean",
                "doc": "<p>Enable the increase/decrease font size buttons</p>",
                "default": "true"
            },
            {
                "name": "enableFormat",
                "type": "boolean",
                "doc": "<p>Enable the bold, italic and underline buttons</p>",
                "default": "true"
            },
            {
                "name": "enableLinks",
                "type": "boolean",
                "doc": "<p>Enable the create link button. Not available in Safari.</p>",
                "default": "true"
            },
            {
                "name": "enableLists",
                "type": "boolean",
                "doc": "<p>Enable the bullet and numbered list buttons. Not available in Safari.</p>",
                "default": "true"
            },
            {
                "name": "enableSourceEdit",
                "type": "boolean",
                "doc": "<p>Enable the switch to source edit button. Not available in Safari.</p>",
                "default": "true"
            },
            {
                "name": "fontFamilies",
                "type": "string[]",
                "doc": "<p>An array of available font families</p>",
                "default": "[Arial, Courier New, Tahoma, Times New Roman, Verdana]"
            }
        ],
        "events": [
            {
                "name": "activate",
                "params": "this(Ext.form.field.HtmlEditor) eOpts(Object)",
                "doc": "<p>Fires when the editor is first receives the focus. Any insertion must wait until after this event.</p>"
            },
            {
                "name": "beforepush",
                "params": "this(Ext.form.field.HtmlEditor) html(String) eOpts(Object)",
                "doc": "<p>Fires before the iframe editor is updated with content from the textarea. Return false to cancel the\npush.</p>"
            },
            {
                "name": "beforesync",
                "params": "this(Ext.form.field.HtmlEditor) html(String) eOpts(Object)",
                "doc": "<p>Fires before the textarea is updated with content from the editor iframe. Return false to cancel the\nsync.</p>"
            },
            {
                "name": "editmodechange",
                "params": "this(Ext.form.field.HtmlEditor) sourceEdit(Boolean) eOpts(Object)",
                "doc": "<p>Fires when the editor switches edit modes</p>"
            },
            {
                "name": "initialize",
                "params": "this(Ext.form.field.HtmlEditor) eOpts(Object)",
                "doc": "<p>Fires when the editor is fully initialized (including the iframe)</p>"
            },
            {
                "name": "push",
                "params": "this(Ext.form.field.HtmlEditor) html(String) eOpts(Object)",
                "doc": "<p>Fires when the iframe editor is updated with content from the textarea.</p>"
            },
            {
                "name": "sync",
                "params": "this(Ext.form.field.HtmlEditor) html(String) eOpts(Object)",
                "doc": "<p>Fires when the textarea is updated with content from the editor iframe.</p>"
            }
        ]
    },
    "Ext.form.field.Number": {
        "type": "Ext.form.field.Number",
        "doc": "<p>A numeric text field that provides automatic keystroke filtering to disallow non-numeric characters,\nand numeric validation to limit the value to a range of valid numbers.",
        "configs": [
            {
                "name": "allowDecimals",
                "type": "boolean",
                "doc": "<p>False to disallow decimal values</p>",
                "default": "true"
            },
            {
                "name": "autoStripChars",
                "type": "boolean",
                "doc": "<p>True to automatically strip not allowed characters from the field.</p>",
                "default": "false"
            },
            {
                "name": "baseChars",
                "type": "string",
                "doc": "<p>The base set of characters to evaluate as valid numbers.</p>",
                "default": "0123456789"
            },
            {
                "name": "decimalPrecision",
                "type": "number",
                "doc": "<p>The maximum precision to display after the decimal separator</p>",
                "default": "2"
            },
            {
                "name": "decimalSeparator",
                "type": "string",
                "doc": "<p>Character(s) to allow as the decimal separator</p>",
                "default": "."
            },
            {
                "name": "maxText",
                "type": "string",
                "doc": "<p>Error text to display if the maximum value validation fails.</p>",
                "default": "The maximum value for this field is {0}"
            },
            {
                "name": "maxValue",
                "type": "number",
                "doc": "<p>The maximum allowed value (defaults to Number.MAX_VALUE). Will be used by the field's validation logic, and for\nenabling/disabling the up spinner button.</p>",
                "default": null
            },
            {
                "name": "minText",
                "type": "string",
                "doc": "<p>Error text to display if the minimum value validation fails.</p>",
                "default": "The minimum value for this field is {0}"
            },
            {
                "name": "minValue",
                "type": "number",
                "doc": "<p>The minimum allowed value (defaults to Number.NEGATIVE_INFINITY). Will be used by the field's validation logic,\nand for enabling/disabling the down spinner button.</p>",
                "default": null
            },
            {
                "name": "nanText",
                "type": "string",
                "doc": "<p>Error text to display if the value is not a valid number. For example, this can happen if a valid character like\n'.' or '-' is left in the field with no number.</p>",
                "default": "{0} is not a valid number"
            },
            {
                "name": "negativeText",
                "type": "string",
                "doc": "<p>Error text to display if the value is negative and minValue is set to 0. This is used instead of the\nminText in that circumstance only.</p>",
                "default": "The value cannot be negative"
            },
            {
                "name": "step",
                "type": "number",
                "doc": "<p>Specifies a numeric interval by which the field's value will be incremented or decremented when the user invokes\nthe spinner.</p>",
                "default": "1"
            }
        ],
        "events": []
    },
    "Ext.form.field.Picker": {
        "type": "Ext.form.field.Picker",
        "doc": "<p>An abstract class for fields that have a single trigger which opens a picker popup below the field, e.g. a combobox\nmenu list or a date picker. It provides a base implementation for toggling the picker's visibility when the trigger\nis clicked, as well as keyboard navigation and some basic events. Sizing and alignment of the picker can be\ncontrolled via the matchFieldWidth and pickerAlign/pickerOffset config properties\nrespectively.",
        "configs": [
            {
                "name": "editable",
                "type": "boolean",
                "doc": "<p>False to prevent the user from typing text directly into the field; the field can only have its value set via\nselecting a value from the picker. In this state, the picker can also be opened by clicking directly on the input\nfield itself.</p>",
                "default": "true"
            },
            {
                "name": "matchFieldWidth",
                "type": "boolean",
                "doc": "<p>Whether the picker dropdown's width should be explicitly set to match the width of the field. Defaults to true.</p>",
                "default": "true"
            },
            {
                "name": "openCls",
                "type": "string",
                "doc": "<p>A class to be added to the field's bodyEl element when the picker is opened.\nDefaults to 'x-pickerfield-open'.</p>",
                "default": "x-pickerfield-open"
            },
            {
                "name": "pickerAlign",
                "type": "string",
                "doc": "<p>The alignment position with which to align the picker. Defaults to tl-bl?</p>",
                "default": "tl-bl?"
            },
            {
                "name": "pickerOffset",
                "type": "number[]",
                "doc": "<p>An offset [x,y] to use in addition to the pickerAlign when positioning the picker.\nDefaults to undefined.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "collapse",
                "params": "field(Ext.form.field.Picker) eOpts(Object)",
                "doc": "<p>Fires when the field's picker is collapsed.</p>"
            },
            {
                "name": "expand",
                "params": "field(Ext.form.field.Picker) eOpts(Object)",
                "doc": "<p>Fires when the field's picker is expanded.</p>"
            },
            {
                "name": "select",
                "params": "field(Ext.form.field.Picker) value(Object) eOpts(Object)",
                "doc": "<p>Fires when a value is selected via the picker.</p>"
            }
        ]
    },
    "Ext.form.field.Radio": {
        "type": "Ext.form.field.Radio",
        "doc": "<p>Single radio field. Similar to checkbox, but automatically handles making sure only one radio is checked\nat a time within a group of radios with the same name.",
        "configs": [],
        "events": []
    },
    "Ext.form.field.Spinner": {
        "type": "Ext.form.field.Spinner",
        "doc": "<p>A field with a pair of up/down spinner buttons. This class is not normally instantiated directly,\ninstead it is subclassed and the onSpinUp and onSpinDown methods are implemented\nto handle when the buttons are clicked. A good example of this is the Ext.form.field.Number\nfield which uses the spinner to increment and decrement the field's value by its\nstep config value.",
        "configs": [
            {
                "name": "keyNavEnabled",
                "type": "boolean",
                "doc": "<p>Specifies whether the up and down arrow keys should trigger spinning up and down. Defaults to true.</p>",
                "default": "true"
            },
            {
                "name": "mouseWheelEnabled",
                "type": "boolean",
                "doc": "<p>Specifies whether the mouse wheel should trigger spinning up and down while the field has focus.\nDefaults to true.</p>",
                "default": "true"
            },
            {
                "name": "repeatTriggerClick",
                "type": "boolean",
                "doc": "<p>Whether a click repeater should be attached to the spinner buttons.\nDefaults to true.</p>",
                "default": "true"
            },
            {
                "name": "spinDownEnabled",
                "type": "boolean",
                "doc": "<p>Specifies whether the down spinner button is enabled. Defaults to true. To change this after the component is\ncreated, use the setSpinDownEnabled method.</p>",
                "default": "true"
            },
            {
                "name": "spinUpEnabled",
                "type": "boolean",
                "doc": "<p>Specifies whether the up spinner button is enabled. Defaults to true. To change this after the component is\ncreated, use the setSpinUpEnabled method.</p>",
                "default": "true"
            }
        ],
        "events": [
            {
                "name": "spin",
                "params": "this(Ext.form.field.Spinner) direction(String) eOpts(Object)",
                "doc": "<p>Fires when the spinner is made to spin up or down.</p>"
            },
            {
                "name": "spindown",
                "params": "this(Ext.form.field.Spinner) eOpts(Object)",
                "doc": "<p>Fires when the spinner is made to spin down.</p>"
            },
            {
                "name": "spinup",
                "params": "this(Ext.form.field.Spinner) eOpts(Object)",
                "doc": "<p>Fires when the spinner is made to spin up.</p>"
            }
        ]
    },
    "Ext.form.field.Text": {
        "type": "Ext.form.field.Text",
        "doc": "<p>A basic text field.  Can be used as a direct replacement for traditional text inputs,\nor as the base class for more sophisticated input controls (like Ext.form.field.TextArea\nand Ext.form.field.ComboBox).",
        "configs": [
            {
                "name": "allowBlank",
                "type": "boolean",
                "doc": "<p>Specify false to validate that the value's length is > 0</p>",
                "default": "true"
            },
            {
                "name": "blankText",
                "type": "string",
                "doc": "<p>The error text to display if the <strong>allowBlank</strong> validation fails</p>",
                "default": "This field is required"
            },
            {
                "name": "disableKeyFilter",
                "type": "boolean",
                "doc": "<p>Specify true to disable input keystroke filtering</p>",
                "default": "false"
            },
            {
                "name": "emptyCls",
                "type": "string",
                "doc": "<p>The CSS class to apply to an empty field to style the <strong>emptyText</strong>.\nThis class is automatically added and removed as needed depending on the current field value.</p>",
                "default": "x-form-empty-field"
            },
            {
                "name": "emptyText",
                "type": "string",
                "doc": "<p>The default text to place into an empty field.</p>",
                "default": null
            },
            {
                "name": "enableKeyEvents",
                "type": "boolean",
                "doc": "<p>true to enable the proxying of key events for the HTML input field</p>",
                "default": "false"
            },
            {
                "name": "enforceMaxLength",
                "type": "boolean",
                "doc": "<p>True to set the maxLength property on the underlying input field. Defaults to false</p>",
                "default": null
            },
            {
                "name": "grow",
                "type": "boolean",
                "doc": "<p>true if this field should automatically grow and shrink to its content</p>",
                "default": "false"
            },
            {
                "name": "growAppend",
                "type": "string",
                "doc": "<p>A string that will be appended to the field's current value for the purposes of calculating the target field\nsize. Only used when the grow config is true. Defaults to a single capital W (the widest character in\ncommon fonts) to leave enough space for the next typed character and avoid the field value shifting before the\nwidth is adjusted.</p>",
                "default": "W"
            },
            {
                "name": "growMax",
                "type": "number",
                "doc": "<p>The maximum width to allow when <code>grow = true</code></p>",
                "default": "800"
            },
            {
                "name": "growMin",
                "type": "number",
                "doc": "<p>The minimum width to allow when <code>grow = true</code></p>",
                "default": "30"
            },
            {
                "name": "maskRe",
                "type": "regexp",
                "doc": "<p>An input mask regular expression that will be used to filter keystrokes (character being\ntyped) that do not match.\nNote: It dose not filter characters already in the input.</p>",
                "default": null
            },
            {
                "name": "maxLength",
                "type": "number",
                "doc": "<p>Maximum input field length allowed by validation (defaults to Number.MAX_VALUE). This behavior is intended to\nprovide instant feedback to the user by improving usability to allow pasting and editing or overtyping and back\ntracking. To restrict the maximum number of characters that can be entered into the field use the <strong>enforceMaxLength</strong> option.</p>",
                "default": null
            },
            {
                "name": "maxLengthText",
                "type": "string",
                "doc": "<p>Error text to display if the <strong>maximum length</strong> validation fails</p>",
                "default": "The maximum length for this field is {0}"
            },
            {
                "name": "minLength",
                "type": "number",
                "doc": "<p>Minimum input field length required</p>",
                "default": "0"
            },
            {
                "name": "minLengthText",
                "type": "string",
                "doc": "<p>Error text to display if the <strong>minimum length</strong> validation fails.</p>",
                "default": "The minimum length for this field is {0}"
            },
            {
                "name": "regex",
                "type": "regexp",
                "doc": "<p>A JavaScript RegExp object to be tested against the field value during validation.\nIf the test fails, the field will be marked invalid using\neither <b><tt>regexText</tt></b> or <b><tt>invalidText</tt></b>.</p>",
                "default": null
            },
            {
                "name": "regexText",
                "type": "string",
                "doc": "<p>The error text to display if <strong>regex</strong> is used and the test fails during validation</p>",
                "default": ""
            },
            {
                "name": "selectOnFocus",
                "type": "boolean",
                "doc": "<p>true to automatically select any existing field text when the field receives input focus</p>",
                "default": "false"
            },
            {
                "name": "size",
                "type": "number",
                "doc": "<p>An initial value for the 'size' attribute on the text input element. This is only used if the field has no\nconfigured width and is not given a width by its container's layout. Defaults to 20.</p>",
                "default": "20"
            },
            {
                "name": "stripCharsRe",
                "type": "regexp",
                "doc": "<p>A JavaScript RegExp object used to strip unwanted content from the value\nbefore validation. If <tt>stripCharsRe</tt> is specified,\nevery character matching <tt>stripCharsRe</tt> will be removed before fed to validation.\nThis does not change the value of the field.</p>",
                "default": null
            },
            {
                "name": "vtype",
                "type": "string",
                "doc": "<p>A validation type name as defined in Ext.form.field.VTypes</p>",
                "default": null
            },
            {
                "name": "vtypeText",
                "type": "string",
                "doc": "<p>A custom error message to display in place of the default message provided for the <strong><code>vtype</code></strong> currently\nset for this field. <strong>Note</strong>: only applies if <strong><code>vtype</code></strong> is set, else ignored.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "autosize",
                "params": "this(Ext.form.field.Text) width(Number) eOpts(Object)",
                "doc": "<p>Fires when the <strong>autoSize</strong> function is triggered and the field is resized according to the\ngrow/growMin/growMax configs as a result. This event provides a hook for the\ndeveloper to apply additional logic at runtime to resize the field if needed.</p>"
            },
            {
                "name": "keydown",
                "params": "this(Ext.form.field.Text) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Keydown input field event. This event only fires if <strong>enableKeyEvents</strong> is set to true.</p>"
            },
            {
                "name": "keypress",
                "params": "this(Ext.form.field.Text) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Keypress input field event. This event only fires if <strong>enableKeyEvents</strong> is set to true.</p>"
            },
            {
                "name": "keyup",
                "params": "this(Ext.form.field.Text) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Keyup input field event. This event only fires if <strong>enableKeyEvents</strong> is set to true.</p>"
            }
        ]
    },
    "Ext.form.field.TextArea": {
        "type": "Ext.form.field.TextArea",
        "doc": "<p>This class creates a multiline text field, which can be used as a direct replacement for traditional\ntextarea fields. In addition, it supports automatically growing the height of the textarea to\nfit its content.",
        "configs": [
            {
                "name": "cols",
                "type": "number",
                "doc": "<p>An initial value for the 'cols' attribute on the textarea element. This is only used if the component has no\nconfigured width and is not given a width by its container's layout.</p>",
                "default": null
            },
            {
                "name": "enterIsSpecial",
                "type": "boolean",
                "doc": "<p>True if you want the enter key to be classed as a special key. Special keys are generally navigation keys\n(arrows, space, enter). Setting the config property to true would mean that you could not insert returns into the\ntextarea.</p>",
                "default": "false"
            },
            {
                "name": "growAppend",
                "type": "string",
                "doc": "<p>A string that will be appended to the field's current value for the purposes of calculating the target field\nsize. Only used when the grow config is true. Defaults to a newline for TextArea to ensure there is\nalways a space below the current line.</p>",
                "default": "\\n-"
            },
            {
                "name": "growMax",
                "type": "number",
                "doc": "<p>The maximum height to allow when grow=true</p>",
                "default": "1000"
            },
            {
                "name": "growMin",
                "type": "number",
                "doc": "<p>The minimum height to allow when grow=true</p>",
                "default": "60"
            },
            {
                "name": "preventScrollbars",
                "type": "boolean",
                "doc": "<p>true to prevent scrollbars from appearing regardless of how much text is in the field. This option is only\nrelevant when grow is true. Equivalent to setting overflow: hidden.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.form.field.Time": {
        "type": "Ext.form.field.Time",
        "doc": "<p>Provides a time input field with a time dropdown and automatic time validation.",
        "configs": [
            {
                "name": "altFormats",
                "type": "string",
                "doc": "<p>Multiple date formats separated by | to try when parsing a user input value and it doesn't match the defined\nformat.</p>",
                "default": "g:ia|g:iA|g:i a|g:i A|h:i|g:i|H:i|ga|ha|gA|h a|g a|g A|gi|hi|gia|hia|g|H|gi a|hi a|giA|hiA|gi A|hi A"
            },
            {
                "name": "format",
                "type": "string",
                "doc": "<p>The default time format string which can be overriden for localization support. The format must be valid\naccording to Ext.Date.parse (defaults to 'g:i A', e.g., '3:15 PM'). For 24-hour time format try 'H:i'\ninstead.</p>",
                "default": "g:i A"
            },
            {
                "name": "increment",
                "type": "number",
                "doc": "<p>The number of minutes between each time value in the list.</p>",
                "default": "15"
            },
            {
                "name": "invalidText",
                "type": "string",
                "doc": "<p>The error text to display when the time in the field is invalid.</p>",
                "default": "{0} is not a valid time"
            },
            {
                "name": "maxText",
                "type": "string",
                "doc": "<p>The error text to display when the entered time is after maxValue.</p>",
                "default": "The time in this field must be equal to or before {0}"
            },
            {
                "name": "maxValue",
                "type": "date/string",
                "doc": "<p>The maximum allowed time. Can be either a Javascript date object with a valid time value or a string time in a\nvalid format -- see format and altFormats.</p>",
                "default": null
            },
            {
                "name": "minText",
                "type": "string",
                "doc": "<p>The error text to display when the entered time is before minValue.</p>",
                "default": "The time in this field must be equal to or after {0}"
            },
            {
                "name": "minValue",
                "type": "date/string",
                "doc": "<p>The minimum allowed time. Can be either a Javascript date object with a valid time value or a string time in a\nvalid format -- see format and altFormats.</p>",
                "default": null
            },
            {
                "name": "pickerMaxHeight",
                "type": "number",
                "doc": "<p>The maximum height of the Ext.picker.Time dropdown.</p>",
                "default": "300"
            },
            {
                "name": "selectOnTab",
                "type": "boolean",
                "doc": "<p>Whether the Tab key should select the currently highlighted item.</p>",
                "default": "true"
            },
            {
                "name": "submitFormat",
                "type": "string",
                "doc": "<p>The date format string which will be submitted to the server. The format must be valid according to Ext.Date.parse (defaults to format).</p>",
                "default": null
            },
            {
                "name": "triggerCls",
                "type": "string",
                "doc": "<p>An additional CSS class used to style the trigger button. The trigger will always get the triggerBaseCls\nby default and triggerCls will be <strong>appended</strong> if specified. Defaults to 'x-form-time-trigger' for the Time field\ntrigger.</p>",
                "default": "x-form-time-trigger"
            }
        ],
        "events": []
    },
    "Ext.form.field.Trigger": {
        "type": "Ext.form.field.Trigger",
        "doc": "<p>Provides a convenient wrapper for TextFields that adds a clickable trigger button (looks like a combobox by default).",
        "configs": [
            {
                "name": "editable",
                "type": "boolean",
                "doc": "<p>false to prevent the user from typing text directly into the field; the field can only have its value set via an\naction invoked by the trigger.</p>",
                "default": "true"
            },
            {
                "name": "hideTrigger",
                "type": "boolean",
                "doc": "<p>true to hide the trigger element and display only the base text field</p>",
                "default": "false"
            },
            {
                "name": "readOnly",
                "type": "boolean",
                "doc": "<p>true to prevent the user from changing the field, and hides the trigger. Supercedes the editable and hideTrigger\noptions if the value is true.</p>",
                "default": "false"
            },
            {
                "name": "repeatTriggerClick",
                "type": "boolean",
                "doc": "<p>true to attach a click repeater to the trigger.</p>",
                "default": "false"
            },
            {
                "name": "selectOnFocus",
                "type": "boolean",
                "doc": "<p>true to select any existing text in the field immediately on focus. Only applies when\neditable = true</p>",
                "default": "false"
            },
            {
                "name": "triggerBaseCls",
                "type": "string",
                "doc": "<p>The base CSS class that is always added to the trigger button. The triggerCls will be appended in\naddition to this class.</p>",
                "default": "x-form-trigger"
            },
            {
                "name": "triggerCls",
                "type": "string",
                "doc": "<p>An additional CSS class used to style the trigger button. The trigger will always get the triggerBaseCls\nby default and triggerCls will be <strong>appended</strong> if specified.</p>",
                "default": null
            },
            {
                "name": "triggerWrapCls",
                "type": "string",
                "doc": "<p>The CSS class that is added to the div wrapping the trigger button(s).</p>",
                "default": "x-form-trigger-wrap"
            }
        ],
        "events": []
    },
    "Ext.form.field.VTypes": {
        "type": "Ext.form.field.VTypes",
        "doc": "<p>This is a singleton object which contains a set of commonly used field validation functions\nand provides a mechanism for creating reusable custom field validations.\nThe following field validation functions are provided out of the box:",
        "configs": [],
        "events": []
    },
    "Ext.form.FieldAncestor": {
        "type": "Ext.form.FieldAncestor",
        "doc": "<p>A mixin for Ext.container.Container components that are likely to have form fields in their\nitems subtree. Adds the following capabilities:",
        "configs": [
            {
                "name": "fieldDefaults",
                "type": "object",
                "doc": "<p>If specified, the properties in this object are used as default config values for each\nExt.form.Labelable instance (e.g. Ext.form.field.Base or Ext.form.FieldContainer)\nthat is added as a descendant of this container. Corresponding values specified in an individual field's\nown configuration, or from the defaults config of its parent container,\nwill take precedence. See the documentation for Ext.form.Labelable to see what config\noptions may be specified in the <tt>fieldDefaults</tt>.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "fielderrorchange",
                "params": "this(Ext.form.FieldAncestor) The(Ext.form.Labelable) error(String) eOpts(Object)",
                "doc": "<p>Fires when the active error message is changed for any one of the Ext.form.Labelable\ninstances within this container.</p>"
            },
            {
                "name": "fieldvaliditychange",
                "params": "this(Ext.form.FieldAncestor) The(Ext.form.Labelable) isValid(String) eOpts(Object)",
                "doc": "<p>Fires when the validity state of any one of the Ext.form.field.Field instances within this\ncontainer changes.</p>"
            }
        ]
    },
    "Ext.form.FieldContainer": {
        "type": "Ext.form.FieldContainer",
        "doc": "<p>FieldContainer is a derivation of Container that implements the\nLabelable mixin. This allows it to be configured so that it is rendered with\na field label and optional error message around its sub-items.</p>",
        "configs": [
            {
                "name": "combineErrors",
                "type": "boolean",
                "doc": "<p>If set to true, the field container will automatically combine and display the validation errors from\nall the fields it contains as a single error on the container, according to the configured\nmsgTarget. Defaults to false.</p>",
                "default": "false"
            },
            {
                "name": "combineLabels",
                "type": "boolean",
                "doc": "<p>If set to true, and there is no defined fieldLabel, the field container will automatically\ngenerate its label by combining the labels of all the fields it contains. Defaults to false.</p>",
                "default": "false"
            },
            {
                "name": "labelConnector",
                "type": "string",
                "doc": "<p>The string to use when joining the labels of individual sub-fields, when combineLabels is\nset to true. Defaults to ', '.</p>",
                "default": ", "
            }
        ],
        "events": []
    },
    "Ext.form.FieldSet": {
        "type": "Ext.form.FieldSet",
        "doc": "<p>A container for grouping sets of fields, rendered as a HTML <code>fieldset</code> element. The title\nconfig will be rendered as the fieldset's <code>legend</code>.",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class applied to the fieldset.</p>",
                "default": "x-fieldset"
            },
            {
                "name": "checkboxName",
                "type": "string",
                "doc": "<p>The name to assign to the fieldset's checkbox if checkboxToggle = true\n(defaults to '[fieldset id]-checkbox').</p>",
                "default": null
            },
            {
                "name": "checkboxToggle",
                "type": "boolean",
                "doc": "<p>Set to true to render a checkbox into the fieldset frame just in front of the legend to expand/collapse the\nfieldset when the checkbox is toggled.. This checkbox will be included in form submits using\nthe checkboxName.</p>",
                "default": "false"
            },
            {
                "name": "collapsed",
                "type": "boolean",
                "doc": "<p>Set to true to render the fieldset as collapsed by default. If checkboxToggle is specified, the checkbox\nwill also be unchecked by default.</p>",
                "default": "false"
            },
            {
                "name": "collapsible",
                "type": "boolean",
                "doc": "<p>Set to true to make the fieldset collapsible and have the expand/collapse toggle button automatically rendered\ninto the legend element, false to keep the fieldset statically sized with no collapse button.\nAnother option is to configure checkboxToggle. Use the collapsed config to collapse the\nfieldset by default.</p>",
                "default": "false"
            },
            {
                "name": "layout",
                "type": "string",
                "doc": "<p>The Ext.container.Container.layout for the fieldset's immediate child items.</p>",
                "default": "anchor"
            },
            {
                "name": "title",
                "type": "string",
                "doc": "<p>A title to be displayed in the fieldset's legend. May contain HTML markup.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.form.Label": {
        "type": "Ext.form.Label",
        "doc": "<p>Produces a standalone <code>&lt;label /&gt;</code> element which can be inserted into a form and be associated with a field\nin that form using the forId property.",
        "configs": [
            {
                "name": "forId",
                "type": "string",
                "doc": "<p>The id of the input element to which this label will be bound via the standard HTML 'for'\nattribute. If not specified, the attribute will not be added to the label. In most cases you will be\nassociating the label with a Ext.form.field.Base component, so you should make sure this matches\nthe inputId of that field.</p>",
                "default": null
            },
            {
                "name": "html",
                "type": "string",
                "doc": "<p>An HTML fragment that will be used as the label's innerHTML.\nNote that if text is specified it will take precedence and this value will be ignored.</p>",
                "default": ""
            },
            {
                "name": "text",
                "type": "string",
                "doc": "<p>The plain text to display within the label. If you need to include HTML\ntags within the label's innerHTML, use the html config instead.</p>",
                "default": ""
            }
        ],
        "events": []
    },
    "Ext.form.Labelable": {
        "type": "Ext.form.Labelable",
        "doc": "<p>A mixin which allows a component to be configured and decorated with a label and/or error message as is\ncommon for form fields. This is used by e.g. Ext.form.field.Base and Ext.form.FieldContainer\nto let them be managed by the Field layout.",
        "configs": [
            {
                "name": "activeError",
                "type": "string",
                "doc": "<p>If specified, then the component will be displayed with this value as its active error when\nfirst rendered. Use setActiveError or unsetActiveError to\nchange it after component creation.</p>",
                "default": null
            },
            {
                "name": "activeErrorsTpl",
                "type": "ext.xtemplate",
                "doc": "<p>The template used to format the Array of error messages passed to setActiveErrors\ninto a single HTML string. By default this renders each message as an item in an unordered list.</p>",
                "default": "[<tpl if=errors && errors.length>, <ul><tpl for=errors><li<tpl if=xindex == xcount> class=last</tpl>>{.}</li></tpl></ul>, </tpl>]"
            },
            {
                "name": "autoFitErrors",
                "type": "boolean",
                "doc": "<p>Whether to adjust the component's body area to make room for 'side' or 'under'\nerror messages.</p>",
                "default": "true"
            },
            {
                "name": "baseBodyCls",
                "type": "string",
                "doc": "<p>The CSS class to be applied to the body content element.</p>",
                "default": "x-form-item-body"
            },
            {
                "name": "clearCls",
                "type": "string",
                "doc": "<p>The CSS class to be applied to the special clearing div rendered directly after the field\ncontents wrapper to provide field clearing.</p>",
                "default": "x-clear"
            },
            {
                "name": "errorMsgCls",
                "type": "string",
                "doc": "<p>The CSS class to be applied to the error message element.</p>",
                "default": "x-form-error-msg"
            },
            {
                "name": "fieldBodyCls",
                "type": "string",
                "doc": "<p>An extra CSS class to be applied to the body content element in addition to fieldBodyCls.</p>",
                "default": ""
            },
            {
                "name": "fieldLabel",
                "type": "string",
                "doc": "<p>The label for the field. It gets appended with the labelSeparator, and its position\nand sizing is determined by the labelAlign, labelWidth, and labelPad\nconfigs.</p>",
                "default": "undefined"
            },
            {
                "name": "formItemCls",
                "type": "string",
                "doc": "<p>A CSS class to be applied to the outermost element to denote that it is participating in the form\nfield layout.</p>",
                "default": "x-form-item"
            },
            {
                "name": "hideEmptyLabel",
                "type": "boolean",
                "doc": "<p>When set to <tt>true</tt>, the label element (fieldLabel and labelSeparator) will be\nautomatically hidden if the fieldLabel is empty. Setting this to <tt>false</tt> will cause the empty\nlabel element to be rendered and space to be reserved for it; this is useful if you want a field without a label\nto line up with other labeled fields in the same form.</p>",
                "default": "true"
            },
            {
                "name": "hideLabel",
                "type": "boolean",
                "doc": "<p>Set to true to completely hide the label element (fieldLabel and labelSeparator).\nAlso see hideEmptyLabel, which controls whether space will be reserved for an empty fieldLabel.</p>",
                "default": "false"
            },
            {
                "name": "invalidCls",
                "type": "string",
                "doc": "<p>The CSS class to use when marking the component invalid.</p>",
                "default": "x-form-invalid"
            },
            {
                "name": "labelAlign",
                "type": "string",
                "doc": "<p>Controls the position and alignment of the fieldLabel.</p>",
                "default": "left"
            },
            {
                "name": "labelCls",
                "type": "string",
                "doc": "<p>The CSS class to be applied to the label element.\nThis (single) CSS class is used to formulate the renderSelector and drives the field\nlayout where it is concatenated with a hyphen ('-') and labelAlign. To add\nadditional classes, use labelClsExtra.</p>",
                "default": "x-form-item-label"
            },
            {
                "name": "labelClsExtra",
                "type": "string",
                "doc": "<p>An optional string of one or more additional CSS classes to add to the label element.\nDefaults to empty.</p>",
                "default": null
            },
            {
                "name": "labelPad",
                "type": "number",
                "doc": "<p>The amount of space in pixels between the fieldLabel and the input field.</p>",
                "default": "5"
            },
            {
                "name": "labelSeparator",
                "type": "string",
                "doc": "<p>Character(s) to be inserted at the end of the label text.</p>",
                "default": ":"
            },
            {
                "name": "labelStyle",
                "type": "string",
                "doc": "<p>A CSS style specification string to apply directly to this field's label.</p>",
                "default": null
            },
            {
                "name": "labelWidth",
                "type": "number",
                "doc": "<p>The width of the fieldLabel in pixels. Only applicable if the labelAlign is set\nto left or right.</p>",
                "default": "100"
            },
            {
                "name": "labelableRenderTpl",
                "type": "string/string[]/ext.xtemplate",
                "doc": "<p>The rendering template for the field decorations. Component classes using this mixin should include\nlogic to use this as their renderTpl, and implement the\ngetSubTplMarkup method to generate the field body content.</p>",
                "default": "[<tpl if=!hideLabel && !(!fieldLabel && hideEmptyLabel)>, <label id={id}-labelEl<tpl if=inputId> for={inputId}</tpl> class={labelCls}, <tpl if=labelStyle> style={labelStyle}</tpl>>, <tpl if=fieldLabel>{fieldLabel}{labelSeparator}</tpl>, </label>, </tpl>, <div class={baseBodyCls} {fieldBodyCls} id={id}-bodyEl role=presentation>{subTplMarkup}</div>, <div id={id}-errorEl class={errorMsgCls} style=display:none></div>, <div class={clearCls} role=presentation><!-- --></div>, {compiled: true, disableFormats: true}]"
            },
            {
                "name": "msgTarget",
                "type": "string",
                "doc": "<p>The location where the error message text should display.</p>",
                "default": "qtip"
            },
            {
                "name": "preventMark",
                "type": "boolean",
                "doc": "<p><tt>true</tt> to disable displaying any error message set on this object.</p>",
                "default": "false"
            }
        ],
        "events": [
            {
                "name": "errorchange",
                "params": "this(Ext.form.Labelable) error(String) eOpts(Object)",
                "doc": "<p>Fires when the active error message is changed via setActiveError.</p>"
            }
        ]
    },
    "Ext.form.Panel": {
        "type": "Ext.form.Panel",
        "doc": "<p>FormPanel provides a standard container for forms.</p>",
        "configs": [
            {
                "name": "layout",
                "type": "string",
                "doc": "<p>The Ext.container.Container.layout for the form panel's immediate child items.\nDefaults to <code>'anchor'</code>.</p>",
                "default": "anchor"
            },
            {
                "name": "pollForChanges",
                "type": "boolean",
                "doc": "<p>If set to <code>true</code>, sets up an interval task (using the pollInterval) in which the\npanel's fields are repeatedly checked for changes in their values. This is in addition to the normal detection\neach field does on its own input element, and is not needed in most cases. It does, however, provide a\nmeans to absolutely guarantee detection of all changes including some edge cases in some browsers which\ndo not fire native events. Defaults to <code>false</code>.</p>",
                "default": null
            },
            {
                "name": "pollInterval",
                "type": "number",
                "doc": "<p>Interval in milliseconds at which the form's fields are checked for value changes. Only used if\nthe pollForChanges option is set to <code>true</code>. Defaults to 500 milliseconds.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.form.RadioGroup": {
        "type": "Ext.form.RadioGroup",
        "doc": "<p>A field container which has a specialized layout for arranging\nExt.form.field.Radio controls into columns, and provides convenience Ext.form.field.Field\nmethods for getting, setting, and validating the\ngroup of radio buttons as a whole.",
        "configs": [
            {
                "name": "allowBlank",
                "type": "boolean",
                "doc": "<p>True to allow every item in the group to be blank.\nIf allowBlank = false and no items are selected at validation time, blankText will\nbe used as the error text.</p>",
                "default": "true"
            },
            {
                "name": "blankText",
                "type": "string",
                "doc": "<p>Error text to display if the allowBlank validation fails</p>",
                "default": "You must select one item in this group"
            },
            {
                "name": "items",
                "type": "ext.form.field.radio[]/object[]",
                "doc": "<p>An Array of Radios or Radio config objects to arrange in the group.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.form.RadioManager": {
        "type": "Ext.form.RadioManager",
        "doc": "<p>Private utility class for managing all Ext.form.field.Radio fields grouped by name.",
        "configs": [],
        "events": []
    },
    "Ext.Function": {
        "type": "Ext.Function",
        "doc": "<p>A collection of useful static methods to deal with function callbacks",
        "configs": [],
        "events": []
    },
    "Ext.fx.Anim": {
        "type": "Ext.fx.Anim",
        "doc": "<p>This class manages animation for a specific target. The animation allows\nanimation of various properties on the target, such as size, position, color and others.",
        "configs": [
            {
                "name": "alternate",
                "type": "boolean",
                "doc": "<p>Used in conjunction with iterations to reverse the animation each time an iteration completes. Defaults to false.</p>",
                "default": "false"
            },
            {
                "name": "delay",
                "type": "number",
                "doc": "<p>Time to delay before starting the animation. Defaults to 0.</p>",
                "default": "0"
            },
            {
                "name": "duration",
                "type": "number",
                "doc": "<p>Time in milliseconds for a single animation to last. Defaults to 250. If the iterations property is\nspecified, then each animate will take the same duration for each iteration.</p>",
                "default": "250"
            },
            {
                "name": "dynamic",
                "type": "boolean",
                "doc": "<p>Currently only for Component Animation: Only set a component's outer element size bypassing layouts.  Set to true to do full layouts for every frame of the animation.  Defaults to false.</p>",
                "default": "false"
            },
            {
                "name": "easing",
                "type": "string",
                "doc": "<p>This describes how the intermediate values used during a transition will be calculated. It allows for a transition to change\nspeed over its duration.</p>",
                "default": "ease"
            },
            {
                "name": "from",
                "type": "object",
                "doc": "<p>An object containing property/value pairs for the beginning of the animation.  If not specified, the current state of the\nExt.fx.target will be used.</p>",
                "default": null
            },
            {
                "name": "iterations",
                "type": "number",
                "doc": "<p>Number of times to execute the animation. Defaults to 1.</p>",
                "default": "1"
            },
            {
                "name": "keyframes",
                "type": "object",
                "doc": "<p>Animation keyframes follow the CSS3 Animation configuration pattern. 'from' is always considered '0%' and 'to'\nis considered '100%'.<b>Every keyframe declaration must have a keyframe rule for 0% and 100%, possibly defined using\nfrom or to</b>.  A keyframe declaration without these keyframe selectors is invalid and will not be available for\nanimation.  The keyframe declaration for a keyframe rule consists of properties and values. Properties that are unable to\nbe animated are ignored in these rules, with the exception of 'easing' which can be changed at each keyframe.</p>",
                "default": null
            },
            {
                "name": "reverse",
                "type": "boolean",
                "doc": "<p>Run the animation from the end to the beginning\nDefaults to false.</p>",
                "default": "false"
            },
            {
                "name": "target",
                "type": "string/object",
                "doc": "<p>The Ext.fx.target.Target to apply the animation to.  This should only be specified when creating an Ext.fx.Anim directly.\nThe target does not need to be a Ext.fx.target.Target instance, it can be the underlying object. For example, you can\npass a Component, Element or Sprite as the target and the Anim will create the appropriate Ext.fx.target.Target object\nautomatically.</p>",
                "default": null
            },
            {
                "name": "to",
                "type": "object",
                "doc": "<p>An object containing property/value pairs for the end of the animation.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "afteranimate",
                "params": "this(Ext.fx.Anim) startTime(Date) eOpts(Object)",
                "doc": "<p>Fires when the animation is complete.</p>"
            },
            {
                "name": "beforeanimate",
                "params": "this(Ext.fx.Anim) eOpts(Object)",
                "doc": "<p>Fires before the animation starts. A handler can return false to cancel the animation.</p>"
            },
            {
                "name": "lastframe",
                "params": "this(Ext.fx.Anim) startTime(Date) eOpts(Object)",
                "doc": "<p>Fires when the animation's last frame has been set.</p>"
            }
        ]
    },
    "Ext.fx.Animator": {
        "type": "Ext.fx.Animator",
        "doc": "<p>This class is used to run keyframe based animations, which follows the CSS3 based animation structure.\nKeyframe animations differ from typical from/to animations in that they offer the ability to specify values\nat various points throughout the animation.",
        "configs": [
            {
                "name": "delay",
                "type": "number",
                "doc": "<p>Time to delay before starting the animation. Defaults to 0.</p>",
                "default": "0"
            },
            {
                "name": "duration",
                "type": "number",
                "doc": "<p>Time in milliseconds for the animation to last. Defaults to 250.</p>",
                "default": "250"
            },
            {
                "name": "dynamic",
                "type": "boolean",
                "doc": "<p>Currently only for Component Animation: Only set a component's outer element size bypassing layouts.  Set to true to do full layouts for every frame of the animation.  Defaults to false.</p>",
                "default": "false"
            },
            {
                "name": "easing",
                "type": "string",
                "doc": "<p>This describes how the intermediate values used during a transition will be calculated. It allows for a transition to change\nspeed over its duration.</p>",
                "default": "ease"
            },
            {
                "name": "iterations",
                "type": "number",
                "doc": "<p>Number of times to execute the animation. Defaults to 1.</p>",
                "default": "1"
            },
            {
                "name": "keyframes",
                "type": "object",
                "doc": "<p>Animation keyframes follow the CSS3 Animation configuration pattern.</p>",
                "default": null
            },
            {
                "name": "target",
                "type": "ext.fx.target.target",
                "doc": "<p>The Ext.fx.target to apply the animation to.  If not specified during initialization, this can be passed to the applyAnimator\nmethod to apply the same animation to many targets.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "afteranimate",
                "params": "this(Ext.fx.Animator) startTime(Date) eOpts(Object)",
                "doc": "<p>Fires when the animation is complete.</p>"
            },
            {
                "name": "beforeanimate",
                "params": "this(Ext.fx.Animator) eOpts(Object)",
                "doc": "<p>Fires before the animation starts. A handler can return false to cancel the animation.</p>"
            },
            {
                "name": "keyframe",
                "params": "this(Ext.fx.Animator) keyframe(Number) eOpts(Object)",
                "doc": "<p>Fires at each keyframe.</p>"
            }
        ]
    },
    "Ext.fx.Easing": {
        "type": "Ext.fx.Easing",
        "doc": "<p>This class contains a series of function definitions used to modify values during an animation.\nThey describe how the intermediate values used during a transition will be calculated. It allows for a transition to change\nspeed over its duration. The following options are available:",
        "configs": [],
        "events": []
    },
    "Ext.fx.Manager": {
        "type": "Ext.fx.Manager",
        "doc": "<p>Animation Manager which keeps track of all current animations and manages them on a frame by frame basis.",
        "configs": [
            {
                "name": "forceJS",
                "type": "boolean",
                "doc": "<p>Turn off to not use CSS3 transitions when they are available</p>",
                "default": "true"
            },
            {
                "name": "interval",
                "type": "number",
                "doc": "<p>Default interval in miliseconds to calculate each frame.  Defaults to 16ms (~60fps)</p>",
                "default": "16"
            }
        ],
        "events": []
    },
    "Ext.fx.Queue": {
        "type": "Ext.fx.Queue",
        "doc": "<p>Animation Queue mixin to handle chaining and queueing by target.",
        "configs": [],
        "events": []
    },
    "Ext.fx.target.Component": {
        "type": "Ext.fx.target.Component",
        "doc": "<p>This class represents a animation target for a Ext.Component. In general this class will not be\ncreated directly, the Ext.Component will be passed to the animation and\nand the appropriate target will be created.",
        "configs": [],
        "events": []
    },
    "Ext.fx.target.CompositeElement": {
        "type": "Ext.fx.target.CompositeElement",
        "doc": "<p>This class represents a animation target for a Ext.CompositeElement. It allows\neach Ext.Element in the group to be animated as a whole. In general this class will not be\ncreated directly, the Ext.CompositeElement will be passed to the animation and\nand the appropriate target will be created.",
        "configs": [],
        "events": []
    },
    "Ext.fx.target.CompositeElementCSS": {
        "type": "Ext.fx.target.CompositeElementCSS",
        "doc": "<p>This class represents a animation target for a Ext.CompositeElement, where the\nconstituent elements support CSS based animation. It allows each Ext.Element in\nthe group to be animated as a whole. In general this class will not be created directly,\nthe Ext.CompositeElement will be passed to the animation and the appropriate target\nwill be created.",
        "configs": [],
        "events": []
    },
    "Ext.fx.target.CompositeSprite": {
        "type": "Ext.fx.target.CompositeSprite",
        "doc": "<p>This class represents a animation target for a Ext.draw.CompositeSprite. It allows\neach Ext.draw.Sprite in the group to be animated as a whole. In general this class will not be\ncreated directly, the Ext.draw.CompositeSprite will be passed to the animation and\nand the appropriate target will be created.",
        "configs": [],
        "events": []
    },
    "Ext.fx.target.Element": {
        "type": "Ext.fx.target.Element",
        "doc": "<p>This class represents a animation target for an Ext.Element. In general this class will not be\ncreated directly, the Ext.Element will be passed to the animation and\nand the appropriate target will be created.",
        "configs": [],
        "events": []
    },
    "Ext.fx.target.ElementCSS": {
        "type": "Ext.fx.target.ElementCSS",
        "doc": "<p>This class represents a animation target for an Ext.Element that supports CSS\nbased animation. In general this class will not be created directly, the Ext.Element\nwill be passed to the animation and the appropriate target will be created.",
        "configs": [],
        "events": []
    },
    "Ext.fx.target.Sprite": {
        "type": "Ext.fx.target.Sprite",
        "doc": "<p>This class represents a animation target for a Ext.draw.Sprite. In general this class will not be\ncreated directly, the Ext.draw.Sprite will be passed to the animation and\nand the appropriate target will be created.",
        "configs": [],
        "events": []
    },
    "Ext.fx.target.Target": {
        "type": "Ext.fx.target.Target",
        "doc": "<p>This class specifies a generic target for an animation.</p>",
        "configs": [],
        "events": []
    },
    "Ext.grid.column.Action": {
        "type": "Ext.grid.column.Action",
        "doc": "<p>A Grid header type which renders an icon, or a series of icons in a grid cell, and offers a scoped click\nhandler for each icon.",
        "configs": [
            {
                "name": "altText",
                "type": "string",
                "doc": "<p>The alt text to use for the image element.</p>",
                "default": ""
            },
            {
                "name": "icon",
                "type": "string",
                "doc": "<p>The URL of an image to display as the clickable element in the column. Defaults to\n<code>Ext.BLANK_IMAGE_URL</code>.</p>",
                "default": null
            },
            {
                "name": "iconCls",
                "type": "string",
                "doc": "<p>A CSS class to apply to the icon image. To determine the class dynamically, configure the Column with\na <code>getClass</code> function.</p>",
                "default": null
            },
            {
                "name": "items",
                "type": "object[]",
                "doc": "<p>An Array which may contain multiple icon definitions</p>",
                "default": null
            },
            {
                "name": "scope",
                "type": "object",
                "doc": "<p>The scope (<strong>this</strong> reference) in which the <code>handler</code> and <code>getClass</code> fuctions are executed.\nDefaults to this Column.</p>",
                "default": null
            },
            {
                "name": "stopSelection",
                "type": "boolean",
                "doc": "<p>Prevent grid <em>row</em> selection upon mousedown.</p>",
                "default": "true"
            },
            {
                "name": "tooltip",
                "type": "string",
                "doc": "<p>A tooltip message to be displayed on hover. Ext.tip.QuickTipManager must\nhave been initialized.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.grid.column.Boolean": {
        "type": "Ext.grid.column.Boolean",
        "doc": "<p>A Column definition class which renders boolean data fields.  See the xtype\nconfig option of Ext.grid.column.Column for more details.",
        "configs": [
            {
                "name": "falseText",
                "type": "string",
                "doc": "<p>The string returned by the renderer when the column value is falsey (but not undefined).</p>",
                "default": "false"
            },
            {
                "name": "trueText",
                "type": "string",
                "doc": "<p>The string returned by the renderer when the column value is not falsey.</p>",
                "default": "true"
            },
            {
                "name": "undefinedText",
                "type": "string",
                "doc": "<p>The string returned by the renderer when the column value is undefined.</p>",
                "default": "&#160;"
            }
        ],
        "events": []
    },
    "Ext.grid.column.Column": {
        "type": "Ext.grid.column.Column",
        "doc": "<p>This class specifies the definition for a column inside a Ext.grid.Panel. It encompasses\nboth the grid header configuration as well as displaying data within the grid itself.",
        "configs": [
            {
                "name": "align",
                "type": "string",
                "doc": "<p>Sets the alignment of the header and rendered columns. Defaults to 'left'.</p>",
                "default": "left"
            },
            {
                "name": "columns",
                "type": "object[]",
                "doc": "<p>An optional array of sub-column definitions. This column becomes a group, and houses the columns defined in the\n<code>columns</code> config.</p>",
                "default": null
            },
            {
                "name": "dataIndex",
                "type": "string",
                "doc": "<p>The name of the field in the grid's Ext.data.Store's Ext.data.Model definition from\nwhich to draw the column's value. <strong>Required.</strong></p>",
                "default": "null"
            },
            {
                "name": "draggable",
                "type": "boolean",
                "doc": "<p>False to disable drag-drop reordering of this column. Defaults to true.</p>",
                "default": "true"
            },
            {
                "name": "editor",
                "type": "object/string",
                "doc": "<p>An optional xtype or config object for a Field to use for editing.\nOnly applicable if the grid is using an Editing plugin.</p>",
                "default": null
            },
            {
                "name": "field",
                "type": "object/string",
                "doc": "<p>Alias for editor.</p>",
                "default": null
            },
            {
                "name": "fixed",
                "type": "boolean",
                "doc": "\n",
                "default": null
            },
            {
                "name": "groupable",
                "type": "boolean",
                "doc": "<p>If the grid uses a Ext.grid.feature.Grouping, this option may be used to disable the header menu\nitem to group by the column selected. By default, the header menu group option is enabled. Set to false to\ndisable (but still show) the group option in the header menu for the column.</p>",
                "default": null
            },
            {
                "name": "hideable",
                "type": "boolean",
                "doc": "<p>False to prevent the user from hiding this column. Defaults to true.</p>",
                "default": "true"
            },
            {
                "name": "menuDisabled",
                "type": "boolean",
                "doc": "<p>True to disable the column header menu containing sort/hide options. Defaults to false.</p>",
                "default": "false"
            },
            {
                "name": "resizable",
                "type": "boolean",
                "doc": "<p>Set to <code>false</code> to prevent the column from being resizable. Defaults to <code>true</code></p>",
                "default": null
            },
            {
                "name": "sortable",
                "type": "boolean",
                "doc": "<p>False to disable sorting of this column. Whether local/remote sorting is used is specified in\n<code>Ext.data.Store.remoteSort</code>. Defaults to true.</p>",
                "default": "true"
            },
            {
                "name": "tdCls",
                "type": "string",
                "doc": "<p>A CSS class names to apply to the table cells for this column.</p>",
                "default": null
            },
            {
                "name": "text",
                "type": "string",
                "doc": "<p>The header text to be used as innerHTML (html tags are accepted) to display in the Grid.\n<strong>Note</strong>: to have a clickable header with no text displayed you can use the default of <code>&amp;#160;</code> aka <code>&amp;nbsp;</code>.</p>",
                "default": "&#160;"
            }
        ],
        "events": []
    },
    "Ext.grid.column.Date": {
        "type": "Ext.grid.column.Date",
        "doc": "<p>A Column definition class which renders a passed date according to the default locale, or a configured\nformat.",
        "configs": [
            {
                "name": "format",
                "type": "string",
                "doc": "<p>A formatting string as used by Ext.Date.format to format a Date for this Column.\nThis defaults to the default date from Ext.Date.defaultFormat which itself my be overridden\nin a locale file.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.grid.column.Number": {
        "type": "Ext.grid.column.Number",
        "doc": "<p>A Column definition class which renders a numeric data field according to a format string.",
        "configs": [
            {
                "name": "format",
                "type": "string",
                "doc": "<p>A formatting string as used by Ext.util.Format.number to format a numeric value for this Column.</p>",
                "default": "0,000.00"
            }
        ],
        "events": []
    },
    "Ext.grid.column.Template": {
        "type": "Ext.grid.column.Template",
        "doc": "<p>A Column definition class which renders a value by processing a Model's\ndata using a configured\nXTemplate.",
        "configs": [
            {
                "name": "tpl",
                "type": "string/ext.xtemplate",
                "doc": "<p>An XTemplate, or an XTemplate <em>definition string</em> to use to process a\nModel's data to produce a\ncolumn's rendered value.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.grid.ColumnLayout": {
        "type": "Ext.grid.ColumnLayout",
        "doc": "<p>This class is used only by the grid's HeaderContainer docked child.",
        "configs": [],
        "events": []
    },
    "Ext.grid.feature.AbstractSummary": {
        "type": "Ext.grid.feature.AbstractSummary",
        "doc": "<p>A small abstract class that contains the shared behaviour for any summary\ncalculations to be used in the grid.",
        "configs": [
            {
                "name": "showSummaryRow",
                "type": "boolean",
                "doc": "<p>True to show the summary row. Defaults to <tt>true</tt>.</p>",
                "default": "true"
            }
        ],
        "events": []
    },
    "Ext.grid.feature.Chunking": {
        "type": "Ext.grid.feature.Chunking",
        "configs": [],
        "events": []
    },
    "Ext.grid.feature.Feature": {
        "type": "Ext.grid.feature.Feature",
        "doc": "<p>A feature is a type of plugin that is specific to the Ext.grid.Panel. It provides several\nhooks that allows the developer to inject additional functionality at certain points throughout the\ngrid creation cycle. This class provides the base template methods that are available to the developer,\nit should be extended.",
        "configs": [],
        "events": []
    },
    "Ext.grid.feature.Grouping": {
        "type": "Ext.grid.feature.Grouping",
        "doc": "<p>This feature allows to display the grid rows aggregated into groups as specified by the Ext.data.Store.groupers\nspecified on the Store. The group will show the title for the group name and then the appropriate records for the group\nunderneath.",
        "configs": [
            {
                "name": "depthToIndent",
                "type": "number",
                "doc": "<p>Number of pixels to indent per grouping level</p>",
                "default": "17"
            },
            {
                "name": "enableGroupingMenu",
                "type": "boolean",
                "doc": "<p><tt>true</tt> to enable the grouping control in the header menu</p>",
                "default": "true"
            },
            {
                "name": "enableNoGroups",
                "type": "boolean",
                "doc": "<p><tt>true</tt> to allow the user to turn off grouping</p>",
                "default": "true"
            },
            {
                "name": "groupByText",
                "type": "string",
                "doc": "<p>Text displayed in the grid header menu for grouping by header.</p>",
                "default": "Group By This Field"
            },
            {
                "name": "groupHeaderTpl",
                "type": "string",
                "doc": "<p>Template snippet, this cannot be an actual template. {name} will be replaced with the current group.\nDefaults to 'Group: {name}'</p>",
                "default": "Group: {name}"
            },
            {
                "name": "hideGroupedHeader",
                "type": "boolean",
                "doc": "<p><tt>true</tt> to hide the header that is currently grouped.</p>",
                "default": "false"
            },
            {
                "name": "showGroupsText",
                "type": "string",
                "doc": "<p>Text displayed in the grid header for enabling/disabling grouping.</p>",
                "default": "Show in Groups"
            },
            {
                "name": "startCollapsed",
                "type": "boolean",
                "doc": "<p><tt>true</tt> to start all groups collapsed</p>",
                "default": "false"
            }
        ],
        "events": [
            {
                "name": "groupclick",
                "params": "view(Ext.view.Table) node(HTMLElement) group(String) e(Ext.EventObject) eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "groupcollapse",
                "params": "view(Ext.view.Table) node(HTMLElement) group(String) e(Ext.EventObject) eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "groupcontextmenu",
                "params": "view(Ext.view.Table) node(HTMLElement) group(String) e(Ext.EventObject) eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "groupdblclick",
                "params": "view(Ext.view.Table) node(HTMLElement) group(String) e(Ext.EventObject) eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "groupexpand",
                "params": "view(Ext.view.Table) node(HTMLElement) group(String) e(Ext.EventObject) eOpts(Object)",
                "doc": "\n"
            }
        ]
    },
    "Ext.grid.feature.GroupingSummary": {
        "type": "Ext.grid.feature.GroupingSummary",
        "doc": "<p>This feature adds an aggregate summary row at the bottom of each group that is provided\nby the Ext.grid.feature.Grouping feature. There are two aspects to the summary:",
        "configs": [
            {
                "name": "remoteRoot",
                "type": "string",
                "doc": "<p>The name of the property which contains the Array of\nsummary objects. It allows to use server-side calculated summaries.</p>",
                "default": "undefined"
            }
        ],
        "events": []
    },
    "Ext.grid.feature.RowBody": {
        "type": "Ext.grid.feature.RowBody",
        "doc": "<p>The rowbody feature enhances the grid's markup to have an additional\ntr -> td -> div which spans the entire width of the original row.",
        "configs": [],
        "events": []
    },
    "Ext.grid.feature.RowWrap": {
        "type": "Ext.grid.feature.RowWrap",
        "configs": [],
        "events": []
    },
    "Ext.grid.feature.Summary": {
        "type": "Ext.grid.feature.Summary",
        "doc": "<p>This feature is used to place a summary row at the bottom of the grid. If using a grouping,\nsee Ext.grid.feature.GroupingSummary. There are 2 aspects to calculating the summaries,\ncalculation and rendering.",
        "configs": [],
        "events": []
    },
    "Ext.grid.header.Container": {
        "type": "Ext.grid.header.Container",
        "doc": "<p>Container which holds headers and is docked at the top or bottom of a TablePanel.\nThe HeaderContainer drives resizing/moving/hiding of columns within the TableView.\nAs headers are hidden, moved or resized the headercontainer is responsible for\ntriggering changes within the view.",
        "configs": [
            {
                "name": "defaultWidth",
                "type": "number",
                "doc": "<p>Width of the header if no width or flex is specified. Defaults to 100.</p>",
                "default": "100"
            },
            {
                "name": "sortable",
                "type": "boolean",
                "doc": "<p>Provides the default sortable state for all Headers within this HeaderContainer.\nAlso turns on or off the menus in the HeaderContainer. Note that the menu is\nshared across every header and therefore turning it off will remove the menu\nitems for every header.</p>",
                "default": "true"
            },
            {
                "name": "weight",
                "type": "number",
                "doc": "<p>HeaderContainer overrides the default weight of 0 for all docked items to 100.\nThis is so that it has more priority over things like toolbars.</p>",
                "default": "100"
            }
        ],
        "events": [
            {
                "name": "columnhide",
                "params": "ct(Ext.grid.header.Container) column(Ext.grid.column.Column) eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "columnmove",
                "params": "ct(Ext.grid.header.Container) column(Ext.grid.column.Column) fromIdx(Number) toIdx(Number) eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "columnresize",
                "params": "ct(Ext.grid.header.Container) column(Ext.grid.column.Column) width(Number) eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "columnshow",
                "params": "ct(Ext.grid.header.Container) column(Ext.grid.column.Column) eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "headerclick",
                "params": "ct(Ext.grid.header.Container) column(Ext.grid.column.Column) e(Ext.EventObject) t(HTMLElement) eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "headertriggerclick",
                "params": "ct(Ext.grid.header.Container) column(Ext.grid.column.Column) e(Ext.EventObject) t(HTMLElement) eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "menucreate",
                "params": "ct(Ext.grid.header.Container) menu(Ext.menu.Menu) eOpts(Object)",
                "doc": "<p>Fired immediately after the column header menu is created.</p>"
            },
            {
                "name": "sortchange",
                "params": "ct(Ext.grid.header.Container) column(Ext.grid.column.Column) direction(String) eOpts(Object)",
                "doc": "\n"
            }
        ]
    },
    "Ext.grid.header.DragZone": {
        "type": "Ext.grid.header.DragZone",
        "configs": [],
        "events": []
    },
    "Ext.grid.header.DropZone": {
        "type": "Ext.grid.header.DropZone",
        "configs": [],
        "events": []
    },
    "Ext.grid.Lockable": {
        "type": "Ext.grid.Lockable",
        "doc": "<p>Lockable is a private mixin which injects lockable behavior into any\nTablePanel subclass such as GridPanel or TreePanel. TablePanel will\nautomatically inject the Ext.grid.Lockable mixin in when one of the\nthese conditions are met:",
        "configs": [
            {
                "name": "lockedViewConfig",
                "type": "object",
                "doc": "<p>A view configuration to be applied to the\nlocked side of the grid. Any conflicting configurations between lockedViewConfig\nand viewConfig will be overwritten by the lockedViewConfig.</p>",
                "default": null
            },
            {
                "name": "normalViewConfig",
                "type": "object",
                "doc": "<p>A view configuration to be applied to the\nnormal/unlocked side of the grid. Any conflicting configurations between normalViewConfig\nand viewConfig will be overwritten by the normalViewConfig.</p>",
                "default": null
            },
            {
                "name": "subGridXType",
                "type": "string",
                "doc": "<p>The xtype of the subgrid to specify. If this is\nnot specified lockable will determine the subgrid xtype to create by the\nfollowing rule. Use the superclasses xtype if the superclass is NOT\ntablepanel, otherwise use the xtype itself.</p>",
                "default": null
            },
            {
                "name": "syncRowHeight",
                "type": "boolean",
                "doc": "<p>Synchronize rowHeight between the normal and\nlocked grid view. This is turned on by default. If your grid is guaranteed\nto have rows of all the same height, you should set this to false to\noptimize performance.</p>",
                "default": "true"
            }
        ],
        "events": [
            {
                "name": "lockcolumn",
                "params": "this(Ext.grid.Panel) column(Ext.grid.column.Column) eOpts(Object)",
                "doc": "<p>Fires when a column is locked.</p>"
            },
            {
                "name": "unlockcolumn",
                "params": "this(Ext.grid.Panel) column(Ext.grid.column.Column) eOpts(Object)",
                "doc": "<p>Fires when a column is unlocked.</p>"
            }
        ]
    },
    "Ext.grid.PagingScroller": {
        "type": "Ext.grid.PagingScroller",
        "configs": [
            {
                "name": "percentageFromEdge",
                "type": "number",
                "doc": "<p>This is a number above 0 and less than 1 which specifies\nat what percentage to begin fetching the next page. For example if the pageSize is 100\nand the percentageFromEdge is the default of 0.35, the paging scroller will prefetch pages\nwhen scrolling up between records 0 and 34 and when scrolling down between records 65 and 99.</p>",
                "default": "0.35"
            },
            {
                "name": "scrollToLoadBuffer",
                "type": "number",
                "doc": "<p>This is the time in milliseconds to buffer load requests\nwhen scrolling the PagingScrollbar.</p>",
                "default": "200"
            }
        ],
        "events": []
    },
    "Ext.grid.Panel": {
        "type": "Ext.grid.Panel",
        "doc": "<p>Grids are an excellent way of showing large amounts of tabular data on the client side. Essentially a supercharged\n<code>&lt;table&gt;</code>, GridPanel makes it easy to fetch, sort and filter large amounts of data.",
        "configs": [
            {
                "name": "columnLines",
                "type": "boolean",
                "doc": "<p>Adds column line styling</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.grid.plugin.CellEditing": {
        "type": "Ext.grid.plugin.CellEditing",
        "doc": "<p>The Ext.grid.plugin.CellEditing plugin injects editing at a cell level for a Grid. Only a single\ncell will be editable at a time. The field that will be used for the editor is defined at the\neditor. The editor can be a field instance or a field configuration.",
        "configs": [],
        "events": [
            {
                "name": "beforeedit",
                "params": "e(Object) eOpts(Object)",
                "doc": "<p>Fires before cell editing is triggered. Return false from event handler to stop the editing.</p>"
            },
            {
                "name": "edit",
                "params": "editor(Ext.grid.plugin.Editing) e(Object) eOpts(Object)",
                "doc": "<p>Fires after a cell is edited.</p>"
            },
            {
                "name": "validateedit",
                "params": "editor(Ext.grid.plugin.Editing) e(Object) eOpts(Object)",
                "doc": "<p>Fires after a cell is edited, but before the value is set in the record. Return false from event handler to\ncancel the change.</p>"
            }
        ]
    },
    "Ext.grid.plugin.DragDrop": {
        "type": "Ext.grid.plugin.DragDrop",
        "doc": "<p>This plugin provides drag and/or drop functionality for a GridView.",
        "configs": [
            {
                "name": "ddGroup",
                "type": "string",
                "doc": "<p>A named drag drop group to which this object belongs. If a group is specified, then both the DragZones and\nDropZone used by this plugin will only interact with other drag drop objects in the same group.</p>",
                "default": "GridDD"
            },
            {
                "name": "dragGroup",
                "type": "string",
                "doc": "<p>The ddGroup to which the DragZone will belong.</p>",
                "default": null
            },
            {
                "name": "dropGroup",
                "type": "string",
                "doc": "<p>The ddGroup to which the DropZone will belong.</p>",
                "default": null
            },
            {
                "name": "enableDrag",
                "type": "boolean",
                "doc": "<p>False to disallow dragging items from the View.</p>",
                "default": "true"
            },
            {
                "name": "enableDrop",
                "type": "boolean",
                "doc": "<p>False to disallow the View from accepting drop gestures.</p>",
                "default": "true"
            }
        ],
        "events": [
            {
                "name": "beforedrop",
                "params": "node(HTMLElement) data(Object) overModel(Ext.data.Model) dropPosition(String) dropFunction(Function) eOpts(Object)",
                "doc": "<p><strong>This event is fired through the GridView. Add listeners to the GridView object</strong></p>"
            },
            {
                "name": "drop",
                "params": "node(HTMLElement) data(Object) overModel(Ext.data.Model) dropPosition(String) eOpts(Object)",
                "doc": "<p><strong>This event is fired through the GridView. Add listeners to the GridView object</strong> Fired when a drop operation\nhas been completed and the data has been moved or copied.</p>"
            }
        ]
    },
    "Ext.grid.plugin.Editing": {
        "type": "Ext.grid.plugin.Editing",
        "doc": "<p>This class provides an abstract grid editing plugin on selected columns.\nThe editable columns are specified by providing an editor\nin the column configuration.",
        "configs": [
            {
                "name": "clicksToEdit",
                "type": "number",
                "doc": "<p>The number of clicks on a grid required to display the editor.</p>",
                "default": "2"
            }
        ],
        "events": []
    },
    "Ext.grid.plugin.HeaderReorderer": {
        "type": "Ext.grid.plugin.HeaderReorderer",
        "configs": [],
        "events": []
    },
    "Ext.grid.plugin.HeaderResizer": {
        "type": "Ext.grid.plugin.HeaderResizer",
        "doc": "<p>Plugin to add header resizing functionality to a HeaderContainer.\nAlways resizing header to the left of the splitter you are resizing.",
        "configs": [
            {
                "name": "dynamic",
                "type": "boolean",
                "doc": "<p>Set to true to resize on the fly rather than using a proxy marker. Defaults to false.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.grid.plugin.RowEditing": {
        "type": "Ext.grid.plugin.RowEditing",
        "doc": "<p>The Ext.grid.plugin.RowEditing plugin injects editing at a row level for a Grid. When editing begins,\na small floating dialog will be shown for the appropriate row. Each editable column will show a field\nfor editing.",
        "configs": [
            {
                "name": "autoCancel",
                "type": "boolean",
                "doc": "<p>True to automatically cancel any pending changes when the row editor begins editing a new row.\nFalse to force the user to explicitly cancel the pending changes. Defaults to true.</p>",
                "default": "true"
            },
            {
                "name": "clicksToMoveEditor",
                "type": "number",
                "doc": "<p>The number of clicks to move the row editor to a new row while it is visible and actively editing another row.\nThis will default to the same value as clicksToEdit.</p>",
                "default": null
            },
            {
                "name": "errorSummary",
                "type": "boolean",
                "doc": "<p>True to show a tooltip that summarizes all validation errors present\nin the row editor. Set to false to prevent the tooltip from showing. Defaults to true.</p>",
                "default": "true"
            }
        ],
        "events": [
            {
                "name": "beforeedit",
                "params": "editor(Ext.grid.plugin.Editing) e(Object) eOpts(Object)",
                "doc": "<p>Fires before row editing is triggered.</p>"
            },
            {
                "name": "canceledit",
                "params": "grid(Object) eOpts(Object)",
                "doc": "<p>Fires when the user has started editing a row but then cancelled the edit</p>"
            },
            {
                "name": "edit",
                "params": "editor(Ext.grid.plugin.Editing) e(Object) eOpts(Object)",
                "doc": "<p>Fires after a row is edited.</p>"
            },
            {
                "name": "validateedit",
                "params": "editor(Ext.grid.plugin.Editing) e(Object) eOpts(Object)",
                "doc": "<p>Fires after a cell is edited, but before the value is set in the record. Return false to cancel the change. The\nedit event object has the following properties</p>"
            }
        ]
    },
    "Ext.grid.property.Grid": {
        "type": "Ext.grid.property.Grid",
        "doc": "<p>A specialized grid implementation intended to mimic the traditional property grid as typically seen in\ndevelopment IDEs.  Each row in the grid represents a property of some object, and the data is stored\nas a set of name/value pairs in Properties.",
        "configs": [
            {
                "name": "customEditors",
                "type": "object",
                "doc": "<p>An object containing name/value pairs of custom editor type definitions that allow\nthe grid to support additional types of editable fields.  By default, the grid supports strongly-typed editing\nof strings, dates, numbers and booleans using built-in form editors, but any custom type can be supported and\nassociated with a custom input control by specifying a custom editor.  The name of the editor\ntype should correspond with the name of the property that will use the editor.</p>",
                "default": null
            },
            {
                "name": "customRenderers",
                "type": "object",
                "doc": "<p>An object containing name/value pairs of custom renderer type definitions that allow\nthe grid to support custom rendering of fields.  By default, the grid supports strongly-typed rendering\nof strings, dates, numbers and booleans using built-in form editors, but any custom type can be supported and\nassociated with the type of the value.  The name of the renderer type should correspond with the name of the property\nthat it will render.</p>",
                "default": null
            },
            {
                "name": "nameColumnWidth",
                "type": "number",
                "doc": "<p>Optional. Specify the width for the name column. The value column will take any remaining space. Defaults to <tt>115</tt>.</p>",
                "default": null
            },
            {
                "name": "nameField",
                "type": "string",
                "doc": "<p>Optional. The name of the field from the property store to use as the property field name. Defaults to <code>'name'</code>\nThis may be useful if you do not configure the property Grid from an object, but use your own store configuration.</p>",
                "default": "name"
            },
            {
                "name": "propertyNames",
                "type": "object",
                "doc": "<p>An object containing custom property name/display name pairs.\nIf specified, the display name will be shown in the name column instead of the property name.</p>",
                "default": null
            },
            {
                "name": "source",
                "type": "object",
                "doc": "<p>A data object to use as the data source of the grid (see setSource for details).</p>",
                "default": null
            },
            {
                "name": "valueField",
                "type": "string",
                "doc": "<p>Optional. The name of the field from the property store to use as the value field name. Defaults to <code>'value'</code>\nThis may be useful if you do not configure the property Grid from an object, but use your own store configuration.</p>",
                "default": "value"
            }
        ],
        "events": [
            {
                "name": "beforepropertychange",
                "params": "source(Object) recordId(String) value(Object) oldValue(Object) eOpts(Object)",
                "doc": "<p>Fires before a property value changes.  Handlers can return false to cancel the property change\n(this will internally call Ext.data.Model.reject on the property's record).</p>"
            },
            {
                "name": "propertychange",
                "params": "source(Object) recordId(String) value(Object) oldValue(Object) eOpts(Object)",
                "doc": "<p>Fires after a property value has changed.</p>"
            }
        ]
    },
    "Ext.grid.property.HeaderContainer": {
        "type": "Ext.grid.property.HeaderContainer",
        "doc": "<p>A custom HeaderContainer for the Ext.grid.property.Grid.  Generally it should not need to be used directly.",
        "configs": [],
        "events": []
    },
    "Ext.grid.property.Property": {
        "type": "Ext.grid.property.Property",
        "doc": "<p>A specific Ext.data.Model type that represents a name/value pair and is made to work with the\nExt.grid.property.Grid.  Typically, Properties do not need to be created directly as they can be\ncreated implicitly by simply using the appropriate data configs either via the Ext.grid.property.Grid.source\nconfig property or by calling Ext.grid.property.Grid.setSource.  However, if the need arises, these records\ncan also be created explicitly as shown below.  Example usage:",
        "configs": [],
        "events": []
    },
    "Ext.grid.property.Store": {
        "type": "Ext.grid.property.Store",
        "doc": "<p>A custom Ext.data.Store for the Ext.grid.property.Grid. This class handles the mapping\nbetween the custom data source objects supported by the grid and the Ext.grid.property.Property format\nused by the Ext.data.Store base class.",
        "configs": [],
        "events": []
    },
    "Ext.grid.RowNumberer": {
        "type": "Ext.grid.RowNumberer",
        "doc": "<p>This is a utility class that can be passed into a Ext.grid.column.Column as a column config that provides\nan automatic row numbering column.",
        "configs": [
            {
                "name": "text",
                "type": "string",
                "doc": "<p>Any valid text or HTML fragment to display in the header cell for the row number column.</p>",
                "default": "&#160"
            },
            {
                "name": "width",
                "type": "number",
                "doc": "<p>The default width in pixels of the row number column.</p>",
                "default": "23"
            }
        ],
        "events": []
    },
    "Ext.grid.Scroller": {
        "type": "Ext.grid.Scroller",
        "doc": "<p>Docked in an Ext.grid.Panel, controls virtualized scrolling and synchronization\nacross different sections.",
        "configs": [],
        "events": []
    },
    "Ext.grid.View": {
        "type": "Ext.grid.View",
        "doc": "<p>The grid View class provides extra Ext.grid.Panel specific functionality to the\nExt.view.Table. In general, this class is not instanced directly, instead a viewConfig\noption is passed to the grid:",
        "configs": [
            {
                "name": "stripeRows",
                "type": "boolean",
                "doc": "<p><tt>true</tt> to stripe the rows. Default is <tt>true</tt>.</p>",
                "default": "true"
            }
        ],
        "events": []
    },
    "Ext.Img": {
        "type": "Ext.Img",
        "doc": "<p>Simple helper class for easily creating image components. This simply renders an image tag to the DOM\nwith the configured src.",
        "configs": [
            {
                "name": "src",
                "type": "string",
                "doc": "<p>The image src</p>",
                "default": ""
            }
        ],
        "events": []
    },
    "Ext.is": {
        "type": "Ext.is",
        "doc": "<p>Determines information about the current platform the application is running on.",
        "configs": [],
        "events": []
    },
    "Ext.JSON": {
        "type": "Ext.JSON",
        "doc": "<p>Modified version of Douglas Crockford's JSON.js that doesn't\nmess with the Object prototype\nhttp://www.json.org/js.html",
        "configs": [],
        "events": []
    },
    "Ext.Layer": {
        "type": "Ext.Layer",
        "doc": "<p>An extended Ext.Element object that supports a shadow and shim, constrain to viewport and\nautomatic maintaining of shadow/shim positions.",
        "configs": [
            {
                "name": "cls",
                "type": "string",
                "doc": "<p>CSS class to add to the element</p>",
                "default": null
            },
            {
                "name": "constrain",
                "type": "boolean",
                "doc": "<p>False to disable constrain to viewport.</p>",
                "default": "true"
            },
            {
                "name": "dh",
                "type": "object",
                "doc": "<p>DomHelper object config to create element with.</p>",
                "default": "{tag: div, cls: x-layer}"
            },
            {
                "name": "hideMode",
                "type": "string",
                "doc": "<p>A String which specifies how this Layer will be hidden.\nValues may be<div class=mdetail-params><ul>\n<li><code>'display'</code> : The Component will be hidden using the <code>display: none</code> style.</li>\n<li><code>'visibility'</code> : The Component will be hidden using the <code>visibility: hidden</code> style.</li>\n<li><code>'offsets'</code> : The Component will be hidden by absolutely positioning it out of the visible area of the document. This\nis useful when a hidden Component must maintain measurable dimensions. Hiding using <code>display</code> results\nin a Component having zero dimensions.</li></ul></div></p>",
                "default": null
            },
            {
                "name": "shadow",
                "type": "string/boolean",
                "doc": "<p>True to automatically create an Ext.Shadow, or a string indicating the\nshadow's display Ext.Shadow.mode. False to disable the shadow.</p>",
                "default": "false"
            },
            {
                "name": "shadowOffset",
                "type": "number",
                "doc": "<p>Number of pixels to offset the shadow</p>",
                "default": "4"
            },
            {
                "name": "shim",
                "type": "boolean",
                "doc": "<p>False to disable the iframe shim in browsers which need one.</p>",
                "default": "true"
            },
            {
                "name": "useDisplay",
                "type": "boolean",
                "doc": "<p>Defaults to use css offsets to hide the Layer. Specify <tt>true</tt>\nto use css style <tt>'display:none;'</tt> to hide the Layer.</p>",
                "default": "false"
            },
            {
                "name": "visibilityCls",
                "type": "string",
                "doc": "<p>The CSS class name to add in order to hide this Layer if this layer\nis configured with <code>hideMode: 'asclass'</code></p>",
                "default": null
            },
            {
                "name": "zindex",
                "type": "number",
                "doc": "<p>Starting z-index.</p>",
                "default": "11000"
            }
        ],
        "events": []
    },
    "Ext.layout.component.AbstractDock": {
        "type": "Ext.layout.component.AbstractDock",
        "doc": "<p>This ComponentLayout handles docking for Panels. It takes care of panels that are\npart of a ContainerLayout that sets this Panel's size and Panels that are part of\nan AutoContainerLayout in which this panel get his height based of the CSS or\nor its content.",
        "configs": [],
        "events": []
    },
    "Ext.layout.component.Auto": {
        "type": "Ext.layout.component.Auto",
        "doc": "<p>The AutoLayout is the default layout manager delegated by Ext.Component to\nrender any child Elements when no <tt>layout</tt> is configured.",
        "configs": [],
        "events": []
    },
    "Ext.layout.component.Body": {
        "type": "Ext.layout.component.Body",
        "doc": "<p>Component layout for components which maintain an inner body element which must be resized to synchronize with the\nComponent size.",
        "configs": [],
        "events": []
    },
    "Ext.layout.component.BoundList": {
        "type": "Ext.layout.component.BoundList",
        "doc": "<p>Component layout for Ext.view.BoundList. Handles constraining the height to the configured maxHeight.",
        "configs": [],
        "events": []
    },
    "Ext.layout.component.Button": {
        "type": "Ext.layout.component.Button",
        "doc": "<p>Component layout for buttons",
        "configs": [],
        "events": []
    },
    "Ext.layout.component.Component": {
        "type": "Ext.layout.component.Component",
        "doc": "<p>This class is intended to be extended or created via the layout\nconfiguration property.  See Ext.Component.componentLayout for additional details.",
        "configs": [],
        "events": []
    },
    "Ext.layout.component.Dock": {
        "type": "Ext.layout.component.Dock",
        "configs": [],
        "events": []
    },
    "Ext.layout.component.Draw": {
        "type": "Ext.layout.component.Draw",
        "configs": [],
        "events": []
    },
    "Ext.layout.component.Editor": {
        "type": "Ext.layout.component.Editor",
        "doc": "<p>Component layout for editors",
        "configs": [],
        "events": []
    },
    "Ext.layout.component.field.Field": {
        "type": "Ext.layout.component.field.Field",
        "doc": "<p>Layout class for components with field labeling, handling the sizing and alignment of\nthe form control, label, and error message treatment.",
        "configs": [],
        "events": []
    },
    "Ext.layout.component.field.File": {
        "type": "Ext.layout.component.field.File",
        "doc": "<p>Layout class for Ext.form.field.File fields. Adjusts the input field size to accommodate\nthe file picker trigger button.",
        "configs": [],
        "events": []
    },
    "Ext.layout.component.field.HtmlEditor": {
        "type": "Ext.layout.component.field.HtmlEditor",
        "doc": "<p>Layout class for Ext.form.field.HtmlEditor fields. Sizes the toolbar, textarea, and iframe elements.",
        "configs": [],
        "events": []
    },
    "Ext.layout.component.field.Slider": {
        "type": "Ext.layout.component.field.Slider",
        "configs": [],
        "events": []
    },
    "Ext.layout.component.field.Text": {
        "type": "Ext.layout.component.field.Text",
        "doc": "<p>Layout class for Ext.form.field.Text fields. Handles sizing the input field.",
        "configs": [],
        "events": []
    },
    "Ext.layout.component.field.TextArea": {
        "type": "Ext.layout.component.field.TextArea",
        "doc": "<p>Layout class for Ext.form.field.TextArea fields. Handles sizing the textarea field.",
        "configs": [],
        "events": []
    },
    "Ext.layout.component.field.Trigger": {
        "type": "Ext.layout.component.field.Trigger",
        "doc": "<p>Layout class for Ext.form.field.Trigger fields. Adjusts the input field size to accommodate\nthe trigger button(s).",
        "configs": [],
        "events": []
    },
    "Ext.layout.component.FieldSet": {
        "type": "Ext.layout.component.FieldSet",
        "doc": "<p>Component layout for Ext.form.FieldSet components",
        "configs": [],
        "events": []
    },
    "Ext.layout.component.ProgressBar": {
        "type": "Ext.layout.component.ProgressBar",
        "configs": [],
        "events": []
    },
    "Ext.layout.component.Tab": {
        "type": "Ext.layout.component.Tab",
        "doc": "<p>Component layout for tabs",
        "configs": [],
        "events": []
    },
    "Ext.layout.component.Tip": {
        "type": "Ext.layout.component.Tip",
        "doc": "<p>Component layout for Tip/ToolTip/etc. components",
        "configs": [],
        "events": []
    },
    "Ext.layout.container.Absolute": {
        "type": "Ext.layout.container.Absolute",
        "doc": "<p>This is a layout that inherits the anchoring of Ext.layout.container.Anchor and adds the\nability for x/y positioning using the standard x and y component config options.",
        "configs": [],
        "events": []
    },
    "Ext.layout.container.AbstractCard": {
        "type": "Ext.layout.container.AbstractCard",
        "doc": "<p>Abstract base class for Card layout.",
        "configs": [
            {
                "name": "deferredRender",
                "type": "boolean",
                "doc": "<p>True to render each contained item at the time it becomes active, false to render all contained items\nas soon as the layout is rendered.  If there is a significant amount of content or\na lot of heavy controls being rendered into panels that are not displayed by default, setting this to\ntrue might improve performance.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.layout.container.AbstractContainer": {
        "type": "Ext.layout.container.AbstractContainer",
        "doc": "<p>Please refer to sub classes documentation",
        "configs": [
            {
                "name": "bindToOwnerCtComponent",
                "type": "boolean",
                "doc": "<p>Flag to notify the ownerCt Component on afterLayout of a change</p>",
                "default": "false"
            },
            {
                "name": "bindToOwnerCtContainer",
                "type": "boolean",
                "doc": "<p>Flag to notify the ownerCt Container on afterLayout of a change</p>",
                "default": "false"
            },
            {
                "name": "itemCls",
                "type": "string",
                "doc": "<p>An optional extra CSS class that will be added to the container. This can be useful for adding\ncustomized styles to the container or any of its children using standard CSS rules. See\nExt.Component.componentCls also.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.layout.container.AbstractFit": {
        "type": "Ext.layout.container.AbstractFit",
        "configs": [],
        "events": []
    },
    "Ext.layout.container.Accordion": {
        "type": "Ext.layout.container.Accordion",
        "doc": "<p>This is a layout that manages multiple Panels in an expandable accordion style such that only\n<strong>one Panel can be expanded at any given time</strong>. Each Panel has built-in support for expanding and collapsing.",
        "configs": [
            {
                "name": "activeOnTop",
                "type": "boolean",
                "doc": "<p>Only valid when multi is <code>false</code> and animate is <code>false</code>.</p>",
                "default": "false"
            },
            {
                "name": "animate",
                "type": "boolean",
                "doc": "<p>True to slide the contained panels open and closed during expand/collapse using animation, false to open and\nclose directly with no animation. Note: The layout performs animated collapsing\nand expanding, <i>not</i> the child Panels.</p>",
                "default": "true"
            },
            {
                "name": "autoWidth",
                "type": "boolean",
                "doc": "<p>Child Panels have their width actively managed to fit within the accordion's width.</p>",
                "default": "true"
            },
            {
                "name": "collapseFirst",
                "type": "boolean",
                "doc": "<p>True to make sure the collapse/expand toggle button always renders first (to the left of) any other tools\nin the contained Panels' title bars, false to render it last.</p>",
                "default": "false"
            },
            {
                "name": "fill",
                "type": "boolean",
                "doc": "<p>True to adjust the active item's height to fill the available space in the container, false to use the\nitem's current height, or auto height if not explicitly set.</p>",
                "default": "true"
            },
            {
                "name": "hideCollapseTool",
                "type": "boolean",
                "doc": "<p>True to hide the contained Panels' collapse/expand toggle buttons, false to display them.\nWhen set to true, titleCollapse is automatically set to <code>true</code>.</p>",
                "default": "false"
            },
            {
                "name": "multi",
                "type": "boolean",
                "doc": "<p>Set to <code>true</code> to enable multiple accordion items to be open at once.</p>",
                "default": "false"
            },
            {
                "name": "titleCollapse",
                "type": "boolean",
                "doc": "<p>True to allow expand/collapse of each contained panel by clicking anywhere on the title bar, false to allow\nexpand/collapse only when the toggle tool button is clicked.  When set to false,\nhideCollapseTool should be false also.</p>",
                "default": "true"
            }
        ],
        "events": []
    },
    "Ext.layout.container.Anchor": {
        "type": "Ext.layout.container.Anchor",
        "doc": "<p>This is a layout that enables anchoring of contained elements relative to the container's dimensions.\nIf the container is resized, all anchored items are automatically rerendered according to their\n<code>anchor</code> rules.",
        "configs": [
            {
                "name": "anchor",
                "type": "string",
                "doc": "<p>This configuation option is to be applied to <strong>child <code>items</code></strong> of a container managed by\nthis layout (ie. configured with <code>layout:'anchor'</code>).</p>",
                "default": null
            },
            {
                "name": "defaultAnchor",
                "type": "string",
                "doc": "<p>Default anchor for all child <b>container</b> items applied if no anchor or specific width is set on the child item.  Defaults to '100%'.</p>",
                "default": "100%"
            }
        ],
        "events": []
    },
    "Ext.layout.container.Auto": {
        "type": "Ext.layout.container.Auto",
        "doc": "<p>The AutoLayout is the default layout manager delegated by Ext.container.Container to\nrender any child Components when no <code>layout</code> is configured into\na <code>Container.</code> AutoLayout provides only a passthrough of any layout calls\nto any child containers.",
        "configs": [],
        "events": []
    },
    "Ext.layout.container.Border": {
        "type": "Ext.layout.container.Border",
        "doc": "<p>This is a multi-pane, application-oriented UI layout style that supports multiple nested panels, automatic bars\nbetween regions and built-in expanding and collapsing of regions.",
        "configs": [],
        "events": []
    },
    "Ext.layout.container.Box": {
        "type": "Ext.layout.container.Box",
        "doc": "<p>Base Class for HBoxLayout and VBoxLayout Classes. Generally it should not need to be used directly.",
        "configs": [
            {
                "name": "animate",
                "type": "boolean/number/object",
                "doc": "<p>If truthy, child Component are <i>animated</i> into position whenever the Container\nis layed out. If this option is numeric, it is used as the animation duration in milliseconds.</p>",
                "default": null
            },
            {
                "name": "clearInnerCtOnLayout",
                "type": "boolean",
                "doc": "\n",
                "default": "false"
            },
            {
                "name": "defaultMargins",
                "type": "object",
                "doc": "<p>If the individual contained items do not have a <tt>margins</tt>\nproperty specified or margin specified via CSS, the default margins from this property will be\napplied to each item.</p>",
                "default": "{top: 0, right: 0, bottom: 0, left: 0}"
            },
            {
                "name": "flex",
                "type": "number",
                "doc": "<p>This configuration option is to be applied to <b>child <tt>items</tt></b> of the container managed\nby this layout. Each child item with a <tt>flex</tt> property will be flexed <b>horizontally</b>\naccording to each item's <b>relative</b> <tt>flex</tt> value compared to the sum of all items with\na <tt>flex</tt> value specified.  Any child items that have either a <tt>flex = 0</tt> or\n<tt>flex = undefined</tt> will not be 'flexed' (the initial size will not be changed).</p>",
                "default": null
            },
            {
                "name": "pack",
                "type": "string",
                "doc": "<p>Controls how the child items of the container are packed together.</p>",
                "default": null
            },
            {
                "name": "padding",
                "type": "string",
                "doc": "<p>Sets the padding to be applied to all child items managed by this layout.</p>",
                "default": "0"
            },
            {
                "name": "shrinkToFit",
                "type": "boolean",
                "doc": "<p>True (the default) to allow fixed size components to shrink (limited to their\nminimum size) to avoid overflow. False to preserve fixed sizes even if they cause\noverflow.</p>",
                "default": "true"
            }
        ],
        "events": []
    },
    "Ext.layout.container.boxOverflow.Menu": {
        "type": "Ext.layout.container.boxOverflow.Menu",
        "configs": [
            {
                "name": "afterCtCls",
                "type": "string",
                "doc": "<p>CSS class added to the afterCt element. This is the element that holds any special items such as scrollers,\nwhich must always be present at the rightmost edge of the Container</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.layout.container.boxOverflow.None": {
        "type": "Ext.layout.container.boxOverflow.None",
        "doc": "<p>Base class for Box Layout overflow handlers. These specialized classes are invoked when a Box Layout\n(either an HBox or a VBox) has child items that are either too wide (for HBox) or too tall (for VBox)\nfor its container.",
        "configs": [],
        "events": []
    },
    "Ext.layout.container.boxOverflow.Scroller": {
        "type": "Ext.layout.container.boxOverflow.Scroller",
        "configs": [
            {
                "name": "afterCtCls",
                "type": "string",
                "doc": "<p>CSS class added to the afterCt element. This is the element that holds any special items such as scrollers,\nwhich must always be present at the rightmost edge of the Container</p>",
                "default": null
            },
            {
                "name": "afterScrollerCls",
                "type": "string",
                "doc": "<p>CSS class added to the right scroller element if enableScroll is used</p>",
                "default": null
            },
            {
                "name": "animateScroll",
                "type": "boolean",
                "doc": "<p>True to animate the scrolling of items within the layout (ignored if enableScroll is false)</p>",
                "default": "false"
            },
            {
                "name": "beforeCtCls",
                "type": "string",
                "doc": "<p>CSS class added to the beforeCt element. This is the element that holds any special items such as scrollers,\nwhich must always be present at the leftmost edge of the Container</p>",
                "default": null
            },
            {
                "name": "beforeScrollerCls",
                "type": "string",
                "doc": "<p>CSS class added to the left scroller element if enableScroll is used</p>",
                "default": null
            },
            {
                "name": "scrollDuration",
                "type": "number",
                "doc": "<p>Number of milliseconds that each scroll animation lasts</p>",
                "default": "400"
            },
            {
                "name": "scrollIncrement",
                "type": "number",
                "doc": "<p>The number of pixels to scroll by on scroller click</p>",
                "default": "20"
            },
            {
                "name": "scrollRepeatInterval",
                "type": "number",
                "doc": "<p>Number of milliseconds between each scroll while a scroller button is held down</p>",
                "default": "60"
            },
            {
                "name": "scrollerCls",
                "type": "string",
                "doc": "<p>CSS class added to both scroller elements if enableScroll is used</p>",
                "default": "x-box-scroller"
            },
            {
                "name": "wheelIncrement",
                "type": "number",
                "doc": "<p>The number of pixels to increment on mouse wheel scrolling.</p>",
                "default": "10"
            }
        ],
        "events": [
            {
                "name": "scroll",
                "params": "scroller(Ext.layout.container.boxOverflow.Scroller) newPosition(Number) animate(Boolean/Object) eOpts(Object)",
                "doc": "\n"
            }
        ]
    },
    "Ext.layout.container.Card": {
        "type": "Ext.layout.container.Card",
        "doc": "<p>This layout manages multiple child Components, each fitted to the Container, where only a single child Component can be\nvisible at any given time.  This layout style is most commonly used for wizards, tab implementations, etc.\nThis class is intended to be extended or created via the layout:'card' Ext.container.Container.layout config,\nand should generally not need to be created directly via the new keyword.",
        "configs": [],
        "events": []
    },
    "Ext.layout.container.CheckboxGroup": {
        "type": "Ext.layout.container.CheckboxGroup",
        "doc": "<p>This layout implements the column arrangement for Ext.form.CheckboxGroup and Ext.form.RadioGroup.\nIt groups the component's sub-items into columns based on the component's\ncolumns and Ext.form.CheckboxGroup.vertical config properties.",
        "configs": [],
        "events": []
    },
    "Ext.layout.container.Column": {
        "type": "Ext.layout.container.Column",
        "doc": "<p>This is the layout style of choice for creating structural layouts in a multi-column format where the width of each\ncolumn can be specified as a percentage or fixed width, but the height is allowed to vary based on the content. This\nclass is intended to be extended or created via the layout:'column' Ext.container.Container.layout config,\nand should generally not need to be created directly via the new keyword.",
        "configs": [],
        "events": []
    },
    "Ext.layout.container.Container": {
        "type": "Ext.layout.container.Container",
        "doc": "<p>This class is intended to be extended or created via the layout\nconfiguration property.  See Ext.container.Container.layout for additional details.",
        "configs": [],
        "events": []
    },
    "Ext.layout.container.Fit": {
        "type": "Ext.layout.container.Fit",
        "doc": "<p>This is a base class for layouts that contain <strong>a single item</strong> that automatically expands to fill the layout's\ncontainer. This class is intended to be extended or created via the <code>layout: 'fit'</code>\nExt.container.Container.layout config, and should generally not need to be created directly via the new keyword.",
        "configs": [
            {
                "name": "defaultMargins",
                "type": "object",
                "doc": "<p>If the individual contained items do not have a <tt>margins</tt>\nproperty specified or margin specified via CSS, the default margins from this property will be\napplied to each item.</p>",
                "default": "{top: 0, right: 0, bottom: 0, left: 0}"
            }
        ],
        "events": []
    },
    "Ext.layout.container.HBox": {
        "type": "Ext.layout.container.HBox",
        "doc": "<p>A layout that arranges items horizontally across a Container. This layout optionally divides available horizontal\nspace between child items containing a numeric <code>flex</code> configuration.",
        "configs": [
            {
                "name": "align",
                "type": "string",
                "doc": "<p>Controls how the child items of the container are aligned.</p>",
                "default": "top"
            }
        ],
        "events": []
    },
    "Ext.layout.container.Table": {
        "type": "Ext.layout.container.Table",
        "doc": "<p>This layout allows you to easily render content into an HTML table. The total number of columns can be specified, and\nrowspan and colspan can be used to create complex layouts within the table. This class is intended to be extended or\ncreated via the <code>layout: {type: 'table'}</code> Ext.container.Container.layout config, and should generally not\nneed to be created directly via the new keyword.",
        "configs": [
            {
                "name": "columns",
                "type": "number",
                "doc": "<p>The total number of columns to create in the table for this layout. If not specified, all Components added to\nthis layout will be rendered into a single row using one column per Component.</p>",
                "default": null
            },
            {
                "name": "tableAttrs",
                "type": "object",
                "doc": "<p>An object containing properties which are added to the DomHelper specification used to\ncreate the layout's <code>&lt;table&gt;</code> element.</p>",
                "default": "null"
            },
            {
                "name": "tdAttrs",
                "type": "object",
                "doc": "<p>An object containing properties which are added to the DomHelper specification used to\ncreate the layout's <td> elements.</p>",
                "default": null
            },
            {
                "name": "trAttrs",
                "type": "object",
                "doc": "<p>An object containing properties which are added to the DomHelper specification used to\ncreate the layout's <tr> elements.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.layout.container.VBox": {
        "type": "Ext.layout.container.VBox",
        "doc": "<p>A layout that arranges items vertically down a Container. This layout optionally divides available vertical space\nbetween child items containing a numeric <code>flex</code> configuration.",
        "configs": [
            {
                "name": "align",
                "type": "string",
                "doc": "<p>Controls how the child items of the container are aligned.</p>",
                "default": "left"
            }
        ],
        "events": []
    },
    "Ext.layout.Layout": {
        "type": "Ext.layout.Layout",
        "doc": "<p>Base Layout class - extended by ComponentLayout and ContainerLayout",
        "configs": [],
        "events": []
    },
    "Ext.Loader": {
        "type": "Ext.Loader",
        "doc": "<p>Ext.Loader is the heart of the new dynamic dependency loading capability in Ext JS 4+. It is most commonly used\nvia the Ext.require shorthand. Ext.Loader supports both asynchronous and synchronous loading\napproaches, and leverage their advantages for the best development flow. We'll discuss about the pros and cons\nof each approach:",
        "configs": [
            {
                "name": "disableCaching",
                "type": "boolean",
                "doc": "<p>Appends current timestamp to script files to prevent caching.</p>",
                "default": "true"
            },
            {
                "name": "disableCachingParam",
                "type": "string",
                "doc": "<p>The get parameter name for the cache buster's timestamp.</p>",
                "default": "_dc"
            },
            {
                "name": "enabled",
                "type": "boolean",
                "doc": "<p>Whether or not to enable the dynamic dependency loading feature.</p>",
                "default": "false"
            },
            {
                "name": "paths",
                "type": "object",
                "doc": "<p>The mapping from namespaces to file paths</p>",
                "default": "{Ext: .}"
            }
        ],
        "events": []
    },
    "Ext.LoadMask": {
        "type": "Ext.LoadMask",
        "doc": "<p>A modal, floating Component which may be shown above a specified Element, or a specified\nComponent while loading data. When shown, the configured owning Element or Component will\nbe covered with a modality mask, and the LoadMask's msg will be displayed centered, accompanied by a spinner image.",
        "configs": [
            {
                "name": "msg",
                "type": "string",
                "doc": "<p>The text to display in a centered loading message box.</p>",
                "default": "Loading..."
            },
            {
                "name": "msgCls",
                "type": "string",
                "doc": "<p>The CSS class to apply to the loading message element.</p>",
                "default": "x-mask-loading"
            },
            {
                "name": "store",
                "type": "ext.data.store",
                "doc": "<p>Optional Store to which the mask is bound. The mask is displayed when a load request is issued, and\nhidden on either load success, or load fail.</p>",
                "default": null
            },
            {
                "name": "useMsg",
                "type": "boolean",
                "doc": "<p>Whether or not to use a loading message class or simply mask the bound element.</p>",
                "default": "true"
            }
        ],
        "events": []
    },
    "Ext.menu.CheckItem": {
        "type": "Ext.menu.CheckItem",
        "doc": "<p>A menu item that contains a togglable checkbox by default, but that can also be a part of a radio group.",
        "configs": [
            {
                "name": "checkedCls",
                "type": "string",
                "doc": "<p>The CSS class used by cls to show the checked state.\nDefaults to <code>Ext.baseCSSPrefix + 'menu-item-checked'</code>.</p>",
                "default": "x-menu-item-checked"
            },
            {
                "name": "groupCls",
                "type": "string",
                "doc": "<p>The CSS class applied to this item's icon image to denote being a part of a radio group.\nDefaults to <code>Ext.baseCSSClass + 'menu-group-icon'</code>.\nAny specified iconCls overrides this.</p>",
                "default": "x-menu-group-icon"
            },
            {
                "name": "hideOnClick",
                "type": "boolean",
                "doc": "<p>Whether to not to hide the owning menu when this item is clicked.\nDefaults to <code>false</code> for checkbox items, and to <code>true</code> for radio group items.</p>",
                "default": "false"
            },
            {
                "name": "uncheckedCls",
                "type": "string",
                "doc": "<p>The CSS class used by cls to show the unchecked state.\nDefaults to <code>Ext.baseCSSPrefix + 'menu-item-unchecked'</code>.</p>",
                "default": "x-menu-item-unchecked"
            }
        ],
        "events": [
            {
                "name": "beforecheckchange",
                "params": "this(Ext.menu.CheckItem) checked(Boolean) eOpts(Object)",
                "doc": "<p>Fires before a change event. Return false to cancel.</p>"
            },
            {
                "name": "checkchange",
                "params": "this(Ext.menu.CheckItem) checked(Boolean) eOpts(Object)",
                "doc": "<p>Fires after a change event.</p>"
            }
        ]
    },
    "Ext.menu.ColorPicker": {
        "type": "Ext.menu.ColorPicker",
        "doc": "<p>A menu containing a Ext.picker.Color Component.",
        "configs": [
            {
                "name": "hideOnClick",
                "type": "boolean",
                "doc": "<p>False to continue showing the menu after a color is selected.</p>",
                "default": "true"
            },
            {
                "name": "pickerId",
                "type": "string",
                "doc": "<p>An id to assign to the underlying color picker.</p>",
                "default": "null"
            }
        ],
        "events": [
            {
                "name": "select",
                "params": "this(Ext.picker.Color) color(String) eOpts(Object)",
                "doc": "<p>Fires when a color is selected</p>"
            }
        ]
    },
    "Ext.menu.DatePicker": {
        "type": "Ext.menu.DatePicker",
        "doc": "<p>A menu containing an Ext.picker.Date Component.",
        "configs": [
            {
                "name": "hideOnClick",
                "type": "boolean",
                "doc": "<p>False to continue showing the menu after a date is selected.</p>",
                "default": "true"
            },
            {
                "name": "pickerId",
                "type": "string",
                "doc": "<p>An id to assign to the underlying date picker.</p>",
                "default": "null"
            }
        ],
        "events": [
            {
                "name": "select",
                "params": "this(Ext.picker.Date) date(Date) eOpts(Object)",
                "doc": "<p>Fires when a date is selected</p>"
            }
        ]
    },
    "Ext.menu.Item": {
        "type": "Ext.menu.Item",
        "doc": "<p>A base class for all menu items that require menu-related functionality such as click handling,\nsub-menus, icons, etc.",
        "configs": [
            {
                "name": "activeCls",
                "type": "string",
                "doc": "<p>The CSS class added to the menu item when the item is activated (focused/mouseover).\nDefaults to <code>Ext.baseCSSPrefix + 'menu-item-active'</code>.</p>",
                "default": "x-menu-item-active"
            },
            {
                "name": "canActivate",
                "type": "boolean",
                "doc": "<p>Whether or not this menu item can be activated when focused/mouseovered. Defaults to <code>true</code>.</p>",
                "default": "true"
            },
            {
                "name": "clickHideDelay",
                "type": "number",
                "doc": "<p>The delay in milliseconds to wait before hiding the menu after clicking the menu item.\nThis only has an effect when <code>hideOnClick: true</code>. Defaults to <code>1</code>.</p>",
                "default": "1"
            },
            {
                "name": "destroyMenu",
                "type": "boolean",
                "doc": "<p>Whether or not to destroy any associated sub-menu when this item is destroyed. Defaults to <code>true</code>.</p>",
                "default": "true"
            },
            {
                "name": "disabledCls",
                "type": "string",
                "doc": "<p>The CSS class added to the menu item when the item is disabled.\nDefaults to <code>Ext.baseCSSPrefix + 'menu-item-disabled'</code>.</p>",
                "default": "x-menu-item-disabled"
            },
            {
                "name": "hideOnClick",
                "type": "boolean",
                "doc": "<p>Whether to not to hide the owning menu when this item is clicked. Defaults to <code>true</code>.</p>",
                "default": "true"
            },
            {
                "name": "href",
                "type": "string",
                "doc": "<p>The href attribute to use for the underlying anchor link. Defaults to <code>#</code>.</p>",
                "default": null
            },
            {
                "name": "hrefTarget",
                "type": "string",
                "doc": "<p>The target attribute to use for the underlying anchor link. Defaults to <code>undefined</code>.</p>",
                "default": null
            },
            {
                "name": "icon",
                "type": "string",
                "doc": "<p>The path to an icon to display in this item. Defaults to <code>Ext.BLANK_IMAGE_URL</code>.</p>",
                "default": null
            },
            {
                "name": "iconCls",
                "type": "string",
                "doc": "<p>A CSS class that specifies a <code>background-image</code> to use as the icon for this item. Defaults to <code>undefined</code>.</p>",
                "default": null
            },
            {
                "name": "menuAlign",
                "type": "string",
                "doc": "<p>The default Ext.Element.getAlignToXY anchor position value for this\nitem's sub-menu relative to this item's position. Defaults to <code>'tl-tr?'</code>.</p>",
                "default": "tl-tr?"
            },
            {
                "name": "menuExpandDelay",
                "type": "number",
                "doc": "<p>The delay in milliseconds before this item's sub-menu expands after this item is moused over. Defaults to <code>200</code>.</p>",
                "default": "200"
            },
            {
                "name": "menuHideDelay",
                "type": "number",
                "doc": "<p>The delay in milliseconds before this item's sub-menu hides after this item is moused out. Defaults to <code>200</code>.</p>",
                "default": "200"
            },
            {
                "name": "plain",
                "type": "boolean",
                "doc": "<p>Whether or not this item is plain text/html with no icon or visual activation. Defaults to <code>false</code>.</p>",
                "default": null
            },
            {
                "name": "text",
                "type": "string",
                "doc": "<p>The text/html to display in this item. Defaults to <code>undefined</code>.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "activate",
                "params": "item(Ext.menu.Item) eOpts(Object)",
                "doc": "<p>Fires when this item is activated</p>"
            },
            {
                "name": "click",
                "params": "item(Ext.menu.Item) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires when this item is clicked</p>"
            },
            {
                "name": "deactivate",
                "params": "item(Ext.menu.Item) eOpts(Object)",
                "doc": "<p>Fires when this tiem is deactivated</p>"
            }
        ]
    },
    "Ext.menu.KeyNav": {
        "type": "Ext.menu.KeyNav",
        "configs": [],
        "events": []
    },
    "Ext.menu.Manager": {
        "type": "Ext.menu.Manager",
        "doc": "<p>Provides a common registry of all menus on a page.",
        "configs": [],
        "events": []
    },
    "Ext.menu.Menu": {
        "type": "Ext.menu.Menu",
        "doc": "<p>A menu object. This is the container to which you may add menu items.",
        "configs": [
            {
                "name": "allowOtherMenus",
                "type": "boolean",
                "doc": "<p>True to allow multiple menus to be displayed at the same time.</p>",
                "default": "false"
            },
            {
                "name": "defaultAlign",
                "type": "string",
                "doc": "<p>The default Ext.Element#getAlignToXY anchor position value for this menu\nrelative to its element of origin.</p>",
                "default": "tl-bl?"
            },
            {
                "name": "floating",
                "type": "boolean",
                "doc": "<p>A Menu configured as <code>floating: true</code> (the default) will be rendered as an absolutely positioned,\nfloating Component. If configured as <code>floating: false</code>, the Menu may be\nused as a child item of another Container.</p>",
                "default": "true"
            },
            {
                "name": "hidden",
                "type": "boolean",
                "doc": "<p>True to initially render the Menu as hidden, requiring to be shown manually.</p>",
                "default": "undefined"
            },
            {
                "name": "ignoreParentClicks",
                "type": "boolean",
                "doc": "<p>True to ignore clicks on any item in this menu that is a parent item (displays a submenu)\nso that the submenu is not dismissed when clicking the parent item.</p>",
                "default": "false"
            },
            {
                "name": "minWidth",
                "type": "number",
                "doc": "<p>The minimum width of the Menu.</p>",
                "default": "120"
            },
            {
                "name": "plain",
                "type": "boolean",
                "doc": "<p>True to remove the incised line down the left side of the menu and to not indent general Component items.</p>",
                "default": "false"
            },
            {
                "name": "showSeparator",
                "type": "boolean",
                "doc": "<p>True to show the icon separator.</p>",
                "default": "true"
            }
        ],
        "events": [
            {
                "name": "click",
                "params": "menu(Ext.menu.Menu) item(Ext.Component) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires when this menu is clicked</p>"
            },
            {
                "name": "mouseenter",
                "params": "menu(Ext.menu.Menu) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires when the mouse enters this menu</p>"
            },
            {
                "name": "mouseleave",
                "params": "menu(Ext.menu.Menu) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires when the mouse leaves this menu</p>"
            },
            {
                "name": "mouseover",
                "params": "menu(Ext.menu.Menu) item(Ext.Component) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires when the mouse is hovering over this menu</p>"
            }
        ]
    },
    "Ext.menu.Separator": {
        "type": "Ext.menu.Separator",
        "doc": "<p>Adds a separator bar to a menu, used to divide logical groups of menu items. Generally you will\nadd one of these by using - in your call to add() or in your items config rather than creating one directly.",
        "configs": [
            {
                "name": "separatorCls",
                "type": "string",
                "doc": "<p>The CSS class used by the separator item to show the incised line.\nDefaults to <code>Ext.baseCSSPrefix + 'menu-item-separator'</code>.</p>",
                "default": "x-menu-item-separator"
            }
        ],
        "events": []
    },
    "Ext.MessageBox": {
        "type": "Ext.MessageBox",
        "doc": "<p>Singleton instance of Ext.window.MessageBox.",
        "configs": [],
        "events": []
    },
    "Ext.ModelManager": {
        "type": "Ext.ModelManager",
        "doc": "<p>The ModelManager keeps track of all Ext.data.Model types defined in your application.",
        "configs": [],
        "events": []
    },
    "Ext.Number": {
        "type": "Ext.Number",
        "doc": "<p>A collection of useful static methods to deal with numbers",
        "configs": [],
        "events": []
    },
    "Ext.Object": {
        "type": "Ext.Object",
        "doc": "<p>A collection of useful static methods to deal with objects.",
        "configs": [],
        "events": []
    },
    "Ext.panel.AbstractPanel": {
        "type": "Ext.panel.AbstractPanel",
        "doc": "<p>A base class which provides methods common to Panel classes across the Sencha product range.",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this panel's element.</p>",
                "default": "x-panel"
            },
            {
                "name": "bodyBorder",
                "type": "boolean",
                "doc": "<p>A shortcut to add or remove the border on the body of a panel. This only applies to a panel\nwhich has the frame configuration set to <code>true</code>.</p>",
                "default": null
            },
            {
                "name": "bodyCls",
                "type": "string/string[]",
                "doc": "<p>A CSS class, space-delimited string of classes, or array of classes to be applied to the panel's body element.</p>",
                "default": null
            },
            {
                "name": "bodyPadding",
                "type": "number/string",
                "doc": "<p>A shortcut for setting a padding style on the body element. The value can either be\na number to be applied to all sides, or a normal css string describing padding.</p>",
                "default": null
            },
            {
                "name": "bodyStyle",
                "type": "string/object/function",
                "doc": "<p>Custom CSS styles to be applied to the panel's body element, which can be supplied as a valid CSS style string,\nan object containing style property name/value pairs or a function that returns such a string or object.</p>",
                "default": null
            },
            {
                "name": "defaultDockWeights",
                "type": "object",
                "doc": "<p>This object holds the default weights applied to dockedItems that have no weight. These start with a\nweight of 1, to allow negative weights to insert before top items and are odd numbers\nso that even weights can be used to get between different dock orders.</p>",
                "default": "{top: 1, left: 3, right: 5, bottom: 7}"
            },
            {
                "name": "dockedItems",
                "type": "object/object[]",
                "doc": "<p>A component or series of components to be added as docked items to this panel.\nThe docked items can be docked to either the top, right, left or bottom of a panel.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "bodyresize",
                "params": "p(Ext.panel.Panel) width(Number) height(Number) eOpts(Object)",
                "doc": "<p>Fires after the Panel has been resized.</p>"
            }
        ]
    },
    "Ext.panel.Header": {
        "type": "Ext.panel.Header",
        "doc": "<p>Simple header class which is used for on Ext.panel.Panel and Ext.window.Window",
        "configs": [
            {
                "name": "iconCls",
                "type": "string",
                "doc": "<p>CSS class for icon in header. Used for displaying an icon to the left of a title.</p>",
                "default": null
            },
            {
                "name": "title",
                "type": "string",
                "doc": "<p>The title text to display</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.panel.Panel": {
        "type": "Ext.panel.Panel",
        "doc": "<p>Panel is a container that has specific functionality and structural components that make it the perfect building\nblock for application-oriented user interfaces.",
        "configs": [
            {
                "name": "animCollapse",
                "type": "boolean",
                "doc": "<p><code>true</code> to animate the transition when the panel is collapsed, <code>false</code> to skip the animation (defaults to <code>true</code>\nif the Ext.fx.Anim class is available, otherwise <code>false</code>). May also be specified as the animation\nduration in milliseconds.</p>",
                "default": null
            },
            {
                "name": "bbar",
                "type": "object/object[]",
                "doc": "<p>Convenience config. Short for 'Bottom Bar'.</p>",
                "default": null
            },
            {
                "name": "buttonAlign",
                "type": "string",
                "doc": "<p>The alignment of any buttons added to this panel. Valid values are 'right', 'left' and 'center' (defaults to\n'right' for buttons/fbar, 'left' for other toolbar types).</p>",
                "default": null
            },
            {
                "name": "buttons",
                "type": "object/object[]",
                "doc": "<p>Convenience config used for adding buttons docked to the bottom of the panel. This is a\nsynonym for the fbar config.</p>",
                "default": null
            },
            {
                "name": "closable",
                "type": "boolean",
                "doc": "<p>True to display the 'close' tool button and allow the user to close the window, false to hide the button and\ndisallow closing the window.</p>",
                "default": "false"
            },
            {
                "name": "closeAction",
                "type": "string",
                "doc": "<p>The action to take when the close header tool is clicked.</p>",
                "default": "destroy"
            },
            {
                "name": "collapseDirection",
                "type": "boolean",
                "doc": "<p>The direction to collapse the Panel when the toggle button is clicked.</p>",
                "default": null
            },
            {
                "name": "collapseFirst",
                "type": "boolean",
                "doc": "<p><code>true</code> to make sure the collapse/expand toggle button always renders first (to the left of) any other tools in\nthe panel's title bar, <code>false</code> to render it last.</p>",
                "default": "true"
            },
            {
                "name": "collapseMode",
                "type": "string",
                "doc": "<p><strong>Important: this config is only effective for collapsible Panels which are direct child items of a\nborder layout.</strong></p>",
                "default": null
            },
            {
                "name": "collapsed",
                "type": "boolean",
                "doc": "<p><code>true</code> to render the panel collapsed, <code>false</code> to render it expanded.</p>",
                "default": "false"
            },
            {
                "name": "collapsedCls",
                "type": "string",
                "doc": "<p>A CSS class to add to the panel's element after it has been collapsed.</p>",
                "default": "collapsed"
            },
            {
                "name": "collapsible",
                "type": "boolean",
                "doc": "<p>True to make the panel collapsible and have an expand/collapse toggle Tool added into the header tool button\narea. False to keep the panel sized either statically, or by an owning layout manager, with no toggle Tool.</p>",
                "default": "false"
            },
            {
                "name": "dockedItems",
                "type": "object/object[]",
                "doc": "<p>A component or series of components to be added as docked items to this panel. The docked items can be docked to\neither the top, right, left or bottom of a panel. This is typically used for things like toolbars or tab bars.</p>",
                "default": null
            },
            {
                "name": "fbar",
                "type": "object/object[]",
                "doc": "<p>Convenience config used for adding items to the bottom of the panel. Short for Footer Bar.</p>",
                "default": null
            },
            {
                "name": "floatable",
                "type": "boolean",
                "doc": "<p><strong>Important: This config is only effective for collapsible Panels which are direct child items of a\nborder layout.</strong></p>",
                "default": "true"
            },
            {
                "name": "frame",
                "type": "boolean",
                "doc": "<p>True to apply a frame to the panel.</p>",
                "default": "false"
            },
            {
                "name": "frameHeader",
                "type": "boolean",
                "doc": "<p>True to apply a frame to the panel panels header (if 'frame' is true).</p>",
                "default": "true"
            },
            {
                "name": "headerPosition",
                "type": "string",
                "doc": "<p>Specify as <code>'top'</code>, <code>'bottom'</code>, <code>'left'</code> or <code>'right'</code>.</p>",
                "default": "top"
            },
            {
                "name": "hideCollapseTool",
                "type": "boolean",
                "doc": "<p><code>true</code> to hide the expand/collapse toggle button when <code>collapsible == true</code>, <code>false</code> to display it.</p>",
                "default": "false"
            },
            {
                "name": "iconCls",
                "type": "string",
                "doc": "<p>CSS class for icon in header. Used for displaying an icon to the left of a title.</p>",
                "default": null
            },
            {
                "name": "lbar",
                "type": "object/object[]",
                "doc": "<p>Convenience config. Short for 'Left Bar' (left-docked, vertical toolbar).</p>",
                "default": null
            },
            {
                "name": "minButtonWidth",
                "type": "number",
                "doc": "<p>Minimum width of all footer toolbar buttons in pixels. If set, this will be used as the default\nvalue for the Ext.button.Button.minWidth config of each Button added to the <strong>footer toolbar</strong> via the\nfbar or buttons configurations. It will be ignored for buttons that have a minWidth configured\nsome other way, e.g. in their own config object or via the defaults of\ntheir parent container.</p>",
                "default": "75"
            },
            {
                "name": "overlapHeader",
                "type": "boolean",
                "doc": "<p>True to overlap the header in a panel over the framing of the panel itself. This is needed when frame:true (and\nis done automatically for you). Otherwise it is undefined. If you manually add rounded corners to a panel header\nwhich does not have frame:true, this will need to be set to true.</p>",
                "default": null
            },
            {
                "name": "placeholder",
                "type": "ext.component/object",
                "doc": "<p><strong>Important: This config is only effective for collapsible Panels which are direct child items of a\nborder layout when not using the <code>'header'</code> collapseMode.</strong></p>",
                "default": null
            },
            {
                "name": "preventHeader",
                "type": "boolean",
                "doc": "<p>Prevent a Header from being created and shown.</p>",
                "default": "false"
            },
            {
                "name": "rbar",
                "type": "object/object[]",
                "doc": "<p>Convenience config. Short for 'Right Bar' (right-docked, vertical toolbar).</p>",
                "default": null
            },
            {
                "name": "tbar",
                "type": "object/object[]",
                "doc": "<p>Convenience config. Short for 'Top Bar'.</p>",
                "default": null
            },
            {
                "name": "title",
                "type": "string",
                "doc": "<p>The title text to be used to display in the panel header. When a\n<code>title</code> is specified the Ext.panel.Header will automatically be created and displayed unless\npreventHeader is set to <code>true</code>.</p>",
                "default": ""
            },
            {
                "name": "titleCollapse",
                "type": "boolean",
                "doc": "<p><code>true</code> to allow expanding and collapsing the panel (when <code>collapsible = true</code>) by clicking anywhere in\nthe header bar, <code>false</code>) to allow it only by clicking to tool butto).</p>",
                "default": "false"
            },
            {
                "name": "tools",
                "type": "object[]/ext.panel.tool[]",
                "doc": "<p>An array of Ext.panel.Tool configs/instances to be added to the header tool area. The tools are stored as\nchild components of the header container. They can be accessed using down and {query}, as well as the\nother component methods. The toggle tool is automatically created if collapsible is set to true.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "beforeclose",
                "params": "panel(Ext.panel.Panel) eOpts(Object)",
                "doc": "<p>Fires before the user closes the panel. Return false from any listener to stop the close event being\nfired</p>"
            },
            {
                "name": "beforecollapse",
                "params": "p(Ext.panel.Panel) direction(String) animate(Boolean) eOpts(Object)",
                "doc": "<p>Fires before this panel is collapsed. Return false to prevent the collapse.</p>"
            },
            {
                "name": "beforeexpand",
                "params": "p(Ext.panel.Panel) animate(Boolean) eOpts(Object)",
                "doc": "<p>Fires before this panel is expanded. Return false to prevent the expand.</p>"
            },
            {
                "name": "collapse",
                "params": "p(Ext.panel.Panel) eOpts(Object)",
                "doc": "<p>Fires after this Panel hass collapsed.</p>"
            },
            {
                "name": "expand",
                "params": "p(Ext.panel.Panel) eOpts(Object)",
                "doc": "<p>Fires after this Panel has expanded.</p>"
            },
            {
                "name": "iconchange",
                "params": "p(Ext.panel.Panel) newIconCls(String) oldIconCls(String) eOpts(Object)",
                "doc": "<p>Fires after the Panel iconCls has been set or changed.</p>"
            },
            {
                "name": "titlechange",
                "params": "p(Ext.panel.Panel) newTitle(String) oldTitle(String) eOpts(Object)",
                "doc": "<p>Fires after the Panel title has been set or changed.</p>"
            }
        ]
    },
    "Ext.panel.Proxy": {
        "type": "Ext.panel.Proxy",
        "doc": "<p>A custom drag proxy implementation specific to Ext.panel.Panels. This class\nis primarily used internally for the Panel's drag drop implementation, and\nshould never need to be created directly.",
        "configs": [
            {
                "name": "insertProxy",
                "type": "boolean",
                "doc": "<p>True to insert a placeholder proxy element while dragging the panel, false to drag with no proxy.\nMost Panels are not absolute positioned and therefore we need to reserve this space.</p>",
                "default": "true"
            }
        ],
        "events": []
    },
    "Ext.panel.Table": {
        "type": "Ext.panel.Table",
        "doc": "<p>TablePanel is the basis of both TreePanel and GridPanel.",
        "configs": [
            {
                "name": "columns",
                "type": "ext.grid.column.column[]",
                "doc": "<p>An array of column definition objects which define all columns that appear in this\ngrid. Each column definition provides the header text for the column, and a definition of where the data for that\ncolumn comes from.</p>",
                "default": null
            },
            {
                "name": "deferRowRender",
                "type": "boolean",
                "doc": "<p>Defaults to true to enable deferred row rendering.</p>",
                "default": "true"
            },
            {
                "name": "enableColumnHide",
                "type": "boolean",
                "doc": "<p>False to disable column hiding within this grid.</p>",
                "default": "true"
            },
            {
                "name": "enableColumnMove",
                "type": "boolean",
                "doc": "<p>False to disable column dragging within this grid.</p>",
                "default": "true"
            },
            {
                "name": "enableColumnResize",
                "type": "boolean",
                "doc": "<p>False to disable column resizing within this grid.</p>",
                "default": "true"
            },
            {
                "name": "enableLocking",
                "type": "boolean",
                "doc": "<p>True to enable locking support for this grid. Alternatively, locking will also be automatically\nenabled if any of the columns in the column configuration contain the locked config option.</p>",
                "default": "false"
            },
            {
                "name": "features",
                "type": "ext.grid.feature.feature[]",
                "doc": "<p>An array of grid Features to be added to this grid. See Ext.grid.feature.Feature for usage.</p>",
                "default": null
            },
            {
                "name": "forceFit",
                "type": "boolean",
                "doc": "<p>True to force the columns to fit into the available width. Headers are first sized according to configuration,\nwhether that be a specific width, or flex. Then they are all proportionally changed in width so that the entire\ncontent width is used.</p>",
                "default": null
            },
            {
                "name": "hideHeaders",
                "type": "boolean",
                "doc": "<p>True to hide column headers.</p>",
                "default": "false"
            },
            {
                "name": "multiSelect",
                "type": "boolean",
                "doc": "<p>True to enable 'MULTI' selection mode on selection model. See Ext.selection.Model.mode.</p>",
                "default": null
            },
            {
                "name": "scroll",
                "type": "string/boolean",
                "doc": "<p>Scrollers configuration. Valid values are 'both', 'horizontal' or 'vertical'.\nTrue implies 'both'. False implies 'none'.</p>",
                "default": "true"
            },
            {
                "name": "scrollDelta",
                "type": "number",
                "doc": "<p>Number of pixels to scroll when scrolling with mousewheel.</p>",
                "default": "40"
            },
            {
                "name": "selModel",
                "type": "ext.selection.model/object",
                "doc": "<p>A selection model instance or config object.  In latter case the selType\nconfig option determines to which type of selection model this config is applied.</p>",
                "default": null
            },
            {
                "name": "selType",
                "type": "string",
                "doc": "<p>An xtype of selection model to use. Defaults to 'rowmodel'. This is used to create selection model if just\na config object or nothing at all given in selModel config.</p>",
                "default": "rowmodel"
            },
            {
                "name": "simpleSelect",
                "type": "boolean",
                "doc": "<p>True to enable 'SIMPLE' selection mode on selection model. See Ext.selection.Model.mode.</p>",
                "default": null
            },
            {
                "name": "sortableColumns",
                "type": "boolean",
                "doc": "<p>False to disable column sorting via clicking the header and via the Sorting menu items.</p>",
                "default": "true"
            },
            {
                "name": "store",
                "type": "ext.data.store",
                "doc": "<p>The Store the grid should use as its data source.</p>",
                "default": null
            },
            {
                "name": "view",
                "type": "ext.view.table",
                "doc": "<p>The Ext.view.Table used by the grid. Use viewConfig to just supply some config options to\nview (instead of creating an entire View instance).</p>",
                "default": null
            },
            {
                "name": "viewConfig",
                "type": "object",
                "doc": "<p>A config object that will be applied to the grid's UI view. Any of the config options available for\nExt.view.Table can be specified here. This option is ignored if view is specified.</p>",
                "default": null
            },
            {
                "name": "viewType",
                "type": "string",
                "doc": "<p>An xtype of view to use. This is automatically set to 'gridview' by Grid\nand to 'treeview' by Tree.</p>",
                "default": "null"
            }
        ],
        "events": [
            {
                "name": "beforecontainerclick",
                "params": "this(Ext.view.View) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires before the click event on the container is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforecontainercontextmenu",
                "params": "this(Ext.view.View) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires before the contextmenu event on the container is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforecontainerdblclick",
                "params": "this(Ext.view.View) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires before the dblclick event on the container is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforecontainermousedown",
                "params": "this(Ext.view.View) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires before the mousedown event on the container is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforecontainermouseout",
                "params": "this(Ext.view.View) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires before the mouseout event on the container is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforecontainermouseover",
                "params": "this(Ext.view.View) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires before the mouseover event on the container is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforecontainermouseup",
                "params": "this(Ext.view.View) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires before the mouseup event on the container is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforedeselect",
                "params": "this(Ext.selection.RowModel) record(Ext.data.Model) index(Number) eOpts(Object)",
                "doc": "<p>Fired before a record is deselected. If any listener returns false, the\ndeselection is cancelled.</p>"
            },
            {
                "name": "beforeitemclick",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires before the click event on an item is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforeitemcontextmenu",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires before the contextmenu event on an item is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforeitemdblclick",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires before the dblclick event on an item is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforeitemmousedown",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires before the mousedown event on an item is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforeitemmouseenter",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires before the mouseenter event on an item is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforeitemmouseleave",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires before the mouseleave event on an item is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforeitemmouseup",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires before the mouseup event on an item is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforeselect",
                "params": "this(Ext.selection.RowModel) record(Ext.data.Model) index(Number) eOpts(Object)",
                "doc": "<p>Fired before a record is selected. If any listener returns false, the\nselection is cancelled.</p>"
            },
            {
                "name": "columnhide",
                "params": "ct(Ext.grid.header.Container) column(Ext.grid.column.Column) eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "columnmove",
                "params": "ct(Ext.grid.header.Container) column(Ext.grid.column.Column) fromIdx(Number) toIdx(Number) eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "columnresize",
                "params": "ct(Ext.grid.header.Container) column(Ext.grid.column.Column) width(Number) eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "columnshow",
                "params": "ct(Ext.grid.header.Container) column(Ext.grid.column.Column) eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "containerclick",
                "params": "this(Ext.view.View) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires when the container is clicked.</p>"
            },
            {
                "name": "containercontextmenu",
                "params": "this(Ext.view.View) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires when the container is right clicked.</p>"
            },
            {
                "name": "containerdblclick",
                "params": "this(Ext.view.View) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires when the container is double clicked.</p>"
            },
            {
                "name": "containermouseout",
                "params": "this(Ext.view.View) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires when you move the mouse out of the container.</p>"
            },
            {
                "name": "containermouseover",
                "params": "this(Ext.view.View) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires when you move the mouse over the container.</p>"
            },
            {
                "name": "containermouseup",
                "params": "this(Ext.view.View) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires when there is a mouse up on the container</p>"
            },
            {
                "name": "deselect",
                "params": "this(Ext.selection.RowModel) record(Ext.data.Model) index(Number) eOpts(Object)",
                "doc": "<p>Fired after a record is deselected</p>"
            },
            {
                "name": "itemclick",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires when an item is clicked.</p>"
            },
            {
                "name": "itemcontextmenu",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires when an item is right clicked.</p>"
            },
            {
                "name": "itemdblclick",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires when an item is double clicked.</p>"
            },
            {
                "name": "itemmousedown",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires when there is a mouse down on an item</p>"
            },
            {
                "name": "itemmouseenter",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires when the mouse enters an item.</p>"
            },
            {
                "name": "itemmouseleave",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires when the mouse leaves an item.</p>"
            },
            {
                "name": "itemmouseup",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires when there is a mouse up on an item</p>"
            },
            {
                "name": "reconfigure",
                "params": "this(Ext.panel.Table) eOpts(Object)",
                "doc": "<p>Fires after a reconfigure.</p>"
            },
            {
                "name": "scrollerhide",
                "params": "scroller(Ext.grid.Scroller) orientation(String) eOpts(Object)",
                "doc": "<p>Fires when a scroller is hidden.</p>"
            },
            {
                "name": "scrollershow",
                "params": "scroller(Ext.grid.Scroller) orientation(String) eOpts(Object)",
                "doc": "<p>Fires when a scroller is shown.</p>"
            },
            {
                "name": "select",
                "params": "this(Ext.selection.RowModel) record(Ext.data.Model) index(Number) eOpts(Object)",
                "doc": "<p>Fired after a record is selected</p>"
            },
            {
                "name": "selectionchange",
                "params": "this(Ext.selection.Model) selected(Ext.data.Model[]) eOpts(Object)",
                "doc": "<p>Fired after a selection change has occurred</p>"
            },
            {
                "name": "sortchange",
                "params": "ct(Ext.grid.header.Container) column(Ext.grid.column.Column) direction(String) eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "viewready",
                "params": "this(Ext.panel.Table) eOpts(Object)",
                "doc": "<p>Fires when the grid view is available (use this for selecting a default row).</p>"
            }
        ]
    },
    "Ext.panel.Tool": {
        "type": "Ext.panel.Tool",
        "doc": "<p>This class is used to display small visual icons in the header of a panel. There are a set of\n25 icons that can be specified by using the type config. The handler config\ncan be used to provide a function that will respond to any click events.",
        "configs": [
            {
                "name": "scope",
                "type": "object",
                "doc": "<p>The scope to execute the handler function. Defaults to the tool.</p>",
                "default": null
            },
            {
                "name": "stopEvent",
                "type": "boolean",
                "doc": "<p>Specify as false to allow click event to propagate.</p>",
                "default": "true"
            },
            {
                "name": "tooltip",
                "type": "string/object",
                "doc": "<p>The tooltip for the tool - can be a string to be used as innerHTML (html tags are accepted) or QuickTips config\nobject</p>",
                "default": null
            },
            {
                "name": "tooltipType",
                "type": "string",
                "doc": "<p>The type of tooltip to use. Either 'qtip' (default) for QuickTips or 'title' for title attribute.</p>",
                "default": "qtip"
            },
            {
                "name": "type",
                "type": "string",
                "doc": "<p>The type of tool to render.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "click",
                "params": "this(Ext.panel.Tool) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires when the tool is clicked</p>"
            }
        ]
    },
    "Ext.picker.Color": {
        "type": "Ext.picker.Color",
        "doc": "<p>Color picker provides a simple color palette for choosing colors. The picker can be rendered to any container. The\navailable default to a standard 40-color palette; this can be customized with the colors config.",
        "configs": [
            {
                "name": "allowReselect",
                "type": "boolean",
                "doc": "<p>If set to true then reselecting a color that is already selected fires the select event</p>",
                "default": "false"
            },
            {
                "name": "clickEvent",
                "type": "string",
                "doc": "<p>The DOM event that will cause a color to be selected. This can be any valid event name (dblclick, contextmenu).</p>",
                "default": "click"
            },
            {
                "name": "componentCls",
                "type": "string",
                "doc": "<p>The CSS class to apply to the containing element.</p>",
                "default": "x-color-picker"
            },
            {
                "name": "scope",
                "type": "object",
                "doc": "<p>The scope (<code>this</code> reference) in which the <code>handler</code> function will be called. Defaults to this\nColor picker instance.</p>",
                "default": null
            },
            {
                "name": "selectedCls",
                "type": "string",
                "doc": "<p>The CSS class to apply to the selected element</p>",
                "default": "x-color-picker-selected"
            },
            {
                "name": "value",
                "type": "string",
                "doc": "<p>The initial color to highlight (should be a valid 6-digit color hex code without the # symbol). Note that the hex\ncodes are case-sensitive.</p>",
                "default": "null"
            }
        ],
        "events": [
            {
                "name": "select",
                "params": "this(Ext.picker.Color) color(String) eOpts(Object)",
                "doc": "<p>Fires when a color is selected</p>"
            }
        ]
    },
    "Ext.picker.Date": {
        "type": "Ext.picker.Date",
        "doc": "<p>A date picker. This class is used by the Ext.form.field.Date field to allow browsing and selection of valid\ndates in a popup next to the field, but may also be used with other components.",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this components element.</p>",
                "default": "x-datepicker"
            },
            {
                "name": "dayNames",
                "type": "string[]",
                "doc": "<p>An array of textual day names which can be overriden for localization support (defaults to Ext.Date.dayNames)</p>",
                "default": null
            },
            {
                "name": "disableAnim",
                "type": "boolean",
                "doc": "<p>True to disable animations when showing the month picker.</p>",
                "default": "false"
            },
            {
                "name": "disabledCellCls",
                "type": "string",
                "doc": "<p>The class to apply to disabled cells.</p>",
                "default": "x-datepicker-disabled"
            },
            {
                "name": "disabledDates",
                "type": "string[]",
                "doc": "<p>An array of 'dates' to disable, as strings. These strings will be used to build a dynamic regular expression so\nthey are very powerful.</p>",
                "default": null
            },
            {
                "name": "disabledDatesRE",
                "type": "regexp",
                "doc": "<p>JavaScript regular expression used to disable a pattern of dates. The disabledDates\nconfig will generate this regex internally, but if you specify disabledDatesRE it will take precedence over the\ndisabledDates value.</p>",
                "default": "null"
            },
            {
                "name": "disabledDatesText",
                "type": "string",
                "doc": "<p>The tooltip text to display when the date falls on a disabled date.</p>",
                "default": "Disabled"
            },
            {
                "name": "disabledDays",
                "type": "number[]",
                "doc": "<p>An array of days to disable, 0-based. For example, [0, 6] disables Sunday and Saturday.</p>",
                "default": "null"
            },
            {
                "name": "disabledDaysText",
                "type": "string",
                "doc": "<p>The tooltip to display when the date falls on a disabled day.</p>",
                "default": "Disabled"
            },
            {
                "name": "focusOnShow",
                "type": "boolean",
                "doc": "<p>True to automatically focus the picker on show.</p>",
                "default": "false"
            },
            {
                "name": "format",
                "type": "string",
                "doc": "<p>The default date format string which can be overriden for localization support. The format must be valid\naccording to Ext.Date.parse (defaults to Ext.Date.defaultFormat).</p>",
                "default": null
            },
            {
                "name": "keyNavConfig",
                "type": "object",
                "doc": "<p>Specifies optional custom key event handlers for the Ext.util.KeyNav attached to this date picker. Must\nconform to the config format recognized by the Ext.util.KeyNav constructor. Handlers specified in this\nobject will replace default handlers of the same name.</p>",
                "default": null
            },
            {
                "name": "longDayFormat",
                "type": "string",
                "doc": "<p>The format for displaying a date in a longer format.</p>",
                "default": "F d, Y"
            },
            {
                "name": "maxDate",
                "type": "date",
                "doc": "<p>Maximum allowable date (JavaScript date object)</p>",
                "default": "null"
            },
            {
                "name": "maxText",
                "type": "string",
                "doc": "<p>The error text to display if the maxDate validation fails.</p>",
                "default": "This date is after the maximum date"
            },
            {
                "name": "minDate",
                "type": "date",
                "doc": "<p>Minimum allowable date (JavaScript date object)</p>",
                "default": "null"
            },
            {
                "name": "minText",
                "type": "string",
                "doc": "<p>The error text to display if the minDate validation fails.</p>",
                "default": "This date is before the minimum date"
            },
            {
                "name": "monthNames",
                "type": "string[]",
                "doc": "<p>An array of textual month names which can be overriden for localization support (defaults to Ext.Date.monthNames)</p>",
                "default": null
            },
            {
                "name": "monthYearText",
                "type": "string",
                "doc": "<p>The header month selector tooltip</p>",
                "default": "Choose a month (Control+Up/Down to move years)"
            },
            {
                "name": "nextText",
                "type": "string",
                "doc": "<p>The next month navigation button tooltip</p>",
                "default": "Next Month (Control+Right)"
            },
            {
                "name": "prevText",
                "type": "string",
                "doc": "<p>The previous month navigation button tooltip</p>",
                "default": "Previous Month (Control+Left)"
            },
            {
                "name": "scope",
                "type": "object",
                "doc": "<p>The scope (<code>this</code> reference) in which the <code>handler</code> function will be called. Defaults to this\nDatePicker instance.</p>",
                "default": null
            },
            {
                "name": "selectedCls",
                "type": "string",
                "doc": "<p>The class to apply to the selected cell.</p>",
                "default": "x-datepicker-selected"
            },
            {
                "name": "showToday",
                "type": "boolean",
                "doc": "<p>False to hide the footer area containing the Today button and disable the keyboard handler for spacebar that\nselects the current date.</p>",
                "default": "true"
            },
            {
                "name": "startDay",
                "type": "number",
                "doc": "<p>Day index at which the week should begin, 0-based (defaults to Sunday)</p>",
                "default": "0"
            },
            {
                "name": "todayText",
                "type": "string",
                "doc": "<p>The text to display on the button that selects the current date</p>",
                "default": "Today"
            },
            {
                "name": "todayTip",
                "type": "string",
                "doc": "<p>A string used to format the message for displaying in a tooltip over the button that selects the current date.\nThe <code>{0}</code> token in string is replaced by today's date.</p>",
                "default": "{0} (Spacebar)"
            }
        ],
        "events": [
            {
                "name": "select",
                "params": "this(Ext.picker.Date) date(Date) eOpts(Object)",
                "doc": "<p>Fires when a date is selected</p>"
            }
        ]
    },
    "Ext.picker.Month": {
        "type": "Ext.picker.Month",
        "doc": "<p>A month picker component. This class is used by the Date picker class\nto allow browsing and selection of year/months combinations.",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to the picker element. Defaults to <tt>'x-monthpicker'</tt></p>",
                "default": "x-monthpicker"
            },
            {
                "name": "cancelText",
                "type": "string",
                "doc": "<p>The text to display on the cancel button.</p>",
                "default": "Cancel"
            },
            {
                "name": "okText",
                "type": "string",
                "doc": "<p>The text to display on the ok button.</p>",
                "default": "OK"
            },
            {
                "name": "selectedCls",
                "type": "string",
                "doc": "<p>The class to be added to selected items in the picker. Defaults to\n<tt>'x-monthpicker-selected'</tt></p>",
                "default": null
            },
            {
                "name": "showButtons",
                "type": "boolean",
                "doc": "<p>True to show ok and cancel buttons below the picker.</p>",
                "default": "true"
            },
            {
                "name": "value",
                "type": "date/number[]",
                "doc": "<p>The default value to set. See setValue</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "cancelclick",
                "params": "this(Ext.picker.Month) eOpts(Object)",
                "doc": "<p>Fires when the cancel button is pressed.</p>"
            },
            {
                "name": "monthclick",
                "params": "this(Ext.picker.Month) value(Array) eOpts(Object)",
                "doc": "<p>Fires when a month is clicked.</p>"
            },
            {
                "name": "monthdblclick",
                "params": "this(Ext.picker.Month) value(Array) eOpts(Object)",
                "doc": "<p>Fires when a month is clicked.</p>"
            },
            {
                "name": "okclick",
                "params": "this(Ext.picker.Month) value(Array) eOpts(Object)",
                "doc": "<p>Fires when the ok button is pressed.</p>"
            },
            {
                "name": "select",
                "params": "this(Ext.picker.Month) value(Array) eOpts(Object)",
                "doc": "<p>Fires when a month/year is selected.</p>"
            },
            {
                "name": "yearclick",
                "params": "this(Ext.picker.Month) value(Array) eOpts(Object)",
                "doc": "<p>Fires when a year is clicked.</p>"
            },
            {
                "name": "yeardblclick",
                "params": "this(Ext.picker.Month) value(Array) eOpts(Object)",
                "doc": "<p>Fires when a year is clicked.</p>"
            }
        ]
    },
    "Ext.picker.Time": {
        "type": "Ext.picker.Time",
        "doc": "<p>A time picker which provides a list of times from which to choose. This is used by the Ext.form.field.Time\nclass to allow browsing and selection of valid times, but could also be used with other components.",
        "configs": [
            {
                "name": "format",
                "type": "string",
                "doc": "<p>The default time format string which can be overriden for localization support. The format must be valid\naccording to Ext.Date.parse (defaults to 'g:i A', e.g., '3:15 PM'). For 24-hour time format try 'H:i'\ninstead.</p>",
                "default": "g:i A"
            },
            {
                "name": "increment",
                "type": "number",
                "doc": "<p>The number of minutes between each time value in the list.</p>",
                "default": "15"
            },
            {
                "name": "maxValue",
                "type": "date",
                "doc": "<p>The maximum time to be shown in the list of times. This must be a Date object (only the time fields will be\nused); no parsing of String values will be done.</p>",
                "default": null
            },
            {
                "name": "minValue",
                "type": "date",
                "doc": "<p>The minimum time to be shown in the list of times. This must be a Date object (only the time fields will be\nused); no parsing of String values will be done.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.PluginManager": {
        "type": "Ext.PluginManager",
        "doc": "<p>Provides a registry of available Plugin classes indexed by a mnemonic code known as the Plugin's ptype.",
        "configs": [],
        "events": []
    },
    "Ext.ProgressBar": {
        "type": "Ext.ProgressBar",
        "doc": "<p>An updateable progress bar component. The progress bar supports two different modes: manual and automatic.",
        "configs": [
            {
                "name": "animate",
                "type": "boolean",
                "doc": "<p>True to animate the progress bar during transitions</p>",
                "default": "false"
            },
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to the progress bar's wrapper element.</p>",
                "default": "x-progress"
            },
            {
                "name": "id",
                "type": "string",
                "doc": "<p>The progress bar element's id (defaults to an auto-generated id)</p>",
                "default": null
            },
            {
                "name": "text",
                "type": "string",
                "doc": "<p>The text shown in the progress bar</p>",
                "default": ""
            },
            {
                "name": "textEl",
                "type": "string/htmlelement/ext.element",
                "doc": "<p>The element to render the progress text to (defaults to the progress bar's internal text element)</p>",
                "default": null
            },
            {
                "name": "value",
                "type": "number",
                "doc": "<p>A floating point value between 0 and 1 (e.g., .5)</p>",
                "default": "0"
            }
        ],
        "events": [
            {
                "name": "update",
                "params": "this(Ext.ProgressBar) value(Number) text(String) eOpts(Object)",
                "doc": "<p>Fires after each update interval</p>"
            }
        ]
    },
    "Ext.resizer.Handle": {
        "type": "Ext.resizer.Handle",
        "doc": "<p>Provides a handle for 9-point resizing of Elements or Components.",
        "configs": [],
        "events": []
    },
    "Ext.resizer.Resizer": {
        "type": "Ext.resizer.Resizer",
        "doc": "<p>Applies drag handles to an element or component to make it resizable. The drag handles are inserted into the element\n(or component's element) and positioned absolute.",
        "configs": [
            {
                "name": "constrainTo",
                "type": "ext.element/ext.util.region",
                "doc": "<p>An element, or a Region into which the resize operation must be constrained.</p>",
                "default": null
            },
            {
                "name": "dynamic",
                "type": "boolean",
                "doc": "<p>Specify as true to update the target (Element or Component) dynamically during\ndragging. This is <code>true</code> by default, but the Component class passes <code>false</code> when it is\nconfigured as Ext.Component.resizable.</p>",
                "default": "true"
            },
            {
                "name": "handles",
                "type": "string",
                "doc": "<p>String consisting of the resize handles to display. Defaults to 's e se' for Elements and fixed position\nComponents. Defaults to 8 point resizing for floating Components (such as Windows). Specify either <code>'all'</code> or any\nof <code>'n s e w ne nw se sw'</code>.</p>",
                "default": "s e se"
            },
            {
                "name": "height",
                "type": "number",
                "doc": "<p>Optional. The height to set target to in pixels</p>",
                "default": "null"
            },
            {
                "name": "heightIncrement",
                "type": "number",
                "doc": "<p>The increment to snap the height resize in pixels.</p>",
                "default": "0"
            },
            {
                "name": "maxHeight",
                "type": "number",
                "doc": "<p>The maximum height for the element</p>",
                "default": "10000"
            },
            {
                "name": "maxWidth",
                "type": "number",
                "doc": "<p>The maximum width for the element</p>",
                "default": "10000"
            },
            {
                "name": "minHeight",
                "type": "number",
                "doc": "<p>The minimum height for the element</p>",
                "default": "20"
            },
            {
                "name": "minWidth",
                "type": "number",
                "doc": "<p>The minimum width for the element</p>",
                "default": "20"
            },
            {
                "name": "pinned",
                "type": "boolean",
                "doc": "<p>True to ensure that the resize handles are always visible, false indicates resizing by cursor changes only</p>",
                "default": "false"
            },
            {
                "name": "preserveRatio",
                "type": "boolean",
                "doc": "<p>True to preserve the original ratio between height and width during resize</p>",
                "default": "false"
            },
            {
                "name": "target",
                "type": "ext.element/ext.component",
                "doc": "<p>The Element or Component to resize.</p>",
                "default": null
            },
            {
                "name": "transparent",
                "type": "boolean",
                "doc": "<p>True for transparent handles. This is only applied at config time.</p>",
                "default": "false"
            },
            {
                "name": "width",
                "type": "number",
                "doc": "<p>Optional. The width to set the target to in pixels</p>",
                "default": "null"
            },
            {
                "name": "widthIncrement",
                "type": "number",
                "doc": "<p>The increment to snap the width resize in pixels.</p>",
                "default": "0"
            }
        ],
        "events": [
            {
                "name": "beforeresize",
                "params": "this(Ext.resizer.Resizer) width(Number) height(Number) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fired before resize is allowed. Return false to cancel resize.</p>"
            },
            {
                "name": "resize",
                "params": "this(Ext.resizer.Resizer) width(Number) height(Number) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fired after a resize.</p>"
            },
            {
                "name": "resizedrag",
                "params": "this(Ext.resizer.Resizer) width(Number) height(Number) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires during resizing. Return false to cancel resize.</p>"
            }
        ]
    },
    "Ext.resizer.ResizeTracker": {
        "type": "Ext.resizer.ResizeTracker",
        "doc": "<p>Private utility class for Ext.resizer.Resizer.",
        "configs": [],
        "events": []
    },
    "Ext.resizer.Splitter": {
        "type": "Ext.resizer.Splitter",
        "doc": "<p>This class functions between siblings of a VBox or HBox\nlayout to resize both immediate siblings.",
        "configs": [
            {
                "name": "collapseOnDblClick",
                "type": "boolean",
                "doc": "<p><code>true</code> to enable dblclick to toggle expand and collapse on the collapseTarget Panel.</p>",
                "default": "true"
            },
            {
                "name": "collapseTarget",
                "type": "string/ext.panel.panel",
                "doc": "<p>A string describing the relative position of the immediate sibling Panel to collapse. May be 'prev' or 'next' (Defaults to 'next')</p>",
                "default": "next"
            },
            {
                "name": "collapsedCls",
                "type": "string",
                "doc": "<p>A class to add to the splitter when it is collapsed. See collapsible.</p>",
                "default": null
            },
            {
                "name": "collapsible",
                "type": "boolean",
                "doc": "<p><code>true</code> to show a mini-collapse tool in the Splitter to toggle expand and collapse on the collapseTarget Panel.\nDefaults to the collapsible setting of the Panel.</p>",
                "default": "false"
            },
            {
                "name": "defaultSplitMax",
                "type": "number",
                "doc": "<p>Provides a default maximum width or height for the two components\nthat the splitter is between.</p>",
                "default": "1000"
            },
            {
                "name": "defaultSplitMin",
                "type": "number",
                "doc": "<p>Provides a default minimum width or height for the two components\nthat the splitter is between.</p>",
                "default": "40"
            },
            {
                "name": "performCollapse",
                "type": "boolean",
                "doc": "<p>Set to <code>false</code> to prevent this Splitter's mini-collapse tool from managing the collapse\nstate of the collapseTarget.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.resizer.SplitterTracker": {
        "type": "Ext.resizer.SplitterTracker",
        "doc": "<p>Private utility class for Ext.Splitter.",
        "configs": [],
        "events": []
    },
    "Ext.selection.CellModel": {
        "type": "Ext.selection.CellModel",
        "configs": [
            {
                "name": "enableKeyNav",
                "type": "boolean",
                "doc": "<p>Turns on/off keyboard navigation within the grid.</p>",
                "default": "true"
            },
            {
                "name": "preventWrap",
                "type": "boolean",
                "doc": "<p>Set this configuration to true to prevent wrapping around of selection as\na user navigates to the first or last column.</p>",
                "default": "false"
            }
        ],
        "events": [
            {
                "name": "deselect",
                "params": "this(Ext.selection.CellModel) record(Ext.data.Model) row(Number) column(Number) eOpts(Object)",
                "doc": "<p>Fired after a cell is deselected</p>"
            },
            {
                "name": "select",
                "params": "this(Ext.selection.CellModel) record(Ext.data.Model) row(Number) column(Number) eOpts(Object)",
                "doc": "<p>Fired after a cell is selected</p>"
            }
        ]
    },
    "Ext.selection.CheckboxModel": {
        "type": "Ext.selection.CheckboxModel",
        "doc": "<p>A selection model that renders a column of checkboxes that can be toggled to\nselect or deselect rows. The default mode for this selection model is MULTI.",
        "configs": [
            {
                "name": "checkOnly",
                "type": "boolean",
                "doc": "<p><tt>true</tt> if rows can only be selected by clicking on the\ncheckbox column.</p>",
                "default": "false"
            },
            {
                "name": "injectCheckbox",
                "type": "number/boolean/string",
                "doc": "<p>Instructs the SelectionModel whether or not to inject the checkbox header\nautomatically or not. (Note: By not placing the checkbox in manually, the\ngrid view will need to be rendered 2x on initial render.)\nSupported values are a Number index, false and the strings 'first' and 'last'.</p>",
                "default": "0"
            },
            {
                "name": "mode",
                "type": "string",
                "doc": "<p>Modes of selection.\nValid values are SINGLE, SIMPLE, and MULTI. Defaults to 'MULTI'</p>",
                "default": "MULTI"
            }
        ],
        "events": []
    },
    "Ext.selection.Model": {
        "type": "Ext.selection.Model",
        "doc": "<p>Tracks what records are currently selected in a databound component.",
        "configs": [
            {
                "name": "allowDeselect",
                "type": "boolean",
                "doc": "<p>Allow users to deselect a record in a DataView, List or Grid.\nOnly applicable when the mode is 'SINGLE'.</p>",
                "default": "false"
            },
            {
                "name": "mode",
                "type": "string",
                "doc": "<p>Mode of selection.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "selectionchange",
                "params": "this(Ext.selection.Model) selected(Ext.data.Model[]) eOpts(Object)",
                "doc": "<p>Fired after a selection change has occurred</p>"
            }
        ]
    },
    "Ext.selection.RowModel": {
        "type": "Ext.selection.RowModel",
        "configs": [
            {
                "name": "enableKeyNav",
                "type": "boolean",
                "doc": "<p>Turns on/off keyboard navigation within the grid.</p>",
                "default": "true"
            },
            {
                "name": "ignoreRightMouseSelection",
                "type": "boolean",
                "doc": "<p>True to ignore selections that are made when using the right mouse button if there are\nrecords that are already selected. If no records are selected, selection will continue\nas normal</p>",
                "default": "true"
            }
        ],
        "events": [
            {
                "name": "beforedeselect",
                "params": "this(Ext.selection.RowModel) record(Ext.data.Model) index(Number) eOpts(Object)",
                "doc": "<p>Fired before a record is deselected. If any listener returns false, the\ndeselection is cancelled.</p>"
            },
            {
                "name": "beforeselect",
                "params": "this(Ext.selection.RowModel) record(Ext.data.Model) index(Number) eOpts(Object)",
                "doc": "<p>Fired before a record is selected. If any listener returns false, the\nselection is cancelled.</p>"
            },
            {
                "name": "deselect",
                "params": "this(Ext.selection.RowModel) record(Ext.data.Model) index(Number) eOpts(Object)",
                "doc": "<p>Fired after a record is deselected</p>"
            },
            {
                "name": "select",
                "params": "this(Ext.selection.RowModel) record(Ext.data.Model) index(Number) eOpts(Object)",
                "doc": "<p>Fired after a record is selected</p>"
            }
        ]
    },
    "Ext.selection.TreeModel": {
        "type": "Ext.selection.TreeModel",
        "doc": "<p>Adds custom behavior for left/right keyboard navigation for use with a tree.\nDepends on the view having an expand and collapse method which accepts a\nrecord.",
        "configs": [],
        "events": []
    },
    "Ext.Shadow": {
        "type": "Ext.Shadow",
        "doc": "<p>Simple class that can provide a shadow effect for any element.  Note that the element MUST be absolutely positioned,\nand the shadow does not provide any shimming.  This should be used only in simple cases -- for more advanced\nfunctionality that can also provide the same shadow effect, see the Ext.Layer class.",
        "configs": [
            {
                "name": "mode",
                "type": "string",
                "doc": "<p>The shadow display mode.  Supports the following options:<div class=mdetail-params><ul>\n<li><b><tt>sides</tt></b> : Shadow displays on both sides and bottom only</li>\n<li><b><tt>frame</tt></b> : Shadow displays equally on all four sides</li>\n<li><b><tt>drop</tt></b> : Traditional bottom-right drop shadow</li>\n</ul></div></p>",
                "default": null
            },
            {
                "name": "offset",
                "type": "number",
                "doc": "<p>The number of pixels to offset the shadow from the element</p>",
                "default": "4"
            }
        ],
        "events": []
    },
    "Ext.ShadowPool": {
        "type": "Ext.ShadowPool",
        "doc": "<p>Private utility class that manages the internal Shadow cache",
        "configs": [],
        "events": []
    },
    "Ext.slider.Multi": {
        "type": "Ext.slider.Multi",
        "doc": "<p>Slider which supports vertical or horizontal orientation, keyboard adjustments, configurable snapping, axis clicking\nand animation. Can be added as an item to any container.",
        "configs": [
            {
                "name": "animate",
                "type": "boolean",
                "doc": "<p>Turn on or off animation.</p>",
                "default": "true"
            },
            {
                "name": "clickToChange",
                "type": "boolean",
                "doc": "<p>Determines whether or not clicking on the Slider axis will change the slider.</p>",
                "default": "true"
            },
            {
                "name": "constrainThumbs",
                "type": "boolean",
                "doc": "<p>True to disallow thumbs from overlapping one another.</p>",
                "default": "true"
            },
            {
                "name": "decimalPrecision",
                "type": "number/boolean",
                "doc": "<p>The number of decimal places to which to round the Slider's value.</p>",
                "default": "0"
            },
            {
                "name": "increment",
                "type": "number",
                "doc": "<p>How many units to change the slider when adjusting by drag and drop. Use this option to enable 'snapping'.</p>",
                "default": "0"
            },
            {
                "name": "keyIncrement",
                "type": "number",
                "doc": "<p>How many units to change the Slider when adjusting with keyboard navigation. If the increment\nconfig is larger, it will be used instead.</p>",
                "default": "1"
            },
            {
                "name": "maxValue",
                "type": "number",
                "doc": "<p>The maximum value for the Slider.</p>",
                "default": "100"
            },
            {
                "name": "minValue",
                "type": "number",
                "doc": "<p>The minimum value for the Slider.</p>",
                "default": "0"
            },
            {
                "name": "useTips",
                "type": "boolean",
                "doc": "<p>True to use an Ext.slider.Tip to display tips for the value.</p>",
                "default": "true"
            },
            {
                "name": "value",
                "type": "number",
                "doc": "<p>A value with which to initialize the slider. Defaults to minValue. Setting this will only result in the creation\nof a single slider thumb; if you want multiple thumbs then use the values config instead.</p>",
                "default": null
            },
            {
                "name": "values",
                "type": "number[]",
                "doc": "<p>Array of Number values with which to initalize the slider. A separate slider thumb will be created for each value\nin this array. This will take precedence over the single value config.</p>",
                "default": null
            },
            {
                "name": "vertical",
                "type": "boolean",
                "doc": "<p>Orient the Slider vertically rather than horizontally.</p>",
                "default": "false"
            }
        ],
        "events": [
            {
                "name": "beforechange",
                "params": "slider(Ext.slider.Multi) newValue(Number) oldValue(Number) eOpts(Object)",
                "doc": "<p>Fires before the slider value is changed. By returning false from an event handler, you can cancel the\nevent and prevent the slider from changing.</p>"
            },
            {
                "name": "change",
                "params": "slider(Ext.slider.Multi) newValue(Number) thumb(Ext.slider.Thumb) eOpts(Object)",
                "doc": "<p>Fires when the slider value is changed.</p>"
            },
            {
                "name": "changecomplete",
                "params": "slider(Ext.slider.Multi) newValue(Number) thumb(Ext.slider.Thumb) eOpts(Object)",
                "doc": "<p>Fires when the slider value is changed by the user and any drag operations have completed.</p>"
            },
            {
                "name": "drag",
                "params": "slider(Ext.slider.Multi) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires continuously during the drag operation while the mouse is moving.</p>"
            },
            {
                "name": "dragend",
                "params": "slider(Ext.slider.Multi) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires after the drag operation has completed.</p>"
            },
            {
                "name": "dragstart",
                "params": "slider(Ext.slider.Multi) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires after a drag operation has started.</p>"
            }
        ]
    },
    "Ext.slider.Single": {
        "type": "Ext.slider.Single",
        "doc": "<p>Slider which supports vertical or horizontal orientation, keyboard adjustments, configurable snapping, axis clicking\nand animation. Can be added as an item to any container.",
        "configs": [],
        "events": []
    },
    "Ext.slider.Thumb": {
        "type": "Ext.slider.Thumb",
        "doc": "<p>Represents a single thumb element on a Slider. This would not usually be created manually and would instead\nbe created internally by an Multi slider.",
        "configs": [
            {
                "name": "constrain",
                "type": "boolean",
                "doc": "<p>True to constrain the thumb so that it cannot overlap its siblings</p>",
                "default": "false"
            },
            {
                "name": "slider",
                "type": "ext.slider.multislider",
                "doc": "<p>The Slider to render to.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.slider.Tip": {
        "type": "Ext.slider.Tip",
        "doc": "<p>Simple plugin for using an Ext.tip.Tip with a slider to show the slider value. In general this class is not created\ndirectly, instead pass the Ext.slider.Multi.useTips and Ext.slider.Multi.tipText configuration\noptions to the slider directly.",
        "configs": [],
        "events": []
    },
    "Ext.state.CookieProvider": {
        "type": "Ext.state.CookieProvider",
        "doc": "<p>A Provider implementation which saves and retrieves state via cookies. The CookieProvider supports the usual cookie\noptions, such as:",
        "configs": [
            {
                "name": "domain",
                "type": "string",
                "doc": "<p>The domain to save the cookie for. Note that you cannot specify a different domain than your page is on, but you can\nspecify a sub-domain, or simply the domain itself like 'sencha.com' to include all sub-domains if you need to access\ncookies across different sub-domains. Defaults to null which uses the same domain the page is running on including\nthe 'www' like 'www.sencha.com'.</p>",
                "default": null
            },
            {
                "name": "expires",
                "type": "date",
                "doc": "<p>The cookie expiration date. Defaults to 7 days from now.</p>",
                "default": null
            },
            {
                "name": "path",
                "type": "string",
                "doc": "<p>The path for which the cookie is active. Defaults to root '/' which makes it active for all pages in the site.</p>",
                "default": null
            },
            {
                "name": "secure",
                "type": "boolean",
                "doc": "<p>True if the site is using SSL</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.state.LocalStorageProvider": {
        "type": "Ext.state.LocalStorageProvider",
        "doc": "<p>A Provider implementation which saves and retrieves state via the HTML5 localStorage object.\nIf the browser does not support local storage, an exception will be thrown upon instantiating\nthis class.",
        "configs": [],
        "events": []
    },
    "Ext.state.Manager": {
        "type": "Ext.state.Manager",
        "doc": "<p>This is the global state manager. By default all components that are state aware check this class\nfor state information if you don't pass them a custom state provider. In order for this class\nto be useful, it must be initialized with a provider when your application initializes. Example usage:",
        "configs": [],
        "events": []
    },
    "Ext.state.Provider": {
        "type": "Ext.state.Provider",
        "doc": "<p>Abstract base class for state provider implementations. The provider is responsible\nfor setting values  and extracting values to/from the underlying storage source. The \nstorage source can vary and the details should be implemented in a subclass. For example\na provider could use a server side database or the browser localstorage where supported.",
        "configs": [
            {
                "name": "prefix",
                "type": "string",
                "doc": "<p>A string to prefix to items stored in the underlying state store.\nDefaults to <tt>'ext-'</tt></p>",
                "default": "ext-"
            }
        ],
        "events": [
            {
                "name": "statechange",
                "params": "this(Ext.state.Provider) key(String) value(String) eOpts(Object)",
                "doc": "<p>Fires when a state change occurs.</p>"
            }
        ]
    },
    "Ext.state.Stateful": {
        "type": "Ext.state.Stateful",
        "doc": "<p>A mixin for being able to save the state of an object to an underlying\nExt.state.Provider.",
        "configs": [
            {
                "name": "saveDelay",
                "type": "number",
                "doc": "<p>A buffer to be applied if many state events are fired within a short period.</p>",
                "default": "100"
            },
            {
                "name": "stateEvents",
                "type": "string[]",
                "doc": "<p>An array of events that, when fired, should trigger this object to\nsave its state. Defaults to none. <code>stateEvents</code> may be any type\nof event supported by this object, including browser or custom events\n(e.g., <tt>['click', 'customerchange']</tt>).</p>",
                "default": null
            },
            {
                "name": "stateId",
                "type": "string",
                "doc": "<p>The unique id for this object to use for state management purposes.</p>",
                "default": null
            },
            {
                "name": "stateful",
                "type": "boolean",
                "doc": "<p>A flag which causes the object to attempt to restore the state of\ninternal properties from a saved state on startup. </p>",
                "default": "true"
            }
        ],
        "events": [
            {
                "name": "beforestaterestore",
                "params": "this(Ext.state.Stateful) state(Object) eOpts(Object)",
                "doc": "<p>Fires before the state of the object is restored. Return false from an event handler to stop the restore.</p>"
            },
            {
                "name": "beforestatesave",
                "params": "this(Ext.state.Stateful) state(Object) eOpts(Object)",
                "doc": "<p>Fires before the state of the object is saved to the configured state provider. Return false to stop the save.</p>"
            },
            {
                "name": "staterestore",
                "params": "this(Ext.state.Stateful) state(Object) eOpts(Object)",
                "doc": "<p>Fires after the state of the object is restored.</p>"
            },
            {
                "name": "statesave",
                "params": "this(Ext.state.Stateful) state(Object) eOpts(Object)",
                "doc": "<p>Fires after the state of the object is saved to the configured state provider.</p>"
            }
        ]
    },
    "Ext.String": {
        "type": "Ext.String",
        "doc": "<p>A collection of useful static methods to deal with strings",
        "configs": [],
        "events": []
    },
    "Ext.supports": {
        "type": "Ext.supports",
        "doc": "<p>Determines information about features are supported in the current environment",
        "configs": [],
        "events": []
    },
    "Ext.tab.Bar": {
        "type": "Ext.tab.Bar",
        "doc": "<p>TabBar is used internally by a TabPanel and typically should not need to be created manually.\nThe tab bar automatically removes the default title provided by Ext.panel.Header",
        "configs": [
            {
                "name": "maxTabWidth",
                "type": "number",
                "doc": "<p>The maximum width for a tab in this tab Bar. Defaults to the tab Panel's maxTabWidth value.</p>",
                "default": null
            },
            {
                "name": "minTabWidth",
                "type": "number",
                "doc": "<p>The minimum width for a tab in this tab Bar. Defaults to the tab Panel's minTabWidth value.</p>",
                "default": null
            },
            {
                "name": "plain",
                "type": "boolean",
                "doc": "<p>True to not show the full background on the tabbar</p>",
                "default": "false"
            }
        ],
        "events": [
            {
                "name": "change",
                "params": "tabBar(Ext.tab.Bar) tab(Ext.tab.Tab) card(Ext.Component) eOpts(Object)",
                "doc": "<p>Fired when the currently-active tab has changed</p>"
            }
        ]
    },
    "Ext.tab.Panel": {
        "type": "Ext.tab.Panel",
        "doc": "<p>A basic tab container. TabPanels can be used exactly like a standard Ext.panel.Panel for\nlayout purposes, but also have special support for containing child Components\n(<code>items</code>) that are displayed as separate tabs.",
        "configs": [
            {
                "name": "activeItem",
                "type": "string/number",
                "doc": "<p>Doesn't apply for TabPanel, use activeTab instead.</p>",
                "default": null
            },
            {
                "name": "activeTab",
                "type": "string/number/ext.component",
                "doc": "<p>The tab to activate initially. Either an ID, index or the tab component itself.</p>",
                "default": null
            },
            {
                "name": "deferredRender",
                "type": "boolean",
                "doc": "<p>True by default to defer the rendering of child items to the browsers DOM\nuntil a tab is activated. False will render all contained items as soon as\nthe layout is rendered. If there is a significant amount of content or a lot of\nheavy controls being rendered into panels that are not displayed by default, setting this to true might improve\nperformance.</p>",
                "default": "true"
            },
            {
                "name": "itemCls",
                "type": "string",
                "doc": "<p>The class added to each child item of this TabPanel.</p>",
                "default": "x-tabpanel-child"
            },
            {
                "name": "layout",
                "type": "object",
                "doc": "<p>Optional configuration object for the internal card layout.\nIf present, this is passed straight through to the layout's constructor</p>",
                "default": null
            },
            {
                "name": "maxTabWidth",
                "type": "number",
                "doc": "<p>The maximum width for each tab.</p>",
                "default": "undefined"
            },
            {
                "name": "minTabWidth",
                "type": "number",
                "doc": "<p>The minimum width for a tab in the tabBar.</p>",
                "default": "undefined"
            },
            {
                "name": "plain",
                "type": "boolean",
                "doc": "<p>True to not show the full background on the TabBar.</p>",
                "default": "false"
            },
            {
                "name": "removePanelHeader",
                "type": "boolean",
                "doc": "<p>True to instruct each Panel added to the TabContainer to not render its header element.\nThis is to ensure that the title of the panel does not appear twice.</p>",
                "default": "true"
            },
            {
                "name": "tabBar",
                "type": "object",
                "doc": "<p>Optional configuration object for the internal Ext.tab.Bar.\nIf present, this is passed straight through to the TabBar's constructor</p>",
                "default": null
            },
            {
                "name": "tabPosition",
                "type": "string",
                "doc": "<p>The position where the tab strip should be rendered. Can be <code>top</code> or <code>bottom</code>.</p>",
                "default": "top"
            }
        ],
        "events": [
            {
                "name": "beforetabchange",
                "params": "tabPanel(Ext.tab.Panel) newCard(Ext.Component) oldCard(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires before a tab change (activated by setActiveTab). Return false in any listener to cancel\nthe tabchange</p>"
            },
            {
                "name": "tabchange",
                "params": "tabPanel(Ext.tab.Panel) newCard(Ext.Component) oldCard(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires when a new tab has been activated (activated by setActiveTab).</p>"
            }
        ]
    },
    "Ext.tab.Tab": {
        "type": "Ext.tab.Tab",
        "doc": "<p>Represents a single Tab in a TabPanel. A Tab is simply a slightly customized Button,\nstyled to look like a tab. Tabs are optionally closable, and can also be disabled. Typically you will not\nneed to create Tabs manually as the framework does so automatically when you use a TabPanel",
        "configs": [
            {
                "name": "activeCls",
                "type": "string",
                "doc": "<p>The CSS class to be applied to a Tab when it is active.\nProviding your own CSS for this class enables you to customize the active state.</p>",
                "default": "active"
            },
            {
                "name": "closable",
                "type": "boolean",
                "doc": "<p>True to make the Tab start closable (the close icon will be visible).</p>",
                "default": "true"
            },
            {
                "name": "closableCls",
                "type": "string",
                "doc": "<p>The CSS class which is added to the tab when it is closable</p>",
                "default": "closable"
            },
            {
                "name": "closeText",
                "type": "string",
                "doc": "<p>The accessible text label for the close button link; only used when closable = true.</p>",
                "default": "Close Tab"
            },
            {
                "name": "disabledCls",
                "type": "string",
                "doc": "<p>The CSS class to be applied to a Tab when it is disabled.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "activate",
                "params": "this(Ext.tab.Tab) eOpts(Object)",
                "doc": "<p>Fired when the tab is activated.</p>"
            },
            {
                "name": "beforeclose",
                "params": "tab(Ext.tab.Tab) eOpts(Object)",
                "doc": "<p>Fires if the user clicks on the Tab's close button, but before the close event is fired. Return\nfalse from any listener to stop the close event being fired</p>"
            },
            {
                "name": "close",
                "params": "tab(Ext.tab.Tab) eOpts(Object)",
                "doc": "<p>Fires to indicate that the tab is to be closed, usually because the user has clicked the close button.</p>"
            },
            {
                "name": "deactivate",
                "params": "this(Ext.tab.Tab) eOpts(Object)",
                "doc": "<p>Fired when the tab is deactivated.</p>"
            }
        ]
    },
    "Ext.TaskManager": {
        "type": "Ext.TaskManager",
        "doc": "<p>A static Ext.util.TaskRunner instance that can be used to start and stop arbitrary tasks.  See\nExt.util.TaskRunner for supported methods and task config properties.",
        "configs": [],
        "events": []
    },
    "Ext.Template": {
        "type": "Ext.Template",
        "doc": "<p>Represents an HTML fragment template. Templates may be precompiled for greater performance.",
        "configs": [
            {
                "name": "compiled",
                "type": "boolean",
                "doc": "<p>True to immediately compile the template. Defaults to false.</p>",
                "default": null
            },
            {
                "name": "disableFormats",
                "type": "boolean",
                "doc": "<p>True to disable format functions in the template. If the template doesn't contain\nformat functions, setting disableFormats to true will reduce apply time. Defaults to false.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.tip.QuickTip": {
        "type": "Ext.tip.QuickTip",
        "doc": "<p>A specialized tooltip class for tooltips that can be specified in markup and automatically managed by the global\nExt.tip.QuickTipManager instance.  See the QuickTipManager documentation for additional usage details and examples.",
        "configs": [
            {
                "name": "interceptTitles",
                "type": "boolean",
                "doc": "<p>True to automatically use the element's DOM title value if available.</p>",
                "default": "false"
            },
            {
                "name": "target",
                "type": "string/htmlelement/ext.element",
                "doc": "<p>The target HTMLElement, Ext.Element or id to associate with this Quicktip (defaults to the document).</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.tip.QuickTipManager": {
        "type": "Ext.tip.QuickTipManager",
        "doc": "<p>Provides attractive and customizable tooltips for any element. The QuickTips\nsingleton is used to configure and manage tooltips globally for multiple elements\nin a generic manner.  To create individual tooltips with maximum customizability,\nyou should consider either Ext.tip.Tip or Ext.tip.ToolTip.",
        "configs": [],
        "events": []
    },
    "Ext.tip.Tip": {
        "type": "Ext.tip.Tip",
        "doc": "<p>This is the base class for Ext.tip.QuickTip and Ext.tip.ToolTip that provides the basic layout and\npositioning that all tip-based classes require. This class can be used directly for simple, statically-positioned\ntips that are displayed programmatically, or it can be extended to provide custom tip implementations.",
        "configs": [
            {
                "name": "closable",
                "type": "boolean",
                "doc": "<p>True to render a close tool button into the tooltip header.</p>",
                "default": "false"
            },
            {
                "name": "closeAction",
                "type": "string",
                "doc": "<p>The action to take when the close header tool is clicked</p>",
                "default": "hide"
            },
            {
                "name": "constrainPosition",
                "type": "boolean",
                "doc": "<p>If true, then the tooltip will be automatically constrained to stay within the browser viewport.</p>",
                "default": "true"
            },
            {
                "name": "defaultAlign",
                "type": "string",
                "doc": "<p><b>Experimental</b>. The default Ext.Element.alignTo anchor position value for this tip relative\nto its element of origin.</p>",
                "default": "tl-bl?"
            },
            {
                "name": "maxWidth",
                "type": "number",
                "doc": "<p>The maximum width of the tip in pixels.  The maximum supported value is 500.</p>",
                "default": "300"
            },
            {
                "name": "minWidth",
                "type": "number",
                "doc": "<p>The minimum width of the tip in pixels.</p>",
                "default": "40"
            },
            {
                "name": "shadow",
                "type": "boolean/string",
                "doc": "<p>True or sides for the default effect, frame for 4-way shadow, and drop\nfor bottom-right shadow.</p>",
                "default": "sides"
            },
            {
                "name": "width",
                "type": "number",
                "doc": "<p>Width in pixels of the tip (defaults to auto).  Width will be ignored if it exceeds the bounds of\nminWidth or maxWidth.  The maximum supported value is 500.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.tip.ToolTip": {
        "type": "Ext.tip.ToolTip",
        "doc": "<p>ToolTip is a Ext.tip.Tip implementation that handles the common case of displaying a\ntooltip when hovering over a certain element or elements on the page. It allows fine-grained\ncontrol over the tooltip's alignment relative to the target element or mouse, and the timing\nof when it is automatically shown and hidden.",
        "configs": [
            {
                "name": "anchor",
                "type": "string",
                "doc": "<p>If specified, indicates that the tip should be anchored to a\nparticular side of the target element or mouse pointer (top, right, bottom,\nor left), with an arrow pointing back at the target or mouse pointer. If\nconstrainPosition is enabled, this will be used as a preferred value\nonly and may be flipped as needed.</p>",
                "default": null
            },
            {
                "name": "anchorOffset",
                "type": "number",
                "doc": "<p>A numeric pixel value used to offset the default position of the anchor arrow.  When the anchor\nposition is on the top or bottom of the tooltip, <code>anchorOffset</code> will be used as a horizontal offset.\nLikewise, when the anchor position is on the left or right side, <code>anchorOffset</code> will be used as\na vertical offset.</p>",
                "default": "0"
            },
            {
                "name": "anchorToTarget",
                "type": "boolean",
                "doc": "<p>True to anchor the tooltip to the target element, false to anchor it relative to the mouse coordinates.\nWhen <code>anchorToTarget</code> is true, use <code>defaultAlign</code> to control tooltip alignment to the\ntarget element.  When <code>anchorToTarget</code> is false, use <code>anchor</code> instead to control alignment.</p>",
                "default": "true"
            },
            {
                "name": "autoHide",
                "type": "boolean",
                "doc": "<p>True to automatically hide the tooltip after the\nmouse exits the target element or after the <code>dismissDelay</code>\nhas expired if set.  If <code>closable = true</code>\na close tool button will be rendered into the tooltip header.</p>",
                "default": "true"
            },
            {
                "name": "delegate",
                "type": "string",
                "doc": "<p>A DomQuery selector which allows selection of individual elements within the\n<code>target</code> element to trigger showing and hiding the ToolTip as the mouse moves within the\ntarget.</p>",
                "default": null
            },
            {
                "name": "dismissDelay",
                "type": "number",
                "doc": "<p>Delay in milliseconds before the tooltip automatically hides. To disable automatic hiding, set\ndismissDelay = 0.</p>",
                "default": "5000"
            },
            {
                "name": "hideDelay",
                "type": "number",
                "doc": "<p>Delay in milliseconds after the mouse exits the target element but before the tooltip actually hides.\nSet to 0 for the tooltip to hide immediately.</p>",
                "default": "200"
            },
            {
                "name": "mouseOffset",
                "type": "number[]",
                "doc": "<p>An XY offset from the mouse position where the tooltip should be shown.</p>",
                "default": "[15, 18]"
            },
            {
                "name": "showDelay",
                "type": "number",
                "doc": "<p>Delay in milliseconds before the tooltip displays after the mouse enters the target element.</p>",
                "default": "500"
            },
            {
                "name": "target",
                "type": "htmlelement/ext.element/string",
                "doc": "<p>The target element or string id to monitor for mouseover events to trigger\nshowing this ToolTip.</p>",
                "default": null
            },
            {
                "name": "trackMouse",
                "type": "boolean",
                "doc": "<p>True to have the tooltip follow the mouse as it moves over the target element.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.toolbar.Fill": {
        "type": "Ext.toolbar.Fill",
        "doc": "<p>A non-rendering placeholder item which instructs the Toolbar's Layout to begin using\nthe right-justified button container.",
        "configs": [],
        "events": []
    },
    "Ext.toolbar.Item": {
        "type": "Ext.toolbar.Item",
        "doc": "<p>The base class that other non-interacting Toolbar Item classes should extend in order to\nget some basic common toolbar item functionality.",
        "configs": [
            {
                "name": "overflowText",
                "type": "string",
                "doc": "<p>Text to be used for the menu if the item is overflowed.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.toolbar.Paging": {
        "type": "Ext.toolbar.Paging",
        "doc": "<p>As the number of records increases, the time required for the browser to render them increases. Paging is used to\nreduce the amount of data exchanged with the client. ",
        "configs": [
            {
                "name": "afterPageText",
                "type": "string",
                "doc": "<p>Customizable piece of the default paging text. Note that this string is formatted using\n{0} as a token that is replaced by the number of total pages. This token should be preserved when overriding this\nstring if showing the total page count is desired.</p>",
                "default": "of {0}"
            },
            {
                "name": "beforePageText",
                "type": "string",
                "doc": "<p>The text displayed before the input item.</p>",
                "default": "Page"
            },
            {
                "name": "displayInfo",
                "type": "boolean",
                "doc": "<p>true to display the displayMsg</p>",
                "default": "false"
            },
            {
                "name": "displayMsg",
                "type": "string",
                "doc": "<p>The paging status message to display. Note that this string is\nformatted using the braced numbers {0}-{2} as tokens that are replaced by the values for start, end and total\nrespectively. These tokens should be preserved when overriding this string if showing those values is desired.</p>",
                "default": "Displaying {0} - {1} of {2}"
            },
            {
                "name": "emptyMsg",
                "type": "string",
                "doc": "<p>The message to display when no records are found.</p>",
                "default": "No data to display"
            },
            {
                "name": "firstText",
                "type": "string",
                "doc": "<p>The quicktip text displayed for the first page button.\n<strong>Note</strong>: quick tips must be initialized for the quicktip to show.</p>",
                "default": "First Page"
            },
            {
                "name": "inputItemWidth",
                "type": "number",
                "doc": "<p>The width in pixels of the input field used to display and change the current page number.</p>",
                "default": "30"
            },
            {
                "name": "lastText",
                "type": "string",
                "doc": "<p>The quicktip text displayed for the last page button.\n<strong>Note</strong>: quick tips must be initialized for the quicktip to show.</p>",
                "default": "Last Page"
            },
            {
                "name": "nextText",
                "type": "string",
                "doc": "<p>The quicktip text displayed for the next page button.\n<strong>Note</strong>: quick tips must be initialized for the quicktip to show.</p>",
                "default": "Next Page"
            },
            {
                "name": "prependButtons",
                "type": "boolean",
                "doc": "<p>true to insert any configured items <em>before</em> the paging buttons.</p>",
                "default": "false"
            },
            {
                "name": "prevText",
                "type": "string",
                "doc": "<p>The quicktip text displayed for the previous page button.\n<strong>Note</strong>: quick tips must be initialized for the quicktip to show.</p>",
                "default": "Previous Page"
            },
            {
                "name": "refreshText",
                "type": "string",
                "doc": "<p>The quicktip text displayed for the Refresh button.\n<strong>Note</strong>: quick tips must be initialized for the quicktip to show.</p>",
                "default": "Refresh"
            },
            {
                "name": "store",
                "type": "ext.data.store",
                "doc": "<p>The Ext.data.Store the paging toolbar should use as its data source.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "beforechange",
                "params": "this(Ext.toolbar.Paging) page(Number) eOpts(Object)",
                "doc": "<p>Fires just before the active page is changed. Return false to prevent the active page from being changed.</p>"
            },
            {
                "name": "change",
                "params": "this(Ext.toolbar.Paging) pageData(Object) eOpts(Object)",
                "doc": "<p>Fires after the active page has been changed.</p>"
            }
        ]
    },
    "Ext.toolbar.Separator": {
        "type": "Ext.toolbar.Separator",
        "doc": "<p>A simple class that adds a vertical separator bar between toolbar items (css class: 'x-toolbar-separator').",
        "configs": [],
        "events": []
    },
    "Ext.toolbar.Spacer": {
        "type": "Ext.toolbar.Spacer",
        "doc": "<p>A simple element that adds extra horizontal space between items in a toolbar.\nBy default a 2px wide space is added via CSS specification:",
        "configs": [],
        "events": []
    },
    "Ext.toolbar.TextItem": {
        "type": "Ext.toolbar.TextItem",
        "doc": "<p>A simple class that renders text directly into a toolbar.",
        "configs": [
            {
                "name": "text",
                "type": "string",
                "doc": "<p>The text to be used as innerHTML (html tags are accepted)</p>",
                "default": ""
            }
        ],
        "events": []
    },
    "Ext.toolbar.Toolbar": {
        "type": "Ext.toolbar.Toolbar",
        "doc": "<p>Basic Toolbar class. Although the defaultType for Toolbar is button, Toolbar\nelements (child items for the Toolbar container) may be virtually any type of Component.",
        "configs": [
            {
                "name": "enableOverflow",
                "type": "boolean",
                "doc": "<p>Configure true to make the toolbar provide a button which activates a dropdown Menu to show\nitems which overflow the Toolbar's width.</p>",
                "default": "false"
            },
            {
                "name": "layout",
                "type": "string/object",
                "doc": "<p>This class assigns a default layout (<code>layout: 'hbox'</code>).\nDevelopers <em>may</em> override this configuration option if another layout\nis required (the constructor must be passed a configuration object in this\ncase instead of an array).\nSee Ext.container.Container.layout for additional information.</p>",
                "default": null
            },
            {
                "name": "menuTriggerCls",
                "type": "string",
                "doc": "<p>Configure the icon class of the overflow button.</p>",
                "default": "x-toolbar-more-icon"
            },
            {
                "name": "vertical",
                "type": "boolean",
                "doc": "<p>Set to <code>true</code> to make the toolbar vertical. The layout will become a <code>vbox</code>.</p>",
                "default": "false"
            }
        ],
        "events": [
            {
                "name": "overflowchange",
                "params": "c(Object) lastOverflow(Boolean) eOpts(Object)",
                "doc": "<p>Fires after the overflow state has changed.</p>"
            }
        ]
    },
    "Ext.tree.Column": {
        "type": "Ext.tree.Column",
        "doc": "<p>Provides indentation and folder structure markup for a Tree taking into account\ndepth and position within the tree hierarchy.",
        "configs": [],
        "events": []
    },
    "Ext.tree.Panel": {
        "type": "Ext.tree.Panel",
        "doc": "<p>The TreePanel provides tree-structured UI representation of tree-structured data.\nA TreePanel must be bound to a Ext.data.TreeStore. TreePanel's support\nmultiple columns through the columns configuration.",
        "configs": [
            {
                "name": "animate",
                "type": "boolean",
                "doc": "<p>True to enable animated expand/collapse. Defaults to the value of Ext.enableFx.</p>",
                "default": null
            },
            {
                "name": "displayField",
                "type": "boolean",
                "doc": "<p>The field inside the model that will be used as the node's text.</p>",
                "default": "text"
            },
            {
                "name": "folderSort",
                "type": "boolean",
                "doc": "<p>True to automatically prepend a leaf sorter to the store. Defaults to <code>undefined</code>.</p>",
                "default": null
            },
            {
                "name": "hideHeaders",
                "type": "boolean",
                "doc": "<p>True to hide the headers. Defaults to <code>undefined</code>.</p>",
                "default": null
            },
            {
                "name": "lines",
                "type": "boolean",
                "doc": "<p>False to disable tree lines.</p>",
                "default": "true"
            },
            {
                "name": "root",
                "type": "ext.data.model/ext.data.nodeinterface/object",
                "doc": "<p>Allows you to not specify a store on this TreePanel. This is useful for creating a simple tree with preloaded\ndata without having to specify a TreeStore and Model. A store and model will be created and root will be passed\nto that store.</p>",
                "default": "null"
            },
            {
                "name": "rootVisible",
                "type": "boolean",
                "doc": "<p>False to hide the root node.</p>",
                "default": "true"
            },
            {
                "name": "singleExpand",
                "type": "boolean",
                "doc": "<p>True if only 1 node per branch may be expanded.</p>",
                "default": "false"
            },
            {
                "name": "useArrows",
                "type": "boolean",
                "doc": "<p>True to use Vista-style arrows in the tree.</p>",
                "default": "false"
            }
        ],
        "events": [
            {
                "name": "beforeitemappend",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires before a new child is appended, return false to cancel the append.</p>"
            },
            {
                "name": "beforeitemcollapse",
                "params": "this(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires before this node is collapsed.</p>"
            },
            {
                "name": "beforeitemexpand",
                "params": "this(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires before this node is expanded.</p>"
            },
            {
                "name": "beforeiteminsert",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) refNode(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires before a new child is inserted, return false to cancel the insert.</p>"
            },
            {
                "name": "beforeitemmove",
                "params": "this(Ext.data.NodeInterface) oldParent(Ext.data.NodeInterface) newParent(Ext.data.NodeInterface) index(Number) eOpts(Object)",
                "doc": "<p>Fires before this node is moved to a new location in the tree. Return false to cancel the move.</p>"
            },
            {
                "name": "beforeitemremove",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires before a child is removed, return false to cancel the remove.</p>"
            },
            {
                "name": "beforeload",
                "params": "store(Ext.data.Store) operation(Ext.data.Operation) eOpts(Object)",
                "doc": "<p>Fires before a request is made for a new data object. If the beforeload handler returns false the load\naction will be canceled.</p>"
            },
            {
                "name": "checkchange",
                "params": "node(Ext.data.Model) checked(Boolean) eOpts(Object)",
                "doc": "<p>Fires when a node with a checkbox's checked property changes</p>"
            },
            {
                "name": "itemappend",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) index(Number) eOpts(Object)",
                "doc": "<p>Fires when a new child node is appended</p>"
            },
            {
                "name": "itemcollapse",
                "params": "this(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires when this node is collapsed.</p>"
            },
            {
                "name": "itemexpand",
                "params": "this(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires when this node is expanded.</p>"
            },
            {
                "name": "iteminsert",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) refNode(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires when a new child node is inserted.</p>"
            },
            {
                "name": "itemmove",
                "params": "this(Ext.data.NodeInterface) oldParent(Ext.data.NodeInterface) newParent(Ext.data.NodeInterface) index(Number) eOpts(Object)",
                "doc": "<p>Fires when this node is moved to a new location in the tree</p>"
            },
            {
                "name": "itemremove",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires when a child node is removed</p>"
            },
            {
                "name": "load",
                "params": "this(Ext.data.Store) records(Ext.util.Grouper[]) successful(Boolean) operation(Ext.data.Operation) eOpts(Object)",
                "doc": "<p>Fires whenever records have been prefetched</p>"
            }
        ]
    },
    "Ext.tree.plugin.TreeViewDragDrop": {
        "type": "Ext.tree.plugin.TreeViewDragDrop",
        "doc": "<p>This plugin provides drag and/or drop functionality for a TreeView.",
        "configs": [
            {
                "name": "allowContainerDrop",
                "type": "string",
                "doc": "<p>True if drops on the tree container (outside of a specific tree node) are allowed.</p>",
                "default": null
            },
            {
                "name": "allowParentInsert",
                "type": "boolean",
                "doc": "<p>Allow inserting a dragged node between an expanded parent node and its first child that will become a sibling of\nthe parent when dropped.</p>",
                "default": null
            },
            {
                "name": "appendOnly",
                "type": "string",
                "doc": "<p>True if the tree should only allow append drops (use for trees which are sorted).</p>",
                "default": "false"
            },
            {
                "name": "ddGroup",
                "type": "string",
                "doc": "<p>A named drag drop group to which this object belongs. If a group is specified, then both the DragZones and\nDropZone used by this plugin will only interact with other drag drop objects in the same group.</p>",
                "default": "TreeDD"
            },
            {
                "name": "dragGroup",
                "type": "string",
                "doc": "<p>The ddGroup to which the DragZone will belong.</p>",
                "default": null
            },
            {
                "name": "dropGroup",
                "type": "string",
                "doc": "<p>The ddGroup to which the DropZone will belong.</p>",
                "default": null
            },
            {
                "name": "enableDrag",
                "type": "boolean",
                "doc": "<p>Set to <code>false</code> to disallow dragging items from the View.</p>",
                "default": "true"
            },
            {
                "name": "enableDrop",
                "type": "boolean",
                "doc": "<p>Set to <code>false</code> to disallow the View from accepting drop gestures.</p>",
                "default": "true"
            },
            {
                "name": "expandDelay",
                "type": "string",
                "doc": "<p>The delay in milliseconds to wait before expanding a target tree node while dragging a droppable node over the\ntarget.</p>",
                "default": "1000"
            },
            {
                "name": "nodeHighlightColor",
                "type": "string",
                "doc": "<p>The color to use when visually highlighting the dragged or dropped node (default value is light blue).\nThe color must be a 6 digit hex value, without a preceding '#'. See also nodeHighlightOnDrop and\nnodeHighlightOnRepair.</p>",
                "default": "c3daf9"
            },
            {
                "name": "nodeHighlightOnDrop",
                "type": "boolean",
                "doc": "<p>Whether or not to highlight any nodes after they are\nsuccessfully dropped on their target. Defaults to the value of <code>Ext.enableFx</code>.\nSee also nodeHighlightColor and nodeHighlightOnRepair.</p>",
                "default": null
            },
            {
                "name": "nodeHighlightOnRepair",
                "type": "boolean",
                "doc": "<p>Whether or not to highlight any nodes after they are\nrepaired from an unsuccessful drag/drop. Defaults to the value of <code>Ext.enableFx</code>.\nSee also nodeHighlightColor and nodeHighlightOnDrop.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "beforedrop",
                "params": "node(HTMLElement) data(Object) overModel(Ext.data.Model) dropPosition(String) dropFunction(Function) eOpts(Object)",
                "doc": "<p><strong>This event is fired through the TreeView. Add listeners to the TreeView object</strong></p>"
            },
            {
                "name": "drop",
                "params": "node(HTMLElement) data(Object) overModel(Ext.data.Model) dropPosition(String) eOpts(Object)",
                "doc": "<p><strong>This event is fired through the TreeView. Add listeners to the TreeView object</strong> Fired when a drop operation\nhas been completed and the data has been moved or copied.</p>"
            }
        ]
    },
    "Ext.tree.View": {
        "type": "Ext.tree.View",
        "doc": "<p>Used as a view by TreePanel.",
        "configs": [
            {
                "name": "animate",
                "type": "boolean",
                "doc": "<p>True to enable animated expand/collapse (defaults to the value of Ext.enableFx)</p>",
                "default": null
            },
            {
                "name": "rootVisible",
                "type": "boolean",
                "doc": "<p>False to hide the root node.</p>",
                "default": "true"
            }
        ],
        "events": []
    },
    "Ext.tree.ViewDropZone": {
        "type": "Ext.tree.ViewDropZone",
        "configs": [
            {
                "name": "allowContainerDrop",
                "type": "string",
                "doc": "<p>True if drops on the tree container (outside of a specific tree node) are allowed.</p>",
                "default": null
            },
            {
                "name": "allowParentInsert",
                "type": "boolean",
                "doc": "<p>Allow inserting a dragged node between an expanded parent node and its first child that will become a\nsibling of the parent when dropped.</p>",
                "default": null
            },
            {
                "name": "appendOnly",
                "type": "string",
                "doc": "<p>True if the tree should only allow append drops (use for trees which are sorted).</p>",
                "default": "false"
            },
            {
                "name": "expandDelay",
                "type": "string",
                "doc": "<p>The delay in milliseconds to wait before expanding a target tree node while dragging a droppable node\nover the target.</p>",
                "default": "500"
            }
        ],
        "events": []
    },
    "Ext.util.AbstractMixedCollection": {
        "type": "Ext.util.AbstractMixedCollection",
        "configs": [
            {
                "name": "allowFunctions",
                "type": "boolean",
                "doc": "<p>Specify <tt>true</tt> if the addAll\nfunction should add function references to the collection. Defaults to\n<tt>false</tt>.</p>",
                "default": "false"
            }
        ],
        "events": [
            {
                "name": "add",
                "params": "index(Number) o(Object) key(String) eOpts(Object)",
                "doc": "<p>Fires when an item is added to the collection.</p>"
            },
            {
                "name": "clear",
                "params": "eOpts(Object)",
                "doc": "<p>Fires when the collection is cleared.</p>"
            },
            {
                "name": "remove",
                "params": "o(Object) key(String) eOpts(Object)",
                "doc": "<p>Fires when an item is removed from the collection.</p>"
            },
            {
                "name": "replace",
                "params": "key(String) old(Object) new(Object) eOpts(Object)",
                "doc": "<p>Fires when an item is replaced in the collection.</p>"
            }
        ]
    },
    "Ext.util.Animate": {
        "type": "Ext.util.Animate",
        "doc": "<p>This animation class is a mixin.",
        "configs": [],
        "events": []
    },
    "Ext.util.ClickRepeater": {
        "type": "Ext.util.ClickRepeater",
        "doc": "<p>A wrapper class which can be applied to any element. Fires a click event while the\nmouse is pressed. The interval between firings may be specified in the config but\ndefaults to 20 milliseconds.",
        "configs": [
            {
                "name": "accelerate",
                "type": "boolean",
                "doc": "<p>True if autorepeating should start slowly and accelerate.\ninterval and delay are ignored.</p>",
                "default": null
            },
            {
                "name": "delay",
                "type": "number",
                "doc": "<p>The initial delay before the repeating event begins firing.\nSimilar to an autorepeat key delay.</p>",
                "default": "250"
            },
            {
                "name": "el",
                "type": "string/htmlelement/ext.element",
                "doc": "<p>The element to act as a button.</p>",
                "default": null
            },
            {
                "name": "interval",
                "type": "number",
                "doc": "<p>The interval between firings of the click event. Default 20 ms.</p>",
                "default": "20"
            },
            {
                "name": "pressedCls",
                "type": "string",
                "doc": "<p>A CSS class name to be applied to the element while pressed.</p>",
                "default": null
            },
            {
                "name": "preventDefault",
                "type": "boolean",
                "doc": "<p>True to prevent the default click event</p>",
                "default": "true"
            },
            {
                "name": "stopDefault",
                "type": "boolean",
                "doc": "<p>True to stop the default click event</p>",
                "default": "false"
            }
        ],
        "events": [
            {
                "name": "click",
                "params": "this(Ext.util.ClickRepeater) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires on a specified interval during the time the element is pressed.</p>"
            },
            {
                "name": "mousedown",
                "params": "this(Ext.util.ClickRepeater) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires when the mouse button is depressed.</p>"
            },
            {
                "name": "mouseup",
                "params": "this(Ext.util.ClickRepeater) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires when the mouse key is released.</p>"
            }
        ]
    },
    "Ext.util.ComponentDragger": {
        "type": "Ext.util.ComponentDragger",
        "doc": "<p>A subclass of Ext.dd.DragTracker which handles dragging any Component.",
        "configs": [
            {
                "name": "constrain",
                "type": "boolean",
                "doc": "<p>Specify as <code>true</code> to constrain the Component to within the bounds of the constrainTo region.</p>",
                "default": null
            },
            {
                "name": "constrainDelegate",
                "type": "boolean",
                "doc": "<p>Specify as <code>true</code> to constrain the drag handles within the constrainTo region.</p>",
                "default": null
            },
            {
                "name": "delegate",
                "type": "string/ext.element",
                "doc": "<p>Optional. <p>A DomQuery selector which identifies child elements within the Component's encapsulating\nElement which are the drag handles. This limits dragging to only begin when the matching elements are mousedowned.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.util.Cookies": {
        "type": "Ext.util.Cookies",
        "doc": "<p>Utility class for setting/reading values from browser cookies.\nValues can be written using the set method.\nValues can be read using the get method.\nA cookie can be invalidated on the client machine using the clear method.",
        "configs": [],
        "events": []
    },
    "Ext.util.CSS": {
        "type": "Ext.util.CSS",
        "doc": "<p>Utility class for manipulating CSS rules",
        "configs": [],
        "events": []
    },
    "Ext.util.DelayedTask": {
        "type": "Ext.util.DelayedTask",
        "doc": "<p>The DelayedTask class provides a convenient way to buffer the execution of a method,\nperforming setTimeout where a new timeout cancels the old timeout. When called, the\ntask will wait the specified time period before executing. If durng that time period,\nthe task is called again, the original call will be cancelled. This continues so that\nthe function is only called a single time for each iteration.",
        "configs": [],
        "events": []
    },
    "Ext.util.Filter": {
        "type": "Ext.util.Filter",
        "doc": "<p>Filters are always used in the\ncontext of MixedCollections, though Stores frequently create them when filtering and searching\non their records.",
        "configs": [
            {
                "name": "anyMatch",
                "type": "boolean",
                "doc": "<p>True to allow any match - no regex start/end line anchors will be added.</p>",
                "default": "false"
            },
            {
                "name": "caseSensitive",
                "type": "boolean",
                "doc": "<p>True to make the regex case sensitive (adds 'i' switch to regex).</p>",
                "default": "false"
            },
            {
                "name": "exactMatch",
                "type": "boolean",
                "doc": "<p>True to force exact match (^ and $ characters added to the regex). Ignored if anyMatch is true.</p>",
                "default": "false"
            },
            {
                "name": "property",
                "type": "string",
                "doc": "<p>The property to filter on. Required unless a filterFn is passed</p>",
                "default": null
            },
            {
                "name": "root",
                "type": "string",
                "doc": "<p>Optional root property. This is mostly useful when filtering a Store, in which case we set the root to 'data' to\nmake the filter pull the property out of the data object of each item</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.util.Floating": {
        "type": "Ext.util.Floating",
        "doc": "<p>A mixin to add floating capability to a Component.",
        "configs": [
            {
                "name": "focusOnToFront",
                "type": "boolean",
                "doc": "<p>Specifies whether the floated component should be automatically focused when\nit is brought to the front.</p>",
                "default": "true"
            },
            {
                "name": "shadow",
                "type": "string/boolean",
                "doc": "<p>Specifies whether the floating component should be given a shadow. Set to true to automatically create an Ext.Shadow, or a string indicating the shadow's display Ext.Shadow.mode. Set to false to disable the\nshadow.</p>",
                "default": "sides"
            }
        ],
        "events": []
    },
    "Ext.util.Format": {
        "type": "Ext.util.Format",
        "doc": "<p>This class is a centralized place for formatting functions. It includes\nfunctions to format various different types of data, such as text, dates and numeric values.",
        "configs": [],
        "events": []
    },
    "Ext.util.Grouper": {
        "type": "Ext.util.Grouper",
        "doc": "<p>Represents a single grouper that can be applied to a Store. The grouper works\nin the same fashion as the Ext.util.Sorter.",
        "configs": [],
        "events": []
    },
    "Ext.util.HashMap": {
        "type": "Ext.util.HashMap",
        "doc": "<p>\nRepresents a collection of a set of key and value pairs. Each key in the HashMap\nmust be unique, the same key cannot exist twice. Access to items is provided via\nthe key only. Sample usage:\n<pre><code>var map = new Ext.util.HashMap();\nmap.add('key1', 1);\nmap.add('key2', 2);\nmap.add('key3', 3);\n\nmap.each(function(key, value, length){\n    console.log(key, value, length);\n});\n</code></pre>\n",
        "configs": [],
        "events": [
            {
                "name": "add",
                "params": "this(Ext.util.HashMap) key(String) value(Object) eOpts(Object)",
                "doc": "<p>Fires when a new item is added to the hash</p>"
            },
            {
                "name": "clear",
                "params": "this(Ext.util.HashMap) eOpts(Object)",
                "doc": "<p>Fires when the hash is cleared.</p>"
            },
            {
                "name": "remove",
                "params": "this(Ext.util.HashMap) key(String) value(Object) eOpts(Object)",
                "doc": "<p>Fires when an item is removed from the hash.</p>"
            },
            {
                "name": "replace",
                "params": "this(Ext.util.HashMap) key(String) value(Object) old(Object) eOpts(Object)",
                "doc": "<p>Fires when an item is replaced in the hash.</p>"
            }
        ]
    },
    "Ext.util.History": {
        "type": "Ext.util.History",
        "doc": "<p>History management component that allows you to register arbitrary tokens that signify application\nhistory state on navigation actions.  You can then handle the history change event in order\nto reset your application UI to the appropriate state when the user navigates forward or backward through\nthe browser history stack.",
        "configs": [],
        "events": [
            {
                "name": "change",
                "params": "token(String) eOpts(Object)",
                "doc": "<p>Fires when navigation back or forwards within the local page's history occurs.</p>"
            },
            {
                "name": "ready",
                "params": "The(Ext.util.History) eOpts(Object)",
                "doc": "<p>Fires when the Ext.util.History singleton has been initialized and is ready for use.</p>"
            }
        ]
    },
    "Ext.util.Inflector": {
        "type": "Ext.util.Inflector",
        "doc": "<p>General purpose inflector class that pluralizes, singularizes and\nordinalizes words. Sample usage:",
        "configs": [],
        "events": []
    },
    "Ext.util.KeyMap": {
        "type": "Ext.util.KeyMap",
        "doc": "<p>Handles mapping keys to actions for an element. One key map can be used for multiple actions.\nThe constructor accepts the same config object as defined by addBinding.\nIf you bind a callback function to a KeyMap, anytime the KeyMap handles an expected key\ncombination it will call the function with this signature (if the match is a multi-key\ncombination the callback will still be called only once): (String key, Ext.EventObject e)\nA KeyMap can also handle a string representation of keys. By default KeyMap starts enabled.<br />\nUsage:",
        "configs": [],
        "events": []
    },
    "Ext.util.KeyNav": {
        "type": "Ext.util.KeyNav",
        "doc": "<p>Provides a convenient wrapper for normalized keyboard navigation.  KeyNav allows you to bind\nnavigation keys to function calls that will get called when the keys are pressed, providing an easy\nway to implement custom navigation schemes for any UI component.",
        "configs": [
            {
                "name": "defaultEventAction",
                "type": "string",
                "doc": "<p>The method to call on the Ext.EventObject after this KeyNav intercepts a key.  Valid values are\nExt.EventObject.stopEvent, Ext.EventObject.preventDefault and\nExt.EventObject.stopPropagation.</p>",
                "default": "stopEvent"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "doc": "<p>True to disable this KeyNav instance.</p>",
                "default": "false"
            },
            {
                "name": "forceKeyDown",
                "type": "boolean",
                "doc": "<p>Handle the keydown event instead of keypress.  KeyNav automatically does this for IE since\nIE does not propagate special keys on keypress, but setting this to true will force other browsers to also\nhandle keydown instead of keypress.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.util.Memento": {
        "type": "Ext.util.Memento",
        "doc": "<p>This class manages a set of captured properties from an object. These captured properties\ncan later be restored to an object.",
        "configs": [],
        "events": []
    },
    "Ext.util.MixedCollection": {
        "type": "Ext.util.MixedCollection",
        "doc": "<p>\nRepresents a collection of a set of key and value pairs</p>",
        "configs": [],
        "events": []
    },
    "Ext.util.Observable": {
        "type": "Ext.util.Observable",
        "doc": "<p>Base class that provides a common interface for publishing events. Subclasses are expected to to have a property\nevents with all the events defined, and, optionally, a property listeners with configured listeners defined.",
        "configs": [
            {
                "name": "listeners",
                "type": "object",
                "doc": "<p>A config object containing one or more event handlers to be added to this object during initialization. This\nshould be a valid listeners config object as specified in the addListener example for attaching multiple\nhandlers at once.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.util.Point": {
        "type": "Ext.util.Point",
        "doc": "<p>Represents a 2D point with x and y properties, useful for comparison and instantiation\nfrom an event:",
        "configs": [],
        "events": []
    },
    "Ext.util.Region": {
        "type": "Ext.util.Region",
        "doc": "<p>This class represents a rectangular region in X,Y space, and performs geometric\ntransformations or tests upon the region.",
        "configs": [],
        "events": []
    },
    "Ext.util.Sortable": {
        "type": "Ext.util.Sortable",
        "doc": "<p>A mixin which allows a data component to be sorted. This is used by e.g. Ext.data.Store and Ext.data.TreeStore.",
        "configs": [],
        "events": []
    },
    "Ext.util.Sorter": {
        "type": "Ext.util.Sorter",
        "doc": "<p>Represents a single sorter that can be applied to a Store. The sorter is used\nto compare two values against each other for the purpose of ordering them. Ordering\nis achieved by specifying either:",
        "configs": [
            {
                "name": "direction",
                "type": "string",
                "doc": "<p>The direction to sort by.</p>",
                "default": "ASC"
            },
            {
                "name": "property",
                "type": "string",
                "doc": "<p>The property to sort by. Required unless sorterFn is provided. The property is extracted from the object\ndirectly and compared for sorting using the built in comparison operators.</p>",
                "default": null
            },
            {
                "name": "root",
                "type": "string",
                "doc": "<p>Optional root property. This is mostly useful when sorting a Store, in which case we set the root to 'data' to\nmake the filter pull the property out of the data object of each item</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.util.TaskRunner": {
        "type": "Ext.util.TaskRunner",
        "doc": "<p>Provides the ability to execute one or more arbitrary tasks in a multithreaded\nmanner.  Generally, you can use the singleton Ext.TaskManager instead, but\nif needed, you can create separate instances of TaskRunner.  Any number of\nseparate tasks can be started at any time and will run independently of each\nother. Example usage:",
        "configs": [],
        "events": []
    },
    "Ext.util.TextMetrics": {
        "type": "Ext.util.TextMetrics",
        "doc": "<p>Provides precise pixel measurements for blocks of text so that you can determine exactly how high and\nwide, in pixels, a given block of text will be. Note that when measuring text, it should be plain text and\nshould not contain any HTML, otherwise it may not be measured correctly.",
        "configs": [],
        "events": []
    },
    "Ext.Version": {
        "type": "Ext.Version",
        "doc": "<p>A utility class that wrap around a string version number and provide convenient\nmethod to perform comparison. See also: compare. Example:",
        "configs": [],
        "events": []
    },
    "Ext.view.AbstractView": {
        "type": "Ext.view.AbstractView",
        "doc": "<p>This is an abstract superclass and should not be used directly. Please see Ext.view.View.",
        "configs": [
            {
                "name": "blockRefresh",
                "type": "boolean",
                "doc": "<p>Set this to true to ignore datachanged events on the bound store. This is useful if\nyou wish to provide custom transition animations via a plugin</p>",
                "default": "false"
            },
            {
                "name": "deferEmptyText",
                "type": "boolean",
                "doc": "<p>True to defer emptyText being applied until the store's first load.</p>",
                "default": "true"
            },
            {
                "name": "deferInitialRefresh",
                "type": "boolean",
                "doc": "<p>Defaults to <code>true</code> to defer the initial refresh of the view.</p>",
                "default": "true"
            },
            {
                "name": "disableSelection",
                "type": "boolean",
                "doc": "<p>True to disable selection within the DataView. This configuration will lock the selection model\nthat the DataView uses.</p>",
                "default": null
            },
            {
                "name": "emptyText",
                "type": "string",
                "doc": "<p>The text to display in the view when there is no data to display.\nNote that when using local data the emptyText will not be displayed unless you set\nthe deferEmptyText option to false.</p>",
                "default": ""
            },
            {
                "name": "itemCls",
                "type": "string",
                "doc": "<p>Specifies the class to be assigned to each element in the view when used in conjunction with the\nitemTpl configuration.</p>",
                "default": "x-dataview-item"
            },
            {
                "name": "itemSelector",
                "type": "string",
                "doc": "<p><b>This is a required setting</b>. A simple CSS selector (e.g. <tt>div.some-class</tt> or\n<tt>span:first-child</tt>) that will be used to determine what nodes this DataView will be\nworking with. The itemSelector is used to map DOM nodes to records. As such, there should\nonly be one root level element that matches the selector for each record.</p>",
                "default": null
            },
            {
                "name": "itemTpl",
                "type": "string/string[]/ext.xtemplate",
                "doc": "<p>The inner portion of the item template to be rendered. Follows an XTemplate\nstructure and will be placed inside of a tpl.</p>",
                "default": null
            },
            {
                "name": "loadMask",
                "type": "boolean/object",
                "doc": "<p>False to disable a load mask from displaying will the view is loading. This can also be a\nExt.LoadMask configuration object.</p>",
                "default": "true"
            },
            {
                "name": "loadingCls",
                "type": "string",
                "doc": "<p>The CSS class to apply to the loading message element. Defaults to Ext.LoadMask.prototype.msgCls x-mask-loading.</p>",
                "default": null
            },
            {
                "name": "loadingHeight",
                "type": "number",
                "doc": "<p>If specified, gives an explicit height for the data view when it is showing the loadingText,\nif that is specified. This is useful to prevent the view's height from collapsing to zero when the\nloading mask is applied and there are no other contents in the data view.</p>",
                "default": null
            },
            {
                "name": "loadingText",
                "type": "string",
                "doc": "<p>A string to display during data load operations.  If specified, this text will be\ndisplayed in a loading div and the view's contents will be cleared while loading, otherwise the view's\ncontents will continue to display normally until the new data is loaded and the contents are replaced.</p>",
                "default": "Loading..."
            },
            {
                "name": "loadingUseMsg",
                "type": "boolean",
                "doc": "<p>Whether or not to use the loading message.</p>",
                "default": "true"
            },
            {
                "name": "multiSelect",
                "type": "boolean",
                "doc": "<p>True to allow selection of more than one item at a time, false to allow selection of only a single item\nat a time or no selection at all, depending on the value of singleSelect.</p>",
                "default": "false"
            },
            {
                "name": "overItemCls",
                "type": "string",
                "doc": "<p>A CSS class to apply to each item in the view on mouseover.\nEnsure trackOver is set to <code>true</code> to make use of this.</p>",
                "default": null
            },
            {
                "name": "selectedItemCls",
                "type": "string",
                "doc": "<p>A CSS class to apply to each selected item in the view.</p>",
                "default": "x-view-selected"
            },
            {
                "name": "simpleSelect",
                "type": "boolean",
                "doc": "<p>True to enable multiselection by clicking on multiple items without requiring the user to hold Shift or Ctrl,\nfalse to force the user to hold Ctrl or Shift to select more than on item.</p>",
                "default": "false"
            },
            {
                "name": "singleSelect",
                "type": "boolean",
                "doc": "<p>True to allow selection of exactly one item at a time, false to allow no selection at all.\nNote that if multiSelect = true, this value will be ignored.</p>",
                "default": "false"
            },
            {
                "name": "store",
                "type": "ext.data.store",
                "doc": "<p>The Ext.data.Store to bind this DataView to.</p>",
                "default": null
            },
            {
                "name": "tpl",
                "type": "string/string[]/ext.xtemplate",
                "doc": "<p>The HTML fragment or an array of fragments that will make up the template used by this DataView.  This should\nbe specified in the same format expected by the constructor of Ext.XTemplate.</p>",
                "default": null
            },
            {
                "name": "trackOver",
                "type": "boolean",
                "doc": "<p>True to enable mouseenter and mouseleave events</p>",
                "default": "false"
            }
        ],
        "events": [
            {
                "name": "beforerefresh",
                "params": "this(Ext.view.View) eOpts(Object)",
                "doc": "<p>Fires before the view is refreshed</p>"
            },
            {
                "name": "itemadd",
                "params": "records(Ext.data.Model[]) index(Number) node(HTMLElement[]) eOpts(Object)",
                "doc": "<p>Fires when the nodes associated with an recordset have been added to the underlying store</p>"
            },
            {
                "name": "itemremove",
                "params": "record(Ext.data.Model) index(Number) eOpts(Object)",
                "doc": "<p>Fires when the node associated with an individual record is removed</p>"
            },
            {
                "name": "itemupdate",
                "params": "record(Ext.data.Model) index(Number) node(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when the node associated with an individual record is updated</p>"
            },
            {
                "name": "refresh",
                "params": "this(Ext.view.View) eOpts(Object)",
                "doc": "<p>Fires when the view is refreshed</p>"
            },
            {
                "name": "viewready",
                "params": "this(Ext.view.View) eOpts(Object)",
                "doc": "<p>Fires when the View's item elements representing Store items has been rendered. If the deferInitialRefresh flag\nwas set (and it is <code>true</code> by default), this will be <b>after</b> initial render, and no items will be available\nfor selection until this event fires.</p>"
            }
        ]
    },
    "Ext.view.BoundList": {
        "type": "Ext.view.BoundList",
        "doc": "<p>An internally used DataView for ComboBox.",
        "configs": [
            {
                "name": "pageSize",
                "type": "number",
                "doc": "<p>If greater than <code>0</code>, a Ext.toolbar.Paging is displayed at the bottom of the list and store\nqueries will execute with page start and\nlimit parameters. Defaults to <code>0</code>.</p>",
                "default": "0"
            }
        ],
        "events": []
    },
    "Ext.view.BoundListKeyNav": {
        "type": "Ext.view.BoundListKeyNav",
        "doc": "<p>A specialized Ext.util.KeyNav implementation for navigating a Ext.view.BoundList using\nthe keyboard. The up, down, pageup, pagedown, home, and end keys move the active highlight\nthrough the list. The enter key invokes the selection model's select action using the highlighted item.",
        "configs": [
            {
                "name": "boundList",
                "type": "ext.view.boundlist",
                "doc": "<p>The Ext.view.BoundList instance for which key navigation will be managed.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.view.DragZone": {
        "type": "Ext.view.DragZone",
        "configs": [],
        "events": []
    },
    "Ext.view.DropZone": {
        "type": "Ext.view.DropZone",
        "configs": [],
        "events": []
    },
    "Ext.view.Table": {
        "type": "Ext.view.Table",
        "doc": "<p>This class encapsulates the user interface for a tabular data set.\nIt acts as a centralized manager for controlling the various interface\nelements of the view. This includes handling events, such as row and cell\nlevel based DOM events. It also reacts to events from the underlying Ext.selection.Model\nto provide visual feedback to the user.",
        "configs": [],
        "events": []
    },
    "Ext.view.TableChunker": {
        "type": "Ext.view.TableChunker",
        "doc": "<p>Produces optimized XTemplates for chunks of tables to be\nused in grids, trees and other table based widgets.",
        "configs": [],
        "events": []
    },
    "Ext.view.View": {
        "type": "Ext.view.View",
        "doc": "<p>A mechanism for displaying data using custom layout templates and formatting.",
        "configs": [],
        "events": [
            {
                "name": "beforecontainerclick",
                "params": "this(Ext.view.View) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires before the click event on the container is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforecontainercontextmenu",
                "params": "this(Ext.view.View) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires before the contextmenu event on the container is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforecontainerdblclick",
                "params": "this(Ext.view.View) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires before the dblclick event on the container is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforecontainerkeydown",
                "params": "this(Ext.view.View) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires before the keydown event on the container is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforecontainermousedown",
                "params": "this(Ext.view.View) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires before the mousedown event on the container is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforecontainermouseout",
                "params": "this(Ext.view.View) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires before the mouseout event on the container is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforecontainermouseover",
                "params": "this(Ext.view.View) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires before the mouseover event on the container is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforecontainermouseup",
                "params": "this(Ext.view.View) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires before the mouseup event on the container is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforeitemclick",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires before the click event on an item is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforeitemcontextmenu",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires before the contextmenu event on an item is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforeitemdblclick",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires before the dblclick event on an item is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforeitemkeydown",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires before the keydown event on an item is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforeitemmousedown",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires before the mousedown event on an item is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforeitemmouseenter",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires before the mouseenter event on an item is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforeitemmouseleave",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires before the mouseleave event on an item is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforeitemmouseup",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires before the mouseup event on an item is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforeselect",
                "params": "this(Ext.view.View) node(HTMLElement) selections(HTMLElement[]) eOpts(Object)",
                "doc": "<p>Fires before a selection is made. If any handlers return false, the selection is cancelled.</p>"
            },
            {
                "name": "containerclick",
                "params": "this(Ext.view.View) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires when the container is clicked.</p>"
            },
            {
                "name": "containercontextmenu",
                "params": "this(Ext.view.View) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires when the container is right clicked.</p>"
            },
            {
                "name": "containerdblclick",
                "params": "this(Ext.view.View) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires when the container is double clicked.</p>"
            },
            {
                "name": "containerkeydown",
                "params": "this(Ext.view.View) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires when a key is pressed while the container is focused, and no item is currently selected.</p>"
            },
            {
                "name": "containermouseout",
                "params": "this(Ext.view.View) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires when you move the mouse out of the container.</p>"
            },
            {
                "name": "containermouseover",
                "params": "this(Ext.view.View) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires when you move the mouse over the container.</p>"
            },
            {
                "name": "containermouseup",
                "params": "this(Ext.view.View) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires when there is a mouse up on the container</p>"
            },
            {
                "name": "itemclick",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires when an item is clicked.</p>"
            },
            {
                "name": "itemcontextmenu",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires when an item is right clicked.</p>"
            },
            {
                "name": "itemdblclick",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires when an item is double clicked.</p>"
            },
            {
                "name": "itemkeydown",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires when a key is pressed while an item is currently selected.</p>"
            },
            {
                "name": "itemmousedown",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires when there is a mouse down on an item</p>"
            },
            {
                "name": "itemmouseenter",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires when the mouse enters an item.</p>"
            },
            {
                "name": "itemmouseleave",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires when the mouse leaves an item.</p>"
            },
            {
                "name": "itemmouseup",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires when there is a mouse up on an item</p>"
            },
            {
                "name": "selectionchange",
                "params": "this(Ext.view.View) selections(HTMLElement[]) eOpts(Object)",
                "doc": "<p>Fires when the selected nodes change. Relayed event from the underlying selection model.</p>"
            }
        ]
    },
    "Ext.window.MessageBox": {
        "type": "Ext.window.MessageBox",
        "doc": "<p>Utility class for generating different styles of message boxes.  The singleton instance, Ext.MessageBox\nalias <code>Ext.Msg</code> can also be used.",
        "configs": [],
        "events": []
    },
    "Ext.window.Window": {
        "type": "Ext.window.Window",
        "doc": "<p>A specialized panel intended for use as an application window. Windows are floated, resizable, and\ndraggable by default. Windows can be maximized to fill the viewport, restored to\ntheir prior size, and can be minimized.",
        "configs": [
            {
                "name": "animateTarget",
                "type": "string/ext.element",
                "doc": "<p>Id or element from which the window should animate while opening.</p>",
                "default": "null"
            },
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this panel's element.</p>",
                "default": "x-window"
            },
            {
                "name": "closable",
                "type": "boolean",
                "doc": "<p>True to display the 'close' tool button and allow the user to close the window, false to hide the button and\ndisallow closing the window.</p>",
                "default": "true"
            },
            {
                "name": "collapsed",
                "type": "boolean",
                "doc": "<p>True to render the window collapsed, false to render it expanded. Note that if expandOnShow\nis true (the default) it will override the <code>collapsed</code> config and the window will always be\nexpanded when shown.</p>",
                "default": "false"
            },
            {
                "name": "constrain",
                "type": "boolean",
                "doc": "<p>True to constrain the window within its containing element, false to allow it to fall outside of its containing\nelement. By default the window will be rendered to document.body. To render and constrain the window within\nanother element specify renderTo. Optionally the header only can be constrained\nusing constrainHeader.</p>",
                "default": "false"
            },
            {
                "name": "constrainHeader",
                "type": "boolean",
                "doc": "<p>True to constrain the window header within its containing element (allowing the window body to fall outside of\nits containing element) or false to allow the header to fall outside its containing element.\nOptionally the entire window can be constrained using constrain.</p>",
                "default": "false"
            },
            {
                "name": "defaultFocus",
                "type": "string/number/ext.component",
                "doc": "<p>Specifies a Component to receive focus when this Window is focused.</p>",
                "default": null
            },
            {
                "name": "draggable",
                "type": "boolean",
                "doc": "<p>True to allow the window to be dragged by the header bar, false to disable dragging. Note that\nby default the window will be centered in the viewport, so if dragging is disabled the window may need to be\npositioned programmatically after render (e.g., myWindow.setPosition(100, 100);).</p>",
                "default": "true"
            },
            {
                "name": "expandOnShow",
                "type": "boolean",
                "doc": "<p>True to always expand the window when it is displayed, false to keep it in its current state (which may be\ncollapsed) when displayed.</p>",
                "default": "true"
            },
            {
                "name": "hidden",
                "type": "boolean",
                "doc": "<p>Render this Window hidden. If <code>true</code>, the hide method will be called internally.</p>",
                "default": "true"
            },
            {
                "name": "maximizable",
                "type": "boolean",
                "doc": "<p>True to display the 'maximize' tool button and allow the user to maximize the window, false to hide the button\nand disallow maximizing the window. Note that when a window is maximized, the tool button\nwill automatically change to a 'restore' button with the appropriate behavior already built-in that will restore\nthe window to its previous size.</p>",
                "default": "false"
            },
            {
                "name": "maximized",
                "type": "boolean",
                "doc": "<p>True to initially display the window in a maximized state.</p>",
                "default": "false"
            },
            {
                "name": "minimizable",
                "type": "boolean",
                "doc": "<p>True to display the 'minimize' tool button and allow the user to minimize the window, false to hide the button\nand disallow minimizing the window. Note that this button provides no implementation -- the\nbehavior of minimizing a window is implementation-specific, so the minimize event must be handled and a custom\nminimize behavior implemented for this option to be useful.</p>",
                "default": "false"
            },
            {
                "name": "modal",
                "type": "boolean",
                "doc": "<p>True to make the window modal and mask everything behind it when displayed, false to display it without\nrestricting access to other UI elements.</p>",
                "default": "false"
            },
            {
                "name": "plain",
                "type": "boolean",
                "doc": "<p>True to render the window body with a transparent background so that it will blend into the framing elements,\nfalse to add a lighter background color to visually highlight the body element and separate it more distinctly\nfrom the surrounding frame.</p>",
                "default": "false"
            },
            {
                "name": "resizable",
                "type": "boolean/object",
                "doc": "<p>Specify as <code>true</code> to allow user resizing at each edge and corner of the window, false to disable resizing.</p>",
                "default": "true"
            },
            {
                "name": "x",
                "type": "number",
                "doc": "<p>The X position of the left edge of the window on initial showing. Defaults to centering the Window within the\nwidth of the Window's container Element (The Element that the Window is rendered to).</p>",
                "default": null
            },
            {
                "name": "y",
                "type": "number",
                "doc": "<p>The Y position of the top edge of the window on initial showing. Defaults to centering the Window within the\nheight of the Window's container Element (The Element that the Window is rendered to).</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "activate",
                "params": "this(Ext.window.Window) eOpts(Object)",
                "doc": "<p>Fires after the window has been visually activated via setActive.</p>"
            },
            {
                "name": "deactivate",
                "params": "this(Ext.window.Window) eOpts(Object)",
                "doc": "<p>Fires after the window has been visually deactivated via setActive.</p>"
            },
            {
                "name": "maximize",
                "params": "this(Ext.window.Window) eOpts(Object)",
                "doc": "<p>Fires after the window has been maximized.</p>"
            },
            {
                "name": "minimize",
                "params": "this(Ext.window.Window) eOpts(Object)",
                "doc": "<p>Fires after the window has been minimized.</p>"
            },
            {
                "name": "resize",
                "params": "this(Ext.window.Window) width(Number) height(Number) eOpts(Object)",
                "doc": "<p>Fires after the window has been resized.</p>"
            },
            {
                "name": "restore",
                "params": "this(Ext.window.Window) eOpts(Object)",
                "doc": "<p>Fires after the window has been restored to its original size after being maximized.</p>"
            }
        ]
    },
    "Ext.WindowManager": {
        "type": "Ext.WindowManager",
        "doc": "<p>The default global floating Component group that is available automatically.",
        "configs": [],
        "events": []
    },
    "Ext.XTemplate": {
        "type": "Ext.XTemplate",
        "doc": "<p>A template class that supports advanced functionality like:",
        "configs": [
            {
                "name": "codeRe",
                "type": "regexp",
                "doc": "<p>The regular expression used to match code variables. Default: matches {[expression]}.</p>",
                "default": "/\\{\\[((?:\\\\\\]|.|\\n)*?)\\]\\}/g"
            },
            {
                "name": "compiled",
                "type": "boolean",
                "doc": "<p>Only applies to Ext.Template, XTemplates are compiled automatically.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.ZIndexManager": {
        "type": "Ext.ZIndexManager",
        "doc": "<p>A class that manages a group of Ext.Component.floating Components and provides z-order management,\nand Component activation behavior, including masking below the active (topmost) Component.",
        "configs": [],
        "events": []
    }
}
