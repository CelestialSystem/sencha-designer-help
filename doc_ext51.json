{
    "Ext.AbstractManager": {
        "type": "Ext.AbstractManager",
        "doc": "<p>Base Manager class</p>",
        "configs": [],
        "events": []
    },
    "Ext.Action": {
        "type": "Ext.Action",
        "doc": "<p>An Action is a piece of reusable functionality that can be abstracted out of any particular component so that it\ncan be usefully shared among multiple components.  Actions let you share handlers, configuration options and UI\nupdates across any components that support the Action interface (primarily Ext.toolbar.Toolbar,\nExt.button.Button and Ext.menu.Menu components).</p>",
        "configs": [
            {
                "name": "disabled",
                "type": "boolean",
                "doc": "<p>True to disable all components configured by this Action, false to enable them.</p>",
                "default": "false"
            },
            {
                "name": "handler",
                "type": "function",
                "doc": "<p>The function that will be invoked by each component tied to this Action\nwhen the component's primary event is triggered.</p>",
                "default": null
            },
            {
                "name": "hidden",
                "type": "boolean",
                "doc": "<p>True to hide all components configured by this Action, false to show them.</p>",
                "default": "false"
            },
            {
                "name": "iconCls",
                "type": "string",
                "doc": "<p>The CSS class selector that specifies a background image to be used as the header icon for\nall components configured by this Action.</p>",
                "default": "''"
            },
            {
                "name": "itemId",
                "type": "string",
                "doc": "<p>See Ext.Component.itemId.</p>",
                "default": null
            },
            {
                "name": "scope",
                "type": "object",
                "doc": "<p>The scope (this reference) in which the handler is executed.\nDefaults to the browser window.</p>",
                "default": null
            },
            {
                "name": "text",
                "type": "string",
                "doc": "<p>The text to set for all components configured by this Action.</p>",
                "default": "''"
            }
        ],
        "events": []
    },
    "Ext.Ajax": {
        "type": "Ext.Ajax",
        "doc": "<p>A singleton instance of an Ext.data.Connection. This class\nis used to communicate with your server side code. It can be used as follows:</p>",
        "configs": [],
        "events": []
    },
    "Ext.AnimationQueue": {
        "type": "Ext.AnimationQueue",
        "configs": [],
        "events": []
    },
    "Ext.Array": {
        "type": "Ext.Array",
        "doc": "<p>A set of useful static methods to deal with arrays; provide missing methods for\nolder browsers.</p>",
        "configs": [],
        "events": []
    },
    "Ext.Assert": {
        "type": "Ext.Assert",
        "doc": "<p>This class provides help value testing methods useful for diagnostics. These are often\nused in <code>debugHooks</code>:</p>",
        "configs": [],
        "events": []
    },
    "Ext.Base": {
        "type": "Ext.Base",
        "doc": "<p>The root of all classes created with Ext.define.</p>",
        "configs": [],
        "events": []
    },
    "Ext.Class": {
        "type": "Ext.Class",
        "doc": "<p>This is a low level factory that is used by Ext.define and should not be used\ndirectly in application code.</p>",
        "configs": [
            {
                "name": "alias",
                "type": "string/string[]",
                "doc": "<p>List of short aliases for class names. An alias consists of a namespace and a name concatenated by a period as &#60;namespace&#62;.&#60;name&#62;</p>",
                "default": null
            },
            {
                "name": "alternateClassName",
                "type": "string/string[]",
                "doc": "<p>Defines alternate names for this class.  For example:</p>",
                "default": null
            },
            {
                "name": "cachedConfig",
                "type": "object",
                "doc": "<p>This configuration works in a very similar manner to the config option.\nThe difference is that the configurations are only ever processed when the first instance\nof that class is created. The processed value is then stored on the class prototype and\nwill not be processed on subsequent instances of the class. Getters/setters will be generated\nin exactly the same way as config.</p>",
                "default": null
            },
            {
                "name": "config",
                "type": "object",
                "doc": "<p>List of configuration options with their default values.</p>",
                "default": null
            },
            {
                "name": "extend",
                "type": "string",
                "doc": "<p>The parent class that this class extends. For example:</p>",
                "default": null
            },
            {
                "name": "inheritableStatics",
                "type": "object",
                "doc": "<p>List of inheritable static methods for this class.\nOtherwise just like statics but subclasses inherit these methods.</p>",
                "default": null
            },
            {
                "name": "mixins",
                "type": "string[]/object",
                "doc": "<p>List of classes to mix into this class. For example:</p>",
                "default": null
            },
            {
                "name": "platformConfig",
                "type": "object",
                "doc": "<p>Allows setting config values for a class based on specific platforms. The value\nof this config is an object whose properties are \"rules\" and whose values are\nobjects containing config values.</p>",
                "default": null
            },
            {
                "name": "requires",
                "type": "string[]",
                "doc": "<p>List of classes that have to be loaded before instantiating this class.\nFor example:</p>",
                "default": null
            },
            {
                "name": "singleton",
                "type": "boolean",
                "doc": "<p>When set to true, the class will be instantiated as singleton.  For example:</p>",
                "default": null
            },
            {
                "name": "statics",
                "type": "object",
                "doc": "<p>List of static methods for this class. For example:</p>",
                "default": null
            },
            {
                "name": "uses",
                "type": "string[]",
                "doc": "<p>List of optional classes to load together with this class. These aren't neccessarily loaded before\nthis class is created, but are guaranteed to be available before Ext.onReady listeners are\ninvoked. For example:</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.ClassManager": {
        "type": "Ext.ClassManager",
        "doc": "<p>Ext.ClassManager manages all classes and handles mapping from string class name to\nactual class objects throughout the whole framework. It is not generally accessed directly, rather through\nthese convenient shorthands:</p>",
        "configs": [
            {
                "name": "debugHooks",
                "type": "object",
                "doc": "<p>A collection of diagnostic methods to decorate the real methods of the class. These\nmethods are applied as an <code>override</code> if this class has debug enabled as defined by\n<code>Ext.isDebugEnabled</code>.</p>",
                "default": null
            },
            {
                "name": "deprecated",
                "type": "object",
                "doc": "<p>The object given has properties that describe the versions at which the deprecations\napply.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.Component": {
        "type": "Ext.Component",
        "doc": "<p>Base class for all Ext components.</p>",
        "configs": [
            {
                "name": "alignTarget",
                "type": "string",
                "doc": "<p>A Component or Element by which to position this component according to the defaultAlign.\nDefaults to ths owning Container.</p>",
                "default": null
            },
            {
                "name": "autoEl",
                "type": "string/object",
                "doc": "<p>A tag name or DomHelper spec used to create the Element which will\nencapsulate this Component.</p>",
                "default": null
            },
            {
                "name": "autoRender",
                "type": "boolean/string/htmlelement/ext.dom.element",
                "doc": "<p>This config is intended mainly for non-floating Components which may or may not be shown. Instead of using\nrenderTo in the configuration, and rendering upon construction, this allows a Component to render itself\nupon first <em>show</em>. If floating is <code>true</code>, the value of this config is omitted as if it is <code>true</code>.</p>",
                "default": "false"
            },
            {
                "name": "autoScroll",
                "type": "boolean",
                "doc": "<p><code>true</code> to use overflow:'auto' on the components layout element and show scroll bars automatically when necessary,\n<code>false</code> to clip any overflowing content.</p>",
                "default": "false"
            },
            {
                "name": "autoShow",
                "type": "boolean",
                "doc": "<p><code>true</code> to automatically show the component upon creation. This config option may only be used for\nfloating components or components that use autoRender.</p>",
                "default": "false"
            },
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to elements within this\ncomponent like Panel's body will get a class <code>x-panel-body</code>. This means that if you create a subclass of Panel, and\nyou want it to get all the Panels styling for the element and the body, you leave the <code>baseCls</code> <code>x-panel</code> and use\n<code>componentCls</code> to add specific styling for this component.</p>",
                "default": "'x-component'"
            },
            {
                "name": "border",
                "type": "number/string/boolean",
                "doc": "<p>Specifies the border size for this component. The border can be a single numeric value to apply to all sides or it can\nbe a CSS style specification for each style, for example: '10 5 3 10' (top, right, bottom, left).</p>",
                "default": null
            },
            {
                "name": "childEls",
                "type": "object/string[]/object[]",
                "doc": "<p>The canonical form of <code>childEls</code> is an object keyed by child's property name\nwith values that are objects with the following properties.</p>",
                "default": "{frameTable: {frame: true}, frameTL: {frame: 'tl'}, frameTC: {frame: 'tc'}, frameTR: {frame: 'tr'}, frameML: {frame: 'ml'}, frameBody: {frame: 'mc'}, frameMR: {frame: 'mr'}, frameBL: {frame: 'bl'}, frameBC: {frame: 'bc'}, frameBR: {frame: 'br'}}"
            },
            {
                "name": "cls",
                "type": "string/string[]",
                "doc": "<p>An optional extra CSS class that will be added to this component's Element.\nThe value can be a string, a list of strings separated by spaces, or an array of strings. This can be useful\nfor adding customized styles to the component or any of its children using standard CSS rules.</p>",
                "default": "''"
            },
            {
                "name": "columnWidth",
                "type": "number/string",
                "doc": "<p>Defines the column width inside column layout.</p>",
                "default": "undefined"
            },
            {
                "name": "componentCls",
                "type": "string",
                "doc": "<p>CSS Class to be added to a components root level element to give distinction to it via styling.</p>",
                "default": null
            },
            {
                "name": "componentLayout",
                "type": "string/object",
                "doc": "<p>The sizing and positioning of a Component's internal Elements is the responsibility of the Component's layout\nmanager which sizes a Component's internal structure in response to the Component being sized.</p>",
                "default": "'autocomponent'"
            },
            {
                "name": "constrainTo",
                "type": "ext.util.region/ext.dom.element",
                "doc": "<p>A Region (or an element from which a Region measurement will be read) which is used\nto constrain the component. Only applies when the component is floating.</p>",
                "default": null
            },
            {
                "name": "constraintInsets",
                "type": "object/string",
                "doc": "<p>An object or a string (in TRBL order) specifying insets from the configured constrain region\nwithin which this component must be constrained when positioning or sizing.\nexample:</p>",
                "default": null
            },
            {
                "name": "contentEl",
                "type": "string",
                "doc": "<p>Specify an existing HTML element, or the <code>id</code> of an existing HTML element to use as the content for this component.</p>",
                "default": null
            },
            {
                "name": "data",
                "type": "object",
                "doc": "<p>The initial set of data to apply to the <code>tpl</code> to update the content\narea of the Component.</p>",
                "default": null
            },
            {
                "name": "defaultAlign",
                "type": "string",
                "doc": "<p>The default Ext.dom.Element#getAlignToXY anchor position value for this component\nrelative to its alignTarget (which defaults to its owning Container).</p>",
                "default": "\"c-c\""
            },
            {
                "name": "disabled",
                "type": "boolean",
                "doc": "<p><code>true</code> to disable the component.</p>",
                "default": "false"
            },
            {
                "name": "disabledCls",
                "type": "string",
                "doc": "<p>CSS class to add when the Component is disabled.</p>",
                "default": "'x-item-disabled'"
            },
            {
                "name": "draggable",
                "type": "boolean/object",
                "doc": "<p>Specify as true to make a floating Component draggable using the Component's encapsulating element as\nthe drag handle.</p>",
                "default": "false"
            },
            {
                "name": "floating",
                "type": "boolean",
                "doc": "<p>Specify as true to float the Component outside of the document flow using CSS absolute positioning.</p>",
                "default": "false"
            },
            {
                "name": "formBind",
                "type": "boolean",
                "doc": "<p>When inside FormPanel, any component configured with <code>formBind: true</code> will\nbe enabled/disabled depending on the validity state of the form.\nSee Ext.form.Panel for more information and example.</p>",
                "default": "false"
            },
            {
                "name": "frame",
                "type": "boolean",
                "doc": "<p>Specify as <code>true</code> to have the Component inject framing elements within the Component at render time to provide a\ngraphical rounded frame around the Component content.</p>",
                "default": null
            },
            {
                "name": "height",
                "type": "number|string",
                "doc": "<p>The height of this component. A numeric value will be interpreted as the number of\npixels; a string value will be treated as a CSS value with units.</p>",
                "default": null
            },
            {
                "name": "hidden",
                "type": "boolean",
                "doc": "<p><code>true</code> to hide the component.</p>",
                "default": "false"
            },
            {
                "name": "hideMode",
                "type": "string",
                "doc": "<p>A String which specifies how this Component's encapsulating DOM element will be hidden. Values may be:</p>",
                "default": "'display'"
            },
            {
                "name": "html",
                "type": "string/object",
                "doc": "<p>An HTML fragment, or a DomHelper specification to use as the layout element content.\nThe HTML content is added after the component is rendered, so the document will not contain this HTML at the time\nthe render event is fired. This content is inserted into the body <em>before</em> any configured contentEl\nis appended.</p>",
                "default": "''"
            },
            {
                "name": "id",
                "type": "string",
                "doc": "<p>The <strong>unique</strong> id of this component instance.</p>",
                "default": null
            },
            {
                "name": "itemId",
                "type": "string",
                "doc": "<p>The <strong>unique</strong> id of this component instance within its container. See also the\nreference config.</p>",
                "default": null
            },
            {
                "name": "liquidLayout",
                "type": "boolean",
                "doc": "<p>Components that achieve their internal layout results using solely CSS with no JS\nintervention must set this to true.  This allows the component to opt out of the\nlayout run when used inside certain container layouts such as Form and Auto\nresulting in a performance gain. The following components currently use liquid\nlayout (<code>liquidLayout: true</code>):</p>",
                "default": "false"
            },
            {
                "name": "loader",
                "type": "ext.componentloader/object",
                "doc": "<p>A configuration object or an instance of a Ext.ComponentLoader to load remote content\nfor this Component.</p>",
                "default": null
            },
            {
                "name": "margin",
                "type": "number/string",
                "doc": "<p>Specifies the margin for this component. The margin can be a single numeric value to apply to all sides or it can\nbe a CSS style specification for each style, for example: '10 5 3 10' (top, right, bottom, left).</p>",
                "default": null
            },
            {
                "name": "maskElement",
                "type": "string",
                "doc": "<p>Related to the childEls configuration which specifies named properties which correspond to component sub-elements.</p>",
                "default": "null"
            },
            {
                "name": "maxHeight",
                "type": "number",
                "doc": "<p>The maximum value in pixels which this Component will set its height to.</p>",
                "default": null
            },
            {
                "name": "maxWidth",
                "type": "number",
                "doc": "<p>The maximum value in pixels which this Component will set its width to.</p>",
                "default": null
            },
            {
                "name": "minHeight",
                "type": "number",
                "doc": "<p>The minimum value in pixels which this Component will set its height to.</p>",
                "default": null
            },
            {
                "name": "minWidth",
                "type": "number",
                "doc": "<p>The minimum value in pixels which this Component will set its width to.</p>",
                "default": null
            },
            {
                "name": "modelValidation",
                "type": "boolean",
                "doc": "<p>This config enables binding to your <code>Ext.data.Model.validators</code>. This\nis only processed by form fields (e.g., <code>Ext.form.field.Text</code>) at present, but\nthis setting is inherited and so can be set on a parent container.</p>",
                "default": null
            },
            {
                "name": "overCls",
                "type": "string",
                "doc": "<p>An optional extra CSS class that will be added to this component's Element when the mouse moves over the Element,\nand removed when the mouse moves out. This can be useful for adding customized 'active' or 'hover' styles to the\ncomponent or any of its children using standard CSS rules.</p>",
                "default": "''"
            },
            {
                "name": "overflowX",
                "type": "string",
                "doc": "<p>Possible values are:</p>",
                "default": null
            },
            {
                "name": "overflowY",
                "type": "string",
                "doc": "<p>Possible values are:</p>",
                "default": null
            },
            {
                "name": "padding",
                "type": "number/string",
                "doc": "<p>Specifies the padding for this component. The padding can be a single numeric value to apply to all sides or it\ncan be a CSS style specification for each style, for example: '10 5 3 10' (top, right, bottom, left).</p>",
                "default": null
            },
            {
                "name": "plugins",
                "type": "ext.plugin.abstract[]/ext.plugin.abstract/object[]/object/ext.enums.plugin[]/ext.enums.plugin",
                "doc": "<p>An array of plugins to be added to this component. Can also be just a single plugin instead of array.</p>",
                "default": null
            },
            {
                "name": "region",
                "type": "\"north\"/\"south\"/\"east\"/\"west\"/\"center\"",
                "doc": "<p>Defines the region inside border layout.</p>",
                "default": "undefined"
            },
            {
                "name": "renderData",
                "type": "object",
                "doc": "<p>The data used by renderTpl in addition to the following property values of the component:</p>",
                "default": null
            },
            {
                "name": "renderSelectors",
                "type": "object",
                "doc": "<p>An object containing properties specifying CSS selectors which identify child elements\ncreated by the render process.</p>",
                "default": null
            },
            {
                "name": "renderTo",
                "type": "string/htmlelement/ext.dom.element",
                "doc": "<p>Specify the <code>id</code> of the element, a DOM element or an existing Element that this component will be rendered into.</p>",
                "default": null
            },
            {
                "name": "renderTpl",
                "type": "ext.xtemplate/string/string[]",
                "doc": "<p>An XTemplate used to create the internal structure inside this Component's encapsulating\nElement.</p>",
                "default": "['<tpl if=\"renderScroller\">', '<div class=\"{scrollerCls}\" style=\"{%this.renderPadding(out, values)%}\">', '</tpl>', '{%this.renderContent(out,values)%}', '<tpl if=\"renderScroller\"></div></tpl>']"
            },
            {
                "name": "resizable",
                "type": "boolean/object",
                "doc": "<p>Specify as <code>true</code> to apply a Resizer to this Component after rendering.</p>",
                "default": null
            },
            {
                "name": "resizeHandles",
                "type": "string",
                "doc": "<p>A valid Ext.resizer.Resizer handles config string. Only applies when resizable = true.</p>",
                "default": "'all'"
            },
            {
                "name": "rtl",
                "type": "boolean",
                "doc": "<p>True to layout this component and its descendants in \"rtl\" (right-to-left) mode.\nCan be explicitly set to false to override a true value inherited from an ancestor.</p>",
                "default": null
            },
            {
                "name": "scrollable",
                "type": "boolean/string/object",
                "doc": "<p>Configuration options to make this Component scrollable. Acceptable values are:</p>",
                "default": null
            },
            {
                "name": "shrinkWrap",
                "type": "boolean/number",
                "doc": "<p>If this property is a number, it is interpreted as follows:</p>",
                "default": "2"
            },
            {
                "name": "style",
                "type": "string/object",
                "doc": "<p>A custom style specification to be applied to this component's Element. Should be a valid argument to\nExt.dom.Element.applyStyles.</p>",
                "default": null
            },
            {
                "name": "toFrontOnShow",
                "type": "boolean",
                "doc": "<p>True to automatically call toFront when the show method is called on an already visible,\nfloating component.</p>",
                "default": "true"
            },
            {
                "name": "tpl",
                "type": "ext.xtemplate/ext.template/string/string[]",
                "doc": "<p>An Ext.Template, Ext.XTemplate or an array of strings to form an Ext.XTemplate. Used in\nconjunction with the <code>data</code> and <code>tplWriteMode</code> configurations.</p>",
                "default": null
            },
            {
                "name": "tplWriteMode",
                "type": "string",
                "doc": "<p>The Ext.(X)Template method to use when updating the content area of the Component.\nSee <code>Ext.XTemplate.overwrite</code> for information on default mode.</p>",
                "default": "'overwrite'"
            },
            {
                "name": "ui",
                "type": "string",
                "doc": "<p>A UI style for a component.</p>",
                "default": "'default'"
            },
            {
                "name": "uiCls",
                "type": "string[]",
                "doc": "<p>An array of of <code>classNames</code> which are currently applied to this component.</p>",
                "default": "[]"
            },
            {
                "name": "weight",
                "type": "number",
                "doc": "<p>A value to control how Components are laid out in a Border layout or as docked items.</p>",
                "default": null
            },
            {
                "name": "width",
                "type": "number|string",
                "doc": "<p>The width of this component. A numeric value will be interpreted as the number of\npixels; a string value will be treated as a CSS value with units.</p>",
                "default": null
            },
            {
                "name": "xtype",
                "type": "ext.enums.widget",
                "doc": "<p>This property provides a shorter alternative to creating objects than using a full\nclass name. Using <code>xtype</code> is the most common way to define component instances,\nespecially in a container. For example, the items in a form containing text fields\ncould be created explicitly like so:</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "activate",
                "params": "this(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires after a Component has been visually activated.</p>"
            },
            {
                "name": "added",
                "params": "this(Ext.Component) container(Ext.container.Container) pos(Number) eOpts(Object)",
                "doc": "<p>Fires after a Component had been added to a Container.</p>"
            },
            {
                "name": "afterrender",
                "params": "this(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires after the component rendering is finished.</p>"
            },
            {
                "name": "beforeactivate",
                "params": "this(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires before a Component has been visually activated. Returning <code>false</code> from an event listener can prevent\nthe activate from occurring.</p>"
            },
            {
                "name": "beforedeactivate",
                "params": "this(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires before a Component has been visually deactivated. Returning <code>false</code> from an event listener can\nprevent the deactivate from occurring.</p>"
            },
            {
                "name": "beforedestroy",
                "params": "this(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires before the component is destroyed. Return <code>false</code> from an event handler to stop the\ndestroy.</p>"
            },
            {
                "name": "beforehide",
                "params": "this(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires before the component is hidden when calling the hide method. Return <code>false</code> from an event\nhandler to stop the hide.</p>"
            },
            {
                "name": "beforerender",
                "params": "this(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires before the component is rendered. Return <code>false</code> from an event handler to stop the\nrender.</p>"
            },
            {
                "name": "beforeshow",
                "params": "this(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires before the component is shown when calling the show method. Return <code>false</code> from an event\nhandler to stop the show.</p>"
            },
            {
                "name": "boxready",
                "params": "this(Ext.Component) width(Number) height(Number) eOpts(Object)",
                "doc": "<p>Fires <em>one time</em> - after the component has been laid out for the first time at its initial size.</p>"
            },
            {
                "name": "deactivate",
                "params": "this(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires after a Component has been visually deactivated.</p>"
            },
            {
                "name": "destroy",
                "params": "this(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires after the component is destroyed.</p>"
            },
            {
                "name": "disable",
                "params": "this(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires after the component is disabled.</p>"
            },
            {
                "name": "enable",
                "params": "this(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires after the component is enabled.</p>"
            },
            {
                "name": "hide",
                "params": "this(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires after the component is hidden. Fires after the component is hidden when calling the hide\nmethod.</p>"
            },
            {
                "name": "move",
                "params": "this(Ext.Component) x(Number) y(Number) eOpts(Object)",
                "doc": "<p>Fires after the component is moved.</p>"
            },
            {
                "name": "removed",
                "params": "this(Ext.Component) ownerCt(Ext.container.Container) eOpts(Object)",
                "doc": "<p>Fires when a component is removed from an Ext.container.Container</p>"
            },
            {
                "name": "render",
                "params": "this(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires after the component markup is rendered.</p>"
            },
            {
                "name": "resize",
                "params": "this(Ext.Component) width(Number) height(Number) oldWidth(Number) oldHeight(Number) eOpts(Object)",
                "doc": "<p>Fires after the component is resized. Note that this does <em>not</em> fire when the component is first laid out at its initial\nsize. To hook that point in the life cycle, use the boxready event.</p>"
            },
            {
                "name": "show",
                "params": "this(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires after the component is shown when calling the show method.</p>"
            }
        ]
    },
    "Ext.ComponentLoader": {
        "type": "Ext.ComponentLoader",
        "doc": "<p>This class is used to load content via Ajax into a Ext.Component. In general\nthis class will not be instanced directly, rather a loader configuration will be passed to the\nconstructor of the Ext.Component.</p>",
        "configs": [
            {
                "name": "loadMask",
                "type": "boolean/object",
                "doc": "<p>True or a Ext.LoadMask configuration to enable masking during loading.</p>",
                "default": "false"
            },
            {
                "name": "loadOnRender",
                "type": "boolean/object",
                "doc": "<p><code>true</code> to have the loader make a request when the target is rendered. If the target is\nalready rendered, a load will take place immediately.\nThis argument can also be a set of options that will be passed to load when it is called.</p>",
                "default": "false"
            },
            {
                "name": "renderer",
                "type": "string/function",
                "doc": "<p>The type of content that is to be loaded into, which can be one of 3 types:</p>",
                "default": "'html'"
            },
            {
                "name": "scripts",
                "type": "boolean",
                "doc": "<p>True to parse any inline script tags in the response. This only used when using the html\nrenderer.</p>",
                "default": null
            },
            {
                "name": "target",
                "type": "ext.component/string",
                "doc": "<p>The target Ext.Component for the loader.\nIf a string is passed it will be looked up via the id.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.ComponentManager": {
        "type": "Ext.ComponentManager",
        "doc": "<p>Provides a registry of all Components (instances of Ext.Component or any subclass\nthereof) on a page so that they can be easily accessed by component\nid (see get, or the convenience method\nExt.getCmp).</p>",
        "configs": [],
        "events": []
    },
    "Ext.ComponentQuery": {
        "type": "Ext.ComponentQuery",
        "doc": "<p>Provides searching of Components within Ext.ComponentManager (globally) or a specific\nExt.container.Container on the document with a similar syntax to a CSS selector.\nReturns Array of matching Components, or empty Array.</p>",
        "configs": [],
        "events": []
    },
    "Ext.Config": {
        "type": "Ext.Config",
        "doc": "<p>This class manages a config property. Instances of this type are created and cached as\nclasses declare their config properties. One instance of this class is created per\nconfig property name.</p>",
        "configs": [
            {
                "name": "cached",
                "type": "boolean",
                "doc": "<p>When set as <code>true</code> the config property will be stored on the class prototype once\nthe first instance has had a chance to process the default value.</p>",
                "default": "false"
            },
            {
                "name": "lazy",
                "type": "boolean",
                "doc": "<p>When set as <code>true</code> the config property will not be immediately initialized during\nthe <code>initConfig</code> call.</p>",
                "default": "false"
            },
            {
                "name": "merge",
                "type": "function",
                "doc": "<p>This function if supplied will be called as classes or instances provide values\nthat need to be combined with inherited values. The function should return the\nvalue that will be the config value. Further calls may receive such returned\nvalues as <code>oldValue</code>.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.Configurator": {
        "type": "Ext.Configurator",
        "doc": "<p>This class manages the config properties for a class.</p>",
        "configs": [],
        "events": []
    },
    "Ext.Date": {
        "type": "Ext.Date",
        "doc": "<p>This class defines some basic methods for handling dates.</p>",
        "configs": [],
        "events": []
    },
    "Ext.Editor": {
        "type": "Ext.Editor",
        "doc": "<p>The Editor class is used to provide inline editing for elements on the page. The editor\nis backed by a Ext.form.field.Field that will be displayed to edit the underlying content.\nThe editor is a floating Component, when the editor is shown it is automatically aligned to\ndisplay over the top of the bound element it is editing. The Editor contains several options\nfor how to handle key presses:</p>",
        "configs": [
            {
                "name": "alignment",
                "type": "string",
                "doc": "<p>The position to align to (see Ext.util.Positionable.alignTo for more details).</p>",
                "default": "'c-c?'"
            },
            {
                "name": "allowBlur",
                "type": "boolean",
                "doc": "<p>True to complete the editing process if in edit mode when focus exits from this Editor's hierarchy.</p>",
                "default": "true"
            },
            {
                "name": "autoSize",
                "type": "boolean/object",
                "doc": "<p>True for the editor to automatically adopt the size of the underlying field. Otherwise, an object\ncan be passed to indicate where to get each dimension. The available properties are 'boundEl' and\n'field'. If a dimension is not specified, it will use the underlying height/width specified on\nthe editor object.\nExamples:</p>",
                "default": null
            },
            {
                "name": "cancelOnEsc",
                "type": "boolean",
                "doc": "<p>True to cancel the edit when the escape key is pressed.</p>",
                "default": "true"
            },
            {
                "name": "completeOnEnter",
                "type": "boolean",
                "doc": "<p>True to complete the edit when the enter key is pressed.</p>",
                "default": "true"
            },
            {
                "name": "constrain",
                "type": "boolean",
                "doc": "<p>True to constrain the editor to the viewport</p>",
                "default": "false"
            },
            {
                "name": "field",
                "type": "ext.form.field.field",
                "doc": "<p>The Field object (or descendant) or config object for field</p>",
                "default": null
            },
            {
                "name": "focusOnToFront",
                "type": "boolean",
                "doc": "<p>Do not participate in the ZIndexManager's focus switching operations.\nWhen an editor is hidden, the ZIndexManager will not automatically activate\nthe last visible floater on the stack.</p>",
                "default": "false"
            },
            {
                "name": "hideEl",
                "type": "boolean",
                "doc": "<p>False to keep the bound element visible while the editor is displayed</p>",
                "default": "true"
            },
            {
                "name": "ignoreNoChange",
                "type": "boolean",
                "doc": "<p>True to skip the edit completion process (no save, no events fired) if the user completes an edit and\nthe value has not changed.  Applies only to string values - edits for other data types\nwill never be ignored.</p>",
                "default": "false"
            },
            {
                "name": "layout",
                "type": "ext.enums.layout/object",
                "doc": "<p><strong>Important</strong>: In order for child items to be correctly sized and\npositioned, typically a layout manager <strong>must</strong> be specified through\nthe <code>layout</code> configuration option.</p>",
                "default": "'editor'"
            },
            {
                "name": "offsets",
                "type": "number[]",
                "doc": "<p>The offsets to use when aligning (see Ext.util.Positionable.alignTo for more details.</p>",
                "default": "[0, 0]"
            },
            {
                "name": "parentEl",
                "type": "string/htmlelement/ext.dom.element",
                "doc": "<p>An element to render to.</p>",
                "default": "document.body"
            },
            {
                "name": "revertInvalid",
                "type": "boolean",
                "doc": "<p>True to automatically revert the field value and cancel the edit when the user completes an edit and the field\nvalidation fails</p>",
                "default": "true"
            },
            {
                "name": "shadow",
                "type": "boolean/string",
                "doc": "<p>\"sides\" for sides/bottom only, \"frame\" for 4-way shadow, and \"drop\" for bottom-right shadow.</p>",
                "default": "'frame'"
            },
            {
                "name": "swallowKeys",
                "type": "boolean",
                "doc": "<p>Handle the keydown/keypress events so they don't propagate</p>",
                "default": "true"
            },
            {
                "name": "updateEl",
                "type": "boolean",
                "doc": "<p>True to update the innerHTML of the bound element when the update completes</p>",
                "default": "false"
            },
            {
                "name": "value",
                "type": "object",
                "doc": "<p>The data value of the underlying field</p>",
                "default": "''"
            }
        ],
        "events": [
            {
                "name": "beforecomplete",
                "params": "this(Ext.Editor) value(Object) startValue(Object) eOpts(Object)",
                "doc": "<p>Fires after a change has been made to the field, but before the change is reflected in the underlying\nfield.  Saving the change to the field can be canceled by returning false from the handler of this event.\nNote that if the value has not changed and ignoreNoChange = true, the editing will still end but this\nevent will not fire since no edit actually occurred.</p>"
            },
            {
                "name": "beforestartedit",
                "params": "this(Ext.Editor) boundEl(Ext.dom.Element) value(Object) eOpts(Object)",
                "doc": "<p>Fires when editing is initiated, but before the value changes.  Editing can be canceled by returning\nfalse from the handler of this event.</p>"
            },
            {
                "name": "canceledit",
                "params": "this(Ext.Editor) value(Object) startValue(Object) eOpts(Object)",
                "doc": "<p>Fires after editing has been canceled and the editor's value has been reset.</p>"
            },
            {
                "name": "complete",
                "params": "this(Ext.Editor) value(Object) startValue(Object) eOpts(Object)",
                "doc": "<p>Fires after editing is complete and any changed value has been written to the underlying field.</p>"
            },
            {
                "name": "specialkey",
                "params": "this(Ext.Editor) field(Ext.form.field.Field) event(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed.  You can check\nExt.event.Event.getKey to determine which key was pressed.</p>"
            },
            {
                "name": "startedit",
                "params": "this(Ext.Editor) boundEl(Ext.dom.Element) value(Object) eOpts(Object)",
                "doc": "<p>Fires when this editor is displayed</p>"
            }
        ]
    },
    "Ext.ElementLoader": {
        "type": "Ext.ElementLoader",
        "doc": "<p>A class used to load remote content to an Element. Sample usage:</p>",
        "configs": [
            {
                "name": "ajaxOptions",
                "type": "object",
                "doc": "<p>Any additional options to be passed to the request, for example timeout or headers.</p>",
                "default": null
            },
            {
                "name": "autoLoad",
                "type": "boolean/object",
                "doc": "<p><code>true</code> to have the loader make a request as soon as it is created.\nThis argument can also be a set of options that will be passed to load when it is called.</p>",
                "default": "false"
            },
            {
                "name": "baseParams",
                "type": "object",
                "doc": "<p>Params that will be attached to every request. These parameters\nwill not be overridden by any params in the load options.</p>",
                "default": null
            },
            {
                "name": "callback",
                "type": "function",
                "doc": "<p>A function to be called when a load request finishes.\nWill be called with the following config parameters:</p>",
                "default": null
            },
            {
                "name": "failure",
                "type": "function",
                "doc": "<p>A function to be called when a load request fails.\nWill be called with the following config parameters:</p>",
                "default": null
            },
            {
                "name": "loadMask",
                "type": "boolean/string",
                "doc": "<p>True or a string to show when the element is loading.</p>",
                "default": "false"
            },
            {
                "name": "params",
                "type": "object",
                "doc": "<p>Any params to be attached to the Ajax request. These parameters will\nbe overridden by any params in the load options.</p>",
                "default": null
            },
            {
                "name": "renderer",
                "type": "function",
                "doc": "<p>A custom function to render the content to the element. The function should\nreturn false if the renderer could not be applied. The passed parameters are:</p>",
                "default": null
            },
            {
                "name": "rendererScope",
                "type": "object",
                "doc": "<p>The scope to execute the renderer function in.</p>",
                "default": null
            },
            {
                "name": "scope",
                "type": "object",
                "doc": "<p>The scope to execute the success and failure functions in.</p>",
                "default": null
            },
            {
                "name": "scripts",
                "type": "boolean",
                "doc": "<p>True to parse any inline script tags in the response.</p>",
                "default": "false"
            },
            {
                "name": "success",
                "type": "function",
                "doc": "<p>A function to be called when a load request is successful.\nWill be called with the following config parameters:</p>",
                "default": null
            },
            {
                "name": "target",
                "type": "htmlelement/ext.dom.element/string",
                "doc": "<p>The target element for the loader. It can be the DOM element, the id or an Ext.dom.Element.</p>",
                "default": null
            },
            {
                "name": "url",
                "type": "string",
                "doc": "<p>The url to retrieve the content from.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "beforeload",
                "params": "this(Ext.ElementLoader) options(Object) eOpts(Object)",
                "doc": "<p>Fires before a load request is made to the server.\nReturning false from an event listener can prevent the load\nfrom occurring.</p>"
            },
            {
                "name": "exception",
                "params": "this(Ext.ElementLoader) response(Object) options(Object) eOpts(Object)",
                "doc": "<p>Fires after an unsuccessful load.</p>"
            },
            {
                "name": "load",
                "params": "this(Ext.ElementLoader) response(Object) options(Object) eOpts(Object)",
                "doc": "<p>Fires after a successful load.</p>"
            }
        ]
    },
    "Ext.Error": {
        "type": "Ext.Error",
        "doc": "<p>A helper class for the native JavaScript Error object that adds a few useful capabilities for handling\nerrors in an application. When you use Ext.Error to raise an error from within any class that\nuses the Class System, the Error class can automatically add the source class and method from which\nthe error was raised. It also includes logic to automatically log the error to the console, if available,\nwith additional metadata about the error. In all cases, the error will always be thrown at the end so that\nexecution will halt.</p>",
        "configs": [],
        "events": []
    },
    "Ext.EventManager": {
        "type": "Ext.EventManager",
        "doc": "<p>Registers event handlers on DOM elements.</p>",
        "configs": [],
        "events": []
    },
    "Ext.Evented": {
        "type": "Ext.Evented",
        "configs": [],
        "events": []
    },
    "Ext.Factory": {
        "type": "Ext.Factory",
        "doc": "<p>Manages factories for families of classes (classes with a common <code>alias</code> prefix). The\nfactory for a class family is a function stored as a <code>static</code> on <code>Ext.Factory</code>. These\nare created either by directly calling <code>Ext.Factory.define</code> or by using the\n<code>Ext.mixin.Factoryable</code> interface.</p>",
        "configs": [
            {
                "name": "aliasPrefix",
                "type": "string",
                "doc": "<p>The prefix to apply to <code>type</code> values to form a complete alias. This defaults to the\nproper value in most all cases and should not need to be specified.</p>",
                "default": null
            },
            {
                "name": "defaultProperty",
                "type": "string",
                "doc": "<p>The config property to set when the factory is given a config that is a string.</p>",
                "default": "\"type\""
            },
            {
                "name": "defaultType",
                "type": "string",
                "doc": "<p>An optional type to use if none is given to the factory at invocation. This is a\nsuffix added to the <code>aliasPrefix</code>. For example, if <code>aliasPrefix=\"layout.\"</code> and\n<code>defaultType=\"hbox\"</code> the default alias is <code>\"layout.hbox\"</code>. This is an alternative\nto <code>xclass</code> so only one should be provided.</p>",
                "default": "null"
            },
            {
                "name": "instanceProp",
                "type": "string",
                "doc": "<p>The property that identifies an object as instance vs a config.</p>",
                "default": "\"isInstance\""
            },
            {
                "name": "xclass",
                "type": "string",
                "doc": "<p>The full classname of the type of instance to create when none is provided to the\nfactory. This is an alternative to <code>defaultType</code> so only one should be specified.</p>",
                "default": "null"
            }
        ],
        "events": []
    },
    "Ext.FocusManager": {
        "type": "Ext.FocusManager",
        "doc": "<p>The FocusManager is responsible for globally:</p>",
        "configs": [],
        "events": [
            {
                "name": "beforecomponentfocus",
                "params": "fm(Ext.FocusManager) cmp(Ext.Component) previousCmp(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires before a component becomes focused. Return <code>false</code> to prevent\nthe component from gaining focus.</p>"
            },
            {
                "name": "componentfocus",
                "params": "fm(Ext.FocusManager) cmp(Ext.Component) previousCmp(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires after a component becomes focused.</p>"
            },
            {
                "name": "disable",
                "params": "fm(Ext.FocusManager) eOpts(Object)",
                "doc": "<p>Fires when the FocusManager is disabled</p>"
            },
            {
                "name": "enable",
                "params": "fm(Ext.FocusManager) eOpts(Object)",
                "doc": "<p>Fires when the FocusManager is enabled</p>"
            }
        ]
    },
    "Ext.Function": {
        "type": "Ext.Function",
        "doc": "<p>A collection of useful static methods to deal with function callbacks.</p>",
        "configs": [],
        "events": []
    },
    "Ext.GlobalEvents": {
        "type": "Ext.GlobalEvents",
        "doc": "<p>An <code>Observable</code> through which Ext fires global events.</p>",
        "configs": [],
        "events": [
            {
                "name": "added",
                "params": "component(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires when a Component is added to a Container.</p>"
            },
            {
                "name": "beforebindnotify",
                "params": "scheduler(Ext.util.Scheduler) eOpts(Object)",
                "doc": "<p>Fires before a scheduled set of bindings are fired. This allows interested parties\nto react and do any required work.</p>"
            },
            {
                "name": "beforeresponsiveupdate",
                "params": "context(Object) eOpts(Object)",
                "doc": "<p>Fires before Ext.mixin.Responsive perform any updates in response to\ndynamic changes. This is prior to refreshing <code>responsiveFormulas</code>.</p>"
            },
            {
                "name": "beginresponsiveupdate",
                "params": "context(Object) eOpts(Object)",
                "doc": "<p>Fires when Ext.mixin.Responsive is about to perform updates in response to\ndynamic changes. At this point all <code>responsiveFormulas</code> have been refreshed.</p>"
            },
            {
                "name": "collapse",
                "params": "component(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires when a Component is collapsed (e.g., a panel).</p>"
            },
            {
                "name": "expand",
                "params": "component(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires when a Component is expanded (e.g., a panel).</p>"
            },
            {
                "name": "hide",
                "params": "component(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires when a Component is hidden.</p>"
            },
            {
                "name": "idle",
                "params": "eOpts(Object)",
                "doc": "<p>Fires when an event handler finishes its run, just before returning to\nbrowser control.</p>"
            },
            {
                "name": "removed",
                "params": "component(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires when a Component is removed from a Container.</p>"
            },
            {
                "name": "resize",
                "params": "width(Number) height(Number) eOpts(Object)",
                "doc": "<p>Fires when the browser window is resized.  To avoid running resize handlers\ntoo often resulting in sluggish window resizing, resize events use a buffer\nof 100 milliseconds.</p>"
            },
            {
                "name": "responsiveupdate",
                "params": "context(Object) eOpts(Object)",
                "doc": "<p>Fires after Ext.mixin.Responsive has performed updates in response to\ndynamic changes.</p>"
            },
            {
                "name": "show",
                "params": "component(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires when a Component is shown.</p>"
            }
        ]
    },
    "Ext.Img": {
        "type": "Ext.Img",
        "doc": "<p>Simple helper class for easily creating image components. This renders an image tag to\nthe DOM with the configured src.</p>",
        "configs": [
            {
                "name": "alt",
                "type": "string",
                "doc": "<p>The descriptive text for non-visual UI description.</p>",
                "default": "''"
            },
            {
                "name": "autoEl",
                "type": "string/object",
                "doc": "<p>A tag name or DomHelper spec used to create the Element which will\nencapsulate this Component.</p>",
                "default": "'img'"
            },
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to elements within this\ncomponent like Panel's body will get a class <code>x-panel-body</code>. This means that if you create a subclass of Panel, and\nyou want it to get all the Panels styling for the element and the body, you leave the <code>baseCls</code> <code>x-panel</code> and use\n<code>componentCls</code> to add specific styling for this component.</p>",
                "default": "Ext.baseCSSPrefix + 'img'"
            },
            {
                "name": "glyph",
                "type": "number/string",
                "doc": "<p>A numeric unicode character code to serve as the image.  If this option is used\nThe image will be rendered using a div with innerHTML set to the html entity\nfor the given character code.  The default font-family for glyphs can be set\nglobally using Ext.setGlyphFontFamily(). Alternatively,\nthis config option accepts a string with the charCode and font-family separated by\nthe <code>@</code> symbol. For example '65@My Font Family'.</p>",
                "default": null
            },
            {
                "name": "imgCls",
                "type": "string",
                "doc": "<p>Optional CSS classes to add to the img element.</p>",
                "default": "''"
            },
            {
                "name": "src",
                "type": "string",
                "doc": "<p>The image src.</p>",
                "default": "''"
            },
            {
                "name": "title",
                "type": "string",
                "doc": "<p>Specifies addtional information about the image.</p>",
                "default": "''"
            }
        ],
        "events": []
    },
    "Ext.Inventory": {
        "type": "Ext.Inventory",
        "configs": [],
        "events": []
    },
    "Ext.JSON": {
        "type": "Ext.JSON",
        "doc": "<p>Modified version of Douglas Crockford's JSON.js that doesn't\nmess with the Object prototype.</p>",
        "configs": [],
        "events": []
    },
    "Ext.LoadMask": {
        "type": "Ext.LoadMask",
        "doc": "<p>A modal, floating Component which may be shown above a specified Component while loading data.\nWhen shown, the configured owning Component will be covered with a modality mask, and the LoadMask's msg will be\ndisplayed centered, accompanied by a spinner image.</p>",
        "configs": [
            {
                "name": "autoEl",
                "type": "string/object",
                "doc": "<p>A tag name or DomHelper spec used to create the Element which will\nencapsulate this Component.</p>",
                "default": "{tag: 'div', role: 'status'}"
            },
            {
                "name": "childEls",
                "type": "object/string[]/object[]",
                "doc": "<p>The canonical form of <code>childEls</code> is an object keyed by child's property name\nwith values that are objects with the following properties.</p>",
                "default": "['msgWrapEl', 'msgEl', 'msgTextEl']"
            },
            {
                "name": "cls",
                "type": "string/string[]",
                "doc": "<p>An optional extra CSS class that will be added to this component's Element.\nThe value can be a string, a list of strings separated by spaces, or an array of strings. This can be useful\nfor adding customized styles to the component or any of its children using standard CSS rules.</p>",
                "default": "Ext.baseCSSPrefix + 'mask'"
            },
            {
                "name": "componentCls",
                "type": "string",
                "doc": "<p>CSS Class to be added to a components root level element to give distinction to it via styling.</p>",
                "default": "Ext.baseCSSPrefix + 'border-box'"
            },
            {
                "name": "msg",
                "type": "string",
                "doc": "<p>The text to display in a centered loading message box.</p>",
                "default": "\"Loading...\""
            },
            {
                "name": "renderTpl",
                "type": "ext.xtemplate/string/string[]",
                "doc": "<p>An XTemplate used to create the internal structure inside this Component's encapsulating\nElement.</p>",
                "default": "['<div id=\"{id}-msgWrapEl\" data-ref=\"msgWrapEl\" class=\"{[values.$comp.msgWrapCls]}\">', '<div id=\"{id}-msgEl\" data-ref=\"msgEl\" class=\"{[values.$comp.msgCls]} ', Ext.baseCSSPrefix, 'mask-msg-inner {childElCls}\">', '<div id=\"{id}-msgTextEl\" data-ref=\"msgTextEl\" class=\"', Ext.baseCSSPrefix, 'mask-msg-text', '{childElCls}\">{msg}</div>', '</div>', '</div>']"
            },
            {
                "name": "shim",
                "type": "boolean",
                "doc": "<p><code>true</code> to enable an iframe shim for this LoadMask to keep\nwindowed objects from showing through.</p>",
                "default": null
            },
            {
                "name": "store",
                "type": "ext.data.store",
                "doc": "<p>Optional Store to which the mask is bound. The mask is displayed when a load request is issued, and\nhidden on either load success, or load fail.</p>",
                "default": null
            },
            {
                "name": "tabIndex",
                "type": "number",
                "doc": "<p>DOM tabIndex attribute for this Focusable</p>",
                "default": "0"
            },
            {
                "name": "target",
                "type": "ext.component",
                "doc": "<p>The Component you wish to mask. The the mask will be automatically sized\nupon Component resize, and the message box will be kept centered.</p>",
                "default": null
            },
            {
                "name": "useMsg",
                "type": "boolean",
                "doc": "<p>Whether or not to use a loading message class or simply mask the bound element.</p>",
                "default": "true"
            },
            {
                "name": "useTargetEl",
                "type": "boolean",
                "doc": "<p>True to mask the targetEl of the bound Component. By default,\nthe el will be masked.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.Loader": {
        "type": "Ext.Loader",
        "doc": "<p>Ext.Loader is the heart of the new dynamic dependency loading capability in Ext JS 4+. It is most commonly used\nvia the Ext.require shorthand. Ext.Loader supports both asynchronous and synchronous loading\napproaches, and leverage their advantages for the best development flow. We'll discuss about the pros and cons of each approach:</p>",
        "configs": [
            {
                "name": "disableCaching",
                "type": "boolean",
                "doc": "<p>Appends current timestamp to script files to prevent caching.</p>",
                "default": "true"
            },
            {
                "name": "disableCachingParam",
                "type": "string",
                "doc": "<p>The get parameter name for the cache buster's timestamp.</p>",
                "default": "\"_dc\""
            },
            {
                "name": "enabled",
                "type": "boolean",
                "doc": "<p>Whether or not to enable the dynamic dependency loading feature.</p>",
                "default": "true"
            },
            {
                "name": "paths",
                "type": "object",
                "doc": "<p>The mapping from namespaces to file paths</p>",
                "default": null
            },
            {
                "name": "preserveScripts",
                "type": "boolean",
                "doc": "<p><code>false</code> to remove asynchronously loaded scripts, <code>true</code> to retain script\nelement for browser debugger compatibility and improved load performance.</p>",
                "default": "true"
            },
            {
                "name": "scriptChainDelay",
                "type": "boolean",
                "doc": "<p>millisecond delay between asynchronous script injection (prevents stack\noverflow on some user agents) 'false' disables delay but potentially\nincreases stack load.</p>",
                "default": "false"
            },
            {
                "name": "scriptCharset",
                "type": "string",
                "doc": "<p>Optional charset to specify encoding of dynamic script content.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.MessageBox": {
        "type": "Ext.MessageBox",
        "doc": "<p>Utility class for generating different styles of message boxes.  The singleton instance, Ext.MessageBox\nalias <code>Ext.Msg</code> can also be used.</p>",
        "configs": [],
        "events": []
    },
    "Ext.Mixin": {
        "type": "Ext.Mixin",
        "doc": "<p>This class is a base class for mixins. These are classes that extend this class and are\ndesigned to be used as a <code>mixin</code> by user code.</p>",
        "configs": [],
        "events": []
    },
    "Ext.Number": {
        "type": "Ext.Number",
        "doc": "<p>A collection of useful static methods to deal with numbers</p>",
        "configs": [],
        "events": []
    },
    "Ext.Object": {
        "type": "Ext.Object",
        "doc": "<p>A collection of useful static methods to deal with objects.</p>",
        "configs": [],
        "events": []
    },
    "Ext.ProgressBar": {
        "type": "Ext.ProgressBar",
        "doc": "<p>An updateable progress bar component. The progress bar supports two different modes: manual and automatic.</p>",
        "configs": [
            {
                "name": "animate",
                "type": "boolean/object",
                "doc": "<p>True to animate the progress bar during transitions, or an animation configuration\n(see the animate method for details).</p>",
                "default": "false"
            },
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to the progress bar's wrapper element.</p>",
                "default": "'x-progress'"
            },
            {
                "name": "childEls",
                "type": "object/string[]/object[]",
                "doc": "<p>The canonical form of <code>childEls</code> is an object keyed by child's property name\nwith values that are objects with the following properties.</p>",
                "default": "['bar']"
            },
            {
                "name": "componentLayout",
                "type": "string/object",
                "doc": "<p>The sizing and positioning of a Component's internal Elements is the responsibility of the Component's layout\nmanager which sizes a Component's internal structure in response to the Component being sized.</p>",
                "default": "'progressbar'"
            },
            {
                "name": "id",
                "type": "string",
                "doc": "<p>The progress bar element's id (defaults to an auto-generated id)</p>",
                "default": null
            },
            {
                "name": "renderTpl",
                "type": "ext.xtemplate/string/string[]",
                "doc": "<p>An XTemplate used to create the internal structure inside this Component's encapsulating\nElement.</p>",
                "default": "['<tpl if=\"internalText\">', '<div class=\"{baseCls}-text {baseCls}-text-back\">{text}</div>', '</tpl>', '<div id=\"{id}-bar\" data-ref=\"bar\" class=\"{baseCls}-bar {baseCls}-bar-{ui}\" role=\"presentation\" style=\"width:{percentage}%\">', '<tpl if=\"internalText\">', '<div class=\"{baseCls}-text\">', '<div>{text}</div>', '</div>', '</tpl>', '</div>']"
            },
            {
                "name": "text",
                "type": "string",
                "doc": "<p>The text shown in the progress bar.</p>",
                "default": "''"
            },
            {
                "name": "textEl",
                "type": "string/htmlelement/ext.dom.element",
                "doc": "<p>The element to render the progress text to (defaults to the progress bar's internal text element)</p>",
                "default": null
            },
            {
                "name": "textTpl",
                "type": "string/ext.xtemplate",
                "doc": "<p>A template used to create this ProgressBar's background text given two values:</p>",
                "default": null
            },
            {
                "name": "value",
                "type": "number",
                "doc": "<p>A floating point value between 0 and 1 (e.g., .5)</p>",
                "default": "0"
            }
        ],
        "events": [
            {
                "name": "update",
                "params": "this(Ext.ProgressBar) value(Number) text(String) eOpts(Object)",
                "doc": "<p>Fires after each update interval</p>"
            }
        ]
    },
    "Ext.ProgressBarWidget": {
        "type": "Ext.ProgressBarWidget",
        "doc": "<p>An updateable progress bar widget.</p>",
        "configs": [
            {
                "name": "animate",
                "type": "boolean",
                "doc": "<p>Specify as <code>true</code> to have this progress bar animate to new extent when updated.</p>",
                "default": "false"
            },
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to the progress bar's wrapper element.</p>",
                "default": "'x-progress'"
            },
            {
                "name": "text",
                "type": "string",
                "doc": "<p>The background text</p>",
                "default": null
            },
            {
                "name": "textCls",
                "type": "string",
                "doc": "\n",
                "default": "Ext.baseCSSPrefix + 'progress-text'"
            },
            {
                "name": "textTpl",
                "type": "string/ext.xtemplate",
                "doc": "<p>A template used to create this ProgressBar's background text given two values:</p>",
                "default": null
            },
            {
                "name": "ui",
                "type": "string",
                "doc": "\n",
                "default": "'default'"
            },
            {
                "name": "value",
                "type": "number",
                "doc": "<p>A floating point value between 0 and 1 (e.g., .5)</p>",
                "default": "0"
            }
        ],
        "events": []
    },
    "Ext.String": {
        "type": "Ext.String",
        "doc": "<p>A collection of useful static methods to deal with strings.</p>",
        "configs": [],
        "events": []
    },
    "Ext.TaskQueue": {
        "type": "Ext.TaskQueue",
        "doc": "<p>Handle batch read / write of DOMs, currently used in SizeMonitor + PaintMonitor</p>",
        "configs": [],
        "events": []
    },
    "Ext.Template": {
        "type": "Ext.Template",
        "doc": "<p>Represents an HTML fragment template. Templates may be precompiled for greater performance.</p>",
        "configs": [
            {
                "name": "compiled",
                "type": "boolean",
                "doc": "<p>True to immediately compile the template. Defaults to false.</p>",
                "default": null
            },
            {
                "name": "disableFormats",
                "type": "boolean",
                "doc": "<p>True to disable format functions in the template. If the template doesn't contain\nformat functions, setting disableFormats to true will reduce apply time. Defaults to false.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.Version": {
        "type": "Ext.Version",
        "doc": "<p>A utility class that wraps around a version number string and provides convenient methods\nto perform comparisons. A version number is expressed in the following general format:</p>",
        "configs": [],
        "events": []
    },
    "Ext.Widget": {
        "type": "Ext.Widget",
        "doc": "<p>Ext.Widget is a light-weight Component that consists of nothing more than a template\nElement that can be cloned to quickly and efficiently replicate many instances.\nExt.Widget is typically not instantiated directly, because the default template is\njust a single element with no listeners. Instead Ext.Widget should be extended to\ncreate Widgets that have a useful markup structure and event listeners.</p>",
        "configs": [
            {
                "name": "height",
                "type": "number/string",
                "doc": "<p>The height of this Component; must be a valid CSS length value, e.g: <code>300</code>, <code>100px</code>, <code>30%</code>, etc.\nBy default, if this is not explicitly set, this Component's element will simply have its own natural size.\nIf set to <code>auto</code>, it will set the width to <code>null</code> meaning it will have its own natural size.</p>",
                "default": null
            },
            {
                "name": "width",
                "type": "number/string",
                "doc": "<p>The width of this Component; must be a valid CSS length value, e.g: <code>300</code>, <code>100px</code>, <code>30%</code>, etc.\nBy default, if this is not explicitly set, this Component's element will simply have its own natural size.\nIf set to <code>auto</code>, it will set the width to <code>null</code> meaning it will have its own natural size.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "heightchange",
                "params": "this(Ext.Widget) value(Number/String) oldValue(Number/String) eOpts(Object)",
                "doc": "<p>Fires when the height configuration is changed by setHeight.</p>"
            },
            {
                "name": "widthchange",
                "params": "this(Ext.Widget) value(Number/String) oldValue(Number/String) eOpts(Object)",
                "doc": "<p>Fires when the width configuration is changed by setWidth.</p>"
            }
        ]
    },
    "Ext.WindowManager": {
        "type": "Ext.WindowManager",
        "doc": "<p>The default global floating Component group that is available automatically.</p>",
        "configs": [],
        "events": []
    },
    "Ext.XTemplate": {
        "type": "Ext.XTemplate",
        "doc": "<p>A template class that supports advanced functionality like:</p>",
        "configs": [
            {
                "name": "definitions",
                "type": "string/array",
                "doc": "<p>Optional. A statement, or array of statements which set up <code>var</code>s which may then\nbe accessed within the scope of the generated function.</p>",
                "default": null
            },
            {
                "name": "strict",
                "type": "boolean",
                "doc": "<p>Expressions in templates that traverse \"dot paths\" and fail (due to <code>null</code> at some\nstage) have always been expanded as empty strings. This is convenient in most cases\nbut doing so can also mask errors in the template. Setting this to <code>true</code> changes\nthis default so that any expression errors will be thrown as exceptions.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.ZIndexManager": {
        "type": "Ext.ZIndexManager",
        "doc": "<p>A class that manages a group of Ext.Component.floating Components and provides z-order management,\nand Component activation behavior, including masking below the active (topmost) Component.</p>",
        "configs": [],
        "events": []
    },
    "Ext.app.Application": {
        "type": "Ext.app.Application",
        "doc": "<p>Represents an Ext JS application, which is typically a single page app using a\nViewport.</p>",
        "configs": [
            {
                "name": "appFolder",
                "type": "string",
                "doc": "<p>The path to the directory which contains all application's classes.\nThis path will be registered via Ext.Loader.setPath for the namespace specified\nin the name config.</p>",
                "default": "'app'"
            },
            {
                "name": "appProperty",
                "type": "string",
                "doc": "<p>The name of a property to be assigned to the main namespace to gain a reference to\nthis application. Can be set to an empty value to prevent the reference from\nbeing created</p>",
                "default": "'app'"
            },
            {
                "name": "controllers",
                "type": "string/string[]",
                "doc": "<p>Names of controllers that the app uses.</p>",
                "default": null
            },
            {
                "name": "currentProfile",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "defaultToken",
                "type": "string",
                "doc": "<p>The default token to be used at application launch\nif one is not present. Often this is set to something like <code>'home'</code>.</p>",
                "default": "null"
            },
            {
                "name": "extend",
                "type": "string",
                "doc": "<p>A class name to use with the <code>Ext.application</code> call. The class must also extend Ext.app.Application.</p>",
                "default": null
            },
            {
                "name": "glyphFontFamily",
                "type": "string",
                "doc": "<p>The glyphFontFamily to use for this application.  Used as the default font-family\nfor all components that support a <code>glyph</code> config.</p>",
                "default": null
            },
            {
                "name": "mainView",
                "type": "string/object",
                "doc": "\n",
                "default": "{$value: null, lazy: true}"
            },
            {
                "name": "name",
                "type": "string",
                "doc": "<p>The name of your application. This will also be the namespace for your views, controllers\nmodels and stores. Don't use spaces or special characters in the name. <strong>Application name\nis mandatory</strong>.</p>",
                "default": "''"
            },
            {
                "name": "namespaces",
                "type": "string/string[]",
                "doc": "<p>The list of namespace prefixes used in the application to resolve dependencies\nlike Views and Stores:</p>",
                "default": "[]"
            },
            {
                "name": "paths",
                "type": "object",
                "doc": "<p>Additional load paths to add to Ext.Loader.\nSee Ext.Loader.paths config for more details.</p>",
                "default": null
            },
            {
                "name": "profiles",
                "type": "string/string[]",
                "doc": "<p>Names of the profiles that the app uses.</p>",
                "default": "[]"
            },
            {
                "name": "scope",
                "type": "object",
                "doc": "<p>The scope to execute the launch function in. Defaults to the Application instance.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.app.BaseController": {
        "type": "Ext.app.BaseController",
        "doc": "<p>Base class for Controllers.</p>",
        "configs": [
            {
                "name": "before",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "control",
                "type": "object",
                "doc": "<p>Adds listeners to components selected via Ext.ComponentQuery. Accepts an\nobject containing component paths mapped to a hash of listener functions.</p>",
                "default": null
            },
            {
                "name": "id",
                "type": "string",
                "doc": "<p>The id of this controller. You can use this id when dispatching.</p>",
                "default": null
            },
            {
                "name": "listen",
                "type": "object",
                "doc": "<p>Adds listeners to different event sources (also called \"event domains\"). The\nprimary event domain is that of components, but there are also other event domains:\nGlobal domain that intercepts events fired from\nExt.GlobalEvents Observable instance, Controller\ndomain can be used to listen to events fired by other Controllers,\nStore domain gives access to Store events, and\nDirect domain can be used with Ext.Direct Providers\nto listen to their events.</p>",
                "default": null
            },
            {
                "name": "routes",
                "type": "object",
                "doc": "<p>An object of routes to handle hash changes. A route can be defined in a simple way:</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.app.Controller": {
        "type": "Ext.app.Controller",
        "doc": "<p>Controllers are the glue that binds an application together. All they really do is listen for events (usually from\nviews) and take some action. Here's how we might create a Controller to manage Users:</p>",
        "configs": [
            {
                "name": "active",
                "type": "boolean",
                "doc": "\n",
                "default": "true"
            },
            {
                "name": "application",
                "type": "ext.app.application",
                "doc": "<p>The Ext.app.Application for this controller accessible via the getApplication method.</p>",
                "default": null
            },
            {
                "name": "models",
                "type": "string/string[]",
                "doc": "<p>Array of models to require from AppName.model namespace. For example:</p>",
                "default": null
            },
            {
                "name": "moduleClassName",
                "type": "object",
                "doc": "<p>private</p>",
                "default": null
            },
            {
                "name": "refs",
                "type": "object[]",
                "doc": "<p>You can specify refs with either an Object or an Array:</p>",
                "default": null
            },
            {
                "name": "stores",
                "type": "string/string[]",
                "doc": "<p>Array of stores to require from AppName.store namespace and to generate getter methods for.\nFor example:</p>",
                "default": null
            },
            {
                "name": "views",
                "type": "string/string[]",
                "doc": "<p>Array of views to require from AppName.view namespace and to generate getter methods for.\nFor example:</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.app.EventBus": {
        "type": "Ext.app.EventBus",
        "doc": "<p>This class manages event dispatching for Controllers. The details of connecting classes\nto this dispatching mechanism is delegated to Ext.app.EventDomain instances.</p>",
        "configs": [],
        "events": []
    },
    "Ext.app.EventDomain": {
        "type": "Ext.app.EventDomain",
        "doc": "<p>This class is a base class for an event domain. In the context of MVC, an \"event domain\"\nis one or more base classes that fire events to which a Controller wants to listen. A\ncontroller listens to events by describing the selectors for events of interest to it.</p>",
        "configs": [
            {
                "name": "idProperty",
                "type": "string",
                "doc": "<p>Name of the identifier property for this event domain.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.app.Profile": {
        "type": "Ext.app.Profile",
        "doc": "<p>A Profile represents a range of devices that fall under a common category. For the vast majority of apps that use\ndevice profiles, the app defines a Phone profile and a Tablet profile. Doing this enables you to easily customize\nthe experience for the different sized screens offered by those device types.</p>",
        "configs": [
            {
                "name": "application",
                "type": "ext.app.application",
                "doc": "<p>The Application instance that this\nProfile is bound to. This is set automatically.</p>",
                "default": null
            },
            {
                "name": "controllers",
                "type": "array",
                "doc": "<p>Any additional Controllers to load for this\nprofile. Note that each item here will be prepended with the Profile namespace when loaded. Example usage:</p>",
                "default": "[]"
            },
            {
                "name": "mainView",
                "type": "string",
                "doc": "\n",
                "default": "{$value: null, lazy: true}"
            },
            {
                "name": "models",
                "type": "array",
                "doc": "<p>Any additional Models to load for this profile. Note\nthat each item here will be prepended with the Profile namespace when loaded. Example usage:</p>",
                "default": "[]"
            },
            {
                "name": "name",
                "type": "string",
                "doc": "<p>The name of this Profile. Defaults to the last section of the class name (e.g. a profile\ncalled MyApp.profile.Phone will default the name to 'Phone').</p>",
                "default": "'auto'"
            },
            {
                "name": "namespace",
                "type": "string",
                "doc": "<p>The namespace that this Profile's classes can be found in. Defaults to the lowercased\nProfile name, for example a Profile called MyApp.profile.Phone will by default have a 'phone'\nnamespace, which means that this Profile's additional models, stores, views and controllers will be loaded\nfrom the MyApp.model.phone.<em>, MyApp.store.phone.</em>, MyApp.view.phone.<em> and MyApp.controller.phone.</em> namespaces\nrespectively.</p>",
                "default": "'auto'"
            },
            {
                "name": "stores",
                "type": "array",
                "doc": "<p>Any additional Stores to load for this profile. Note\nthat each item here will be prepended with the Profile namespace when loaded. Example usage:</p>",
                "default": "[]"
            },
            {
                "name": "views",
                "type": "array",
                "doc": "<p>Any additional views to load for this profile. Note\nthat each item here will be prepended with the Profile namespace when loaded. Example usage:</p>",
                "default": "[]"
            }
        ],
        "events": []
    },
    "Ext.app.Util": {
        "type": "Ext.app.Util",
        "configs": [],
        "events": []
    },
    "Ext.app.ViewController": {
        "type": "Ext.app.ViewController",
        "doc": "<p>A view controller is a controller that can be attached to a specific view\ninstance so it can manage the view and it's child components. Each instance of the view\nwill have a new view controller, so the instances are isolated.</p>",
        "configs": [
            {
                "name": "closeViewAction",
                "type": "string",
                "doc": "\n",
                "default": "'destroy'"
            }
        ],
        "events": []
    },
    "Ext.app.ViewModel": {
        "type": "Ext.app.ViewModel",
        "doc": "<p>This class manages arbitrary data and its relationship to data models. Instances of\n<code>ViewModel</code> are associated with some <code>Component</code> and then used by their child items\nfor the purposes of Data Binding.</p>",
        "configs": [
            {
                "name": "data",
                "type": "object",
                "doc": "<p>This object holds the arbitrary data that populates the <code>ViewModel</code> and is\nthen available for binding.</p>",
                "default": "true"
            },
            {
                "name": "formulas",
                "type": "object",
                "doc": "<p>An object that defines named values whose value is managed by function calls.\nThe names of the properties of this object are assigned as values in the\nViewModel.</p>",
                "default": null
            },
            {
                "name": "links",
                "type": "object",
                "doc": "<p>Links provide a way to assign a simple name to a more complex bind. The primary\nuse for this is to assign names to records in the data model.</p>",
                "default": null
            },
            {
                "name": "parent",
                "type": "ext.app.viewmodel",
                "doc": "<p>The parent <code>ViewModel</code> of this <code>ViewModel</code>. Once set, this cannot be changed.</p>",
                "default": null
            },
            {
                "name": "root",
                "type": "ext.app.bind.rootstub",
                "doc": "<p>A reference to the root \"stub\" (an object that manages bindings).</p>",
                "default": "true"
            },
            {
                "name": "scheduler",
                "type": "ext.util.scheduler",
                "doc": "<p>The scheduler used to schedule and manage the delivery of notifications for\nall connections to this <code>ViewModel</code> and any other attached to it. The normal\nprocess to initialize the <code>scheduler</code> is to get the scheduler used by the\n<code>parent</code> or <code>session</code> and failing either of those, create one.</p>",
                "default": null
            },
            {
                "name": "schema",
                "type": "string/ext.data.schema.schema",
                "doc": "<p>The schema to use for getting information about entities.</p>",
                "default": "'default'"
            },
            {
                "name": "session",
                "type": "ext.data.session",
                "doc": "<p>The session used to manage the data model (records and stores).</p>",
                "default": null
            },
            {
                "name": "stores",
                "type": "object",
                "doc": "<p>A declaration of <code>Ext.data.Store</code> configurations that are first processed as\nbinds to produce an effective store configuration.</p>",
                "default": null
            },
            {
                "name": "view",
                "type": "ext.container.container",
                "doc": "<p>The Container that owns this <code>ViewModel</code> instance.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.app.bind.AbstractStub": {
        "type": "Ext.app.bind.AbstractStub",
        "doc": "<p>This class manages bindings for a <code>Session</code> or <code>ViewModel</code>.</p>",
        "configs": [],
        "events": []
    },
    "Ext.app.bind.BaseBinding": {
        "type": "Ext.app.bind.BaseBinding",
        "doc": "<p>This class is the base for <code>Binding</code> and <code>MultiBinding</code>.</p>",
        "configs": [
            {
                "name": "single",
                "type": "boolean",
                "doc": "<p>This option instructs the binding to call its <code>destroy</code> method immediately after\ndelivering the initial value.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.app.bind.Binding": {
        "type": "Ext.app.bind.Binding",
        "doc": "<p>This class is created to manage a direct bind. Both <code>Ext.data.Session</code>\nand <code>Ext.app.ViewModel</code> return these objects from their <code>bind</code> method.</p>",
        "configs": [
            {
                "name": "deep",
                "type": "boolean",
                "doc": "<p>Normally a binding is only notified of changes to its bound property, but if that\nproperty is an object it is sometimes helpful to be notified of changes to its\nproperties. To receive notifications of changes to all properties of a bound object,\nset this to <code>true</code>.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.app.bind.Formula": {
        "type": "Ext.app.bind.Formula",
        "doc": "<p>This class manages a formula defined for an <code>Ext.app.ViewModel</code>.</p>",
        "configs": [
            {
                "name": "bind",
                "type": "object",
                "doc": "<p>An explicit bind request to produce data to provide the <code>get</code> function. If this is\nspecified, the result of this bind is the first argument to <code>get</code>. If not given,\nthen <code>get</code> receives a getter function that can retrieve bind expressions. For details on what can\nbe specified for this property see <code>Ext.app.ViewModel.bind</code>.</p>",
                "default": null
            },
            {
                "name": "get",
                "type": "function",
                "doc": "<p>The function to call to calculate the formula's value. The <code>get</code> method executes\nwith a <code>this</code> pointer of the <code>ViewModel</code> and receives a getter function or the result of a configured <code>bind</code>.</p>",
                "default": null
            },
            {
                "name": "set",
                "type": "function",
                "doc": "<p>If provided this method allows a formula to be set. This method is typically called\nwhen <code>Ext.app.bind.Binding.setValue</code> is called. The <code>set</code> method executes\nwith a <code>this</code> pointer of the <code>ViewModel</code>. Whatever values need to be updated can\nbe set by calling <code>Ext.app.ViewModel.set</code>.</p>",
                "default": null
            },
            {
                "name": "single",
                "type": "boolean",
                "doc": "<p>This option instructs the binding to call its <code>destroy</code> method immediately after\ndelivering the initial value.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.app.bind.LinkStub": {
        "type": "Ext.app.bind.LinkStub",
        "doc": "<p>This class manages stubs associated with <code>link</code> requests. These bind to some other\ndescriptor and forward changes from there.</p>",
        "configs": [],
        "events": []
    },
    "Ext.app.bind.Multi": {
        "type": "Ext.app.bind.Multi",
        "doc": "<p>This class is created to manage a multi-bind against a <code>ViewModel</code>.</p>",
        "configs": [
            {
                "name": "trackStatics",
                "type": "boolean",
                "doc": "<p>This option tracks for static branches of the root object which can be pruned using\npruneStaticKeys. This can be useful to only get the dynamic parts of a multi bind:</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.app.bind.RootStub": {
        "type": "Ext.app.bind.RootStub",
        "doc": "<p>This class is the root stub for managing a <code>ViewModel</code>.</p>",
        "configs": [],
        "events": []
    },
    "Ext.app.bind.Stub": {
        "type": "Ext.app.bind.Stub",
        "doc": "<p>This class and its derived classes are used to manage access to the properties of an\nobject stored in a <code>Session</code>.</p>",
        "configs": [],
        "events": []
    },
    "Ext.app.bind.Template": {
        "type": "Ext.app.bind.Template",
        "doc": "<p>This class holds the parsed text for a bind template. The syntax is that of a normal\n<code>Ext.Template</code> except that substitution tokens can contain dots to reference property\nnames.</p>",
        "configs": [],
        "events": []
    },
    "Ext.app.bind.TemplateBinding": {
        "type": "Ext.app.bind.TemplateBinding",
        "doc": "<p>This class is created to manage a template against a <code>ViewModel</code>. A binding of this\ntype uses <code>Ext.app.bind.Template</code> to process the template text so see that\nclass for details on template syntax.</p>",
        "configs": [],
        "events": []
    },
    "Ext.app.bindinspector.Environment": {
        "type": "Ext.app.bindinspector.Environment",
        "configs": [],
        "events": []
    },
    "Ext.app.bindinspector.Util": {
        "type": "Ext.app.bindinspector.Util",
        "configs": [],
        "events": []
    },
    "Ext.app.domain.Component": {
        "type": "Ext.app.domain.Component",
        "doc": "<p>This class implements the component event domain. All classes extending from\nExt.Component are included in this domain. The matching criteria uses\nExt.ComponentQuery.</p>",
        "configs": [],
        "events": []
    },
    "Ext.app.domain.Controller": {
        "type": "Ext.app.domain.Controller",
        "doc": "<p>This class implements the controller event domain. All classes extending from\nExt.app.Controller are included in this domain. The selectors are simply id,\nalias, or the wildcard \"*\" to match any controller.</p>",
        "configs": [],
        "events": []
    },
    "Ext.app.domain.Direct": {
        "type": "Ext.app.domain.Direct",
        "doc": "<p>This class implements the Ext.Direct event domain. All classes extending from\nExt.direct.Provider are included in this domain. The selectors are simply provider\nid's or the wildcard \"*\" to match any provider.</p>",
        "configs": [
            {
                "name": "idProperty",
                "type": "string",
                "doc": "<p>Name of the identifier property for this event domain.</p>",
                "default": "'id'"
            }
        ],
        "events": []
    },
    "Ext.app.domain.Global": {
        "type": "Ext.app.domain.Global",
        "doc": "<p>This class implements the global event domain. This domain represents event fired from\nExt.GlobalEvents Observable instance. No selectors are supported for this domain.</p>",
        "configs": [],
        "events": []
    },
    "Ext.app.domain.Store": {
        "type": "Ext.app.domain.Store",
        "doc": "<p>This class implements the data store event domain. All classes extending from\nExt.data.AbstractStore are included in this domain. The selectors are simply\nstore id, alias or the wildcard \"*\" to match any store.</p>",
        "configs": [],
        "events": []
    },
    "Ext.app.domain.View": {
        "type": "Ext.app.domain.View",
        "configs": [],
        "events": []
    },
    "Ext.app.route.Queue": {
        "type": "Ext.app.route.Queue",
        "doc": "<p>A Queue is a queue of Ext.app.route.Route instances managed by the\nExt.app.route.Router singleton if queueActions is set to <code>true</code>.</p>",
        "configs": [],
        "events": []
    },
    "Ext.app.route.Route": {
        "type": "Ext.app.route.Route",
        "doc": "<p>Represents a mapping between a url and a controller/action pair. May also contain\nadditional params.</p>",
        "configs": [
            {
                "name": "action",
                "type": "string",
                "doc": "<p>The name of the action that will be called on the\ncontroller if this route is matched.</p>",
                "default": null
            },
            {
                "name": "allowInactive",
                "type": "boolean",
                "doc": "<p><code>true</code> to allow this route to be triggered on\na controller that is not active.</p>",
                "default": "false"
            },
            {
                "name": "before",
                "type": "function",
                "doc": "<p>An optional function to use to intercept the action\nto do extra means and possibly stop the execution. An example is if the route is\nfor editing a user and you need to verify the current user has permission you can\nsend an Ext.Ajax request to a server or some arbitrary code.</p>",
                "default": null
            },
            {
                "name": "caseInsensitive",
                "type": "boolean",
                "doc": "<p><code>true</code> to allow the tokens to be matched with\ncase-insensitive. Defaults to <code>false</code> which will force case matching.</p>",
                "default": "false"
            },
            {
                "name": "conditions",
                "type": "object",
                "doc": "<p>Optional set of conditions for each token in the url\nstring. Each key should be one of the tokens, each value should be a regex that the\ntoken should accept. For example, if you have a Route with a url like\n<code>\"files/:fileName\"</code> and you want it to match urls like \"files/someImage.jpg\" then\nyou can set these conditions to allow the :fileName token to accept strings\ncontaining a period (\".\"):</p>",
                "default": null
            },
            {
                "name": "controller",
                "type": "string",
                "doc": "<p>The name of the Controller whose action will be\ncalled if this route is matched.</p>",
                "default": null
            },
            {
                "name": "url",
                "type": "string",
                "doc": "<p>The url regex to match against.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.app.route.Router": {
        "type": "Ext.app.route.Router",
        "doc": "<p>The Router is an ordered set of Ext.app.route.Route definitions that decode a\nurl into a controller function to execute. Each <code>route</code> defines a type of url to match,\nalong with the controller function to call if it is matched. The Router uses the\nExt.util.History singleton to find out when the browser's url has changed.</p>",
        "configs": [],
        "events": []
    },
    "Ext.browser": {
        "type": "Ext.browser",
        "doc": "<p>Provides useful information about the current browser.</p>",
        "configs": [],
        "events": []
    },
    "Ext.button.Button": {
        "type": "Ext.button.Button",
        "doc": "<p>Create simple buttons with this component. Customisations include aligned\nicons, dropdown menus, tooltips\nand sizing options. Specify a handler to run code when\na user clicks the button, or use listeners for other events such as\nmouseover. Example usage:</p>",
        "configs": [
            {
                "name": "allowDepress",
                "type": "boolean",
                "doc": "<p>False to not allow a pressed Button to be depressed. Only valid when enableToggle is true.</p>",
                "default": "true"
            },
            {
                "name": "arrowAlign",
                "type": "string",
                "doc": "<p>The side of the Button box to render the arrow if the button has an associated menu. Two\nvalues are allowed:</p>",
                "default": "'right'"
            },
            {
                "name": "arrowCls",
                "type": "string",
                "doc": "<p>The className used for the inner arrow element if the button has a menu.</p>",
                "default": "'arrow'"
            },
            {
                "name": "arrowVisible",
                "type": "boolean",
                "doc": "<p><code>false</code> to hide the button arrow.  Only applicable for Split Buttons and buttons configured with a menu.</p>",
                "default": "true"
            },
            {
                "name": "autoEl",
                "type": "string/object",
                "doc": "<p>A tag name or DomHelper spec used to create the Element which will\nencapsulate this Component.</p>",
                "default": "{tag: 'a', hidefocus: 'on', unselectable: 'on'}"
            },
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to add to all buttons.</p>",
                "default": "'x-btn'"
            },
            {
                "name": "baseParams",
                "type": "object",
                "doc": "<p>An object literal of parameters to pass to the url when the href property is specified.</p>",
                "default": null
            },
            {
                "name": "childEls",
                "type": "object/string[]/object[]",
                "doc": "<p>The canonical form of <code>childEls</code> is an object keyed by child's property name\nwith values that are objects with the following properties.</p>",
                "default": "['btnEl', 'btnWrap', 'btnInnerEl', 'btnIconEl']"
            },
            {
                "name": "clickEvent",
                "type": "string",
                "doc": "<p>The DOM event that will fire the handler of the button. This can be any valid event name (dblclick, contextmenu).</p>",
                "default": "'click'"
            },
            {
                "name": "cls",
                "type": "string",
                "doc": "<p>A CSS class string to apply to the button's main element.</p>",
                "default": null
            },
            {
                "name": "destroyMenu",
                "type": "boolean",
                "doc": "<p>Whether or not to destroy any associated menu when this button is destroyed.\nIn addition, a value of <code>true</code> for this config will destroy the currently bound menu when a new\nmenu is set in setMenu unless overridden by that method's destroyMenu function argument.</p>",
                "default": "true"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "doc": "<p>True to start disabled.</p>",
                "default": "false"
            },
            {
                "name": "enableToggle",
                "type": "boolean",
                "doc": "<p>True to enable pressed/not pressed toggling. If a toggleGroup is specified, this\noption will be set to true.</p>",
                "default": "false"
            },
            {
                "name": "frame",
                "type": "boolean",
                "doc": "<p>Specify as <code>true</code> to have the Component inject framing elements within the Component at render time to provide a\ngraphical rounded frame around the Component content.</p>",
                "default": "true"
            },
            {
                "name": "glyph",
                "type": "number/string",
                "doc": "<p>A numeric unicode character code to use as the icon for this button. The default\nfont-family for glyphs can be set globally using\nExt.setGlyphFontFamily(). Alternatively, this\nconfig option accepts a string with the charCode and font-family separated by the\n<code>@</code> symbol. For example '65@My Font Family'.</p>",
                "default": null
            },
            {
                "name": "handleMouseEvents",
                "type": "boolean",
                "doc": "<p>False to disable visual cues on mouseover, mouseout and mousedown.</p>",
                "default": "true"
            },
            {
                "name": "handler",
                "type": "function",
                "doc": "<p>A function called when the button is clicked (can be used instead of click event).</p>",
                "default": null
            },
            {
                "name": "hidden",
                "type": "boolean",
                "doc": "<p>True to start hidden.</p>",
                "default": "false"
            },
            {
                "name": "href",
                "type": "string",
                "doc": "<p>The URL to open when the button is clicked. Specifying this config causes the Button to be\nrendered with the specified URL as the <code>href</code> attribute of its <code>&lt;a&gt;</code> Element.</p>",
                "default": null
            },
            {
                "name": "hrefTarget",
                "type": "string",
                "doc": "<p>The target attribute to use for the underlying anchor. Only used if the href\nproperty is specified.</p>",
                "default": "\"_blank\""
            },
            {
                "name": "icon",
                "type": "string",
                "doc": "<p>The path to an image to display in the button.</p>",
                "default": null
            },
            {
                "name": "iconAlign",
                "type": "string",
                "doc": "<p>The side of the Button box to render the icon. Four values are allowed:</p>",
                "default": "'left'"
            },
            {
                "name": "iconCls",
                "type": "string",
                "doc": "<p>A css class which sets a background image to be used as the icon for this button.</p>",
                "default": null
            },
            {
                "name": "liquidLayout",
                "type": "boolean",
                "doc": "<p>private, readonly</p>",
                "default": "true"
            },
            {
                "name": "menu",
                "type": "ext.menu.menu/string/object",
                "doc": "<p>Standard menu attribute consisting of a reference to a menu object, a menu id or a menu config blob.</p>",
                "default": null
            },
            {
                "name": "menuAlign",
                "type": "string",
                "doc": "<p>The position to align the menu to (see Ext.util.Positionable.alignTo for more details).</p>",
                "default": "'tl-bl?'"
            },
            {
                "name": "minWidth",
                "type": "number",
                "doc": "<p>The minimum width for this button (used to give a set of buttons a common width).\nSee also Ext.panel.Panel.minButtonWidth.</p>",
                "default": null
            },
            {
                "name": "overCls",
                "type": "string",
                "doc": "<p>An optional extra CSS class that will be added to this component's Element when the mouse moves over the Element,\nand removed when the mouse moves out. This can be useful for adding customized 'active' or 'hover' styles to the\ncomponent or any of its children using standard CSS rules.</p>",
                "default": "Ext.baseCSSPrefix + 'btn-over'"
            },
            {
                "name": "overflowText",
                "type": "string",
                "doc": "<p>If used in a Toolbar, the text to be used if this item is shown in the overflow menu.\nSee also Ext.toolbar.Item.<code>overflowText</code>.</p>",
                "default": null
            },
            {
                "name": "params",
                "type": "object",
                "doc": "<p>An object literal of parameters to pass to the url when the href property is specified. Any params\noverride baseParams. New params can be set using the setParams method.</p>",
                "default": null
            },
            {
                "name": "pressed",
                "type": "boolean",
                "doc": "<p>True to start pressed (only if enableToggle = true)</p>",
                "default": "false"
            },
            {
                "name": "preventDefault",
                "type": "boolean",
                "doc": "<p><code>true</code> to prevent the default action when the clickEvent is processed.</p>",
                "default": "true"
            },
            {
                "name": "publishes",
                "type": "string/string[]/object",
                "doc": "<p>One or more names of config properties that this component should publish to\nits <code>ViewModel</code>. Some components override this and publish their most useful\nconfigs by default.</p>",
                "default": "{pressed: 1}"
            },
            {
                "name": "renderTpl",
                "type": "ext.xtemplate/string/string[]",
                "doc": "<p>We have to keep \"unselectable\" attribute on all elements because it's not inheritable.\nWithout it, clicking anywhere on a button disrupts current selection and cursor position\nin HtmlEditor.</p>",
                "default": "'<span id=\"{id}-btnWrap\" data-ref=\"btnWrap\" role=\"presentation\" unselectable=\"on\" style=\"{btnWrapStyle}\" ' + 'class=\"{btnWrapCls} {btnWrapCls}-{ui} {splitCls}{childElCls}\">' + '<span id=\"{id}-btnEl\" data-ref=\"btnEl\" role=\"presentation\" unselectable=\"on\" style=\"{btnElStyle}\" ' + 'class=\"{btnCls} {btnCls}-{ui} {textCls} {noTextCls} {hasIconCls} ' + '{iconAlignCls} {textAlignCls} {btnElAutoHeightCls}{childElCls}\">' + '<tpl if=\"iconBeforeText\">{[values.$comp.renderIcon(values)]}</tpl>' + '<span id=\"{id}-btnInnerEl\" data-ref=\"btnInnerEl\" unselectable=\"on\" ' + 'class=\"{innerCls} {innerCls}-{ui}{childElCls}\">{text}</span>' + '<tpl if=\"!iconBeforeText\">{[values.$comp.renderIcon(values)]}</tpl>' + '</span>' + '</span>' + '{[values.$comp.getAfterMarkup ? values.$comp.getAfterMarkup(values) : \"\"]}' + '<tpl if=\"closable\">' + '<span id=\"{id}-closeEl\" data-ref=\"closeEl\" class=\"{baseCls}-close-btn\">' + '<tpl if=\"closeText\">' + ' {closeText}' + '</tpl>' + '</span>' + '</tpl>'"
            },
            {
                "name": "repeat",
                "type": "boolean/object",
                "doc": "<p>True to repeat fire the click event while the mouse is down. This can also be a\nClickRepeater config object.</p>",
                "default": "false"
            },
            {
                "name": "scale",
                "type": "\"small\"/\"medium\"/\"large\"",
                "doc": "<p>The size of the Button. Three values are allowed:</p>",
                "default": "'small'"
            },
            {
                "name": "scope",
                "type": "object",
                "doc": "<p>The scope (<strong>this</strong> reference) in which the <code>handler</code> and <code>toggleHandler</code> is executed.\nDefaults to this Button.</p>",
                "default": null
            },
            {
                "name": "showEmptyMenu",
                "type": "boolean",
                "doc": "<p>True to force an attached menu with no items to be shown when clicking\nthis button. By default, the menu will not show if it is empty.</p>",
                "default": "false"
            },
            {
                "name": "shrinkWrap",
                "type": "boolean/number",
                "doc": "<p>If this property is a number, it is interpreted as follows:</p>",
                "default": "3"
            },
            {
                "name": "tabIndex",
                "type": "number",
                "doc": "<p>Set a DOM tabIndex for this button.</p>",
                "default": "0"
            },
            {
                "name": "text",
                "type": "string",
                "doc": "<p>The button text to be used as innerHTML (html tags are accepted).</p>",
                "default": null
            },
            {
                "name": "textAlign",
                "type": "string",
                "doc": "<p>The text alignment for this button (center, left, right).</p>",
                "default": "'center'"
            },
            {
                "name": "toggleGroup",
                "type": "string",
                "doc": "<p>The group this toggle button is a member of (only 1 per group can be pressed). If a toggleGroup\nis specified, the enableToggle configuration will automatically be set to true.</p>",
                "default": null
            },
            {
                "name": "toggleHandler",
                "type": "function",
                "doc": "<p>Function called when a Button with enableToggle set to true is clicked.</p>",
                "default": null
            },
            {
                "name": "tooltip",
                "type": "string/object",
                "doc": "<p>The tooltip for the button - can be a string to be used as innerHTML (html tags are accepted) or\nQuickTips config object.</p>",
                "default": null
            },
            {
                "name": "tooltipType",
                "type": "string",
                "doc": "<p>The type of tooltip to use. Either 'qtip' for QuickTips or 'title' for title attribute.</p>",
                "default": "'qtip'"
            },
            {
                "name": "value",
                "type": "string/number",
                "doc": "<p>The value of this button.  Only applicable when used as an item of a Segmented Button.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "click",
                "params": "this(Ext.button.Button) e(Event) eOpts(Object)",
                "doc": "<p>Fires when this button is clicked, before the configured handler is invoked. Execution of the\nhandler may be vetoed by returning <code>false</code> to this event.</p>"
            },
            {
                "name": "glyphchange",
                "params": "this(Ext.button.Button) newGlyph(Number/String) oldGlyph(Number/String) eOpts(Object)",
                "doc": "<p>Fired when the button's glyph is changed by the setGlyph method.</p>"
            },
            {
                "name": "iconchange",
                "params": "this(Ext.button.Button) oldIcon(String) newIcon(String) eOpts(Object)",
                "doc": "<p>Fired when the button's icon is changed by the setIcon or setIconCls methods.</p>"
            },
            {
                "name": "menuhide",
                "params": "this(Ext.button.Button) menu(Ext.menu.Menu) eOpts(Object)",
                "doc": "<p>If this button has a menu, this event fires when it is hidden</p>"
            },
            {
                "name": "menushow",
                "params": "this(Ext.button.Button) menu(Ext.menu.Menu) eOpts(Object)",
                "doc": "<p>If this button has a menu, this event fires when it is shown</p>"
            },
            {
                "name": "menutriggerout",
                "params": "this(Ext.button.Button) menu(Ext.menu.Menu) e(Event) eOpts(Object)",
                "doc": "<p>If this button has a menu, this event fires when the mouse leaves the menu triggering element</p>"
            },
            {
                "name": "menutriggerover",
                "params": "this(Ext.button.Button) menu(Ext.menu.Menu) e(Event) eOpts(Object)",
                "doc": "<p>If this button has a menu, this event fires when the mouse enters the menu triggering element</p>"
            },
            {
                "name": "mouseout",
                "params": "this(Ext.button.Button) e(Event) eOpts(Object)",
                "doc": "<p>Fires when the mouse exits the button</p>"
            },
            {
                "name": "mouseover",
                "params": "this(Ext.button.Button) e(Event) eOpts(Object)",
                "doc": "<p>Fires when the mouse hovers over the button</p>"
            },
            {
                "name": "textchange",
                "params": "this(Ext.button.Button) oldText(String) newText(String) eOpts(Object)",
                "doc": "<p>Fired when the button's text is changed by the setText method.</p>"
            },
            {
                "name": "toggle",
                "params": "this(Ext.button.Button) pressed(Boolean) eOpts(Object)",
                "doc": "<p>Fires when the 'pressed' state of this button changes (only if enableToggle = true)</p>"
            }
        ]
    },
    "Ext.button.Cycle": {
        "type": "Ext.button.Cycle",
        "doc": "<p>A specialized SplitButton that contains a menu of Ext.menu.CheckItem elements. The button automatically\ncycles through each menu item on click, raising the button's change event (or calling the button's\nchangeHandler function, if supplied) for the active menu item. Clicking on the arrow section of the\nbutton displays the dropdown menu just like a normal SplitButton.  Example usage:</p>",
        "configs": [
            {
                "name": "changeHandler",
                "type": "function",
                "doc": "<p>A callback function that will be invoked each time the active menu item in the button's menu has changed. If this\ncallback is not supplied, the SplitButton will instead fire the change event on active item change. The\nchangeHandler function will be called with the following argument list: (SplitButton this, Ext.menu.CheckItem\nitem)</p>",
                "default": null
            },
            {
                "name": "forceGlyph",
                "type": "number/string",
                "doc": "<p>The charCode to be used as the static icon for this button.  This icon will always be\ndisplayed regardless of which item is selected in the dropdown list. This override\nthe default behavior of changing the button's icon to match the selected item's icon\non change. This property expects a format consistent with that of glyph</p>",
                "default": null
            },
            {
                "name": "forceIcon",
                "type": "string",
                "doc": "<p>A css class which sets an image to be used as the static icon for this button. This icon will always be displayed\nregardless of which item is selected in the dropdown list. This overrides the default behavior of changing the\nbutton's icon to match the selected item's icon on change.</p>",
                "default": null
            },
            {
                "name": "items",
                "type": "object[]",
                "doc": "<p>An array of Ext.menu.CheckItem <strong>config</strong> objects to be used when creating the button's menu items (e.g.,\n<code>{text:'Foo', iconCls:'foo-icon'}</code>)</p>",
                "default": null
            },
            {
                "name": "prependText",
                "type": "string",
                "doc": "<p>A static string to prepend before the active item's text when displayed as the button's text (only applies when\nshowText = true).</p>",
                "default": "''"
            },
            {
                "name": "showText",
                "type": "boolean",
                "doc": "<p>True to display the active item's text as the button text. The Button will show its\nconfigured text if this config is omitted.</p>",
                "default": "false"
            }
        ],
        "events": [
            {
                "name": "change",
                "params": "this(Ext.button.Cycle) item(Ext.menu.CheckItem) eOpts(Object)",
                "doc": "<p>Fires after the button's active menu item has changed. Note that if a changeHandler function is\nset on this CycleButton, it will be called instead on active item change and this change event will not\nbe fired.</p>"
            }
        ]
    },
    "Ext.button.Manager": {
        "type": "Ext.button.Manager",
        "configs": [],
        "events": []
    },
    "Ext.button.Segmented": {
        "type": "Ext.button.Segmented",
        "doc": "<p>SegmentedButton is a container for a group of Buttons.  You\nmay populate the segmented button's children by adding buttons to the items config.  The segmented\nbutton's children enjoy the same customizations as regular buttons, such as\nmenu, tooltip, etc.  You can see usages of the various configuration\npossibilities in the example below.</p>",
        "configs": [
            {
                "name": "allowDepress",
                "type": "boolean",
                "doc": "<p>Allow toggling the pressed state of each button.\nOnly applicable when allowMultiple is <code>false</code>.</p>",
                "default": "false"
            },
            {
                "name": "allowMultiple",
                "type": "boolean",
                "doc": "<p>Allow multiple pressed buttons.</p>",
                "default": "false"
            },
            {
                "name": "allowToggle",
                "type": "boolean",
                "doc": "<p>True to enable pressed/not pressed toggling.</p>",
                "default": "true"
            },
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to elements within this\ncomponent like Panel's body will get a class <code>x-panel-body</code>. This means that if you create a subclass of Panel, and\nyou want it to get all the Panels styling for the element and the body, you leave the <code>baseCls</code> <code>x-panel</code> and use\n<code>componentCls</code> to add specific styling for this component.</p>",
                "default": "Ext.baseCSSPrefix + 'segmented-button'"
            },
            {
                "name": "defaultType",
                "type": "string",
                "doc": "<p>The default xtype of child Components to create in this Container when\na child item is specified as a raw configuration object, rather than as an instantiated Component.</p>",
                "default": "'button'"
            },
            {
                "name": "defaultUI",
                "type": "string",
                "doc": "<p>Default ui to use for buttons in this segmented button.\nButtons can override this default by specifying their own UI</p>",
                "default": "'default'"
            },
            {
                "name": "layout",
                "type": "ext.enums.layout/object",
                "doc": "<p><strong>Important</strong>: In order for child items to be correctly sized and\npositioned, typically a layout manager <strong>must</strong> be specified through\nthe <code>layout</code> configuration option.</p>",
                "default": "'segmentedbutton'"
            },
            {
                "name": "publishes",
                "type": "string/string[]/object",
                "doc": "<p>One or more names of config properties that this component should publish to\nits <code>ViewModel</code>. Some components override this and publish their most useful\nconfigs by default.</p>",
                "default": "['value']"
            },
            {
                "name": "twoWayBindable",
                "type": "string/string[]/object",
                "doc": "<p>This object holds a map of <code>config</code> properties that will update their binding\nas they are modified. For example, <code>value</code> is a key added by form fields. The\nform of this config is the same as <code>publishes</code>.</p>",
                "default": "['value']"
            },
            {
                "name": "value",
                "type": "string/number/string[]/number[]",
                "doc": "<p>The value of this button.  When allowMultiple is <code>false</code>, value is a\nString or Number.  When is &lt;code&gt;true&lt;/code&gt;, value is an array\nof values.  A value corresponds to a child button's {@link Ext.button.Button#value\nvalue, or its index if no child button values match the given value.</p>",
                "default": null
            },
            {
                "name": "vertical",
                "type": "boolean",
                "doc": "<p>True to align the buttons vertically</p>",
                "default": "false"
            }
        ],
        "events": [
            {
                "name": "toggle",
                "params": "this(Ext.button.Segmented) button(Ext.button.Button) isPressed(Boolean) eOpts(Object)",
                "doc": "<p>Fires when any child button's pressed state has changed.</p>"
            }
        ]
    },
    "Ext.button.Split": {
        "type": "Ext.button.Split",
        "doc": "<p>A split button that provides a built-in dropdown arrow that can fire an event separately from the default click event\nof the button. Typically this would be used to display a dropdown menu that provides additional options to the\nprimary button action, but any custom handler can provide the arrowclick implementation.  Example usage:</p>",
        "configs": [
            {
                "name": "arrowCls",
                "type": "string",
                "doc": "<p>The className used for the inner arrow element if the button has a menu.</p>",
                "default": "'split'"
            },
            {
                "name": "arrowHandler",
                "type": "function",
                "doc": "<p>A function called when the arrow button is clicked (can be used instead of click event)</p>",
                "default": null
            },
            {
                "name": "arrowTooltip",
                "type": "string",
                "doc": "<p>The title attribute of the arrow.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "arrowclick",
                "params": "this(Ext.button.Split) e(Event) eOpts(Object)",
                "doc": "<p>Fires when this button's arrow is clicked.</p>"
            }
        ]
    },
    "Ext.chart.AbstractChart": {
        "type": "Ext.chart.AbstractChart",
        "doc": "<p>The Ext.chart package provides the capability to visualize data.\nEach chart binds directly to a store enabling automatic updates of the chart.\nA chart configuration object has some overall styling options as well as an array of axes\nand series. A chart instance example could look like this:</p>",
        "configs": [
            {
                "name": "animation",
                "type": "boolean/object",
                "doc": "<p>(optional) <code>true</code> for the default animation (easing: 'ease' and duration: 500)\nor a standard animation config object to be used for default chart animations.</p>",
                "default": null
            },
            {
                "name": "axes",
                "type": "ext.chart.axis.axis/array/object",
                "doc": "<p>Array of Axis instances or config objects. For example:</p>",
                "default": "[]"
            },
            {
                "name": "background",
                "type": "object",
                "doc": "<p>Set the chart background. This can be a gradient object, image, or color.</p>",
                "default": null
            },
            {
                "name": "colors",
                "type": "array",
                "doc": "<p>Array of colors/gradients to override the color of items and legends.</p>",
                "default": null
            },
            {
                "name": "highlightItem",
                "type": "object",
                "doc": "<p>The current highlight item in the chart.\nThe object must be the one that you get from item events.</p>",
                "default": null
            },
            {
                "name": "insetPadding",
                "type": "object|number|string",
                "doc": "<p>The amount of inset padding in pixels for the chart.\nInset padding is the padding from the boundary of the chart to any of its contents.</p>",
                "default": "{top: 10, left: 10, right: 10, bottom: 10}"
            },
            {
                "name": "interactions",
                "type": "array",
                "doc": "<p>Interactions are optional modules that can be plugged in to a chart to allow the user to interact\nwith the chart and its data in special ways. The <code>interactions</code> config takes an Array of Object\nconfigurations, each one corresponding to a particular interaction class identified by a <code>type</code> property:</p>",
                "default": "[]"
            },
            {
                "name": "legend",
                "type": "ext.chart.legend/object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "mainRect",
                "type": "object",
                "doc": "<p>The main area of the chart where grid and series are drawn.</p>",
                "default": null
            },
            {
                "name": "resizeHandler",
                "type": "object",
                "doc": "<p>Override value.</p>",
                "default": null
            },
            {
                "name": "series",
                "type": "ext.chart.series.series/array",
                "doc": "<p>Array of Series instances or config objects. For example:</p>",
                "default": "[]"
            },
            {
                "name": "shadow",
                "type": "boolean/object",
                "doc": "<p>(optional) <code>true</code> for the default shadow configuration\n<code>{shadowOffsetX: 2, shadowOffsetY: 2, shadowBlur: 3, shadowColor: '#444'}</code>\nor a standard shadow config object to be used for default chart shadows.</p>",
                "default": "false"
            },
            {
                "name": "store",
                "type": "ext.data.store",
                "doc": "<p>The store that supplies data to this chart.</p>",
                "default": "'ext-empty-store'"
            },
            {
                "name": "style",
                "type": "object",
                "doc": "<p>The style for the chart component.</p>",
                "default": null
            },
            {
                "name": "theme",
                "type": "string",
                "doc": "<p>The name of the theme to be used. A theme defines the colors and styles\nused by the series, axes, markers and other chart components.\nPlease see the documentation for the Ext.chart.theme.Base class for more information.\nPossible theme values are:\n  - 'green', 'sky', 'red', 'purple', 'blue', 'yellow'\n  - 'category1' to 'category6'\n  - and the above theme names with the '-gradients' suffix, e.g. 'green-gradients'</p>",
                "default": "\"default\""
            }
        ],
        "events": [
            {
                "name": "beforerefresh",
                "params": "this(Ext.chart.AbstractChart) eOpts(Object)",
                "doc": "<p>Fires before a refresh to the chart data is called.  If the <code>beforerefresh</code> handler returns\n<code>false</code> the refresh action will be canceled.</p>"
            },
            {
                "name": "itemclick",
                "params": "chart(Ext.chart.AbstractChart) item(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when a click event occurs on a series item.\n<em>Note</em>: This event requires the chartitemevents\nplugin be added to the chart.</p>"
            },
            {
                "name": "itemdblclick",
                "params": "chart(Ext.chart.AbstractChart) item(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when a double click event occurs on a series item.\n<em>Note</em>: This event requires the chartitemevents\nplugin be added to the chart.</p>"
            },
            {
                "name": "itemmousedown",
                "params": "chart(Ext.chart.AbstractChart) item(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when a mousedown event occurs on a series item.\n<em>Note</em>: This event requires the chartitemevents\nplugin be added to the chart.</p>"
            },
            {
                "name": "itemmousemove",
                "params": "chart(Ext.chart.AbstractChart) item(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when the mouse is moved on a series item.\n<em>Note</em>: This event requires the chartitemevents\nplugin be added to the chart.</p>"
            },
            {
                "name": "itemmouseout",
                "params": "chart(Ext.chart.AbstractChart) item(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when the mouse exits a series item.\n<em>Note</em>: This event requires the chartitemevents\nplugin be added to the chart.</p>"
            },
            {
                "name": "itemmouseover",
                "params": "chart(Ext.chart.AbstractChart) item(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when the mouse enters a series item.\n<em>Note</em>: This event requires the chartitemevents\nplugin be added to the chart.</p>"
            },
            {
                "name": "itemmouseup",
                "params": "chart(Ext.chart.AbstractChart) item(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when a mouseup event occurs on a series item.\n<em>Note</em>: This event requires the chartitemevents\nplugin be added to the chart.</p>"
            },
            {
                "name": "itemtap",
                "params": "chart(Ext.chart.AbstractChart) item(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when a tap event occurs on a series item.\n<em>Note</em>: This event requires the chartitemevents\nplugin be added to the chart.</p>"
            },
            {
                "name": "redraw",
                "params": "this(Ext.chart.AbstractChart) eOpts(Object)",
                "doc": "<p>Fires after the chart is redrawn.</p>"
            },
            {
                "name": "refresh",
                "params": "this(Ext.chart.AbstractChart) eOpts(Object)",
                "doc": "<p>Fires after the chart data has been refreshed.</p>"
            }
        ]
    },
    "Ext.chart.CartesianChart": {
        "type": "Ext.chart.CartesianChart",
        "doc": "<p>Represents a chart that uses cartesian coordinates.\nA cartesian chart has two directions, X direction and Y direction.\nThe series and axes are coordinated along these directions.\nBy default the x direction is horizontal and y direction is vertical,\nYou can swap the direction by setting the flipXY config to <code>true</code>.</p>",
        "configs": [
            {
                "name": "flipXY",
                "type": "boolean",
                "doc": "<p>Flip the direction of X and Y axis.\nIf flipXY is <code>true</code>, the X axes will be vertical and Y axes will be horizontal.\nNote that positions of chart axes have\nto be updated accordingly: axes positioned to the <code>top</code> and <code>bottom</code> should\nbe positioned to the <code>left</code> or <code>right</code> and vice versa.</p>",
                "default": "false"
            },
            {
                "name": "innerPadding",
                "type": "object",
                "doc": "<p>The amount of inner padding in pixels.\nInner padding is the padding from the innermost axes to the series.</p>",
                "default": "{top: 0, left: 0, right: 0, bottom: 0}"
            },
            {
                "name": "innerRect",
                "type": "array",
                "doc": "<p>While it may seem tedious to change the position config of all axes every time\nwhen the value of the flipXY config is changed, it's hard to predict the\nexpectaction of the user here, as illustrated below.</p>",
                "default": "[0, 0, 1, 1]"
            }
        ],
        "events": []
    },
    "Ext.chart.Legend": {
        "type": "Ext.chart.Legend",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to elements within this\ncomponent like Panel's body will get a class <code>x-panel-body</code>. This means that if you create a subclass of Panel, and\nyou want it to get all the Panels styling for the element and the body, you leave the <code>baseCls</code> <code>x-panel</code> and use\n<code>componentCls</code> to add specific styling for this component.</p>",
                "default": "'x-legend'"
            },
            {
                "name": "disableSelection",
                "type": "boolean",
                "doc": "<p>True to disable selection within the DataView. This configuration will lock the selection model\nthat the DataView uses.</p>",
                "default": "true"
            },
            {
                "name": "padding",
                "type": "number/string",
                "doc": "<p>Specifies the padding for this component. The padding can be a single numeric value to apply to all sides or it\ncan be a CSS style specification for each style, for example: '10 5 3 10' (top, right, bottom, left).</p>",
                "default": "5"
            },
            {
                "name": "rect",
                "type": "array",
                "doc": "<p>The rect of the legend related to its container.</p>",
                "default": null
            },
            {
                "name": "toggleable",
                "type": "boolean",
                "doc": "\n",
                "default": "true"
            }
        ],
        "events": []
    },
    "Ext.chart.LegendBase": {
        "type": "Ext.chart.LegendBase",
        "configs": [
            {
                "name": "docked",
                "type": "string",
                "doc": "\n",
                "default": "'bottom'"
            },
            {
                "name": "itemSelector",
                "type": "string",
                "doc": "<p><b>This is a required setting</b>. A simple CSS selector (e.g. <code>div.some-class</code> or\n<code>span:first-child</code>) that will be used to determine what nodes this DataView will be\nworking with. The itemSelector is used to map DOM nodes to records. As such, there should\nonly be one root level element that matches the selector for each record. The itemSelector\nwill be automatically configured if the itemTpl config is used.</p>",
                "default": "'div.' + Ext.baseCSSPrefix + 'legend-item'"
            },
            {
                "name": "nodeContainerSelector",
                "type": "string",
                "doc": "\n",
                "default": "'div.' + Ext.baseCSSPrefix + 'legend-container'"
            },
            {
                "name": "tpl",
                "type": "string/string[]/ext.xtemplate",
                "doc": "<p>The HTML fragment or an array of fragments that will make up the template used by this DataView.  This should\nbe specified in the same format expected by the constructor of Ext.XTemplate. When a <code>tpl</code> is specified,\nthis class assumes that records are rendered in the order they appear in the <code>store</code>. If a custom <code>tpl</code>\ndoes not conform to this assumption, index values will be incorrect which may cause the view to misbehave.</p>",
                "default": "['<div class=\"', Ext.baseCSSPrefix, 'legend-container\">', '<tpl for=\".\">', '<div class=\"', Ext.baseCSSPrefix, 'legend-item\">', '<span ', 'class=\"', Ext.baseCSSPrefix, 'legend-item-marker {[ values.disabled ? Ext.baseCSSPrefix + \\'legend-inactive\\' : \\'\\' ]}\" ', 'style=\"background:{mark};\">', '</span>{name}', '</div>', '</tpl>', '</div>']"
            }
        ],
        "events": []
    },
    "Ext.chart.MarkerHolder": {
        "type": "Ext.chart.MarkerHolder",
        "doc": "<p>Mixin that provides the functionality to place markers.</p>",
        "configs": [],
        "events": []
    },
    "Ext.chart.Markers": {
        "type": "Ext.chart.Markers",
        "doc": "<p>Marker sprite. A specialized version of instancing sprite that groups instances.\nPutting a marker is grouped by its category id. Clearing removes that category.</p>",
        "configs": [],
        "events": []
    },
    "Ext.chart.PolarChart": {
        "type": "Ext.chart.PolarChart",
        "doc": "<p>Represent a chart that uses polar coordinates.\nA polar chart has two axes: an angular axis (which is a circle) and\na radial axis (a straight line from the center to the edge of the circle).\nThe angular axis is usually a Category axis while the radial axis is\ntypically numerical.</p>",
        "configs": [
            {
                "name": "center",
                "type": "array",
                "doc": "<p>Determines the center of the polar chart.\nUpdated when the chart performs layout.</p>",
                "default": "[0, 0]"
            },
            {
                "name": "innerPadding",
                "type": "number",
                "doc": "<p>The amount of inner padding in pixels.\nInner padding is the padding from the outermost angular axis to the series.</p>",
                "default": "0"
            },
            {
                "name": "radius",
                "type": "number",
                "doc": "<p>Determines the radius of the polar chart.\nUpdated when the chart performs layout.</p>",
                "default": "0"
            }
        ],
        "events": []
    },
    "Ext.chart.SpaceFillingChart": {
        "type": "Ext.chart.SpaceFillingChart",
        "doc": "<p>Creates a chart that fills the entire area of the chart.\ne.g. Gauge Charts</p>",
        "configs": [],
        "events": []
    },
    "Ext.chart.TipSurface": {
        "type": "Ext.chart.TipSurface",
        "configs": [],
        "events": []
    },
    "Ext.chart.axis.Axis": {
        "type": "Ext.chart.axis.Axis",
        "doc": "<p>Defines axis for charts.</p>",
        "configs": [
            {
                "name": "adjustByMajorUnit",
                "type": "boolean",
                "doc": "<p>Whether to make the auto-calculated minimum and maximum of the axis\na multiple of the interval between the major ticks of the axis.\nIf majorTickSteps, minimum or maximum\nconfigs have been set, this config will be ignored.\nDefaults to 'true'.</p>",
                "default": "true"
            },
            {
                "name": "background",
                "type": "object",
                "doc": "<p>The background config for the axis surface.</p>",
                "default": null
            },
            {
                "name": "center",
                "type": "array",
                "doc": "<p>Center of the polar axis.\nWARNING: Meant to be set automatically by chart. Do not set it manually.</p>",
                "default": null
            },
            {
                "name": "chart",
                "type": "ext.chart.abstractchart",
                "doc": "<p>The Chart that the Axis is bound.</p>",
                "default": null
            },
            {
                "name": "fields",
                "type": "array",
                "doc": "<p>An array containing the names of the record fields which should be mapped along the axis.\nThis is optional if the binding between series and fields is clear.</p>",
                "default": "[]"
            },
            {
                "name": "floating",
                "type": "number|object",
                "doc": "<p>If <code>floating</code> is a number, then it's a percentage displacement of the axis from its initial position\nin the direction opposite to the axis' direction. For instance, '{position:\"left\", floating:75}' displays a vertical\naxis at 3/4 of the chart, starting from the left. It is equivalent to '{position:\"right\", floating:25}'.\nIf <code>floating</code> is an object, then <code>floating.value</code> is the position of this axis along another axis,\ndefined by <code>floating.alongAxis</code>, where <code>alongAxis</code> is an ID, an Ext.chart.AbstractChart.axes config index,\nor the other axis itself. <code>alongAxis</code> must have an opposite alignment.\nFor example:</p>",
                "default": null
            },
            {
                "name": "grid",
                "type": "object",
                "doc": "<p>The grid configuration object for the Axis style. Can contain <code>stroke</code> or <code>fill</code> attributes.\nAlso may contain an <code>odd</code> or <code>even</code> property in which you only style things on odd or even rows.\nFor example:</p>",
                "default": "false"
            },
            {
                "name": "hidden",
                "type": "boolean",
                "doc": "<p>Indicate whether to hide the axis.\nIf the axis is hidden, one of the axis line, ticks, labels or the title will be shown and\nno margin will be taken.\nThe coordination mechanism works fine no matter if the axis is hidden.</p>",
                "default": "false"
            },
            {
                "name": "increment",
                "type": "number",
                "doc": "<p>Given a minimum and maximum bound for the series to be rendered (that can be obtained\nautomatically or by manually setting <code>minimum</code> and <code>maximum</code>) tick marks will be added\non each <code>increment</code> from the minimum value to the maximum one.</p>",
                "default": "0.5"
            },
            {
                "name": "label",
                "type": "object",
                "doc": "<p>The label configuration object for the Axis. This object may include style attributes\nlike <code>spacing</code>, <code>padding</code>, <code>font</code> that receives a string or number and\nreturns a new string with the modified values.</p>",
                "default": null
            },
            {
                "name": "labelInSpan",
                "type": "boolean",
                "doc": "<p>Draws the labels in the middle of the spans.</p>",
                "default": null
            },
            {
                "name": "layout",
                "type": "object|ext.chart.axis.layout.layout",
                "doc": "<p>The axis layout config. See Ext.chart.axis.layout.Layout</p>",
                "default": "'continuous'"
            },
            {
                "name": "length",
                "type": "number",
                "doc": "<p>Length of the axis position. Equals to the size of inner rect on the docking side of this axis.\nWARNING: Meant to be set automatically by chart. Do not set it manually.</p>",
                "default": "0"
            },
            {
                "name": "limits",
                "type": "array|object",
                "doc": "<p>The limit lines configuration for the axis.\nFor example:</p>",
                "default": null
            },
            {
                "name": "linkedTo",
                "type": "ext.chart.axis.axis|string|number",
                "doc": "<p>Axis (itself, its ID or index) that this axis is linked to.\nWhen an axis is linked to a master axis, it will use the same data as the master axis.\nIt can be used to show additional info, or to ease reading the chart by duplicating the scales.</p>",
                "default": null
            },
            {
                "name": "majorTickSteps",
                "type": "number",
                "doc": "<p>Forces the number of major ticks to the specified value.</p>",
                "default": "0"
            },
            {
                "name": "margin",
                "type": "number",
                "doc": "<p>The margin of the axis. Used to control the spacing between axes in charts with multiple axes.\nUnlike CSS where the margin is added on all 4 sides of an element, the <code>margin</code> is the total space\nthat is added horizontally for a vertical axis, vertically for a horizontal axis,\nand radially for an angular axis.</p>",
                "default": "0"
            },
            {
                "name": "maxZoom",
                "type": "number",
                "doc": "<p>The maximum zooming level for axis.</p>",
                "default": "10000"
            },
            {
                "name": "maximum",
                "type": "number",
                "doc": "<p>The maximum value drawn by the axis. If not set explicitly, the axis\nmaximum will be calculated automatically.</p>",
                "default": null
            },
            {
                "name": "minZoom",
                "type": "number",
                "doc": "<p>The minimum zooming level for axis.</p>",
                "default": "1"
            },
            {
                "name": "minimum",
                "type": "number",
                "doc": "<p>The minimum value drawn by the axis. If not set explicitly, the axis\nminimum will be calculated automatically.</p>",
                "default": null
            },
            {
                "name": "minorTickSteps",
                "type": "number",
                "doc": "<p>The number of small ticks between two major ticks.</p>",
                "default": "0"
            },
            {
                "name": "needHighPrecision",
                "type": "boolean",
                "doc": "<p>Indicates that the axis needs high precision surface implementation.\nSee Ext.draw.engine.Canvas.highPrecision</p>",
                "default": "false"
            },
            {
                "name": "position",
                "type": "string",
                "doc": "<p>Where to set the axis. Available options are <code>left</code>, <code>bottom</code>, <code>right</code>, <code>top</code>, <code>radial</code> and <code>angular</code>.</p>",
                "default": "'bottom'"
            },
            {
                "name": "radius",
                "type": "number",
                "doc": "<p>Radius of the polar axis.\nWARNING: Meant to be set automatically by chart. Do not set it manually.</p>",
                "default": null
            },
            {
                "name": "reconcileRange",
                "type": "boolean",
                "doc": "<p>If 'true' the range of the axis will be a union of ranges\nof all the axes with the same direction. Defaults to 'false'.</p>",
                "default": "false"
            },
            {
                "name": "renderer",
                "type": "function",
                "doc": "<p>Allows direct customisation of rendered axis sprites.</p>",
                "default": null
            },
            {
                "name": "rotation",
                "type": "number",
                "doc": "<p>Rotation of the polar axis.\nWARNING: Meant to be set automatically by chart. Do not set it manually.</p>",
                "default": null
            },
            {
                "name": "segmenter",
                "type": "object|ext.chart.axis.segmenter.segmenter",
                "doc": "<p>The segmenter config. See Ext.chart.axis.segmenter.Segmenter</p>",
                "default": "'numeric'"
            },
            {
                "name": "style",
                "type": "object",
                "doc": "<p>The style for the axis line and ticks.\nRefer to the Ext.chart.axis.sprite.Axis</p>",
                "default": null
            },
            {
                "name": "title",
                "type": "string|object",
                "doc": "<p>The title for the Axis.\nIf given a String, the 'text' attribute of the title sprite will be set,\notherwise the style will be set.</p>",
                "default": null
            },
            {
                "name": "titleMargin",
                "type": "number",
                "doc": "<p>The margin around the axis title. Unlike CSS where the margin is added on all 4\nsides of an element, the <code>titleMargin</code> is the total space that is added horizontally\nfor a vertical title and vertically for an horizontal title, with half the <code>titleMargin</code>\nbeing added on either side.</p>",
                "default": "4"
            },
            {
                "name": "totalAngle",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "visibleRange",
                "type": "array",
                "doc": "<p>Specify the proportion of the axis to be rendered. The series bound to\nthis axis will be synchronized and transformed accordingly.</p>",
                "default": "[0, 1]"
            }
        ],
        "events": [
            {
                "name": "rangechange",
                "params": "axis(Ext.chart.axis.Axis) range(Array) eOpts(Object)",
                "doc": "<p>Fires when the range of the axis  changes.</p>"
            },
            {
                "name": "visiblerangechange",
                "params": "axis(Ext.chart.axis.Axis) visibleRange(Array) eOpts(Object)",
                "doc": "<p>Fires when the visibleRange of the axis changes.</p>"
            }
        ]
    },
    "Ext.chart.axis.Axis3D": {
        "type": "Ext.chart.axis.Axis3D",
        "doc": "<p>Defines a 3D axis for charts.</p>",
        "configs": [
            {
                "name": "depth",
                "type": "number",
                "doc": "<p>The depth of the axis. Determined automatically.</p>",
                "default": "0"
            },
            {
                "name": "position",
                "type": "string",
                "doc": "<p>Where to set the axis. Available options are <code>left</code> and <code>bottom</code>.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.chart.axis.Category": {
        "type": "Ext.chart.axis.Category",
        "doc": "<p>A type of axis that displays items in categories. This axis is generally used to\ndisplay categorical information like names of items, month names, quarters, etc.\nbut no quantitative values. For that other type of information Numeric\naxis are more suitable.</p>",
        "configs": [
            {
                "name": "layout",
                "type": "object|ext.chart.axis.layout.layout",
                "doc": "<p>The axis layout config. See Ext.chart.axis.layout.Layout</p>",
                "default": "'combineDuplicate'"
            },
            {
                "name": "segmenter",
                "type": "object|ext.chart.axis.segmenter.segmenter",
                "doc": "<p>The segmenter config. See Ext.chart.axis.segmenter.Segmenter</p>",
                "default": "'names'"
            }
        ],
        "events": []
    },
    "Ext.chart.axis.Numeric": {
        "type": "Ext.chart.axis.Numeric",
        "doc": "<p>An axis to handle numeric values. This axis is used for quantitative data as\nopposed to the category axis. You can set minimum and maximum values to the\naxis so that the values are bound to that. If no values are set, then the\nscale will auto-adjust to the values.</p>",
        "configs": [
            {
                "name": "aggregator",
                "type": "string",
                "doc": "\n",
                "default": "'double'"
            },
            {
                "name": "layout",
                "type": "object|ext.chart.axis.layout.layout",
                "doc": "<p>The axis layout config. See Ext.chart.axis.layout.Layout</p>",
                "default": "'continuous'"
            },
            {
                "name": "segmenter",
                "type": "object|ext.chart.axis.segmenter.segmenter",
                "doc": "<p>The segmenter config. See Ext.chart.axis.segmenter.Segmenter</p>",
                "default": "'numeric'"
            }
        ],
        "events": []
    },
    "Ext.chart.axis.Time": {
        "type": "Ext.chart.axis.Time",
        "doc": "<p>A type of axis whose units are measured in time values. Use this axis\nfor listing dates that you will want to group or dynamically change.\nIf you just want to display dates as categories then use the\nCategory class for axis instead.</p>",
        "configs": [
            {
                "name": "aggregator",
                "type": "string",
                "doc": "\n",
                "default": "'time'"
            },
            {
                "name": "calculateByLabelSize",
                "type": "boolean",
                "doc": "<p>The minimum value drawn by the axis. If not set explicitly, the axis\nminimum will be calculated automatically.</p>",
                "default": "true"
            },
            {
                "name": "dateFormat",
                "type": "string/boolean",
                "doc": "<p>Indicates the format the date will be rendered on.\nFor example: 'M d' will render the dates as 'Jan 30', etc.</p>",
                "default": null
            },
            {
                "name": "fromDate",
                "type": "date",
                "doc": "<p>The starting date for the time axis.</p>",
                "default": null
            },
            {
                "name": "layout",
                "type": "object|ext.chart.axis.layout.layout",
                "doc": "<p>The axis layout config. See Ext.chart.axis.layout.Layout</p>",
                "default": "'continuous'"
            },
            {
                "name": "segmenter",
                "type": "object|ext.chart.axis.segmenter.segmenter",
                "doc": "<p>The segmenter config. See Ext.chart.axis.segmenter.Segmenter</p>",
                "default": "'time'"
            },
            {
                "name": "step",
                "type": "array",
                "doc": "<p>An array with two components:</p>",
                "default": "[Ext.Date.DAY, 1]"
            },
            {
                "name": "toDate",
                "type": "date",
                "doc": "<p>The ending date for the time axis.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.chart.axis.layout.CombineDuplicate": {
        "type": "Ext.chart.axis.layout.CombineDuplicate",
        "doc": "<p>Discrete processor that combines duplicate data points.</p>",
        "configs": [],
        "events": []
    },
    "Ext.chart.axis.layout.Continuous": {
        "type": "Ext.chart.axis.layout.Continuous",
        "doc": "<p>Processor for axis data that can be interpolated.</p>",
        "configs": [
            {
                "name": "adjustMaximumByMajorUnit",
                "type": "boolean",
                "doc": "\n",
                "default": "false"
            },
            {
                "name": "adjustMinimumByMajorUnit",
                "type": "boolean",
                "doc": "\n",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.chart.axis.layout.Discrete": {
        "type": "Ext.chart.axis.layout.Discrete",
        "doc": "<p>Simple processor for data that cannot be interpolated.</p>",
        "configs": [],
        "events": []
    },
    "Ext.chart.axis.layout.Layout": {
        "type": "Ext.chart.axis.layout.Layout",
        "doc": "<p>Interface used by Axis to process its data into a meaningful layout.</p>",
        "configs": [
            {
                "name": "axis",
                "type": "ext.chart.axis.axis",
                "doc": "<p>The axis that the Layout is bound.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.chart.axis.segmenter.Names": {
        "type": "Ext.chart.axis.segmenter.Names",
        "doc": "<p>Names data type. Names will be calculated as their indices in the methods in this class.\nThe <code>preferredStep</code> always return <code>{ unit: 1, step: 1 }</code> to indicate \"show every item\".</p>",
        "configs": [],
        "events": []
    },
    "Ext.chart.axis.segmenter.Numeric": {
        "type": "Ext.chart.axis.segmenter.Numeric",
        "doc": "<p>Numeric data type.</p>",
        "configs": [],
        "events": []
    },
    "Ext.chart.axis.segmenter.Segmenter": {
        "type": "Ext.chart.axis.segmenter.Segmenter",
        "doc": "<p>Interface for a segmenter in an Axis. A segmenter defines the operations you can do to a specific\ndata type.</p>",
        "configs": [
            {
                "name": "axis",
                "type": "ext.chart.axis.axis",
                "doc": "<p>The axis that the Segmenter is bound.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.chart.axis.segmenter.Time": {
        "type": "Ext.chart.axis.segmenter.Time",
        "doc": "<p>Time data type.</p>",
        "configs": [
            {
                "name": "step",
                "type": "object",
                "doc": "<p>If specified, the will override the result of preferredStep.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.chart.axis.sprite.Axis": {
        "type": "Ext.chart.axis.sprite.Axis",
        "doc": "<p>The axis sprite. Currently all types of the axis will be rendered with this sprite.</p>",
        "configs": [
            {
                "name": "The",
                "type": "number",
                "doc": "<p>starting rotation of the angular axis.</p>",
                "default": null
            },
            {
                "name": "axis",
                "type": "ext.chart.axis.axis",
                "doc": "<p>The axis represented by this sprite.</p>",
                "default": null
            },
            {
                "name": "axisLine",
                "type": "boolean",
                "doc": "<p>'true' if the main line of the axis is drawn.</p>",
                "default": "'bool'"
            },
            {
                "name": "centerX",
                "type": "number",
                "doc": "<p>The central point of the angular axis on the x-axis.</p>",
                "default": "'number'"
            },
            {
                "name": "centerY",
                "type": "number",
                "doc": "<p>The central point of the angular axis on the y-axis.</p>",
                "default": "'number'"
            },
            {
                "name": "dataMax",
                "type": "number",
                "doc": "<p>The maximum value of the axis data.</p>",
                "default": "'number'"
            },
            {
                "name": "dataMin",
                "type": "number",
                "doc": "<p>The minimum value of the axis data.</p>",
                "default": "'number'"
            },
            {
                "name": "endGap",
                "type": "number",
                "doc": "<p>Axis end determined by the chart inset padding.</p>",
                "default": "'number'"
            },
            {
                "name": "enlargeEstStepSizeByText",
                "type": "boolean",
                "doc": "<p>'true' if the estimated step size is adjusted by text size.</p>",
                "default": "'bool'"
            },
            {
                "name": "estStepSize",
                "type": "number",
                "doc": "<p>The estimated step size between ticks.</p>",
                "default": "'number'"
            },
            {
                "name": "grid",
                "type": "boolean",
                "doc": "<p>'true' if the axis has a grid.</p>",
                "default": "'bool'"
            },
            {
                "name": "label",
                "type": "object",
                "doc": "<p>The label configuration object for the Axis. This object may include style attributes\nlike <code>spacing</code>, <code>padding</code>, <code>font</code> that receives a string or number and\nreturns a new string with the modified values.</p>",
                "default": null
            },
            {
                "name": "layout",
                "type": "object|ext.chart.axis.layout.layout",
                "doc": "<p>The layout configuration used by the axis.</p>",
                "default": null
            },
            {
                "name": "layoutContext",
                "type": "object",
                "doc": "<p>Stores the context after calculating layout.</p>",
                "default": null
            },
            {
                "name": "length",
                "type": "number",
                "doc": "<p>The total length of the axis.</p>",
                "default": "'number'"
            },
            {
                "name": "majorTickSize",
                "type": "number",
                "doc": "<p>The length of the major ticks.</p>",
                "default": "'number'"
            },
            {
                "name": "majorTicks",
                "type": "boolean",
                "doc": "<p>'true' if the axis has major ticks.</p>",
                "default": "'bool'"
            },
            {
                "name": "max",
                "type": "number",
                "doc": "<p>The maximum value of the axis.</p>",
                "default": "'number'"
            },
            {
                "name": "min",
                "type": "number",
                "doc": "<p>The minimum value of the axis.</p>",
                "default": "'number'"
            },
            {
                "name": "minStepSize",
                "type": "number",
                "doc": "<p>The minimum step size between ticks.</p>",
                "default": "'number'"
            },
            {
                "name": "minorTickSize",
                "type": "number",
                "doc": "<p>The length of the minor ticks.</p>",
                "default": "'number'"
            },
            {
                "name": "minorTricks",
                "type": "boolean",
                "doc": "<p>'true' if the axis has sub ticks.</p>",
                "default": null
            },
            {
                "name": "position",
                "type": "string",
                "doc": "<p>The position of the axis on the chart.</p>",
                "default": "'enums(left,right,top,bottom,angular,radial,gauge)'"
            },
            {
                "name": "radius",
                "type": "number",
                "doc": "<p>Unused.</p>",
                "default": "'number'"
            },
            {
                "name": "renderer",
                "type": "function",
                "doc": "<p>Allows direct customisation of rendered axis sprites.</p>",
                "default": null
            },
            {
                "name": "segmenter",
                "type": "object|ext.chart.axis.segmenter.segmenter",
                "doc": "<p>The method of segmenter used by the axis.</p>",
                "default": null
            },
            {
                "name": "startGap",
                "type": "number",
                "doc": "<p>Axis start determined by the chart inset padding.</p>",
                "default": "'number'"
            },
            {
                "name": "textPadding",
                "type": "number",
                "doc": "<p>The padding around axis labels to determine collision.\nThe default is 0 for all axes except horizontal axes of cartesian charts,\nwhere the default is 5 to prevent axis labels from blending one into another.\nThis default is defined in the axis config\nof the Base theme.\nYou may want to change this default to a smaller number or 0, if you have\nhorizontal axis labels rotated, which allows for more text to fit in.</p>",
                "default": "0"
            },
            {
                "name": "visibleMax",
                "type": "number",
                "doc": "<p>The maximum value that is displayed.</p>",
                "default": "'number'"
            },
            {
                "name": "visibleMin",
                "type": "number",
                "doc": "<p>The minimum value that is displayed.</p>",
                "default": "'number'"
            }
        ],
        "events": []
    },
    "Ext.chart.axis.sprite.Axis3D": {
        "type": "Ext.chart.axis.sprite.Axis3D",
        "doc": "<p>The 3D axis sprite.\nOnly 3D cartesian axes are rendered with this sprite.</p>",
        "configs": [
            {
                "name": "fx",
                "type": "object",
                "doc": "\n",
                "default": "{customDurations: {depth: 0}}"
            }
        ],
        "events": []
    },
    "Ext.chart.grid.CircularGrid": {
        "type": "Ext.chart.grid.CircularGrid",
        "doc": "<p>Circular Grid sprite. Used by Radar chart to render a series of concentric circles.</p>",
        "configs": [],
        "events": []
    },
    "Ext.chart.grid.HorizontalGrid": {
        "type": "Ext.chart.grid.HorizontalGrid",
        "doc": "<p>Horizontal Grid sprite. Used in Cartesian Charts.</p>",
        "configs": [],
        "events": []
    },
    "Ext.chart.grid.HorizontalGrid3D": {
        "type": "Ext.chart.grid.HorizontalGrid3D",
        "doc": "<p>Horizontal 3D Grid sprite. Used in 3D Cartesian Charts.</p>",
        "configs": [],
        "events": []
    },
    "Ext.chart.grid.RadialGrid": {
        "type": "Ext.chart.grid.RadialGrid",
        "doc": "<p>Radial Grid sprite. Used by Radar chart to render a series of radial lines.\nRepresents the scale of the radar chart on the yField.</p>",
        "configs": [],
        "events": []
    },
    "Ext.chart.grid.VerticalGrid": {
        "type": "Ext.chart.grid.VerticalGrid",
        "doc": "<p>Vertical Grid sprite. Used in Cartesian Charts.</p>",
        "configs": [],
        "events": []
    },
    "Ext.chart.grid.VerticalGrid3D": {
        "type": "Ext.chart.grid.VerticalGrid3D",
        "doc": "<p>Vertical 3D Grid sprite. Used in 3D Cartesian Charts.</p>",
        "configs": [],
        "events": []
    },
    "Ext.chart.interactions.Abstract": {
        "type": "Ext.chart.interactions.Abstract",
        "doc": "<p>Defines a common abstract parent class for all interactions.</p>",
        "configs": [
            {
                "name": "chart",
                "type": "ext.chart.abstractchart",
                "doc": "<p>The chart that the interaction is bound.</p>",
                "default": null
            },
            {
                "name": "enabled",
                "type": "boolean",
                "doc": "<p>'true' if the interaction is enabled.</p>",
                "default": "true"
            },
            {
                "name": "gesture",
                "type": "object",
                "doc": "<p>Maps gestures that should be used for starting/maintaining/ending the interaction\nto corresponding class methods.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.chart.interactions.CrossZoom": {
        "type": "Ext.chart.interactions.CrossZoom",
        "doc": "<p>The CrossZoom interaction allows the user to zoom in on a selected area of the chart.</p>",
        "configs": [
            {
                "name": "axes",
                "type": "object/array",
                "doc": "<p>Specifies which axes should be made navigable. The config value can take the following formats:</p>",
                "default": "true"
            },
            {
                "name": "gestures",
                "type": "object",
                "doc": "\n",
                "default": "{dragstart: 'onGestureStart', drag: 'onGesture', dragend: 'onGestureEnd', dblclick: 'onDoubleTap'}"
            },
            {
                "name": "undoButton",
                "type": "object",
                "doc": "\n",
                "default": "{}"
            }
        ],
        "events": []
    },
    "Ext.chart.interactions.Crosshair": {
        "type": "Ext.chart.interactions.Crosshair",
        "doc": "<p>The Crosshair interaction allows the user to get precise values for a specific point on the chart.\nThe values are obtained by single-touch dragging on the chart.</p>",
        "configs": [
            {
                "name": "axes",
                "type": "object",
                "doc": "<p>Specifies label text and label rect configs on per axis basis or as a single config for all axes.</p>",
                "default": "{top: {label: {}, rect: {}}, right: {label: {}, rect: {}}, bottom: {label: {}, rect: {}}, left: {label: {}, rect: {}}}"
            },
            {
                "name": "gesture",
                "type": "string",
                "doc": "<p>Specifies which gesture should be used for starting/maintaining/ending the interaction.</p>",
                "default": "'drag'"
            },
            {
                "name": "lines",
                "type": "object",
                "doc": "<p>Specifies attributes of horizontal and vertical lines that make up the crosshair.\nIf this config is missing, black dashed lines will be used.</p>",
                "default": "{horizontal: {strokeStyle: 'black', lineDash: [5, 5]}, vertical: {strokeStyle: 'black', lineDash: [5, 5]}}"
            }
        ],
        "events": []
    },
    "Ext.chart.interactions.ItemHighlight": {
        "type": "Ext.chart.interactions.ItemHighlight",
        "doc": "<p>The ItemHighlight interaction allows the user to highlight series items in the chart.</p>",
        "configs": [
            {
                "name": "gestures",
                "type": "object",
                "doc": "\n",
                "default": "{tap: 'onHighlightGesture', mousemove: 'onMouseMoveGesture', mouseenter: 'onMouseEnterGesture', mouseleave: 'onMouseLeaveGesture', mousedown: 'onMouseDownGesture', mouseup: 'onMouseUpGesture'}"
            }
        ],
        "events": []
    },
    "Ext.chart.interactions.ItemInfo": {
        "type": "Ext.chart.interactions.ItemInfo",
        "doc": "<p>The ItemInfo interaction allows displaying detailed information about a series data\npoint in a popup panel.</p>",
        "configs": [
            {
                "name": "extjsGestures",
                "type": "object",
                "doc": "<p>Defines the gestures that should trigger the item info panel to be displayed in ExtJS.</p>",
                "default": "{'start': {event: 'click', handler: 'onInfoGesture'}, 'move': {event: 'mousemove', handler: 'onInfoGesture'}, 'end': {event: 'mouseleave', handler: 'onInfoGesture'}}"
            }
        ],
        "events": [
            {
                "name": "show",
                "params": "this(Ext.chart.interactions.ItemInfo) item(Object) panel(Ext.Panel) eOpts(Object)",
                "doc": "<p>Fires when the info panel is shown.</p>"
            }
        ]
    },
    "Ext.chart.interactions.PanZoom": {
        "type": "Ext.chart.interactions.PanZoom",
        "doc": "<p>The PanZoom interaction allows the user to navigate the data for one or more chart\naxes by panning and/or zooming. Navigation can be limited to particular axes. Zooming is\nperformed by pinching on the chart or axis area; panning is performed by single-touch dragging.</p>",
        "configs": [
            {
                "name": "axes",
                "type": "object/array",
                "doc": "<p>Specifies which axes should be made navigable. The config value can take the following formats:</p>",
                "default": "{top: {}, right: {}, bottom: {}, left: {}}"
            },
            {
                "name": "hideLabelInGesture",
                "type": "boolean",
                "doc": "\n",
                "default": "false"
            },
            {
                "name": "maxZoom",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "minZoom",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "modeToggleButton",
                "type": "object",
                "doc": "\n",
                "default": "{xtype: 'segmentedbutton', width: 200, defaults: {ui: 'default-toolbar'}, items: [{text: 'Pan'}, {text: 'Zoom'}], cls: Ext.baseCSSPrefix + 'panzoom-toggle'}"
            },
            {
                "name": "overflowArrowOptions",
                "type": "object",
                "doc": "<p>A set of optional overrides for the overflow arrow sprites' options. Only relevant when\nshowOverflowArrows is <code>true</code>.</p>",
                "default": null
            },
            {
                "name": "panGesture",
                "type": "string",
                "doc": "<p>Defines the gesture that initiates panning.</p>",
                "default": "'drag'"
            },
            {
                "name": "showOverflowArrows",
                "type": "boolean",
                "doc": "<p>If <code>true</code>, arrows will be conditionally shown at either end of each axis to indicate that the\naxis is overflowing and can therefore be panned in that direction. Set this to <code>false</code> to\nprevent the arrows from being displayed.</p>",
                "default": "true"
            },
            {
                "name": "zoomGesture",
                "type": "string",
                "doc": "<p>Defines the gesture that initiates zooming.</p>",
                "default": "'pinch'"
            },
            {
                "name": "zoomOnPanGesture",
                "type": "boolean",
                "doc": "<p>If <code>true</code>, the pan gesture will zoom the chart. Ignored on touch devices.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.chart.interactions.Rotate": {
        "type": "Ext.chart.interactions.Rotate",
        "doc": "<p>The Rotate interaction allows the user to rotate a polar chart about its central point.</p>",
        "configs": [
            {
                "name": "gesture",
                "type": "string",
                "doc": "<p>Defines the gesture type that will be used to rotate the chart. Currently only\nsupports <code>pinch</code> for two-finger rotation and <code>drag</code> for single-finger rotation.</p>",
                "default": "'rotate'"
            },
            {
                "name": "gestures",
                "type": "object",
                "doc": "\n",
                "default": "{rotate: 'onRotate', rotateend: 'onRotate', dragstart: 'onGestureStart', drag: 'onGesture', dragend: 'onGestureEnd'}"
            },
            {
                "name": "rotation",
                "type": "number",
                "doc": "<p>Saves the current rotation of the series. Accepts negative values and values > 360 ( / 180 * Math.PI)</p>",
                "default": "0"
            }
        ],
        "events": [
            {
                "name": "rotate",
                "params": "this(Ext.chart.interactions.Rotate) angle(Number) eOpts(Object)",
                "doc": "<p>Fires on every tick of the rotation</p>"
            },
            {
                "name": "rotationEnd",
                "params": "this(Ext.chart.interactions.Rotate) angle(Number) eOpts(Object)",
                "doc": "<p>Fires after a user finishes the rotation</p>"
            }
        ]
    },
    "Ext.chart.interactions.RotatePie3D": {
        "type": "Ext.chart.interactions.RotatePie3D",
        "doc": "<p>A special version of the Rotate interaction used by Pie3D Chart.</p>",
        "configs": [],
        "events": []
    },
    "Ext.chart.label.Callout": {
        "type": "Ext.chart.label.Callout",
        "doc": "<p>This is a modifier to place labels and callouts by additional attributes.</p>",
        "configs": [],
        "events": []
    },
    "Ext.chart.label.Label": {
        "type": "Ext.chart.label.Label",
        "doc": "<p>Sprite used to represent labels in series.</p>",
        "configs": [
            {
                "name": "calloutLine",
                "type": "boolean|object",
                "doc": "<p>True to draw a line between the label and the chart with the default settings,\nor an Object that defines the 'color', 'width' and 'length' properties of the line.\nThis config is only applicable when the label is displayed outside the chart.</p>",
                "default": "true"
            },
            {
                "name": "field",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "fx",
                "type": "object",
                "doc": "<p>Animation configuration.</p>",
                "default": "{customDurations: {callout: 200}}"
            }
        ],
        "events": []
    },
    "Ext.chart.plugin.ItemEvents": {
        "type": "Ext.chart.plugin.ItemEvents",
        "doc": "<p>A chart plugin that adds ability to listen to chart series\nitems events. Item event listeners are passed two parameters: the target item and the\nevent itself. The item object has the following properties:</p>",
        "configs": [
            {
                "name": "moveEvents",
                "type": "boolean",
                "doc": "<p>If <code>itemmousemove</code>, <code>itemmouseover</code> or <code>itemmouseout</code> event listeners are attached\nto the chart, the plugin will detect those and will hit test series items on\nevery move. However, if the above item events are attached on the series level\nonly, this config has to be set to true, as the plugin won't perform a similar\ndetection on every series.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.chart.series.Area": {
        "type": "Ext.chart.series.Area",
        "doc": "<p>Creates an Area Chart.</p>",
        "configs": [
            {
                "name": "splitStacks",
                "type": "boolean",
                "doc": "<p><code>true</code> to stack negative/positive values in respective y-axis directions.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.chart.series.Bar": {
        "type": "Ext.chart.series.Bar",
        "doc": "<p>Creates a Bar or Column Chart (depending on the value of the\nflipXY config).</p>",
        "configs": [
            {
                "name": "itemInstancing",
                "type": "object",
                "doc": "<p>Sprite template used for series.</p>",
                "default": "{type: 'rect', fx: {customDurations: {x: 0, y: 0, width: 0, height: 0, radius: 0}}}"
            }
        ],
        "events": []
    },
    "Ext.chart.series.Bar3D": {
        "type": "Ext.chart.series.Bar3D",
        "doc": "<p>Creates a 3D Bar or 3D Column Chart (depending on the value of the\nflipXY config).</p>",
        "configs": [
            {
                "name": "highlightCfg",
                "type": "object",
                "doc": "<p>The default style for the highlighted item.\nUsed when highlight config was simply set to 'true' instead of specifying a style.</p>",
                "default": "{opacity: 0.8}"
            },
            {
                "name": "itemInstancing",
                "type": "object",
                "doc": "<p>Sprite template used for series.</p>",
                "default": "{type: 'box', fx: {customDurations: {x: 0, y: 0, width: 0, height: 0, depth: 0}}}"
            }
        ],
        "events": []
    },
    "Ext.chart.series.CandleStick": {
        "type": "Ext.chart.series.CandleStick",
        "doc": "<p>Creates a candlestick or OHLC Chart.</p>",
        "configs": [
            {
                "name": "closeField",
                "type": "string",
                "doc": "<p>The store record field name that represents the closing value of the given period.</p>",
                "default": null
            },
            {
                "name": "highField",
                "type": "string",
                "doc": "<p>The store record field name that represents the highest value of the time interval represented.</p>",
                "default": null
            },
            {
                "name": "lowField",
                "type": "string",
                "doc": "<p>The store record field name that represents the lowest value of the time interval represented.</p>",
                "default": null
            },
            {
                "name": "openField",
                "type": "string",
                "doc": "<p>The store record field name that represents the opening value of the given period.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.chart.series.Cartesian": {
        "type": "Ext.chart.series.Cartesian",
        "doc": "<p>Common base class for series implementations that plot values using cartesian coordinates.</p>",
        "configs": [
            {
                "name": "xAxis",
                "type": "ext.chart.axis.axis|number|string",
                "doc": "<p>xAxis The chart axis the series is bound to in the 'X' direction.\nNormally, this would be set automatically by the series.\nFor charts with multiple x-axes, this defines which x-axis is used by the series.\nIt refers to either axis' ID or the (zero-based) index of the axis\nin the chart's axes config.</p>",
                "default": null
            },
            {
                "name": "xField",
                "type": "string",
                "doc": "<p>The field used to access the x axis value from the items from the data source.</p>",
                "default": null
            },
            {
                "name": "yAxis",
                "type": "ext.chart.axis.axis|number|string",
                "doc": "<p>yAxis The chart axis the series is bound to in the 'Y' direction.\nNormally, this would be set automatically by the series.\nFor charts with multiple y-axes, this defines which y-axis is used by the series.\nIt refers to either axis' ID or the (zero-based) index of the axis\nin the chart's axes config.</p>",
                "default": null
            },
            {
                "name": "yField",
                "type": "string|string[]",
                "doc": "<p>The field(s) used to access the y-axis value(s) of the items from the data source.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.chart.series.Gauge": {
        "type": "Ext.chart.series.Gauge",
        "doc": "<p>Creates a Gauge Chart.</p>",
        "configs": [
            {
                "name": "angleField",
                "type": "string",
                "doc": "\n",
                "default": null
            },
            {
                "name": "center",
                "type": "array",
                "doc": "\n",
                "default": "[0.5, 0.75]"
            },
            {
                "name": "colors",
                "type": "array",
                "doc": "<p>An array of color values which is used for the needle and the <code>sectors</code>.</p>",
                "default": null
            },
            {
                "name": "donut",
                "type": "number",
                "doc": "<p>Percentage of the radius of the donut hole compared to the entire disk.</p>",
                "default": "30"
            },
            {
                "name": "field",
                "type": "string",
                "doc": "<p>The store record field name to be used for the gauge value.\nThe values bound to this field name must be positive real numbers.</p>",
                "default": null
            },
            {
                "name": "maximum",
                "type": "number",
                "doc": "<p>The maximum value of the gauge.</p>",
                "default": "100"
            },
            {
                "name": "minimum",
                "type": "number",
                "doc": "<p>The minimum value of the gauge.</p>",
                "default": "0"
            },
            {
                "name": "needle",
                "type": "boolean",
                "doc": "<p>If true, display the gauge as a needle, otherwise as a sector.</p>",
                "default": "false"
            },
            {
                "name": "needleLength",
                "type": "number",
                "doc": "<p>Percentage of the length of needle compared to the radius of the entire disk.</p>",
                "default": "90"
            },
            {
                "name": "needleLengthRatio",
                "type": "number",
                "doc": "\n",
                "default": null
            },
            {
                "name": "needleWidth",
                "type": "number",
                "doc": "<p>Width of the needle in pixels.</p>",
                "default": "4"
            },
            {
                "name": "radius",
                "type": "number",
                "doc": "\n",
                "default": "0.5"
            },
            {
                "name": "rect",
                "type": "array",
                "doc": "\n",
                "default": "[0, 0, 1, 1]"
            },
            {
                "name": "rotation",
                "type": "number",
                "doc": "\n",
                "default": "0"
            },
            {
                "name": "sectors",
                "type": "array",
                "doc": "<p>Allows to paint sectors of different colors in the background of the gauge,\nwith optional labels.</p>",
                "default": null
            },
            {
                "name": "showInLegend",
                "type": "boolean",
                "doc": "<p>Whether to add the gauge chart elements as legend items.</p>",
                "default": "false"
            },
            {
                "name": "totalAngle",
                "type": "number",
                "doc": "<p>The size of the sector that the series will occupy.</p>",
                "default": null
            },
            {
                "name": "value",
                "type": "number",
                "doc": "<p>Directly sets the displayed value of the gauge.\nIt is ignored if field is provided.</p>",
                "default": null
            },
            {
                "name": "wholeDisk",
                "type": "boolean",
                "doc": "<p>Indicates whether to show the whole disk or only the marked part.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.chart.series.Line": {
        "type": "Ext.chart.series.Line",
        "doc": "<p>Creates a Line Chart. A Line Chart is a useful visualization technique to display quantitative information for different\ncategories or other real values (as opposed to the bar chart), that can show some progression (or regression) in the dataset.\nAs with all other series, the Line Series must be appended in the <em>series</em> Chart array configuration. See the Chart\ndocumentation for more information. A typical configuration object for the line series could be:</p>",
        "configs": [
            {
                "name": "aggregator",
                "type": "object",
                "doc": "\n",
                "default": "{strategy: 'double'}"
            },
            {
                "name": "fill",
                "type": "boolean",
                "doc": "<p>If set to <code>true</code>, the area underneath the line is filled with the color defined as follows, listed by priority:\n- The color that is configured for this series (Ext.chart.series.Series.colors).\n- The color that is configured for this chart (Ext.chart.AbstractChart.colors).\n- The fill color that is set in the style config.\n- The stroke color that is set in the style config, or the same color as the line.</p>",
                "default": null
            },
            {
                "name": "selectionTolerance",
                "type": "number",
                "doc": "<p>The offset distance from the cursor position to the line series to trigger events (then used for highlighting series, etc).</p>",
                "default": "20"
            },
            {
                "name": "smooth",
                "type": "boolean/number",
                "doc": "<p>If set to <code>true</code> or a non-zero number, the line will be smoothed/rounded around its points; otherwise\nstraight line segments will be drawn.</p>",
                "default": "false"
            },
            {
                "name": "step",
                "type": "boolean",
                "doc": "<p>If set to <code>true</code>, the line uses steps instead of straight lines to connect the dots.\nIt is ignored if <code>smooth</code> is true.</p>",
                "default": "false"
            },
            {
                "name": "style",
                "type": "object",
                "doc": "<p>An object containing styles for the visualization lines. These styles will override the theme styles.\nSome options contained within the style object will are described next.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.chart.series.Pie": {
        "type": "Ext.chart.series.Pie",
        "doc": "<p>Creates a Pie Chart. A Pie Chart is a useful visualization technique to display quantitative information for different\ncategories that also have a meaning as a whole.\nAs with all other series, the Pie Series must be appended in the <em>series</em> Chart array configuration. See the Chart\ndocumentation for more information. A typical configuration object for the pie series could be:</p>",
        "configs": [
            {
                "name": "Allows",
                "type": "number",
                "doc": "<p>adjustment of the radius by a specific percentage.</p>",
                "default": null
            },
            {
                "name": "Default",
                "type": "object",
                "doc": "<p>highlight config for the pie series.\nSlides highlighted pie sector outward.</p>",
                "default": null
            },
            {
                "name": "clockwise",
                "type": "boolean",
                "doc": "<p>Whether the pie slices are displayed clockwise. Default's true.</p>",
                "default": "true"
            },
            {
                "name": "donut",
                "type": "number",
                "doc": "<p>Specifies the radius of the donut hole, as a percentage of the chart's radius.\nDefaults to 0 (no donut hole).</p>",
                "default": "0"
            },
            {
                "name": "field",
                "type": "string",
                "doc": "\n",
                "default": null
            },
            {
                "name": "hidden",
                "type": "array",
                "doc": "<p>Determines which pie slices are hidden.</p>",
                "default": "[]"
            },
            {
                "name": "labelField",
                "type": "string",
                "doc": "\n",
                "default": "false"
            },
            {
                "name": "lengthField",
                "type": "string",
                "doc": "<p>The store record field name to be used for the pie slice lengths.\nThe values bound to this field name must be positive real numbers.</p>",
                "default": "false"
            },
            {
                "name": "rotation",
                "type": "number",
                "doc": "<p>The starting angle of the pie slices.</p>",
                "default": "0"
            },
            {
                "name": "style",
                "type": "object",
                "doc": "<p>Custom style configuration for the sprite used in the series.\nIt overrides the style that is provided by the current theme.</p>",
                "default": "{}"
            },
            {
                "name": "totalAngle",
                "type": "number",
                "doc": "<p>The total angle of the pie series.</p>",
                "default": "2*PI"
            }
        ],
        "events": []
    },
    "Ext.chart.series.Pie3D": {
        "type": "Ext.chart.series.Pie3D",
        "doc": "<p>Creates a 3D Pie Chart.</p>",
        "configs": [
            {
                "name": "distortion",
                "type": "number",
                "doc": "\n",
                "default": "0.5"
            },
            {
                "name": "donut",
                "type": "boolean/number",
                "doc": "<p>Whether to set the pie chart as donut chart.\nCan be set to a particular percentage to set the radius\nof the donut chart.</p>",
                "default": "false"
            },
            {
                "name": "field",
                "type": "string",
                "doc": "\n",
                "default": null
            },
            {
                "name": "lengthField",
                "type": "string",
                "doc": "<p>Not supported.</p>",
                "default": "false"
            },
            {
                "name": "rect",
                "type": "array",
                "doc": "\n",
                "default": "[0, 0, 0, 0]"
            },
            {
                "name": "rotation",
                "type": "number",
                "doc": "<p>The angle in degrees at which the first polar series item should start.</p>",
                "default": "0"
            },
            {
                "name": "thickness",
                "type": "number",
                "doc": "\n",
                "default": "35"
            }
        ],
        "events": []
    },
    "Ext.chart.series.Polar": {
        "type": "Ext.chart.series.Polar",
        "doc": "<p>Common base class for series implementations that plot values using polar coordinates.</p>",
        "configs": [
            {
                "name": "angleField",
                "type": "string",
                "doc": "<p>Alias for xField. For compatibility with ExtJS.</p>",
                "default": null
            },
            {
                "name": "center",
                "type": "array",
                "doc": "<p>for the polar series.</p>",
                "default": "[0, 0]"
            },
            {
                "name": "lengthField",
                "type": "string",
                "doc": "<p>Alias for yField. For compatibility with ExtJS.</p>",
                "default": null
            },
            {
                "name": "offsetX",
                "type": "number",
                "doc": "<p>The x-offset of center of the polar series related to the center of the boundary.</p>",
                "default": "0"
            },
            {
                "name": "offsetY",
                "type": "number",
                "doc": "<p>The y-offset of center of the polar series related to the center of the boundary.</p>",
                "default": "0"
            },
            {
                "name": "radius",
                "type": "number",
                "doc": "<p>The radius of the polar series. Set to <code>null</code> will fit the polar series to the boundary.</p>",
                "default": null
            },
            {
                "name": "rotation",
                "type": "number",
                "doc": "<p>The angle in degrees at which the first polar series item should start.</p>",
                "default": "0"
            },
            {
                "name": "showInLegend",
                "type": "boolean",
                "doc": "<p>Whether to add the series elements as legend items.</p>",
                "default": "true"
            },
            {
                "name": "xAxis",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "xField",
                "type": "string",
                "doc": "<p>The store record field name for the labels used in the radar series.</p>",
                "default": null
            },
            {
                "name": "yAxis",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "yField",
                "type": "string",
                "doc": "<p>The store record field name for the deflection of the graph in the radar series,\nor the length of the slices in the pie series.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.chart.series.Radar": {
        "type": "Ext.chart.series.Radar",
        "doc": "<p>Creates a Radar Chart. A Radar Chart is a useful visualization technique for comparing different quantitative values for\na constrained number of categories.\nAs with all other series, the Radar series must be appended in the <em>series</em> Chart array configuration. See the Chart\ndocumentation for more information. A typical configuration object for the radar series could be:</p>",
        "configs": [
            {
                "name": "style",
                "type": "object",
                "doc": "<p>An object containing styles for overriding series styles from theming.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.chart.series.Scatter": {
        "type": "Ext.chart.series.Scatter",
        "doc": "<p>Creates a Scatter Chart. The scatter plot is useful when trying to display more than two variables in the same visualization.\nThese variables can be mapped into x, y coordinates and also to an element's radius/size, color, etc.\nAs with all other series, the Scatter Series must be appended in the <em>series</em> Chart array configuration. See the Chart\ndocumentation for more information on creating charts. A typical configuration object for the scatter could be:</p>",
        "configs": [
            {
                "name": "itemInstancing",
                "type": "object",
                "doc": "<p>The sprite template used to create sprite instances in the series.</p>",
                "default": "{fx: {customDurations: {translationX: 0, translationY: 0}}}"
            }
        ],
        "events": []
    },
    "Ext.chart.series.Series": {
        "type": "Ext.chart.series.Series",
        "doc": "<p>Series is the abstract class containing the common logic to all chart series. Series includes\nmethods from Labels, Highlights, and Callouts mixins. This class implements the logic of\nanimating, hiding, showing all elements and returning the color of the series to be used as a legend item.</p>",
        "configs": [
            {
                "name": "animation",
                "type": "object",
                "doc": "<p>The series animation configuration.</p>",
                "default": null
            },
            {
                "name": "background",
                "type": "object",
                "doc": "<p>Sets the background of the surface the series is attached.</p>",
                "default": null
            },
            {
                "name": "chart",
                "type": "object",
                "doc": "<p>The chart that the series is bound.</p>",
                "default": null
            },
            {
                "name": "colors",
                "type": "array",
                "doc": "<p>An array of color values which is used, in order of appearance, by the series. Each series\ncan request one or more colors from the array. Radar, Scatter or Line charts require just\none color each. Candlestick and OHLC require two (1 for drops + 1 for rises). Pie charts<br/>\nand Stacked charts (like Column or Pie charts) require one color for each data category\nthey represent, so one color for each slice of a Pie chart or each segment of a Column chart.\nIt overrides the colors that are provided by the current theme.</p>",
                "default": null
            },
            {
                "name": "hidden",
                "type": "boolean|array",
                "doc": "\n",
                "default": "false"
            },
            {
                "name": "highlight",
                "type": "boolean/object",
                "doc": "<p>The sprite attributes that will be applied to the highlighted items in the series.\nIf set to 'true', the default highlight style from highlightCfg will be used.\nIf the value of this config is an object, it will be merged with the highlightCfg.\nIn case merging of 'highlight' and 'highlightCfg' configs in not the desired behavior,\nprovide the 'highlightCfg' instead.</p>",
                "default": "false"
            },
            {
                "name": "highlightCfg",
                "type": "object",
                "doc": "<p>The default style for the highlighted item.\nUsed when highlight config was simply set to 'true' instead of specifying a style.</p>",
                "default": null
            },
            {
                "name": "highlightItem",
                "type": "object",
                "doc": "<p>The item currently highlighted in the series.</p>",
                "default": null
            },
            {
                "name": "itemInstancing",
                "type": "object",
                "doc": "<p>The sprite template used to create sprite instances in the series.</p>",
                "default": null
            },
            {
                "name": "label",
                "type": "object",
                "doc": "<p>Object with the following properties:</p>",
                "default": "{}"
            },
            {
                "name": "labelField",
                "type": "string|string[]",
                "doc": "\n",
                "default": null
            },
            {
                "name": "labelOverflowPadding",
                "type": "number",
                "doc": "<p>Extra distance value for which the labelOverflow listener is triggered.</p>",
                "default": null
            },
            {
                "name": "marker",
                "type": "object|boolean",
                "doc": "<p>The sprite template used by marker instances on the series.\nIf the value of the marker config is set to <code>true</code> or the type\nof the sprite instance is not specified, the Ext.draw.sprite.Circle\nsprite will be used.</p>",
                "default": null
            },
            {
                "name": "markerSubStyle",
                "type": "object",
                "doc": "<p>This is cyclic used if series have multiple marker sprites.</p>",
                "default": null
            },
            {
                "name": "overlaySurface",
                "type": "object",
                "doc": "<p>The surface that series markers are attached.</p>",
                "default": null
            },
            {
                "name": "renderer",
                "type": "function",
                "doc": "<p>A function that can be provided to set custom styling properties to each rendered element.\nIt receives <code>(sprite, config, rendererData, index)</code> as parameters.</p>",
                "default": null
            },
            {
                "name": "showInLegend",
                "type": "boolean",
                "doc": "<p>Whether to show this series in the legend.</p>",
                "default": "true"
            },
            {
                "name": "showMarkers",
                "type": "boolean",
                "doc": "<p>Whether markers should be displayed at the data points along the line. If true,\nthen the marker config item will determine the markers' styling.</p>",
                "default": "true"
            },
            {
                "name": "store",
                "type": "object",
                "doc": "<p>The store of values used in the series.</p>",
                "default": null
            },
            {
                "name": "style",
                "type": "object",
                "doc": "<p>Custom style configuration for the sprite used in the series.\nIt overrides the style that is provided by the current theme.</p>",
                "default": "{}"
            },
            {
                "name": "subStyle",
                "type": "object",
                "doc": "<p>This is the cyclic used if the series has multiple sprites.</p>",
                "default": "{}"
            },
            {
                "name": "surface",
                "type": "object",
                "doc": "<p>The surface that the series is attached.</p>",
                "default": null
            },
            {
                "name": "themeStyle",
                "type": "object",
                "doc": "<p>Style configuration that is provided by the current theme.\nIt is composed of five objects:</p>",
                "default": "{}"
            },
            {
                "name": "title",
                "type": "string|string[]",
                "doc": "<p>The human-readable name of the series (displayed in the legend).</p>",
                "default": null
            },
            {
                "name": "tooltip",
                "type": "object",
                "doc": "<p>Add tooltips to the visualization's markers. The options for the tooltip are the\nsame configuration used with Ext.tip.ToolTip. For example:</p>",
                "default": null
            },
            {
                "name": "triggerAfterDraw",
                "type": "boolean",
                "doc": "<p>triggerdrawlistener flag</p>",
                "default": "false"
            },
            {
                "name": "useDarkerStrokeColor",
                "type": "boolean|number",
                "doc": "<p>Colors for the series can be set directly through the 'colors' config, or indirectly\nwith the current theme or the 'colors' config that is set onto the chart. These colors\nare used as \"fill color\". Set this config to true, if you want a darker color for the\nstrokes. Set it to false if you want to use the same color as the fill color.\nAlternatively, you can set it to a number between 0 and 1 to control how much darker\nthe strokes should be.</p>",
                "default": "true"
            }
        ],
        "events": [
            {
                "name": "chartattached",
                "params": "chart(Ext.chart.AbstractChart) series(Ext.chart.series.Series) eOpts(Object)",
                "doc": "<p>Fires when the Ext.chart.AbstractChart has been attached to this series.</p>"
            },
            {
                "name": "chartdetached",
                "params": "chart(Ext.chart.AbstractChart) series(Ext.chart.series.Series) eOpts(Object)",
                "doc": "<p>Fires when the Ext.chart.AbstractChart has been detached from this series.</p>"
            },
            {
                "name": "itemclick",
                "params": "series(Ext.chart.series.Series) item(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when a click event occurs on a series item.\n<em>Note</em>: This event requires the chartitemevents\nplugin be added to the chart.</p>"
            },
            {
                "name": "itemdblclick",
                "params": "series(Ext.chart.series.Series) item(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when a double click event occurs on a series item.\n<em>Note</em>: This event requires the chartitemevents\nplugin be added to the chart.</p>"
            },
            {
                "name": "itemmousedown",
                "params": "series(Ext.chart.series.Series) item(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when a mousedown event occurs on a series item.\n<em>Note</em>: This event requires the chartitemevents\nplugin be added to the chart.</p>"
            },
            {
                "name": "itemmousemove",
                "params": "series(Ext.chart.series.Series) item(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when the mouse is moved on a series item.\n<em>Note</em>: This event requires the chartitemevents\nplugin be added to the chart.</p>"
            },
            {
                "name": "itemmouseout",
                "params": "series(Ext.chart.series.Series) item(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when the mouse exits a series item.\n<em>Note</em>: This event requires the chartitemevents\nplugin be added to the chart.</p>"
            },
            {
                "name": "itemmouseover",
                "params": "series(Ext.chart.series.Series) item(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when the mouse enters a series item.\n<em>Note</em>: This event requires the chartitemevents\nplugin be added to the chart.</p>"
            },
            {
                "name": "itemmouseup",
                "params": "series(Ext.chart.series.Series) item(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when a mouseup event occurs on a series item.\n<em>Note</em>: This event requires the chartitemevents\nplugin be added to the chart.</p>"
            },
            {
                "name": "itemtap",
                "params": "series(Ext.chart.series.Series) item(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when a tap event occurs on a series item.\n<em>Note</em>: This event requires the chartitemevents\nplugin be added to the chart.</p>"
            }
        ]
    },
    "Ext.chart.series.StackedCartesian": {
        "type": "Ext.chart.series.StackedCartesian",
        "doc": "<p>Abstract class for all the stacked cartesian series including area series\nand bar series.</p>",
        "configs": [
            {
                "name": "fullStack",
                "type": "boolean",
                "doc": "<p>If <code>true</code>, the height of a stacked bar is always the full height of the chart,\nwith individual components viewed as shares of the whole determined by the\nfullStackTotal config.</p>",
                "default": "false"
            },
            {
                "name": "fullStackTotal",
                "type": "boolean",
                "doc": "<p>If the fullStack config is set to <code>true</code>, this will determine\nthe absolute total value of each stack.</p>",
                "default": "100"
            },
            {
                "name": "hidden",
                "type": "array",
                "doc": "\n",
                "default": "[]"
            },
            {
                "name": "splitStacks",
                "type": "boolean",
                "doc": "<p><code>true</code> to stack negative/positive values in respective y-axis directions.</p>",
                "default": "true"
            },
            {
                "name": "stacked",
                "type": "boolean",
                "doc": "<p><code>true</code> to display the series in its stacked configuration.</p>",
                "default": "true"
            }
        ],
        "events": []
    },
    "Ext.chart.series.sprite.Aggregative": {
        "type": "Ext.chart.series.sprite.Aggregative",
        "configs": [
            {
                "name": "aggregator",
                "type": "object",
                "doc": "\n",
                "default": "{}"
            },
            {
                "name": "dataClose",
                "type": "object",
                "doc": "<p>Data items representing the closing values of the aggregated data.</p>",
                "default": "null"
            },
            {
                "name": "dataHigh",
                "type": "object",
                "doc": "<p>Data items representing the high values of the aggregated data.</p>",
                "default": "null"
            },
            {
                "name": "dataLow",
                "type": "object",
                "doc": "<p>Data items representing the low values of the aggregated data.</p>",
                "default": "null"
            },
            {
                "name": "dataOpen",
                "type": "object",
                "doc": "<p>Data items representing the opening values of the aggregated data.</p>",
                "default": "null"
            }
        ],
        "events": []
    },
    "Ext.chart.series.sprite.Area": {
        "type": "Ext.chart.series.sprite.Area",
        "doc": "<p>Area series sprite.</p>",
        "configs": [
            {
                "name": "step",
                "type": "boolean",
                "doc": "<p>'true' if the area is represented with steps instead of lines.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.chart.series.sprite.Bar": {
        "type": "Ext.chart.series.sprite.Bar",
        "doc": "<p>Draws a sprite used in the bar series.</p>",
        "configs": [
            {
                "name": "inGroupGapWidth",
                "type": "number",
                "doc": "<p>The gap between grouped bars.</p>",
                "default": "3"
            },
            {
                "name": "maxBarWidth",
                "type": "number",
                "doc": "<p>The maximum bar width.</p>",
                "default": "100"
            },
            {
                "name": "minBarWidth",
                "type": "number",
                "doc": "<p>The minimum bar width.</p>",
                "default": "2"
            },
            {
                "name": "minGapWidth",
                "type": "number",
                "doc": "<p>The minimum gap between bars.</p>",
                "default": "5"
            },
            {
                "name": "radius",
                "type": "number",
                "doc": "<p>The degree of rounding for rounded bars.</p>",
                "default": "0"
            }
        ],
        "events": []
    },
    "Ext.chart.series.sprite.Bar3D": {
        "type": "Ext.chart.series.sprite.Bar3D",
        "doc": "<p>Draws a sprite used in Ext.chart.series.Bar3D series.</p>",
        "configs": [
            {
                "name": "series",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "showStroke",
                "type": "boolean",
                "doc": "\n",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.chart.series.sprite.Box": {
        "type": "Ext.chart.series.sprite.Box",
        "doc": "<p>A sprite that represents a 3D bar or column.\nUsed as an item template by the Ext.chart.series.sprite.Bar3D marker holder.</p>",
        "configs": [
            {
                "name": "brightnessFactor",
                "type": "number",
                "doc": "<p>The factor applied to the brightness of the box.</p>",
                "default": "1"
            },
            {
                "name": "depth",
                "type": "number",
                "doc": "<p>The depth of the box.</p>",
                "default": "8"
            },
            {
                "name": "height",
                "type": "number",
                "doc": "<p>The height of the box.</p>",
                "default": "8"
            },
            {
                "name": "orientation",
                "type": "string",
                "doc": "<p>The orientation of the box.</p>",
                "default": "'vertical'"
            },
            {
                "name": "saturationFactor",
                "type": "number",
                "doc": "<p>The factor applied to the saturation of the box.</p>",
                "default": "1"
            },
            {
                "name": "showStroke",
                "type": "boolean",
                "doc": "<p>Whether to render the stroke or not.</p>",
                "default": "false"
            },
            {
                "name": "width",
                "type": "number",
                "doc": "<p>The width of the box.</p>",
                "default": "8"
            },
            {
                "name": "x",
                "type": "number",
                "doc": "<p>The position of the sprite on the x-axis.\nCorresponds to the center of the front face of the box.</p>",
                "default": "0"
            },
            {
                "name": "y",
                "type": "number",
                "doc": "<p>The position of the sprite on the y-axis.\nCorresponds to the top of the front face of the box.</p>",
                "default": "0"
            }
        ],
        "events": []
    },
    "Ext.chart.series.sprite.CandleStick": {
        "type": "Ext.chart.series.sprite.CandleStick",
        "doc": "<p>CandleStick series sprite.</p>",
        "configs": [
            {
                "name": "barWidth",
                "type": "number",
                "doc": "<p>The bar width of the candles.</p>",
                "default": "15"
            },
            {
                "name": "ohlcType",
                "type": "string",
                "doc": "<p>Determines whether candlestick or ohlc is used.</p>",
                "default": "'candlestick'"
            },
            {
                "name": "padding",
                "type": "number",
                "doc": "<p>The amount of padding between candles.</p>",
                "default": "3"
            }
        ],
        "events": []
    },
    "Ext.chart.series.sprite.Cartesian": {
        "type": "Ext.chart.series.sprite.Cartesian",
        "doc": "<p>Cartesian sprite.</p>",
        "configs": [
            {
                "name": "If",
                "type": "boolean",
                "doc": "<p>flipXY is 'true', the series is flipped.</p>",
                "default": null
            },
            {
                "name": "dataMaxX",
                "type": "number",
                "doc": "<p>Data maximum on the x-axis.</p>",
                "default": "1"
            },
            {
                "name": "dataMaxY",
                "type": "number",
                "doc": "<p>Data maximum on the y-axis.</p>",
                "default": "2"
            },
            {
                "name": "dataMinX",
                "type": "number",
                "doc": "<p>Data minimum on the x-axis.</p>",
                "default": "0"
            },
            {
                "name": "dataMinY",
                "type": "number",
                "doc": "<p>Data minimum on the y-axis.</p>",
                "default": "0"
            },
            {
                "name": "dataX",
                "type": "object",
                "doc": "<p>Data items on the x-axis.</p>",
                "default": "null"
            },
            {
                "name": "dataY",
                "type": "object",
                "doc": "<p>Data items on the y-axis.</p>",
                "default": "null"
            },
            {
                "name": "field",
                "type": "string",
                "doc": "<p>The store field used by the series.</p>",
                "default": null
            },
            {
                "name": "labelOverflowPadding",
                "type": "number",
                "doc": "<p>Padding around labels to determine overlap.</p>",
                "default": "10"
            },
            {
                "name": "labels",
                "type": "object",
                "doc": "<p>Labels used in the series.</p>",
                "default": "null"
            },
            {
                "name": "rangeX",
                "type": "array",
                "doc": "<p>Data range derived from all the series bound to the x-axis.</p>",
                "default": "'data'"
            },
            {
                "name": "rangeY",
                "type": "array",
                "doc": "<p>Data range derived from all the series bound to the y-axis.</p>",
                "default": "'data'"
            },
            {
                "name": "selectionTolerance",
                "type": "number",
                "doc": "<p>The distance from the event position to the sprite's data points to trigger interactions (used for 'iteminfo', etc).</p>",
                "default": "20"
            },
            {
                "name": "store",
                "type": "object",
                "doc": "<p>The store that is passed to the renderer.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.chart.series.sprite.Line": {
        "type": "Ext.chart.series.sprite.Line",
        "doc": "<p>Line series sprite.</p>",
        "configs": [
            {
                "name": "fillArea",
                "type": "boolean",
                "doc": "<p><code>true</code> if the sprite paints the area underneath the line.</p>",
                "default": "false"
            },
            {
                "name": "preciseStroke",
                "type": "boolean",
                "doc": "<p><code>true</code> if the line uses precise stroke.</p>",
                "default": "true"
            },
            {
                "name": "smooth",
                "type": "boolean",
                "doc": "<p><code>true</code> if the sprite uses line smoothing.\nDon't enable this if your data has gaps: NaN, undefined, etc.</p>",
                "default": "false"
            },
            {
                "name": "step",
                "type": "boolean",
                "doc": "<p><code>true</code> if the line uses steps instead of straight lines to connect the dots.\nIt is ignored if <code>smooth</code> is <code>true</code>.</p>",
                "default": "false"
            },
            {
                "name": "yCap",
                "type": "number",
                "doc": "<p>Absolute maximum y-value.\nLarger values will be capped to avoid rendering issues.</p>",
                "default": "Math.pow(2, 20)"
            }
        ],
        "events": []
    },
    "Ext.chart.series.sprite.Pie3DPart": {
        "type": "Ext.chart.series.sprite.Pie3DPart",
        "doc": "<p>Pie3D series sprite.</p>",
        "configs": [
            {
                "name": "baseColor",
                "type": "object",
                "doc": "<p>The color of the 3D pie part before adding the 3D effect.</p>",
                "default": "'white'"
            },
            {
                "name": "baseRotation",
                "type": "number",
                "doc": "<p>The starting rotation of the polar series.</p>",
                "default": "0"
            },
            {
                "name": "centerX",
                "type": "number",
                "doc": "<p>The central point of the series on the x-axis.</p>",
                "default": "0"
            },
            {
                "name": "centerY",
                "type": "number",
                "doc": "<p>The central point of the series on the x-axis.</p>",
                "default": "0"
            },
            {
                "name": "distortion",
                "type": "number",
                "doc": "<p>The distortion of the 3D pie part.</p>",
                "default": "0"
            },
            {
                "name": "endAngle",
                "type": "number",
                "doc": "<p>The ending angle of the polar series.</p>",
                "default": "Math.PI"
            },
            {
                "name": "endRho",
                "type": "number",
                "doc": "<p>The ending radius of the polar series.</p>",
                "default": "150"
            },
            {
                "name": "margin",
                "type": "number",
                "doc": "<p>Margin from the center of the pie. Used for donut.</p>",
                "default": "0"
            },
            {
                "name": "part",
                "type": "string",
                "doc": "<p>The part of the 3D Pie represented by the sprite.</p>",
                "default": "'top'"
            },
            {
                "name": "startAngle",
                "type": "number",
                "doc": "<p>The starting angle of the polar series.</p>",
                "default": "0"
            },
            {
                "name": "startRho",
                "type": "number",
                "doc": "<p>The starting radius of the polar series.</p>",
                "default": "0"
            },
            {
                "name": "thickness",
                "type": "number",
                "doc": "<p>The thickness of the 3D pie part.</p>",
                "default": "0"
            }
        ],
        "events": []
    },
    "Ext.chart.series.sprite.PieSlice": {
        "type": "Ext.chart.series.sprite.PieSlice",
        "doc": "<p>Pie slice sprite.</p>",
        "configs": [
            {
                "name": "doCallout",
                "type": "boolean",
                "doc": "<p>'true' if the pie series uses label callouts.</p>",
                "default": "true"
            },
            {
                "name": "label",
                "type": "string",
                "doc": "<p>Label associated with the Pie sprite.</p>",
                "default": "''"
            },
            {
                "name": "labelOverflowPadding",
                "type": "number",
                "doc": "<p>Padding around labels to determine overlap.\nAny negative number allows the labels to overlap.</p>",
                "default": "10"
            },
            {
                "name": "rendererData",
                "type": "object",
                "doc": "<p>The object that is passed to the renderer.</p>",
                "default": null
            },
            {
                "name": "rendererIndex",
                "type": "number",
                "doc": "\n",
                "default": "0"
            }
        ],
        "events": []
    },
    "Ext.chart.series.sprite.Polar": {
        "type": "Ext.chart.series.sprite.Polar",
        "doc": "<p>Polar sprite.</p>",
        "configs": [
            {
                "name": "baseRotation",
                "type": "number",
                "doc": "<p>The starting rotation of the polar series.</p>",
                "default": "0"
            },
            {
                "name": "centerX",
                "type": "number",
                "doc": "<p>The central point of the series on the x-axis.</p>",
                "default": "0"
            },
            {
                "name": "centerY",
                "type": "number",
                "doc": "<p>The central point of the series on the y-axis.</p>",
                "default": "0"
            },
            {
                "name": "dataMaxX",
                "type": "number",
                "doc": "<p>Data maximum on the x-axis.</p>",
                "default": "1"
            },
            {
                "name": "dataMaxY",
                "type": "number",
                "doc": "<p>Data maximum on the y-axis.</p>",
                "default": "2"
            },
            {
                "name": "dataMinX",
                "type": "number",
                "doc": "<p>Data minimum on the x-axis.</p>",
                "default": "0"
            },
            {
                "name": "dataMinY",
                "type": "number",
                "doc": "<p>Data minimum on the y-axis.</p>",
                "default": "0"
            },
            {
                "name": "dataX",
                "type": "object",
                "doc": "<p>Data items on the x-axis.</p>",
                "default": "null"
            },
            {
                "name": "dataY",
                "type": "object",
                "doc": "<p>Data items on the y-axis.</p>",
                "default": "null"
            },
            {
                "name": "endAngle",
                "type": "number",
                "doc": "<p>The ending angle of the polar series.</p>",
                "default": "Math.PI"
            },
            {
                "name": "endRho",
                "type": "number",
                "doc": "<p>The ending radius of the polar series.</p>",
                "default": "150"
            },
            {
                "name": "field",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "labelOverflowPadding",
                "type": "number",
                "doc": "<p>Padding around labels to determine overlap.</p>",
                "default": "10"
            },
            {
                "name": "labels",
                "type": "object",
                "doc": "<p>Labels used in the series.</p>",
                "default": "null"
            },
            {
                "name": "rangeX",
                "type": "array",
                "doc": "<p>Data range derived from all the series bound to the x-axis.</p>",
                "default": "'data'"
            },
            {
                "name": "rangeY",
                "type": "array",
                "doc": "<p>Data range derived from all the series bound to the y-axis.</p>",
                "default": "'data'"
            },
            {
                "name": "startAngle",
                "type": "number",
                "doc": "<p>The starting angle of the polar series.</p>",
                "default": "0"
            },
            {
                "name": "startRho",
                "type": "number",
                "doc": "<p>The starting radius of the polar series.</p>",
                "default": "0"
            },
            {
                "name": "store",
                "type": "object",
                "doc": "<p>The store that is passed to the renderer.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.chart.series.sprite.Radar": {
        "type": "Ext.chart.series.sprite.Radar",
        "doc": "<p>Radar series sprite.</p>",
        "configs": [],
        "events": []
    },
    "Ext.chart.series.sprite.Scatter": {
        "type": "Ext.chart.series.sprite.Scatter",
        "doc": "<p>Scatter series sprite.</p>",
        "configs": [],
        "events": []
    },
    "Ext.chart.series.sprite.StackedCartesian": {
        "type": "Ext.chart.series.sprite.StackedCartesian",
        "doc": "<p>Stacked cartesian sprite.</p>",
        "configs": [
            {
                "name": "dataStartY",
                "type": "object",
                "doc": "<p>The starting point of the data used in the series.</p>",
                "default": "null"
            },
            {
                "name": "groupCount",
                "type": "number",
                "doc": "<p>The number of items (e.g. bars) in a group.</p>",
                "default": "1"
            },
            {
                "name": "groupOffset",
                "type": "number",
                "doc": "<p>The group index of the series sprite.</p>",
                "default": "0"
            }
        ],
        "events": []
    },
    "Ext.chart.theme.Base": {
        "type": "Ext.chart.theme.Base",
        "doc": "<p>Abstract class that provides default styles for non-specified things.\nShould be sub-classed when creating new themes.\nFor example:</p>",
        "configs": [
            {
                "name": "axis",
                "type": "object",
                "doc": "<p>Theme defaults for the axes.\nCan apply to all axes or only axes with a specific position.\nFor example:</p>",
                "default": "{defaults: {label: {x: 0, y: 0, textBaseline: 'middle', textAlign: 'center', fontSize: 'default', fontFamily: 'default', fontWeight: 'default', fillStyle: 'black'}, title: {fillStyle: 'black', fontSize: 'default*1.23', fontFamily: 'default', fontWeight: 'default'}, style: {strokeStyle: 'black'}, grid: {strokeStyle: 'rgb(221, 221, 221)'}}, top: {style: {textPadding: 5}}, bottom: {style: {textPadding: 5}}}"
            },
            {
                "name": "background",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "baseColor",
                "type": "string/ext.draw.color",
                "doc": "<p>The base color used to generate the Ext.chart.AbstractChart.colors of the theme.</p>",
                "default": null
            },
            {
                "name": "chart",
                "type": "object",
                "doc": "<p>Theme defaults for the chart.\nCan apply to all charts or just a specific type of chart.\nFor example:</p>",
                "default": "{defaults: {background: 'white'}}"
            },
            {
                "name": "colors",
                "type": "array",
                "doc": "<p>Array of colors/gradients to be used by the theme.\nDefaults to colorDefaults.</p>",
                "default": null
            },
            {
                "name": "gradients",
                "type": "object",
                "doc": "<p>The gradient config to be used by series' sprites. E.g.:</p>",
                "default": null
            },
            {
                "name": "markerThemes",
                "type": "object",
                "doc": "\n",
                "default": "{type: ['circle', 'cross', 'plus', 'square', 'triangle', 'diamond']}"
            },
            {
                "name": "series",
                "type": "object",
                "doc": "<p>Theme defaults for the series.\nCan apply to all series or just a specific type of series.\nFor example:</p>",
                "default": "{defaults: {label: {fontFamily: 'default', fontWeight: 'default', fontSize: 'default*1.077', textBaseline: 'middle', textAlign: 'center'}, labelOverflowPadding: 5}}"
            },
            {
                "name": "seriesThemes",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "sprites",
                "type": "object",
                "doc": "<p>Default style for the custom chart sprites by type.\nFor example:</p>",
                "default": "{text: {fontSize: 'default', fontWeight: 'default', fontFamily: 'default', fillStyle: 'black'}}"
            },
            {
                "name": "useGradients",
                "type": "boolean",
                "doc": "\n",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.chart.theme.Default": {
        "type": "Ext.chart.theme.Default",
        "configs": [],
        "events": []
    },
    "Ext.container.ButtonGroup": {
        "type": "Ext.container.ButtonGroup",
        "doc": "<p>Provides a container for arranging a group of related Buttons in a tabular manner.</p>",
        "configs": [
            {
                "name": "animCollapse",
                "type": "boolean",
                "doc": "\n",
                "default": null
            },
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to elements within this\ncomponent like Panel's body will get a class <code>x-panel-body</code>. This means that if you create a subclass of Panel, and\nyou want it to get all the Panels styling for the element and the body, you leave the <code>baseCls</code> <code>x-panel</code> and use\n<code>componentCls</code> to add specific styling for this component.</p>",
                "default": "Ext.baseCSSPrefix + 'btn-group'"
            },
            {
                "name": "closable",
                "type": "boolean",
                "doc": "\n",
                "default": null
            },
            {
                "name": "collapseMode",
                "type": "boolean",
                "doc": "\n",
                "default": null
            },
            {
                "name": "collapsible",
                "type": "boolean",
                "doc": "\n",
                "default": null
            },
            {
                "name": "columns",
                "type": "number",
                "doc": "<p>The <code>columns</code> configuration property passed to the configured layout manager.\nSee Ext.layout.container.Table.columns.</p>",
                "default": null
            },
            {
                "name": "defaultButtonUI",
                "type": "string",
                "doc": "<p>A default ui to use for Button items</p>",
                "default": null
            },
            {
                "name": "defaultType",
                "type": "string",
                "doc": "<p>The default xtype of child Components to create in this Container when\na child item is specified as a raw configuration object, rather than as an instantiated Component.</p>",
                "default": "'button'"
            },
            {
                "name": "frame",
                "type": "boolean",
                "doc": "<p>True to apply a frame to the panel.</p>",
                "default": "true"
            },
            {
                "name": "layout",
                "type": "ext.enums.layout/object",
                "doc": "<p><strong>Important</strong>: In order for child items to be correctly sized and\npositioned, typically a layout manager <strong>must</strong> be specified through\nthe <code>layout</code> configuration option.</p>",
                "default": "{type: 'table'}"
            },
            {
                "name": "titleAlign",
                "type": "string",
                "doc": "<p>The alignment of the title text within the available space between the icon and the tools.</p>",
                "default": "'center'"
            },
            {
                "name": "tools",
                "type": "array",
                "doc": "\n",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.container.Container": {
        "type": "Ext.container.Container",
        "doc": "<p>Base class for any Ext.Component that may contain other Components. Containers handle the basic behavior of\ncontaining items, namely adding, inserting and removing items.</p>",
        "configs": [
            {
                "name": "activeItem",
                "type": "string/number",
                "doc": "<p>A string component id or the numeric index of the component that should be\ninitially activated within the container's layout on render.  For example,\nactiveItem: 'item-1' or activeItem: 0 (index 0 = the first item in the\ncontainer's collection).  activeItem only applies to layout styles that can\ndisplay items one at a time (like Ext.layout.container.Card and\nExt.layout.container.Fit).</p>",
                "default": null
            },
            {
                "name": "anchorSize",
                "type": "number/object",
                "doc": "<p>Defines the anchoring size of container.\nEither a number to define the width of the container or an object with <code>width</code> and <code>height</code> fields.</p>",
                "default": null
            },
            {
                "name": "autoDestroy",
                "type": "boolean",
                "doc": "<p>If true the container will automatically destroy any contained component that is removed\nfrom it, else destruction must be handled manually.</p>",
                "default": "true"
            },
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to elements within this\ncomponent like Panel's body will get a class <code>x-panel-body</code>. This means that if you create a subclass of Panel, and\nyou want it to get all the Panels styling for the element and the body, you leave the <code>baseCls</code> <code>x-panel</code> and use\n<code>componentCls</code> to add specific styling for this component.</p>",
                "default": "Ext.baseCSSPrefix + 'container'"
            },
            {
                "name": "bubbleEvents",
                "type": "string[]",
                "doc": "<p>An array of events that, when fired, should be bubbled to any parent container.\nSee Ext.util.Observable.enableBubble.</p>",
                "default": null
            },
            {
                "name": "defaultFocus",
                "type": "string",
                "doc": "<p>Specifies a child Component to receive focus when this Container's focus\nmethod is called. Should be a valid query selector.</p>",
                "default": null
            },
            {
                "name": "defaultType",
                "type": "string",
                "doc": "<p>The default xtype of child Components to create in this Container when\na child item is specified as a raw configuration object, rather than as an instantiated Component.</p>",
                "default": "\"panel\""
            },
            {
                "name": "defaults",
                "type": "object/function",
                "doc": "<p>This option is a means of applying default settings to all added items whether added\nthrough the items config or via the add or insert methods.</p>",
                "default": null
            },
            {
                "name": "detachOnRemove",
                "type": "boolean",
                "doc": "<p>True to move any component to the detachedBody when the component is\nremoved from this container. This option is only applicable when the component is not destroyed while\nbeing removed, see autoDestroy and remove. If this option is set to false, the DOM\nof the component will remain in the current place until it is explicitly moved.</p>",
                "default": "true"
            },
            {
                "name": "items",
                "type": "object/object[]",
                "doc": "<p>A single item, or an array of child Components to be added to this container</p>",
                "default": null
            },
            {
                "name": "layout",
                "type": "ext.enums.layout/object",
                "doc": "<p><strong>Important</strong>: In order for child items to be correctly sized and\npositioned, typically a layout manager <strong>must</strong> be specified through\nthe <code>layout</code> configuration option.</p>",
                "default": "'auto'"
            },
            {
                "name": "referenceHolder",
                "type": "boolean",
                "doc": "<p>If <code>true</code>, this container will be marked as being a point in the hierarchy where\nreferences to items with a specified <code>reference</code> config will be held. The container\nwill automatically become a referenceHolder if a controller is specified.</p>",
                "default": null
            },
            {
                "name": "renderTpl",
                "type": "ext.xtemplate/string/string[]",
                "doc": "<p>An XTemplate used to create the internal structure inside this Component's encapsulating\nElement.</p>",
                "default": "'{%this.renderContainer(out,values)%}'"
            },
            {
                "name": "suspendLayout",
                "type": "boolean",
                "doc": "<p>If true, suspend calls to doLayout. Useful when batching multiple adds to a container\nand not passing them as multiple arguments or an array.</p>",
                "default": "false"
            }
        ],
        "events": [
            {
                "name": "add",
                "params": "this(Ext.container.Container) component(Ext.Component) index(Number) eOpts(Object)",
                "doc": "<p>Fires after any Ext.Component is added or inserted into the container.</p>"
            },
            {
                "name": "afterlayout",
                "params": "this(Ext.container.Container) layout(Ext.layout.container.Container) eOpts(Object)",
                "doc": "<p>Fires when the components in this container are arranged by the associated layout manager.</p>"
            },
            {
                "name": "beforeadd",
                "params": "this(Ext.container.Container) component(Ext.Component) index(Number) eOpts(Object)",
                "doc": "<p>Fires before any Ext.Component is added or inserted into the container.\nA handler can return false to cancel the add.</p>"
            },
            {
                "name": "beforeremove",
                "params": "this(Ext.container.Container) component(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires before any Ext.Component is removed from the container.  A handler can return\nfalse to cancel the remove.</p>"
            },
            {
                "name": "childmove",
                "params": "this(Ext.container.Container) component(Ext.Component) prevIndex(Ext.Component) newIndex(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires after any Ext.Component has changed its ordinal position within the container.</p>"
            },
            {
                "name": "remove",
                "params": "this(Ext.container.Container) component(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires after any Ext.Component is removed from the container.</p>"
            }
        ]
    },
    "Ext.container.DockingContainer": {
        "type": "Ext.container.DockingContainer",
        "configs": [
            {
                "name": "defaultDockWeights",
                "type": "object",
                "doc": "<p>This object holds the default weights applied to dockedItems that have no weight. These start with a\nweight of 1, to allow negative weights to insert before top items and are odd numbers\nso that even weights can be used to get between different dock orders.</p>",
                "default": "{top: {render: 1, visual: 1}, left: {render: 3, visual: 5}, right: {render: 5, visual: 7}, bottom: {render: 7, visual: 3}}"
            }
        ],
        "events": [
            {
                "name": "dockedadd",
                "params": "this(Ext.panel.Panel) component(Ext.Component) index(Number) eOpts(Object)",
                "doc": "<p>Fires when any Ext.Component is added or inserted as a docked item.</p>"
            },
            {
                "name": "dockedremove",
                "params": "this(Ext.panel.Panel) component(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires when any Ext.Component is removed from the docked items.</p>"
            }
        ]
    },
    "Ext.container.Monitor": {
        "type": "Ext.container.Monitor",
        "doc": "<p>This is a utility class for being able to track all items of a particular type\ninside any level at a container. This can be used in favour of bubbling add/remove events\nwhich can add a large perf cost when implemented globally</p>",
        "configs": [],
        "events": []
    },
    "Ext.container.Viewport": {
        "type": "Ext.container.Viewport",
        "doc": "<p>A specialized container representing the viewable application area (the browser viewport).</p>",
        "configs": [
            {
                "name": "allowDomMove",
                "type": "boolean",
                "doc": "\n",
                "default": null
            },
            {
                "name": "height",
                "type": "number",
                "doc": "<p>Sets itself to viewport width.</p>",
                "default": null
            },
            {
                "name": "maxUserScale",
                "type": "number",
                "doc": "<p>The maximum zoom scale. Only applicable for touch devices. Set this to 1 to\ndisable zooming.</p>",
                "default": "10"
            },
            {
                "name": "renderTo",
                "type": "string/htmlelement/ext.dom.element",
                "doc": "<p>Always renders to document body.</p>",
                "default": null
            },
            {
                "name": "width",
                "type": "number",
                "doc": "<p>Sets itself to viewport height.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.dashboard.Column": {
        "type": "Ext.dashboard.Column",
        "doc": "<p>This class manages columns in a <code>Dashboard</code>. The primary role here is the <code>defaultType</code>\nconfig which points to <code>Ext.dashboard.Panel</code> and the self-destruct mechanism to get\nrid of empty columns.</p>",
        "configs": [
            {
                "name": "cls",
                "type": "string/string[]",
                "doc": "<p>An optional extra CSS class that will be added to this component's Element.\nThe value can be a string, a list of strings separated by spaces, or an array of strings. This can be useful\nfor adding customized styles to the component or any of its children using standard CSS rules.</p>",
                "default": "Ext.baseCSSPrefix + 'dashboard-column'"
            },
            {
                "name": "defaultType",
                "type": "string",
                "doc": "<p>The default xtype of child Components to create in this Container when\na child item is specified as a raw configuration object, rather than as an instantiated Component.</p>",
                "default": "'dashboard-panel'"
            },
            {
                "name": "layout",
                "type": "ext.enums.layout/object",
                "doc": "<p><strong>Important</strong>: In order for child items to be correctly sized and\npositioned, typically a layout manager <strong>must</strong> be specified through\nthe <code>layout</code> configuration option.</p>",
                "default": "'anchor'"
            }
        ],
        "events": []
    },
    "Ext.dashboard.Dashboard": {
        "type": "Ext.dashboard.Dashboard",
        "doc": "<p>This class manages a drag-drop Dashboard similar to the legacy Ext JS Portal example.\nThe user-directed layout of the Dashboard is preserved the Ext JS <code>stateful</code> mechanism\nto preserve potentially dynamic user sizing and collapsed states as well as order of\nitems in their columns.</p>",
        "configs": [
            {
                "name": "bodyCls",
                "type": "string/string[]",
                "doc": "<p>A CSS class, space-delimited string of classes, or array of classes to be applied to the panel's body element.\nThe following examples are all valid:</p>",
                "default": "Ext.baseCSSPrefix + 'dashboard-body'"
            },
            {
                "name": "cls",
                "type": "string/string[]",
                "doc": "<p>An optional extra CSS class that will be added to this component's Element.\nThe value can be a string, a list of strings separated by spaces, or an array of strings. This can be useful\nfor adding customized styles to the component or any of its children using standard CSS rules.</p>",
                "default": "Ext.baseCSSPrefix + 'dashboard'"
            },
            {
                "name": "defaultType",
                "type": "string",
                "doc": "<p>The default xtype of child Components to create in this Container when\na child item is specified as a raw configuration object, rather than as an instantiated Component.</p>",
                "default": "'dashboard-column'"
            },
            {
                "name": "layout",
                "type": "ext.enums.layout/object",
                "doc": "<p><strong>Important</strong>: In order for child items to be correctly sized and\npositioned, typically a layout manager <strong>must</strong> be specified through\nthe <code>layout</code> configuration option.</p>",
                "default": null
            },
            {
                "name": "maxColumns",
                "type": "object",
                "doc": "<p>The maximum number of visible columns.</p>",
                "default": "4"
            },
            {
                "name": "parts",
                "type": "object",
                "doc": "<p>An object keyed by <code>id</code> for the parts that can be created for this <code>Dashboard</code>.</p>",
                "default": null
            },
            {
                "name": "scrollable",
                "type": "boolean/string/object",
                "doc": "<p>Configuration options to make this Component scrollable. Acceptable values are:</p>",
                "default": "true"
            },
            {
                "name": "stateful",
                "type": "boolean",
                "doc": "<p>A flag which causes the object to attempt to restore the state of\ninternal properties from a saved state on startup. The object must have\na stateId for state to be managed.</p>",
                "default": "false"
            }
        ],
        "events": [
            {
                "name": "beforedragover",
                "params": "eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "beforedrop",
                "params": "eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "dragover",
                "params": "eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "drop",
                "params": "eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "validatedrop",
                "params": "eOpts(Object)",
                "doc": "\n"
            }
        ]
    },
    "Ext.dashboard.DropZone": {
        "type": "Ext.dashboard.DropZone",
        "doc": "<p>Internal class that manages drag/drop for the <code>Dashboard</code>.</p>",
        "configs": [
            {
                "name": "overClass",
                "type": "string",
                "doc": "<p>This causes overflow to go hidden during the drag so that we don't cause panels to\nwrap by triggering overflow.</p>",
                "default": "Ext.baseCSSPrefix + 'dashboard-dd-over'"
            }
        ],
        "events": []
    },
    "Ext.dashboard.Panel": {
        "type": "Ext.dashboard.Panel",
        "doc": "<p>This class is used to wrap content items in the <code>Dashboard</code>. It uses an\n<code>anchor</code> layout by default and provides resizing on the bottom edge only.</p>",
        "configs": [
            {
                "name": "animCollapse",
                "type": "boolean",
                "doc": "<p><code>true</code> to animate the transition when the panel is collapsed, <code>false</code> to skip the animation (defaults to <code>true</code>\nif the Ext.fx.Anim class is available, otherwise <code>false</code>). May also be specified as the animation\nduration in milliseconds.</p>",
                "default": "true"
            },
            {
                "name": "closable",
                "type": "boolean",
                "doc": "<p>True to display the 'close' tool button and allow the user to close the window, false to hide the button and\ndisallow closing the window.</p>",
                "default": "true"
            },
            {
                "name": "cls",
                "type": "string/string[]",
                "doc": "<p>An optional extra CSS class that will be added to this component's Element.\nThe value can be a string, a list of strings separated by spaces, or an array of strings. This can be useful\nfor adding customized styles to the component or any of its children using standard CSS rules.</p>",
                "default": "Ext.baseCSSPrefix + 'dashboard-panel'"
            },
            {
                "name": "collapsible",
                "type": "boolean",
                "doc": "<p>True to make the panel collapsible and have an expand/collapse toggle Tool added into the header tool button\narea. False to keep the panel sized either statically, or by an owning layout manager, with no toggle Tool.\nWhen a panel is used in a border layout, the floatable option\ncan influence the behavior of collapsing.\nSee collapseMode and collapseDirection</p>",
                "default": "true"
            },
            {
                "name": "draggable",
                "type": "boolean/object",
                "doc": "<p>Specify as true to make a floating Component draggable using the Component's encapsulating element as\nthe drag handle.</p>",
                "default": "{moveOnDrag: false}"
            },
            {
                "name": "frame",
                "type": "boolean",
                "doc": "<p>True to apply a frame to the panel.</p>",
                "default": "true"
            },
            {
                "name": "layout",
                "type": "ext.enums.layout/object",
                "doc": "<p><strong>Important</strong>: In order for child items to be correctly sized and\npositioned, typically a layout manager <strong>must</strong> be specified through\nthe <code>layout</code> configuration option.</p>",
                "default": "'fit'"
            },
            {
                "name": "minHeight",
                "type": "number",
                "doc": "<p>The minimum value in pixels which this Component will set its height to.</p>",
                "default": "90"
            },
            {
                "name": "resizable",
                "type": "boolean/object",
                "doc": "<p>Specify as <code>true</code> to apply a Resizer to this Component after rendering.</p>",
                "default": "true"
            },
            {
                "name": "resizeHandles",
                "type": "string",
                "doc": "<p>A valid Ext.resizer.Resizer handles config string. Only applies when resizable = true.</p>",
                "default": "'s'"
            },
            {
                "name": "stateful",
                "type": "boolean",
                "doc": "<p>A flag which causes the object to attempt to restore the state of\ninternal properties from a saved state on startup. The object must have\na stateId for state to be managed.</p>",
                "default": "true"
            },
            {
                "name": "titleCollapse",
                "type": "boolean",
                "doc": "<p><code>true</code> to allow expanding and collapsing the panel (when <code>collapsible = true</code>) by clicking anywhere in\nthe header bar, <code>false</code>) to allow it only by clicking to tool button). When a panel is used in a\nborder layout, the floatable option can influence the behavior of collapsing.</p>",
                "default": "true"
            }
        ],
        "events": []
    },
    "Ext.dashboard.Part": {
        "type": "Ext.dashboard.Part",
        "doc": "<p>This class encapsulates the creation of items for a <code>Dashboard</code>. Generally a <code>Part</code> is a\ncomponent factory that allows all parts of a common type to be easily coordinated as\nneeded for that type. For example, an RSS feed might need certain configuration data to\nproperly initialize. Perahps not all of this data can or should be supplied from the UI\nthat creates new instances for the <code>Dashboard</code>.</p>",
        "configs": [
            {
                "name": "id",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "viewTemplate",
                "type": "object/ext.util.objecttemplate",
                "doc": "<p>The configuration object used for creating instances of this <code>Part</code>. This is\nused by the <code>createView</code> method to create views.</p>",
                "default": "{collapsed: '{collapsed}', columnIndex: '{columnIndex}', id: '{id}', title: '{title}', height: '{height}'}"
            }
        ],
        "events": []
    },
    "Ext.data.AbstractStore": {
        "type": "Ext.data.AbstractStore",
        "doc": "<p>AbstractStore is a superclass of Ext.data.ProxyStore and Ext.data.ChainedStore. It's never used directly,\nbut offers a set of methods used by both of those subclasses.</p>",
        "configs": [
            {
                "name": "autoDestroy",
                "type": "boolean",
                "doc": "<p>When a Store is used by only one DataView, and should only exist for the lifetime of that view, then\nconfigure the autoDestroy flag as <code>true</code>. This causes the destruction of the view to trigger the destruction of its Store.</p>",
                "default": null
            },
            {
                "name": "autoFilter",
                "type": "boolean",
                "doc": "\n",
                "default": "true"
            },
            {
                "name": "autoSort",
                "type": "boolean",
                "doc": "\n",
                "default": "true"
            },
            {
                "name": "filters",
                "type": "object[]/function[]",
                "doc": "<p>Array of Filters for this store. Can also be passed array of\nfunctions which will be used as the filterFn config\nfor filters:</p>",
                "default": null
            },
            {
                "name": "groupDir",
                "type": "string",
                "doc": "<p>The direction in which sorting should be applied when grouping. Supported values are \"ASC\" and \"DESC\".</p>",
                "default": "'ASC'"
            },
            {
                "name": "groupField",
                "type": "string",
                "doc": "<p>The field by which to group data in the store. Internally, grouping is very similar to sorting - the\ngroupField and groupDir are injected as the first sorter (see sort). Stores support a single\nlevel of grouping, and groups can be fetched via the getGroups method.</p>",
                "default": null
            },
            {
                "name": "grouper",
                "type": "object/ext.util.grouper",
                "doc": "<p>The grouper by which to group the data store. May also be specified by the groupField config, however\nthey should not be used together.</p>",
                "default": null
            },
            {
                "name": "pageSize",
                "type": "number",
                "doc": "<p>The number of records considered to form a 'page'. This is used to power the built-in\npaging using the nextPage and previousPage functions when the grid is paged using a\nPagingToolbar Defaults to 25.</p>",
                "default": "25"
            },
            {
                "name": "remoteFilter",
                "type": "boolean",
                "doc": "<p><code>true</code> to defer any filtering operation to the server. If <code>false</code>, filtering is done locally on the client.</p>",
                "default": "false"
            },
            {
                "name": "remoteSort",
                "type": "boolean",
                "doc": "<p><code>true</code> if the sorting should be performed on the server side, false if it is local only.</p>",
                "default": "false"
            },
            {
                "name": "sorters",
                "type": "ext.util.sorter[]/object[]",
                "doc": "<p>The initial set of Sorters</p>",
                "default": null
            },
            {
                "name": "statefulFilters",
                "type": "boolean",
                "doc": "<p>Configure as <code>true</code> to have the filters saved when a client grid saves its state.</p>",
                "default": "false"
            },
            {
                "name": "storeId",
                "type": "string",
                "doc": "<p>Unique identifier for this store. If present, this Store will be registered with the Ext.data.StoreManager,\nmaking it easy to reuse elsewhere.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "add",
                "params": "store(Ext.data.Store) records(Ext.data.Model[]) index(Number) eOpts(Object)",
                "doc": "<p>Fired when a Model instance has been added to this Store.</p>"
            },
            {
                "name": "beforesort",
                "params": "eOpts(Object)",
                "doc": "<p>Fires before a store is sorted.</p>"
            },
            {
                "name": "beginupdate",
                "params": "eOpts(Object)",
                "doc": "<p>Fires when the beginUpdate method is called. Automatic synchronization as configured\nby the autoSync flag is deferred until the endUpdate method is called, so multiple\nmutations can be coalesced into one synchronization operation.</p>"
            },
            {
                "name": "clear",
                "params": "this(Ext.data.Store) eOpts(Object)",
                "doc": "<p>Fired after the removeAll method is called.</p>"
            },
            {
                "name": "datachanged",
                "params": "this(Ext.data.Store) eOpts(Object)",
                "doc": "<p>Fires whenever records are added to or removed from the Store.</p>"
            },
            {
                "name": "endupdate",
                "params": "eOpts(Object)",
                "doc": "<p>Fires when the endUpdate method is called. Automatic synchronization as configured\nby the autoSync flag is deferred until the endUpdate method is called, so multiple\nmutations can be coalesced into one synchronization operation.</p>"
            },
            {
                "name": "refresh",
                "params": "this(Ext.data.Store) eOpts(Object)",
                "doc": "<p>Fires when the data cache has changed in a bulk manner (e.g., it has been sorted, filtered, etc.) and a\nwidget that is using this Store as a Record cache should refresh its view.</p>"
            },
            {
                "name": "remove",
                "params": "store(Ext.data.Store) records(Ext.data.Model[]) index(Number) isMove(Boolean) eOpts(Object)",
                "doc": "<p>Fired when one or more records have been removed from this Store.</p>"
            },
            {
                "name": "sort",
                "params": "eOpts(Object)",
                "doc": "<p>Fires after a store is sorted.</p>"
            },
            {
                "name": "update",
                "params": "this(Ext.data.Store) record(Ext.data.Model) operation(String) modifiedFieldNames(String[]) details(Object) eOpts(Object)",
                "doc": "<p>Fires when a Model instance has been updated.</p>"
            }
        ]
    },
    "Ext.data.ArrayStore": {
        "type": "Ext.data.ArrayStore",
        "doc": "<p>Small helper class to make creating Ext.data.Stores from Array data easier. An ArrayStore will be\nautomatically configured with a Ext.data.reader.Array.</p>",
        "configs": [
            {
                "name": "proxy",
                "type": "string/ext.data.proxy.proxy/object",
                "doc": "<p>The Proxy to use for this Store. This can be either a string, a config object or a Proxy instance -\nsee setProxy for details.</p>",
                "default": "{type: 'memory', reader: 'array'}"
            }
        ],
        "events": []
    },
    "Ext.data.Batch": {
        "type": "Ext.data.Batch",
        "doc": "<p>Provides a mechanism to run one or more operations\nin a given order. Fires the <code>operationcomplete</code> event after the completion of each\nOperation, and the <code>complete</code> event when all Operations have been successfully executed.\nFires an <code>exception</code> event if any of the Operations encounter an exception.</p>",
        "configs": [
            {
                "name": "pauseOnException",
                "type": "boolean",
                "doc": "<p>True to pause the execution of the batch if any operation encounters an exception\n(defaults to false). If you set this to true you are responsible for implementing the appropriate\nhandling logic and restarting or discarding the batch as needed. There are different ways you could\ndo this, e.g. by handling the batch's exception event directly, or perhaps by overriding\nonBatchException at the store level. If you do pause\nand attempt to handle the exception you can call retry to process the same operation again.</p>",
                "default": "false"
            }
        ],
        "events": [
            {
                "name": "complete",
                "params": "batch(Ext.data.Batch) operation(Object) eOpts(Object)",
                "doc": "<p>Fired when all operations of this batch have been completed</p>"
            },
            {
                "name": "exception",
                "params": "batch(Ext.data.Batch) operation(Object) eOpts(Object)",
                "doc": "<p>Fired when a operation encountered an exception</p>"
            },
            {
                "name": "operationcomplete",
                "params": "batch(Ext.data.Batch) operation(Object) eOpts(Object)",
                "doc": "<p>Fired when each operation of the batch completes</p>"
            }
        ]
    },
    "Ext.data.BufferedStore": {
        "type": "Ext.data.BufferedStore",
        "doc": "<p>A BufferedStore maintains a sparsely populated map of pages corresponding to an extremely large server-side dataset.</p>",
        "configs": [
            {
                "name": "data",
                "type": "number",
                "doc": "\n",
                "default": "0"
            },
            {
                "name": "defaultViewSize",
                "type": "number",
                "doc": "<p>The default view size to use until the viewSize has been configured.</p>",
                "default": "100"
            },
            {
                "name": "leadingBufferZone",
                "type": "number",
                "doc": "<p>The number of extra rows to keep cached on the leading side of scrolling buffer\nas scrolling proceeds. A larger number means fewer replenishments from the server.</p>",
                "default": "200"
            },
            {
                "name": "pageSize",
                "type": "number",
                "doc": "<p>The number of records considered to form a 'page'. This is used to power the built-in\npaging using the nextPage and previousPage functions when the grid is paged using a\nPagingToolbar Defaults to 25.</p>",
                "default": "25"
            },
            {
                "name": "purgePageCount",
                "type": "number",
                "doc": "<p>The number of pages <em>additional to the required buffered range</em> to keep in the prefetch cache before purging least recently used records.</p>",
                "default": "5"
            },
            {
                "name": "remoteFilter",
                "type": "boolean",
                "doc": "<p><code>true</code> to defer any filtering operation to the server. If <code>false</code>, filtering is done locally on the client.</p>",
                "default": "true"
            },
            {
                "name": "remoteSort",
                "type": "boolean",
                "doc": "<p><code>true</code> if the sorting should be performed on the server side, false if it is local only.</p>",
                "default": "true"
            },
            {
                "name": "sortOnLoad",
                "type": "boolean",
                "doc": "<p>If true, any sorters attached to this Store will be run after loading data, before the datachanged event is fired.\nDefaults to true, ignored if remoteSort is true</p>",
                "default": "false"
            },
            {
                "name": "trailingBufferZone",
                "type": "number",
                "doc": "<p>The number of extra records to keep cached on the trailing side of scrolling buffer\nas scrolling proceeds. A larger number means fewer replenishments from the server.</p>",
                "default": "25"
            },
            {
                "name": "viewSize",
                "type": "number",
                "doc": "<p>The view size needed to fill the current view. Defaults to the defaultViewSize.\nThis will typically be set by the underlying view.</p>",
                "default": "0"
            }
        ],
        "events": []
    },
    "Ext.data.ChainedStore": {
        "type": "Ext.data.ChainedStore",
        "doc": "<p>A chained store is a store that is a \"view\" of an existing store. The data comes from the\nsource, however this view of the store may be sorted &amp; filtered independently without\nhaving any impact on the source store.</p>",
        "configs": [
            {
                "name": "remoteFilter",
                "type": "boolean",
                "doc": "<p><code>true</code> to defer any filtering operation to the server. If <code>false</code>, filtering is done locally on the client.</p>",
                "default": "false"
            },
            {
                "name": "remoteSort",
                "type": "boolean",
                "doc": "<p><code>true</code> if the sorting should be performed on the server side, false if it is local only.</p>",
                "default": "false"
            },
            {
                "name": "source",
                "type": "ext.data.store/string",
                "doc": "<p>The backing data source for this chained store. Either a store instance\nor the id of an existing store.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.Connection": {
        "type": "Ext.data.Connection",
        "doc": "<p>The Connection class encapsulates a connection to the page's originating domain, allowing requests to be made either\nto a configured URL, or to a URL specified at request time.</p>",
        "configs": [
            {
                "name": "async",
                "type": "boolean",
                "doc": "<p><code>true</code> if this request should run asynchronously. Setting this to <code>false</code> should generally\nbe avoided, since it will cause the UI to be blocked, the user won't be able to interact\nwith the browser until the request completes.</p>",
                "default": "true"
            },
            {
                "name": "autoAbort",
                "type": "boolean",
                "doc": "<p>Whether this request should abort any pending requests.</p>",
                "default": "false"
            },
            {
                "name": "binary",
                "type": "boolean",
                "doc": "<p>True if the response should be treated as binary data.  If true, the binary\ndata will be accessible as a \"responseBytes\" property on the response object.</p>",
                "default": "false"
            },
            {
                "name": "cors",
                "type": "boolean",
                "doc": "<p>True to enable CORS support on the XHR object. Currently the only effect of this option\nis to use the XDomainRequest object instead of XMLHttpRequest if the browser is IE8 or above.</p>",
                "default": "false"
            },
            {
                "name": "defaultHeaders",
                "type": "object",
                "doc": "<p>An object containing request headers which are added to each request made by this object.</p>",
                "default": null
            },
            {
                "name": "defaultPostHeader",
                "type": "string",
                "doc": "<p>The default header to be sent out with any post request.</p>",
                "default": "'application/x-www-form-urlencoded; charset=UTF-8'"
            },
            {
                "name": "defaultXdrContentType",
                "type": "string",
                "doc": "\n",
                "default": "'text/plain'"
            },
            {
                "name": "defaultXhrHeader",
                "type": "string",
                "doc": "<p>The header to send with Ajax requests. Also see useDefaultXhrHeader.</p>",
                "default": "'XMLHttpRequest'"
            },
            {
                "name": "disableCaching",
                "type": "boolean",
                "doc": "<p>True to add a unique cache-buster param to GET requests.</p>",
                "default": "true"
            },
            {
                "name": "disableCachingParam",
                "type": "string",
                "doc": "<p>Change the parameter which is sent went disabling caching through a cache buster.</p>",
                "default": "'_dc'"
            },
            {
                "name": "extraParams",
                "type": "object",
                "doc": "<p>Any parameters to be appended to the request.</p>",
                "default": null
            },
            {
                "name": "isXdr",
                "type": "boolean",
                "doc": "\n",
                "default": "false"
            },
            {
                "name": "method",
                "type": "string",
                "doc": "<p>The default HTTP method to be used for requests.</p>",
                "default": null
            },
            {
                "name": "password",
                "type": "string",
                "doc": "<p>The password to pass when using withCredentials.</p>",
                "default": "''"
            },
            {
                "name": "timeout",
                "type": "number",
                "doc": "<p>The timeout in milliseconds to be used for requests.</p>",
                "default": "30000"
            },
            {
                "name": "url",
                "type": "string",
                "doc": "<p>The URL for this connection.</p>",
                "default": null
            },
            {
                "name": "useDefaultXhrHeader",
                "type": "boolean",
                "doc": "<p><code>true</code> to send the defaultXhrHeader along with any request.</p>",
                "default": "true"
            },
            {
                "name": "username",
                "type": "string",
                "doc": "<p>The username to pass when using withCredentials.</p>",
                "default": "''"
            },
            {
                "name": "withCredentials",
                "type": "boolean",
                "doc": "<p>True to set <code>withCredentials = true</code> on the XHR object</p>",
                "default": "false"
            }
        ],
        "events": [
            {
                "name": "beforerequest",
                "params": "conn(Ext.data.Connection) options(Object) eOpts(Object)",
                "doc": "<p>Fires before a network request is made to retrieve a data object.</p>"
            },
            {
                "name": "requestcomplete",
                "params": "conn(Ext.data.Connection) response(Object) options(Object) eOpts(Object)",
                "doc": "<p>Fires if the request was successfully completed.</p>"
            },
            {
                "name": "requestexception",
                "params": "conn(Ext.data.Connection) response(Object) options(Object) eOpts(Object)",
                "doc": "<p>Fires if an error HTTP status was returned from the server. This event may also\nbe listened to in the event that a request has timed out or has been aborted.\nSee HTTP Status Code Definitions\nfor details of HTTP status codes.</p>"
            }
        ]
    },
    "Ext.data.DirectStore": {
        "type": "Ext.data.DirectStore",
        "doc": "<p>Small helper class to create an Ext.data.Store configured with an Ext.data.proxy.Direct\nand Ext.data.reader.Json to make interacting with an Ext.direct.Manager server-side\nProvider easier. To create a different proxy/reader combination create a basic\nExt.data.Store configured as needed.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.Error": {
        "type": "Ext.data.Error",
        "doc": "<p>This class hols the results of a validator for an <code>Ext.data.Model</code>. These objects are\nplaced in an <code>Ext.data.ErrorCollection</code> and returned by <code>Ext.data.Model.validate</code>.</p>",
        "configs": [
            {
                "name": "field",
                "type": "string",
                "doc": "<p>The name of the field this error belongs to.</p>",
                "default": null
            },
            {
                "name": "message",
                "type": "string",
                "doc": "<p>The message containing the description of the error.</p>",
                "default": "''"
            }
        ],
        "events": []
    },
    "Ext.data.ErrorCollection": {
        "type": "Ext.data.ErrorCollection",
        "doc": "<p>Wraps a collection of validation error responses and provides convenient functions for\naccessing and errors for specific fields.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.JsonP": {
        "type": "Ext.data.JsonP",
        "doc": "<p>This class is used to create JSONP requests. JSONP is a mechanism that allows for making\nrequests for data cross domain. JSONP is basically a <code>&lt;script&gt;</code> node with the source of the url executing\na function that was created by Ext.data.JsonP. Once the resource has loaded, the <code>&lt;script&gt;</code> node will be destroyed.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.JsonPStore": {
        "type": "Ext.data.JsonPStore",
        "doc": "<p>Small helper class to make creating Ext.data.Stores from different domain JSON data easier.\nA JsonPStore will be automatically configured with a Ext.data.reader.Json and a JsonPProxy.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.JsonStore": {
        "type": "Ext.data.JsonStore",
        "doc": "<p>Small helper class to make creating Ext.data.Stores from JSON data easier.\nA JsonStore will be automatically configured with a Ext.data.reader.Json.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.LocalStore": {
        "type": "Ext.data.LocalStore",
        "doc": "<p>A mixin that provides common store methods for Ext.data.Store &amp; Ext.data.ChainedStore.</p>",
        "configs": [
            {
                "name": "extraKeys",
                "type": "object",
                "doc": "\n",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.Model": {
        "type": "Ext.data.Model",
        "doc": "<p>A Model or Entity represents some object that your application manages. For example, one\nmight define a Model for Users, Products, Cars, or other real-world object that we want\nto model in the system. Models are used by stores, which are in\nturn used by many of the data-bound components in Ext.</p>",
        "configs": [
            {
                "name": "associations",
                "type": "object[]",
                "doc": "<p>An array of associations for this model.</p>",
                "default": null
            },
            {
                "name": "belongsTo",
                "type": "string/object/string[]/object[]",
                "doc": "<p>One or more BelongsTo associations for this model.</p>",
                "default": null
            },
            {
                "name": "clientIdProperty",
                "type": "string",
                "doc": "<p>The name of the property a server will use to send back a client-generated id in a\n<code>create</code> or <code>update</code> <code>operation</code>.</p>",
                "default": null
            },
            {
                "name": "convertOnSet",
                "type": "boolean",
                "doc": "<p>Set to <code>false</code> to  prevent any converters from being called during a set operation.</p>",
                "default": "true"
            },
            {
                "name": "fields",
                "type": "object[]/string[]",
                "doc": "<p>The fields for this model. This is an Array of <code>Ext.data.field.Field</code> definition\nobjects or simply the field name. If just a name is given, the field type defaults\nto <code>auto</code>.</p>",
                "default": null
            },
            {
                "name": "hasMany",
                "type": "string/object/string[]/object[]",
                "doc": "<p>One or more HasMany associations for this model.</p>",
                "default": null
            },
            {
                "name": "idProperty",
                "type": "string",
                "doc": "<p>The name of the field treated as this Model's unique id.</p>",
                "default": "'id'"
            },
            {
                "name": "identifier",
                "type": "string/object",
                "doc": "<p>The id generator to use for this model. The <code>identifier</code> generates values for the\nidProperty when no value is given. Records with client-side generated\nvalues for idProperty are called phantom records since they are\nnot yet known to the server.</p>",
                "default": null
            },
            {
                "name": "proxy",
                "type": "string/object/ext.data.proxy.proxy",
                "doc": "<p>The proxy to use for this class.</p>",
                "default": null
            },
            {
                "name": "schema",
                "type": "string/object",
                "doc": "<p>The name of the schema to which this entity and its\nassociations belong. For details on custom schemas see <code>Ext.data.schema.Schema</code>.</p>",
                "default": "'default'"
            },
            {
                "name": "validationSeparator",
                "type": "string",
                "doc": "<p>If specified this property is used to concatenate multiple errors for each field\nas reported by the <code>validators</code>.</p>",
                "default": "null"
            },
            {
                "name": "validators",
                "type": "object[]",
                "doc": "<p>An array of validators for this model.</p>",
                "default": null
            },
            {
                "name": "versionProperty",
                "type": "string",
                "doc": "<p>If specified, this is the name of the property that contains the entity \"version\".\nThe version property is used to manage a long-running transaction and allows the\ndetection of simultaneous modification.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.ModelManager": {
        "type": "Ext.data.ModelManager",
        "doc": "<p>This class has been deprecated. Use <code>Ext.data.schema.Schema</code> instead.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.NodeInterface": {
        "type": "Ext.data.NodeInterface",
        "doc": "<p>This class is used as a set of methods that are applied to the prototype of a\nModel to decorate it with a Node API. This means that models used in conjunction with a tree\nwill have all of the tree related methods available on the model. In general this class will\nnot be used directly by the developer. This class also creates extra fields on the model if\nthey do not exist, to help maintain the tree state and UI. These fields are documented as\nconfig options.</p>",
        "configs": [
            {
                "name": "allowDrag",
                "type": "boolean",
                "doc": "<p>Set to false to deny dragging of this node.</p>",
                "default": "true"
            },
            {
                "name": "allowDrop",
                "type": "boolean",
                "doc": "<p>Set to false to deny dropping on this node.</p>",
                "default": "true"
            },
            {
                "name": "checked",
                "type": "boolean",
                "doc": "<p>Set to true or false to show a checkbox alongside this node.</p>",
                "default": "null"
            },
            {
                "name": "children",
                "type": "ext.data.nodeinterface[]",
                "doc": "<p>Array of child nodes.</p>",
                "default": null
            },
            {
                "name": "cls",
                "type": "string",
                "doc": "<p>CSS class to apply for this node.</p>",
                "default": null
            },
            {
                "name": "depth",
                "type": "number",
                "doc": "<p>The number of parents this node has. A root node has depth 0, a child of it depth 1, and so on...</p>",
                "default": null
            },
            {
                "name": "expandable",
                "type": "boolean",
                "doc": "<p>Set to true to allow for expanding/collapsing of this node.</p>",
                "default": "false"
            },
            {
                "name": "expanded",
                "type": "boolean",
                "doc": "<p>True if the node is expanded.</p>",
                "default": "false"
            },
            {
                "name": "href",
                "type": "string",
                "doc": "<p>An URL for a link that's created when this config is specified.</p>",
                "default": null
            },
            {
                "name": "hrefTarget",
                "type": "string",
                "doc": "<p>Target for link. Only applicable when href also specified.</p>",
                "default": null
            },
            {
                "name": "icon",
                "type": "string",
                "doc": "<p>URL for this node's icon.</p>",
                "default": null
            },
            {
                "name": "iconCls",
                "type": "string",
                "doc": "<p>CSS class to apply for this node's icon.</p>",
                "default": null
            },
            {
                "name": "index",
                "type": "number",
                "doc": "<p>The position of the node inside its parent. When parent has 4 children and the node is third amongst them,\nindex will be 2.</p>",
                "default": null
            },
            {
                "name": "isFirst",
                "type": "boolean",
                "doc": "<p>True if this is the first node.</p>",
                "default": null
            },
            {
                "name": "isLast",
                "type": "boolean",
                "doc": "<p>True if this is the last node.</p>",
                "default": null
            },
            {
                "name": "leaf",
                "type": "boolean",
                "doc": "<p>Set to true to indicate that this child can have no children. The expand icon/arrow will then not be\nrendered for this node.</p>",
                "default": "false"
            },
            {
                "name": "loaded",
                "type": "boolean",
                "doc": "<p>True if the node has finished loading.</p>",
                "default": "false"
            },
            {
                "name": "loading",
                "type": "boolean",
                "doc": "<p>True if the node is currently loading.</p>",
                "default": "false"
            },
            {
                "name": "parentId",
                "type": "string",
                "doc": "<p>ID of parent node.</p>",
                "default": null
            },
            {
                "name": "qshowDelay",
                "type": "number",
                "doc": "<p>Tooltip showDelay.</p>",
                "default": null
            },
            {
                "name": "qtip",
                "type": "string",
                "doc": "<p>Tooltip text to show on this node.</p>",
                "default": null
            },
            {
                "name": "qtitle",
                "type": "string",
                "doc": "<p>Tooltip title.</p>",
                "default": null
            },
            {
                "name": "root",
                "type": "boolean",
                "doc": "<p>True if this is the root node.</p>",
                "default": null
            },
            {
                "name": "text",
                "type": "string",
                "doc": "<p>The text to show on node label.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "append",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) index(Number) eOpts(Object)",
                "doc": "<p>Fires when a new child node is appended</p>"
            },
            {
                "name": "beforeappend",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires before a new child is appended, return false to cancel the append.</p>"
            },
            {
                "name": "beforecollapse",
                "params": "this(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires before this node is collapsed.</p>"
            },
            {
                "name": "beforeexpand",
                "params": "this(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires before this node is expanded.</p>"
            },
            {
                "name": "beforeinsert",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) refNode(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires before a new child is inserted, return false to cancel the insert.</p>"
            },
            {
                "name": "beforemove",
                "params": "this(Ext.data.NodeInterface) oldParent(Ext.data.NodeInterface) newParent(Ext.data.NodeInterface) index(Number) eOpts(Object)",
                "doc": "<p>Fires before this node is moved to a new location in the tree. Return false to cancel the move.</p>"
            },
            {
                "name": "beforeremove",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) isMove(Boolean) eOpts(Object)",
                "doc": "<p>Fires before a child is removed, return false to cancel the remove.</p>"
            },
            {
                "name": "collapse",
                "params": "this(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires when this node is collapsed.</p>"
            },
            {
                "name": "expand",
                "params": "this(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires when this node is expanded.</p>"
            },
            {
                "name": "insert",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) refNode(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires when a new child node is inserted.</p>"
            },
            {
                "name": "move",
                "params": "this(Ext.data.NodeInterface) oldParent(Ext.data.NodeInterface) newParent(Ext.data.NodeInterface) index(Number) eOpts(Object)",
                "doc": "<p>Fires when this node is moved to a new location in the tree</p>"
            },
            {
                "name": "remove",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) isMove(Boolean) eOpts(Object)",
                "doc": "<p>Fires when a child node is removed</p>"
            },
            {
                "name": "sort",
                "params": "this(Ext.data.NodeInterface) childNodes(Ext.data.NodeInterface[]) eOpts(Object)",
                "doc": "<p>Fires when this node's childNodes are sorted.</p>"
            }
        ]
    },
    "Ext.data.NodeStore": {
        "type": "Ext.data.NodeStore",
        "doc": "<p>Node Store</p>",
        "configs": [
            {
                "name": "folderSort",
                "type": "boolean",
                "doc": "<p>Set to <code>true</code> to automatically prepend a leaf sorter.</p>",
                "default": "false"
            },
            {
                "name": "node",
                "type": "ext.data.model",
                "doc": "<p>The Record you want to bind this Store to. Note that\nthis record will be decorated with the Ext.data.NodeInterface if this is not the\ncase yet.</p>",
                "default": null
            },
            {
                "name": "recursive",
                "type": "boolean",
                "doc": "<p>Set this to <code>true</code> if you want this NodeStore to represent\nall the descendants of the node in its flat data collection. This is useful for\nrendering a tree structure to a DataView and is being used internally by\nthe TreeView. Any records that are moved, removed, inserted or appended to the\nnode at any depth below the node this store is bound to will be automatically\nupdated in this Store's internal flat data structure.</p>",
                "default": "false"
            },
            {
                "name": "rootVisible",
                "type": "boolean",
                "doc": "<p><code>false</code> to not include the root node in this Stores collection.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.data.PageMap": {
        "type": "Ext.data.PageMap",
        "doc": "<p>Private class for use by only Store when configured <code>buffered: true</code>.</p>",
        "configs": [
            {
                "name": "pageSize",
                "type": "number",
                "doc": "<p>The size of pages in this map.</p>",
                "default": "0"
            },
            {
                "name": "rootProperty",
                "type": "string",
                "doc": "<p>The root property to use for aggregation, filtering and sorting. By default\nthis is <code>null</code> but when containing things like records\nthis config would likely be set to \"data\" so that property names are applied\nto the fields of each record.</p>",
                "default": "''"
            },
            {
                "name": "store",
                "type": "object",
                "doc": "\n",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.ProxyStore": {
        "type": "Ext.data.ProxyStore",
        "doc": "<p>ProxyStore is a superclass of Ext.data.Store and Ext.data.BufferedStore. It's never used directly,\nbut offers a set of methods used by both of those subclasses.</p>",
        "configs": [
            {
                "name": "autoLoad",
                "type": "boolean/object",
                "doc": "<p>If data is not specified, and if autoLoad is true or an Object, this store's load method is automatically called\nafter creation. If the value of autoLoad is an Object, this Object will be passed to the store's load method.</p>",
                "default": null
            },
            {
                "name": "autoLoadDelay",
                "type": "number",
                "doc": "<p>.\nThe delay time to kick of the initial autoLoad task</p>",
                "default": "1"
            },
            {
                "name": "autoSync",
                "type": "boolean",
                "doc": "<p>True to automatically sync the Store with its Proxy after every edit to one of its Records. Defaults to false.</p>",
                "default": "false"
            },
            {
                "name": "batchUpdateMode",
                "type": "string",
                "doc": "<p>Sets the updating behavior based on batch synchronization. 'operation' (the default) will update the Store's\ninternal representation of the data after each operation of the batch has completed, 'complete' will wait until\nthe entire batch has been completed before updating the Store's data. 'complete' is a good choice for local\nstorage proxies, 'operation' is better for remote proxies, where there is a comparatively high latency.</p>",
                "default": "'operation'"
            },
            {
                "name": "fields",
                "type": "object[]",
                "doc": "<p>This may be used in place of specifying a model configuration. The fields should be a\nset of Ext.data.Field configuration objects. The store will automatically create a Ext.data.Model\nwith these fields. In general this configuration option should only be used for simple stores like\na two-field store of ComboBox. For anything more complicated, such as specifying a particular id property or\nassociations, a Ext.data.Model should be defined and specified for the model\nconfig.</p>",
                "default": null
            },
            {
                "name": "model",
                "type": "string/ext.data.model",
                "doc": "<p>Name of the Model associated with this store. See\nExt.data.Model.entityName.</p>",
                "default": null
            },
            {
                "name": "proxy",
                "type": "string/ext.data.proxy.proxy/object",
                "doc": "<p>The Proxy to use for this Store. This can be either a string, a config object or a Proxy instance -\nsee setProxy for details.</p>",
                "default": null
            },
            {
                "name": "sortOnLoad",
                "type": "boolean",
                "doc": "<p>If true, any sorters attached to this Store will be run after loading data, before the datachanged event is fired.\nDefaults to true, ignored if remoteSort is true</p>",
                "default": "true"
            },
            {
                "name": "trackRemoved",
                "type": "boolean",
                "doc": "<p>This config controls whether removed records are remembered by this store for\nlater saving to the server.</p>",
                "default": "true"
            }
        ],
        "events": [
            {
                "name": "beforeload",
                "params": "store(Ext.data.Store) operation(Ext.data.operation.Operation) eOpts(Object)",
                "doc": "<p>Fires before a request is made for a new data object. If the beforeload handler returns false the load\naction will be canceled.</p>"
            },
            {
                "name": "beforesync",
                "params": "options(Object) eOpts(Object)",
                "doc": "<p>Fired before a call to sync is executed. Return false from any listener to cancel the sync</p>"
            },
            {
                "name": "load",
                "params": "this(Ext.data.Store) records(Ext.data.Model[]) successful(Boolean) eOpts(Object)",
                "doc": "<p>Fires whenever the store reads data from a remote data source.</p>"
            },
            {
                "name": "metachange",
                "params": "this(Ext.data.Store) meta(Object) eOpts(Object)",
                "doc": "<p>Fires when this store's underlying reader (available via the proxy) provides new metadata.\nMetadata usually consists of new field definitions, but can include any configuration data\nrequired by an application, and can be processed as needed in the event handler.\nThis event is currently only fired for JsonReaders.</p>"
            },
            {
                "name": "write",
                "params": "store(Ext.data.Store) operation(Ext.data.operation.Operation) eOpts(Object)",
                "doc": "<p>Fires whenever a successful write has been made via the configured Proxy</p>"
            }
        ]
    },
    "Ext.data.Request": {
        "type": "Ext.data.Request",
        "doc": "<p>Simple class that represents a Request that will be made by any Ext.data.proxy.Server subclass.\nAll this class does is standardize the representation of a Request as used by any ServerProxy subclass,\nit does not contain any actual logic or perform the request itself.</p>",
        "configs": [
            {
                "name": "action",
                "type": "string",
                "doc": "<p>The name of the action this Request represents. Usually one of 'create', 'read', 'update' or 'destroy'.</p>",
                "default": null
            },
            {
                "name": "args",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "binary",
                "type": "boolean",
                "doc": "<p>True to request binary data from the server.  This feature requires\nthe use of a binary reader such as AMF Reader</p>",
                "default": "false"
            },
            {
                "name": "callback",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "callbackKey",
                "type": "string",
                "doc": "<p>Some requests (like JsonP) want to send an additional key that contains\nthe name of the callback function.</p>",
                "default": null
            },
            {
                "name": "directFn",
                "type": "object",
                "doc": "<p>The following two configurations are only used by Ext.data.proxy.Direct and are just\nfor being able to retrieve them after the request comes back from the server.</p>",
                "default": null
            },
            {
                "name": "disableCaching",
                "type": "boolean",
                "doc": "<p>Whether or not to disable caching for this request.</p>",
                "default": "false"
            },
            {
                "name": "headers",
                "type": "object",
                "doc": "<p>Some requests (like XMLHttpRequests) want to send additional server headers.\nThis configuration can be set for those types of requests.</p>",
                "default": "{}"
            },
            {
                "name": "jsonData",
                "type": "object",
                "doc": "<p>This is used by some write actions to attach data to the request without encoding it\nas a parameter.</p>",
                "default": null
            },
            {
                "name": "method",
                "type": "string",
                "doc": "<p>The HTTP method to use on this Request. Should be one of 'GET', 'POST', 'PUT' or 'DELETE'.</p>",
                "default": "'GET'"
            },
            {
                "name": "operation",
                "type": "ext.data.operation.operation",
                "doc": "<p>The operation this request belongs to.</p>",
                "default": null
            },
            {
                "name": "params",
                "type": "object",
                "doc": "<p>HTTP request params. The Proxy and its Writer have access to and can modify this object.</p>",
                "default": null
            },
            {
                "name": "password",
                "type": "string",
                "doc": "<p>Most oData feeds require basic HTTP authentication. This configuration allows\nyou to specify the password.</p>",
                "default": null
            },
            {
                "name": "proxy",
                "type": "ext.data.proxy.proxy",
                "doc": "<p>The proxy this request belongs to.</p>",
                "default": null
            },
            {
                "name": "rawRequest",
                "type": "ext.data.jsonp",
                "doc": "<p>Set the raw request object (Ajax/JsonP/Other)</p>",
                "default": null
            },
            {
                "name": "records",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "scope",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "timeout",
                "type": "number",
                "doc": "\n",
                "default": "30000"
            },
            {
                "name": "url",
                "type": "string",
                "doc": "<p>The url to access on this Request.</p>",
                "default": null
            },
            {
                "name": "useDefaultXhrHeader",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "username",
                "type": "string",
                "doc": "<p>Most oData feeds require basic HTTP authentication. This configuration allows\nyou to specify the username.</p>",
                "default": null
            },
            {
                "name": "withCredentials",
                "type": "boolean",
                "doc": "<p>This field is necessary when using cross-origin resource sharing.</p>",
                "default": "false"
            },
            {
                "name": "xmlData",
                "type": "object",
                "doc": "<p>This is used by some write actions to attach data to the request without encoding it\nas a parameter, but instead sending it as XML.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.ResultSet": {
        "type": "Ext.data.ResultSet",
        "doc": "<p>Simple wrapper class that represents a set of records returned by a Proxy.</p>",
        "configs": [
            {
                "name": "count",
                "type": "number",
                "doc": "<p>The number of records in this ResultSet. Note that total may differ from this number.</p>",
                "default": null
            },
            {
                "name": "loaded",
                "type": "boolean",
                "doc": "<p>True if the records have already been loaded. This is only meaningful when dealing with\nSQL-backed proxies.</p>",
                "default": "true"
            },
            {
                "name": "message",
                "type": "string",
                "doc": "<p>The message that was read in from the data</p>",
                "default": null
            },
            {
                "name": "records",
                "type": "ext.data.model[]/object[]",
                "doc": "<p>The array of record instances or record config objects.</p>",
                "default": null
            },
            {
                "name": "rootExists",
                "type": "boolean",
                "doc": "<p><code>true</code> if the root config was part of the data set and read correctly</p>",
                "default": null
            },
            {
                "name": "success",
                "type": "boolean",
                "doc": "<p>True if the ResultSet loaded successfully, false if any errors were encountered.</p>",
                "default": "false"
            },
            {
                "name": "total",
                "type": "number",
                "doc": "<p>The total number of records reported by the data source. This ResultSet may form a subset of\nthose records (see count).</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.Session": {
        "type": "Ext.data.Session",
        "doc": "<p>This class manages models and their associations. Instances of <code>Session</code> are typically\nassociated with some <code>Component</code> (perhaps the Viewport or a Window) and then used by\ntheir <code>view models</code> to enable data binding.</p>",
        "configs": [
            {
                "name": "autoDestroy",
                "type": "boolean",
                "doc": "<p><code>true</code> to automatically destroy this session when a component it is attached\nto is destroyed. This should be set to false if the session is intended to be\nused across multiple root level components.</p>",
                "default": "true"
            },
            {
                "name": "crudProperties",
                "type": "object",
                "doc": "\n",
                "default": "{create: 'C', read: 'R', update: 'U', drop: 'D'}"
            },
            {
                "name": "parent",
                "type": "ext.data.session",
                "doc": "<p>The parent session for this session.</p>",
                "default": null
            },
            {
                "name": "schema",
                "type": "string/ext.data.schema.schema",
                "doc": "\n",
                "default": "'default'"
            }
        ],
        "events": []
    },
    "Ext.data.SortTypes": {
        "type": "Ext.data.SortTypes",
        "doc": "<p>This class defines a series of static methods that are used on a\nExt.data.Field for performing sorting. The methods cast the\nunderlying values into a data type that is appropriate for sorting on\nthat particular field.  If a Ext.data.Field.type is specified,\nthe sortType will be set to a sane default if the sortType is not\nexplicitly defined on the field. The sortType will make any necessary\nmodifications to the value and return it.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.Store": {
        "type": "Ext.data.Store",
        "doc": "<p>The Store class encapsulates a client side cache of Model objects. Stores load data via a\nProxy, and also provide functions for sorting, filtering\nand querying the model instances contained within it.</p>",
        "configs": [
            {
                "name": "associatedEntity",
                "type": "ext.data.model",
                "doc": "<p>The owner of this store if the store is used as part of an association.</p>",
                "default": null
            },
            {
                "name": "clearOnPageLoad",
                "type": "boolean",
                "doc": "<p>True to empty the store when loading another page via loadPage,\nnextPage or previousPage. Setting to false keeps existing records, allowing\nlarge data sets to be loaded one page at a time but rendered all together.</p>",
                "default": "true"
            },
            {
                "name": "clearRemovedOnLoad",
                "type": "boolean",
                "doc": "<p><code>true</code> to clear anything in the removed record collection when the store loads.</p>",
                "default": "true"
            },
            {
                "name": "data",
                "type": "object[]/ext.data.model[]",
                "doc": "<p>Array of Model instances or data objects to load locally. See \"Inline data\"\nabove for details.</p>",
                "default": "0"
            },
            {
                "name": "role",
                "type": "ext.data.schema.role",
                "doc": "<p>The role for the associatedEntity.</p>",
                "default": null
            },
            {
                "name": "session",
                "type": "ext.data.session",
                "doc": "<p>The session for this store. By specifying a session, it ensures any records that are\nadded to this store are also included in the session. This store does not become a member\nof the session itself.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "beforeprefetch",
                "params": "this(Ext.data.Store) operation(Ext.data.operation.Operation) eOpts(Object)",
                "doc": "<p>Fires before a prefetch occurs. Return <code>false</code> to cancel.</p>"
            },
            {
                "name": "filterchange",
                "params": "store(Ext.data.Store) filters(Ext.util.Filter[]) eOpts(Object)",
                "doc": "<p>Fired whenever the filter set changes.</p>"
            },
            {
                "name": "groupchange",
                "params": "store(Ext.data.Store) grouper(Ext.util.Grouper) eOpts(Object)",
                "doc": "<p>Fired whenever the grouping in the grid changes.</p>"
            },
            {
                "name": "prefetch",
                "params": "this(Ext.data.Store) records(Ext.data.Model[]) successful(Boolean) operation(Ext.data.operation.Operation) eOpts(Object)",
                "doc": "<p>Fires whenever records have been prefetched.</p>"
            }
        ]
    },
    "Ext.data.StoreManager": {
        "type": "Ext.data.StoreManager",
        "doc": "<p>Contains a collection of all stores that are created that have an identifier. An identifier can be assigned by\nsetting the storeId property. When a store is in the StoreManager, it can be\nreferred to via it's identifier:</p>",
        "configs": [
            {
                "name": "listeners",
                "type": "object",
                "doc": "\n",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.TreeModel": {
        "type": "Ext.data.TreeModel",
        "doc": "<p>This class is used as a base class from which to derive Models used in Trees.</p>",
        "configs": [
            {
                "name": "childType",
                "type": "string",
                "doc": "<p>The class name of child nodes to create when reading child nodes from\nraw data. By default the type configured into the TreeStore is used.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.TreeStore": {
        "type": "Ext.data.TreeStore",
        "doc": "<p>The TreeStore is a store implementation that owns the root node of\na tree, and provides methods to load either local or remote data as child nodes of the root\nand any descendant non-leaf node.</p>",
        "configs": [
            {
                "name": "clearOnLoad",
                "type": "boolean",
                "doc": "<p>Remove previously existing child nodes before loading.</p>",
                "default": "true"
            },
            {
                "name": "clearRemovedOnLoad",
                "type": "boolean",
                "doc": "<p>If <code>true</code>, when a node is reloaded, any records in the removed record collection that were previously descendants of the node being reloaded will be cleared from the removed collection.\nOnly applicable if clearOnLoad is <code>true</code>.</p>",
                "default": "true"
            },
            {
                "name": "defaultRootId",
                "type": "string",
                "doc": "<p>The default root id.</p>",
                "default": "\"root\""
            },
            {
                "name": "defaultRootProperty",
                "type": "string",
                "doc": "\n",
                "default": "\"children\""
            },
            {
                "name": "defaultRootText",
                "type": "string",
                "doc": "<p>The default root text (if not specified)/</p>",
                "default": "\"Root\""
            },
            {
                "name": "fields",
                "type": "object[]",
                "doc": "<p>If you wish to create a Tree<em>Grid</em>, and configure your tree with a Ext.panel.Table.columns columns configuration,\nit is possilble to define the set of fields you wish to use in the Store instead of configuting the store with a model.</p>",
                "default": null
            },
            {
                "name": "folderSort",
                "type": "boolean",
                "doc": "<p>Set to true to automatically prepend a leaf sorter.</p>",
                "default": "false"
            },
            {
                "name": "nodeParam",
                "type": "string",
                "doc": "<p>The name of the parameter sent to the server which contains the identifier of the node.</p>",
                "default": "\"node\""
            },
            {
                "name": "parentIdProperty",
                "type": "string",
                "doc": "<p>This config allows node data to be returned from the server in linear format without having to structure it into <code>children</code>\narrays.</p>",
                "default": null
            },
            {
                "name": "recursive",
                "type": "boolean",
                "doc": "<p>Set this to <code>true</code> if you want this NodeStore to represent\nall the descendants of the node in its flat data collection. This is useful for\nrendering a tree structure to a DataView and is being used internally by\nthe TreeView. Any records that are moved, removed, inserted or appended to the\nnode at any depth below the node this store is bound to will be automatically\nupdated in this Store's internal flat data structure.</p>",
                "default": "true"
            },
            {
                "name": "root",
                "type": "ext.data.treemodel/ext.data.nodeinterface/object",
                "doc": "<p>The root node for this store. For example:</p>",
                "default": null
            },
            {
                "name": "rootVisible",
                "type": "boolean",
                "doc": "<p><code>false</code> to not include the root node in this Stores collection.</p>",
                "default": "false"
            }
        ],
        "events": [
            {
                "name": "load",
                "params": "this(Ext.data.TreeStore) records(Ext.data.TreeModel[]) successful(Boolean) operation(Ext.data.Operation) node(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires whenever the store reads data from a remote data source.</p>"
            },
            {
                "name": "nodeappend",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) index(Number) eOpts(Object)",
                "doc": "<p>Fires when a new child node is appended</p>"
            },
            {
                "name": "nodebeforeappend",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires before a new child is appended, return false to cancel the append.</p>"
            },
            {
                "name": "nodebeforecollapse",
                "params": "this(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires before this node is collapsed.</p>"
            },
            {
                "name": "nodebeforeexpand",
                "params": "this(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires before this node is expanded.</p>"
            },
            {
                "name": "nodebeforeinsert",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) refNode(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires before a new child is inserted, return false to cancel the insert.</p>"
            },
            {
                "name": "nodebeforemove",
                "params": "this(Ext.data.NodeInterface) oldParent(Ext.data.NodeInterface) newParent(Ext.data.NodeInterface) index(Number) eOpts(Object)",
                "doc": "<p>Fires before this node is moved to a new location in the tree. Return false to cancel the move.</p>"
            },
            {
                "name": "nodebeforeremove",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) isMove(Boolean) eOpts(Object)",
                "doc": "<p>Fires before a child is removed, return false to cancel the remove.</p>"
            },
            {
                "name": "nodecollapse",
                "params": "this(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires when this node is collapsed.</p>"
            },
            {
                "name": "nodeexpand",
                "params": "this(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires when this node is expanded.</p>"
            },
            {
                "name": "nodeinsert",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) refNode(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires when a new child node is inserted.</p>"
            },
            {
                "name": "nodemove",
                "params": "this(Ext.data.NodeInterface) oldParent(Ext.data.NodeInterface) newParent(Ext.data.NodeInterface) index(Number) eOpts(Object)",
                "doc": "<p>Fires when this node is moved to a new location in the tree</p>"
            },
            {
                "name": "noderemove",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) isMove(Boolean) eOpts(Object)",
                "doc": "<p>Fires when a child node is removed</p>"
            },
            {
                "name": "nodesort",
                "params": "this(Ext.data.NodeInterface) childNodes(Ext.data.NodeInterface[]) eOpts(Object)",
                "doc": "<p>Fires when this node's childNodes are sorted.</p>"
            }
        ]
    },
    "Ext.data.Types": {
        "type": "Ext.data.Types",
        "doc": "<p>This is a static class containing the system-supplied data types\nwhich may be given to a Field.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.Validation": {
        "type": "Ext.data.Validation",
        "doc": "<p>This class is used to hold validation errors for a record. The results of the record's\n<code>validators</code> are stored as the field values of this\nrecord. The first failed validation is all that is stored per field unless the Model\nclass has defined a <code>validationSeparator</code> config.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.XmlStore": {
        "type": "Ext.data.XmlStore",
        "doc": "<p>Small helper class to make creating Ext.data.Stores from XML data easier.\nA XmlStore will be automatically configured with a Ext.data.reader.Xml.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.field.Boolean": {
        "type": "Ext.data.field.Boolean",
        "configs": [],
        "events": []
    },
    "Ext.data.field.Date": {
        "type": "Ext.data.field.Date",
        "doc": "<p>This class provides Date specific processing for fields.</p>",
        "configs": [
            {
                "name": "dateFormat",
                "type": "string",
                "doc": "<p>Serves as a default for the dateReadFormat and dateWriteFormat config options. This\nwill be used in place of those other configurations if not specified.</p>",
                "default": null
            },
            {
                "name": "dateReadFormat",
                "type": "string",
                "doc": "<p>Used when converting received data into a Date when the type is specified as <code>\"date\"</code>.\nThis configuration takes precedence over dateFormat.\nSee dateFormat for more information.</p>",
                "default": null
            },
            {
                "name": "dateWriteFormat",
                "type": "string",
                "doc": "<p>Provides a custom format when serializing dates with a Ext.data.writer.Writer.\nIf this is not specified, the dateFormat will be used. If no <code>dateFormat</code>\nis specified, 'timestamp' format is used.</p>",
                "default": null
            },
            {
                "name": "sortType",
                "type": "function/string",
                "doc": "<p>A function which converts a Field's value to a comparable value in order to ensure\ncorrect sort ordering.</p>",
                "default": "'asDate'"
            }
        ],
        "events": []
    },
    "Ext.data.field.Field": {
        "type": "Ext.data.field.Field",
        "doc": "<p>Fields are used to define the members of a Model. They aren't instantiated directly;\ninstead, when we create a class that extends Ext.data.Model, it automatically\ncreates Field instances for each field configured in a Model.\nFor example, we might set up a model like this:</p>",
        "configs": [
            {
                "name": "allowBlank",
                "type": "boolean",
                "doc": "<p>Used for validating a model. Defaults to true. An empty value here will cause\nExt.data.Model.isValid to evaluate to false.</p>",
                "default": "true"
            },
            {
                "name": "allowNull",
                "type": "boolean",
                "doc": "<p>Use when converting received data into a &lt;code&gt;int&lt;/code&gt;,\n&lt;code&gt;float&lt;/code&gt;, &lt;code&gt;bool&lt;/code&gt;\nor &lt;code&gt;string&lt;/code&gt; type. If the value cannot be\nparsed, <code>null</code> will be used if allowNull is true, otherwise a default value for that type will be used:</p>",
                "default": "false"
            },
            {
                "name": "calculate",
                "type": "function",
                "doc": "<p>This config defines a simple field calculation function. A calculate method only\nhas access to the record data and should return the value of the calculated field.\nWhen provided in this way, the <code>depends</code> config is automatically determined by\nparsing the <code>calculate</code> function. For example:</p>",
                "default": null
            },
            {
                "name": "convert",
                "type": "function",
                "doc": "<p>If specified this config overrides the <code>convert</code> method. See\nalso <code>calculate</code> for simple field calculations.</p>",
                "default": null
            },
            {
                "name": "critical",
                "type": "boolean",
                "doc": "<p>A critical field is a field that must always be sent to the server even if it has\nnot changed. The most common example of such a field is the \"id\" of a record (see\n<code>Ext.data.Model.idProperty</code> but the <code>Ext.data.Model.versionProperty</code>\nis similarly a <code>critical</code> field.</p>",
                "default": "false"
            },
            {
                "name": "defaultValue",
                "type": "object",
                "doc": "<p>The default value used when the creating an instance from a raw data object,\nand the property referenced by the <code>mapping</code>\ndoes not exist in that data object.</p>",
                "default": "undefined"
            },
            {
                "name": "depends",
                "type": "string/string[]",
                "doc": "<p>The field name or names within the Model on which the value\nof this field depends, and from which a new value may be calculated. These values\nare the values used by the <code>convert</code> method. If you do not have a <code>convert</code> method\nthen this config should not be specified.</p>",
                "default": null
            },
            {
                "name": "mapping",
                "type": "string/number/function",
                "doc": "<p>(Optional) A path expression for use by the Ext.data.reader.Reader implementation that is creating the\nModel to extract the Field value from the data object. If the path expression is the same\nas the field name, the mapping may be omitted. A function may be passed to do complex data extraction. The examples\nbelow are simple just to demonstrate the capability, typically, a function would not be used to extract such\nsimple data.</p>",
                "default": null
            },
            {
                "name": "name",
                "type": "string",
                "doc": "<p>The name by which the field is referenced within the Model. This is referenced by,\nfor example, the <code>dataIndex</code> property in column definition objects passed to\nExt.grid.property.HeaderContainer.</p>",
                "default": null
            },
            {
                "name": "persist",
                "type": "boolean",
                "doc": "<p>False to exclude this field from the Ext.data.Model.modified fields in a\nrecord. This will also exclude the field from being written using a\nExt.data.writer.Writer. This option is useful when fields are used to keep\nstate on the client but do not need to be persisted to the server.</p>",
                "default": null
            },
            {
                "name": "reference",
                "type": "string/object",
                "doc": "<p>The name of the entity referenced by this field.\nIn most databases, this relationship is represented by a \"foreign key\". That is, a\nvalue for such a field matches the value of the id\nfor an entity of this type.</p>",
                "default": null
            },
            {
                "name": "serialize",
                "type": "function",
                "doc": "<p>See the serialize method.</p>",
                "default": null
            },
            {
                "name": "sortType",
                "type": "function/string",
                "doc": "<p>A function which converts a Field's value to a comparable value in order to ensure\ncorrect sort ordering.</p>",
                "default": null
            },
            {
                "name": "unique",
                "type": "boolean",
                "doc": "<p><code>true</code> if the value of this field is unique amongst all instances. When used with a\n<code>reference</code> this describes a \"one-to-one\" relationship. It is almost always the case\nthat a <code>unique</code> field cannot also be nullable.</p>",
                "default": "false"
            },
            {
                "name": "validators",
                "type": "object[]",
                "doc": "<p>An array of validators for this field. These\n<code>validators</code> will only be passed a field value to validate.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.field.Integer": {
        "type": "Ext.data.field.Integer",
        "configs": [],
        "events": []
    },
    "Ext.data.field.Number": {
        "type": "Ext.data.field.Number",
        "configs": [],
        "events": []
    },
    "Ext.data.field.String": {
        "type": "Ext.data.field.String",
        "configs": [
            {
                "name": "sortType",
                "type": "function/string",
                "doc": "<p>A function which converts a Field's value to a comparable value in order to ensure\ncorrect sort ordering.</p>",
                "default": "'asUCString'"
            }
        ],
        "events": []
    },
    "Ext.data.flash.BinaryXhr": {
        "type": "Ext.data.flash.BinaryXhr",
        "doc": "<p>Simulates an XMLHttpRequest object's methods and properties as returned\nform the flash polyfill plugin. Used in submitting binary data in browsers that do\nnot support doing so from JavaScript.\nNOTE: By default this will look for the flash object in the ext directory. When packaging and deploying the app, copy the <tt>ext/plugins</tt> directory and its contents to your root directory. For custom deployments where just the <tt>FlashPlugin.swf</tt> file gets copied (e.g. to <tt>/resources/FlashPlugin.swf</tt>), make sure to notify the framework of the location of the plugin before making the first attempt to post binary data, e.g. in the <tt>launch</tt> method of your app do:</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.identifier.Generator": {
        "type": "Ext.data.identifier.Generator",
        "doc": "<p>This class is a base for all id generators. It also provides lookup of id generators by\ntheir id.</p>",
        "configs": [
            {
                "name": "id",
                "type": "string",
                "doc": "<p>The id for this generator.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.identifier.Negative": {
        "type": "Ext.data.identifier.Negative",
        "doc": "<p>This class id generator produces successive negative numbers for id's. That is, -1, -2,\netc..</p>",
        "configs": [
            {
                "name": "increment",
                "type": "number",
                "doc": "<p>The number by which to adjust the <code>seed</code> after for the next sequential id.</p>",
                "default": null
            },
            {
                "name": "seed",
                "type": "number",
                "doc": "<p>The number at which to start generating sequential id's.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.identifier.Sequential": {
        "type": "Ext.data.identifier.Sequential",
        "doc": "<p>This class is a sequential id generator. A simple use of this class would be like so:</p>",
        "configs": [
            {
                "name": "increment",
                "type": "number",
                "doc": "<p>The number by which to adjust the <code>seed</code> after for the next sequential id.</p>",
                "default": "1"
            },
            {
                "name": "prefix",
                "type": "string",
                "doc": "<p>The string to place in front of the sequential number for each generated id.</p>",
                "default": null
            },
            {
                "name": "seed",
                "type": "number",
                "doc": "<p>The number at which to start generating sequential id's.</p>",
                "default": "1"
            }
        ],
        "events": []
    },
    "Ext.data.identifier.Uuid": {
        "type": "Ext.data.identifier.Uuid",
        "doc": "<p>This class generates UUID's according to RFC 4122. This class has a default id property.\nThis means that a single instance is shared unless the id property is overridden. Thus,\ntwo Ext.data.Model instances configured like the following share one generator:</p>",
        "configs": [
            {
                "name": "clockSeq",
                "type": "number",
                "doc": "<p>A clock value to help avoid duplicates.</p>",
                "default": null
            },
            {
                "name": "id",
                "type": "object",
                "doc": "<p>The id for this generator instance. By default all model instances share the same\nUUID generator instance. By specifying an id other then 'uuid', a unique generator instance\nwill be created for the Model.</p>",
                "default": null
            },
            {
                "name": "salt",
                "type": "number/object",
                "doc": "<p>This value is a 48-bit number. This can be a number or an object with <code>hi</code> and <code>lo</code>\nproperties where <code>lo</code> is the low 32-bits and <code>hi</code> is the upper 16 bits.</p>",
                "default": null
            },
            {
                "name": "timestamp",
                "type": "number/object",
                "doc": "<p>When created, this value is a 60-bit number. This can be a number or an object with\n<code>hi</code> and <code>lo</code> properties where <code>lo</code> is the low 32-bits and <code>hi</code> is the upper 28 bits.</p>",
                "default": null
            },
            {
                "name": "version",
                "type": "number",
                "doc": "<p>The Version of UUID. Supported values are:</p>",
                "default": "4"
            }
        ],
        "events": []
    },
    "Ext.data.matrix.Matrix": {
        "type": "Ext.data.matrix.Matrix",
        "doc": "<p>This class manages a many-to-many matrix for a <code>Session</code>.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.matrix.Side": {
        "type": "Ext.data.matrix.Side",
        "doc": "<p>This class manages one side of a <code>Matrix</code>.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.matrix.Slice": {
        "type": "Ext.data.matrix.Slice",
        "doc": "<p>This class manages one side of a <code>Matrix</code>.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.operation.Create": {
        "type": "Ext.data.operation.Create",
        "doc": "<p>Enacpsulates a create operation as performed by a proxy.</p>",
        "configs": [
            {
                "name": "recordCreator",
                "type": "function",
                "doc": "<p>Passed to the reader, see Ext.data.reader.Reader.read</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.operation.Destroy": {
        "type": "Ext.data.operation.Destroy",
        "doc": "<p>Enacpsulates a destriy operation as performed by a proxy.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.operation.Operation": {
        "type": "Ext.data.operation.Operation",
        "doc": "<p>Represents a read or write operation performed by a Proxy.\nOperation objects are used to enable communication between Stores and Proxies.\nApplication developers should rarely need to interact with Operation objects directly.</p>",
        "configs": [
            {
                "name": "batch",
                "type": "ext.data.batch",
                "doc": "<p>The batch for this operation, if applicable</p>",
                "default": null
            },
            {
                "name": "callback",
                "type": "function",
                "doc": "<p>Function to execute when operation completed.</p>",
                "default": null
            },
            {
                "name": "id",
                "type": "object",
                "doc": "<p>The id of the operation.</p>",
                "default": null
            },
            {
                "name": "internalCallback",
                "type": "function",
                "doc": "<p>A callback to run before the callback.</p>",
                "default": null
            },
            {
                "name": "internalScope",
                "type": "object",
                "doc": "<p>Scope to run the internalCallback</p>",
                "default": null
            },
            {
                "name": "params",
                "type": "object",
                "doc": "<p>Parameters to pass along with the request when performing the operation.</p>",
                "default": null
            },
            {
                "name": "proxy",
                "type": "ext.data.proxy.proxy",
                "doc": "<p>The proxy for this operation</p>",
                "default": null
            },
            {
                "name": "recordCreator",
                "type": "function",
                "doc": "<p>Passed to the reader, see Ext.data.reader.Reader.read</p>",
                "default": null
            },
            {
                "name": "records",
                "type": "ext.data.model[]",
                "doc": "<p>The records associated with this operation. If this is a <code>read</code> operation, this will be\n<code>null</code> until data is returned from the Ext.data.proxy.Proxy.</p>",
                "default": null
            },
            {
                "name": "request",
                "type": "ext.data.request",
                "doc": "<p>The request for this operation.</p>",
                "default": null
            },
            {
                "name": "response",
                "type": "object",
                "doc": "<p>The response for this operation.</p>",
                "default": null
            },
            {
                "name": "resultSet",
                "type": "ext.data.resultset",
                "doc": "<p>The ResultSet for this operation.</p>",
                "default": null
            },
            {
                "name": "scope",
                "type": "object",
                "doc": "<p>Scope for the callback function.</p>",
                "default": null
            },
            {
                "name": "synchronous",
                "type": "boolean",
                "doc": "<p>True if this Operation is to be executed synchronously. This property is inspected by a\nBatch to see if a series of Operations can be executed in parallel or not.</p>",
                "default": "false"
            },
            {
                "name": "url",
                "type": "string",
                "doc": "<p>The url for this operation. Typically this will be provided by a proxy and not configured here.</p>",
                "default": "''"
            }
        ],
        "events": []
    },
    "Ext.data.operation.Read": {
        "type": "Ext.data.operation.Read",
        "doc": "<p>Enacpsulates a read operation as performed by a proxy.</p>",
        "configs": [
            {
                "name": "addRecords",
                "type": "boolean",
                "doc": "<p>Passed internally to loadRecords when the load completes</p>",
                "default": "false"
            },
            {
                "name": "filters",
                "type": "ext.util.filter[]",
                "doc": "<p>Optional array of filter objects. Only applies to 'read' actions.</p>",
                "default": null
            },
            {
                "name": "grouper",
                "type": "ext.util.grouper",
                "doc": "<p>Optional grouping configuration. Only applies to 'read' actions where grouping is desired.</p>",
                "default": null
            },
            {
                "name": "limit",
                "type": "number",
                "doc": "<p>The number of records to load. Used on 'read' actions when paging is being used.</p>",
                "default": null
            },
            {
                "name": "page",
                "type": "number",
                "doc": "<p>The page for this operation.</p>",
                "default": null
            },
            {
                "name": "sorters",
                "type": "ext.util.sorter[]",
                "doc": "<p>Optional array of sorter objects. Only applies to 'read' actions.</p>",
                "default": null
            },
            {
                "name": "start",
                "type": "number",
                "doc": "<p>The start index (offset), used in paging when running a 'read' action.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.operation.Update": {
        "type": "Ext.data.operation.Update",
        "doc": "<p>Enacpsulates a update operation as performed by a proxy.</p>",
        "configs": [
            {
                "name": "recordCreator",
                "type": "function",
                "doc": "<p>Passed to the reader, see Ext.data.reader.Reader.read</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.proxy.Ajax": {
        "type": "Ext.data.proxy.Ajax",
        "doc": "<p>AjaxProxy is one of the most widely-used ways of getting data into your application. It uses AJAX requests to load\ndata from the server, usually to be placed into a Store. Let's take a look at a typical setup.\nHere we're going to set up a Store that has an AjaxProxy. To prepare, we'll also set up a Model:</p>",
        "configs": [
            {
                "name": "actionMethods",
                "type": "object",
                "doc": "<p>Mapping of action name to HTTP request method. In the basic AjaxProxy these are set to 'GET' for 'read' actions\nand 'POST' for 'create', 'update' and 'destroy' actions. The Ext.data.proxy.Rest maps these to the\ncorrect RESTful methods.</p>",
                "default": "{create: 'POST', read: 'GET', update: 'POST', destroy: 'POST'}"
            },
            {
                "name": "binary",
                "type": "boolean",
                "doc": "<p>True to request binary data from the server.  This feature requires\nthe use of a binary reader such as AMF Reader</p>",
                "default": "false"
            },
            {
                "name": "headers",
                "type": "object",
                "doc": "<p>Any headers to add to the Ajax request.</p>",
                "default": null
            },
            {
                "name": "paramsAsJson",
                "type": "boolean",
                "doc": "<p><code>true</code> to have any request parameters sent as jsonData\nwhere they can be parsed from the raw request. By default, parameters are sent via the\nparams property. <strong>Note</strong>: This setting does not apply when the\nrequest is sent as a 'GET' request. See actionMethods for controlling the HTTP verb\nthat is used when sending requests.</p>",
                "default": "false"
            },
            {
                "name": "password",
                "type": "string",
                "doc": "<p>Most oData feeds require basic HTTP authentication. This configuration allows\nyou to specify the password.</p>",
                "default": null
            },
            {
                "name": "useDefaultXhrHeader",
                "type": "boolean",
                "doc": "<p>Set this to false to not send the default Xhr header (X-Requested-With) with every request.\nThis should be set to false when making CORS (cross-domain) requests.</p>",
                "default": "true"
            },
            {
                "name": "username",
                "type": "string",
                "doc": "<p>Most oData feeds require basic HTTP authentication. This configuration allows\nyou to specify the username.</p>",
                "default": null
            },
            {
                "name": "withCredentials",
                "type": "boolean",
                "doc": "<p>This configuration is sometimes necessary when using cross-origin resource sharing.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.data.proxy.Client": {
        "type": "Ext.data.proxy.Client",
        "doc": "<p>Base class for any client-side storage. Used as a superclass for Memory and\nWeb Storage proxies. Do not use directly, use one of the subclasses instead.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.proxy.Direct": {
        "type": "Ext.data.proxy.Direct",
        "doc": "<p>This class is used to send requests to the server using Ext.Direct. When a\nrequest is made, the transport mechanism is handed off to the appropriate\nProvider to complete the call.</p>",
        "configs": [
            {
                "name": "api",
                "type": "object",
                "doc": "<p>The same as Ext.data.proxy.Server.api, however instead of providing urls, you should provide a direct\nfunction call. See directFn.</p>",
                "default": null
            },
            {
                "name": "directFn",
                "type": "function/string",
                "doc": "<p>Function to call when executing a request. directFn is a simple alternative to defining the api configuration-parameter\nfor Store's which will not implement a full CRUD api. The directFn may also be a string reference to the fully qualified\nname of the function, for example: 'MyApp.company.GetProfile'. This can be useful when using dynamic loading. The string\nwill be looked up when the proxy is created.</p>",
                "default": null
            },
            {
                "name": "metadata",
                "type": "object/array",
                "doc": "<p>Optional set of fixed parameters to send with every Proxy request, similar to\nextraParams but available with all CRUD requests. Also unlike\nextraParams, metadata is not mixed with the ordinary data but sent\nseparately in the data packet.\nYou may need to update your server side Ext.Direct stack to use this feature.</p>",
                "default": null
            },
            {
                "name": "paramOrder",
                "type": "string/string[]",
                "doc": "<p>Defaults to undefined. A list of params to be executed server side.  Specify the params in the order in\nwhich they must be executed on the server-side as either (1) an Array of String values, or (2) a String\nof params delimited by either whitespace, comma, or pipe. For example, any of the following would be\nacceptable:</p>",
                "default": null
            },
            {
                "name": "paramsAsHash",
                "type": "boolean",
                "doc": "<p>Send parameters as a collection of named arguments.\nProviding a paramOrder nullifies this configuration.</p>",
                "default": "true"
            }
        ],
        "events": []
    },
    "Ext.data.proxy.JsonP": {
        "type": "Ext.data.proxy.JsonP",
        "doc": "<p>The JsonP proxy is useful when you need to load data from a domain other than the one your application is running on. If\nyour application is running on http://domainA.com it cannot use Ajax to load its data\nfrom http://domainB.com because cross-domain ajax requests are prohibited by the browser.</p>",
        "configs": [
            {
                "name": "autoAppendParams",
                "type": "boolean",
                "doc": "<p>True to automatically append the request's params to the generated url. Defaults to true</p>",
                "default": "true"
            },
            {
                "name": "callbackKey",
                "type": "string",
                "doc": "<p>See Ext.data.JsonP.callbackKey.</p>",
                "default": "'callback'"
            },
            {
                "name": "recordParam",
                "type": "string",
                "doc": "<p>The HTTP parameter name to use when passing records to the server and the Json writer is not configured\nto encode records into a parameter.</p>",
                "default": "'records'"
            }
        ],
        "events": []
    },
    "Ext.data.proxy.LocalStorage": {
        "type": "Ext.data.proxy.LocalStorage",
        "doc": "<p>The LocalStorageProxy uses the new HTML5 localStorage API to save Model data locally on the\nclient browser. HTML5 localStorage is a key-value store (e.g. cannot save complex objects like JSON), so\nLocalStorageProxy automatically serializes and deserializes data when saving and retrieving it.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.proxy.Memory": {
        "type": "Ext.data.proxy.Memory",
        "doc": "<p>In-memory proxy. This proxy simply uses a local variable for data storage/retrieval, so its contents are lost on\nevery page refresh.</p>",
        "configs": [
            {
                "name": "data",
                "type": "object",
                "doc": "<p>Optional data to pass to configured Reader.</p>",
                "default": null
            },
            {
                "name": "enablePaging",
                "type": "boolean",
                "doc": "<p>Configure as <code>true</code> to enable this MemoryProxy to honour a read operation's <code>start</code> and <code>limit</code> options.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.data.proxy.Proxy": {
        "type": "Ext.data.proxy.Proxy",
        "doc": "<p>Proxies are used by Stores to handle the loading and saving of Model\ndata. Usually developers will not need to create or interact with proxies directly.</p>",
        "configs": [
            {
                "name": "batchActions",
                "type": "boolean",
                "doc": "<p>True to batch actions of a particular type when synchronizing the store. Defaults to true.</p>",
                "default": "true"
            },
            {
                "name": "batchOrder",
                "type": "string",
                "doc": "<p>Comma-separated ordering 'create', 'update' and 'destroy' actions when batching. Override this to set a different\norder for the batched CRUD actions to be executed in. Defaults to 'create,update,destroy'.</p>",
                "default": "'create,update,destroy'"
            },
            {
                "name": "model",
                "type": "string/ext.data.model",
                "doc": "<p>The name of the Model to tie to this Proxy. Can be either the string name of the Model, or a reference to the\nModel constructor. Required.</p>",
                "default": null
            },
            {
                "name": "reader",
                "type": "object/string/ext.data.reader.reader",
                "doc": "<p>The Ext.data.reader.Reader to use to decode the server's response or data read\nfrom client. This can either be a Reader instance, a config object or just a\nvalid Reader type name (e.g. 'json', 'xml').</p>",
                "default": "{type: 'json'}"
            },
            {
                "name": "writer",
                "type": "object/string/ext.data.writer.writer",
                "doc": "<p>The Ext.data.writer.Writer to use to encode any request sent to the server or\nsaved to client. This can either be a Writer instance, a config object or just\na valid Writer type name (e.g. 'json', 'xml').</p>",
                "default": "{type: 'json'}"
            }
        ],
        "events": [
            {
                "name": "metachange",
                "params": "this(Ext.data.proxy.Proxy) meta(Object) eOpts(Object)",
                "doc": "<p>Fires when this proxy's reader provides new metadata. Metadata usually consists\nof new field definitions, but can include any configuration data required by an\napplication, and can be processed as needed in the event handler.\nThis event is currently only fired for JsonReaders. Note that this event is also\npropagated by Ext.data.Store, which is typically where it would be handled.</p>"
            }
        ]
    },
    "Ext.data.proxy.Rest": {
        "type": "Ext.data.proxy.Rest",
        "doc": "<p>The Rest proxy is a specialization of the AjaxProxy which simply maps the four actions\n(create, read, update and destroy) to RESTful HTTP verbs. For example, let's set up a Model\nwith an inline Rest proxy</p>",
        "configs": [
            {
                "name": "actionMethods",
                "type": "object",
                "doc": "<p>Mapping of action name to HTTP request method. In the basic AjaxProxy these are set to 'GET' for 'read' actions\nand 'POST' for 'create', 'update' and 'destroy' actions. The Ext.data.proxy.Rest maps these to the\ncorrect RESTful methods.</p>",
                "default": "{create: 'POST', read: 'GET', update: 'PUT', destroy: 'DELETE'}"
            },
            {
                "name": "appendId",
                "type": "boolean",
                "doc": "<p>True to automatically append the ID of a Model instance when performing a request based on that single instance.\nSee Rest proxy intro docs for more details. Defaults to true.</p>",
                "default": "true"
            },
            {
                "name": "batchActions",
                "type": "boolean",
                "doc": "<p>True to batch actions of a particular type when synchronizing the store. Defaults to false.</p>",
                "default": "false"
            },
            {
                "name": "format",
                "type": "string",
                "doc": "<p>Optional data format to send to the server when making any request (e.g. 'json'). See the Rest proxy intro docs\nfor full details. Defaults to undefined.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.proxy.Server": {
        "type": "Ext.data.proxy.Server",
        "doc": "<p>ServerProxy is a superclass of JsonPProxy and AjaxProxy, and\nwould not usually be used directly.</p>",
        "configs": [
            {
                "name": "api",
                "type": "object",
                "doc": "<p>Specific urls to call on CRUD action methods \"create\", \"read\", \"update\" and \"destroy\". Defaults to:</p>",
                "default": null
            },
            {
                "name": "cacheString",
                "type": "string",
                "doc": "<p>The name of the cache param added to the url when using noCache. Defaults to \"_dc\".</p>",
                "default": "\"_dc\""
            },
            {
                "name": "directionParam",
                "type": "string",
                "doc": "<p>The name of the direction parameter to send in a request. <strong>This is only used when simpleSortMode is set to\ntrue.</strong></p>",
                "default": "\"dir\""
            },
            {
                "name": "extraParams",
                "type": "object",
                "doc": "<p>Extra parameters that will be included on every request. Individual requests with params of the same name\nwill override these params when they are in conflict.</p>",
                "default": "{}"
            },
            {
                "name": "filterParam",
                "type": "string",
                "doc": "<p>The name of the 'filter' parameter to send in a request. Defaults to 'filter'. Set this to <code>''</code> if you don't\nwant to send a filter parameter.</p>",
                "default": "\"filter\""
            },
            {
                "name": "groupDirectionParam",
                "type": "string",
                "doc": "<p>The name of the direction parameter to send in a request. <strong>This is only used when simpleGroupMode is set to\ntrue.</strong></p>",
                "default": "\"groupDir\""
            },
            {
                "name": "groupParam",
                "type": "string",
                "doc": "<p>The name of the 'group' parameter to send in a request. Defaults to 'group'. Set this to <code>''</code> if you don't\nwant to send a group parameter.</p>",
                "default": "\"group\""
            },
            {
                "name": "idParam",
                "type": "string",
                "doc": "<p>The name of the parameter which carries the id of the entity being operated upon.</p>",
                "default": "\"id\""
            },
            {
                "name": "limitParam",
                "type": "string",
                "doc": "<p>The name of the 'limit' parameter to send in a request. Defaults to 'limit'. Set this to <code>''</code> if you don't\nwant to send a limit parameter.</p>",
                "default": "\"limit\""
            },
            {
                "name": "noCache",
                "type": "boolean",
                "doc": "<p>Disable caching by adding a unique parameter name to the request. Set to false to allow caching. Defaults to true.</p>",
                "default": "true"
            },
            {
                "name": "pageParam",
                "type": "string",
                "doc": "<p>The name of the 'page' parameter to send in a request. Defaults to 'page'. Set this to <code>''</code> if you don't\nwant to send a page parameter.</p>",
                "default": "\"page\""
            },
            {
                "name": "simpleGroupMode",
                "type": "boolean",
                "doc": "<p>Enabling simpleGroupMode in conjunction with remoteGroup will only send one group property and a direction when a\nremote group is requested. The groupDirectionParam and groupParam will be sent with the property name and either 'ASC'\nor 'DESC'.</p>",
                "default": "false"
            },
            {
                "name": "simpleSortMode",
                "type": "boolean",
                "doc": "<p>Enabling simpleSortMode in conjunction with remoteSort will only send one sort property and a direction when a\nremote sort is requested. The directionParam and sortParam will be sent with the property name\nand either 'ASC' or 'DESC'.</p>",
                "default": "false"
            },
            {
                "name": "sortParam",
                "type": "string",
                "doc": "<p>The name of the 'sort' parameter to send in a request. Defaults to 'sort'. Set this to <code>''</code> if you don't\nwant to send a sort parameter.</p>",
                "default": "\"sort\""
            },
            {
                "name": "startParam",
                "type": "string",
                "doc": "<p>The name of the 'start' parameter to send in a request. Defaults to 'start'. Set this to <code>''</code> if you don't\nwant to send a start parameter.</p>",
                "default": "\"start\""
            },
            {
                "name": "timeout",
                "type": "number",
                "doc": "<p>The number of milliseconds to wait for a response. Defaults to 30000 milliseconds (30 seconds).</p>",
                "default": "30000"
            },
            {
                "name": "url",
                "type": "string",
                "doc": "<p>The URL from which to request the data object.</p>",
                "default": "''"
            }
        ],
        "events": [
            {
                "name": "exception",
                "params": "this(Ext.data.proxy.Proxy) request(Ext.data.Request) operation(Ext.data.operation.Operation) eOpts(Object)",
                "doc": "<p>Fires when the server returns an exception. This event may also be listened\nto in the event that a request has timed out or has been aborted.</p>"
            }
        ]
    },
    "Ext.data.proxy.SessionStorage": {
        "type": "Ext.data.proxy.SessionStorage",
        "doc": "<p>Proxy which uses HTML5 session storage as its data storage/retrieval mechanism. If this proxy is used in a browser\nwhere session storage is not supported, the constructor will throw an error. A session storage proxy requires a\nunique ID which is used as a key in which all record data are stored in the session storage object.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.proxy.WebStorage": {
        "type": "Ext.data.proxy.WebStorage",
        "doc": "<p>WebStorageProxy is simply a superclass for the LocalStorage and SessionStorage proxies. It uses the new HTML5 key/value client-side storage objects to\nsave model instances for offline use.</p>",
        "configs": [
            {
                "name": "id",
                "type": "string",
                "doc": "<p>The unique ID used as the key in which all record data are stored in the local storage object.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.reader.Array": {
        "type": "Ext.data.reader.Array",
        "doc": "<p>Data reader class to create an Array of Ext.data.Model objects from an Array.\nEach element of that Array represents a row of data fields. The\nfields are pulled into a Record object using as a subscript, the <code>mapping</code> property\nof the field definition if it exists, or the field's ordinal position in the definition.</p>",
        "configs": [
            {
                "name": "successProperty",
                "type": "string",
                "doc": "<p>Name of the property from which to retrieve the <code>success</code> attribute, the value of which indicates\nwhether a given request succeeded or failed (typically a boolean or 'true'|'false'). See\nExt.data.proxy.Server.exception for additional information.</p>",
                "default": null
            },
            {
                "name": "totalProperty",
                "type": "string",
                "doc": "<p>Name of the property from which to retrieve the total number of records in the dataset. This is only needed if\nthe whole dataset is not passed in one go, but is being paged from the remote server.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.reader.Json": {
        "type": "Ext.data.reader.Json",
        "doc": "<p>The JSON Reader is used by a Proxy to read a server response that is sent back in JSON format. This usually\nhappens as a result of loading a Store - for example we might create something like this:</p>",
        "configs": [
            {
                "name": "metaProperty",
                "type": "string",
                "doc": "<p>Name of the property from which to retrieve the <code>metaData</code> attribute. See metaData.</p>",
                "default": "'metaData'"
            },
            {
                "name": "preserveRawData",
                "type": "boolean",
                "doc": "<p>The reader will keep a copy of the most recent request in the rawData property. For performance reasons,\nthe data object for each record is used directly as the model data. This means that these objects may be modified and\nthus modify the raw data. To ensure the objects are copied, set this option to <code>true</code>. NB: This only applies to items\nthat are read as part of the data array, any other metadata will not be modified:</p>",
                "default": "false"
            },
            {
                "name": "record",
                "type": "string",
                "doc": "<p>The optional location within the JSON response that the record data itself can be found at.\nSee the JsonReader intro docs for more details. This is not often needed.</p>",
                "default": null
            },
            {
                "name": "useSimpleAccessors",
                "type": "boolean",
                "doc": "<p>True to ensure that field names/mappings are treated as literals when\nreading values.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.data.reader.Reader": {
        "type": "Ext.data.reader.Reader",
        "doc": "<p>Readers are used to interpret data to be loaded into a Model instance or a Store - often in response to an AJAX request. In general there is usually no need to create\na Reader instance directly, since a Reader is almost always used together with a Proxy,\nand is configured using the Proxy's reader configuration property:</p>",
        "configs": [
            {
                "name": "implicitIncludes",
                "type": "boolean",
                "doc": "<p>True to automatically parse models nested within other models in a response object. See the\nExt.data.reader.Reader intro docs for full explanation.</p>",
                "default": "true"
            },
            {
                "name": "messageProperty",
                "type": "string",
                "doc": "<p>The name of the property which contains a response message for exception handling. If you want to return a false success\nresponse from the server, maybe due to some server-side validation, the messageProperty can hold the error message. For\nexample:</p>",
                "default": "''"
            },
            {
                "name": "model",
                "type": "string/ext.data.model",
                "doc": "<p>The model to use for this reader. This config is only required if the reader is being used\nwithout a proxy, otherwise the proxy will automatically set the model.</p>",
                "default": null
            },
            {
                "name": "proxy",
                "type": "ext.data.proxy.proxy",
                "doc": "<p>The proxy attached to this reader. Typically only needed onMetaChange so that\nwe can set the new model on the proxy.</p>",
                "default": null
            },
            {
                "name": "readRecordsOnFailure",
                "type": "boolean",
                "doc": "<p>True to extract the records from a data packet even if the successProperty returns false.</p>",
                "default": "true"
            },
            {
                "name": "rootProperty",
                "type": "string",
                "doc": "<p>The name of the property which contains the data items corresponding to the Model(s) for which this\nReader is configured.  For JSON reader it's a property name (or a dot-separated list of property names\nif the root is nested).  For XML reader it's a CSS selector.  For Array reader the root is not applicable\nsince the data is assumed to be a single-level array of arrays.</p>",
                "default": "''"
            },
            {
                "name": "successProperty",
                "type": "string",
                "doc": "<p>Name of the property from which to retrieve the <code>success</code> attribute, the value of which indicates\nwhether a given request succeeded or failed (typically a boolean or 'true'|'false'). See\nExt.data.proxy.Server.exception for additional information.</p>",
                "default": "'success'"
            },
            {
                "name": "totalProperty",
                "type": "string",
                "doc": "<p>Name of the property from which to retrieve the total number of records in the dataset. This is only needed if\nthe whole dataset is not passed in one go, but is being paged from the remote server.</p>",
                "default": "'total'"
            },
            {
                "name": "transform",
                "type": "function|object",
                "doc": "<p>If a transform function is set, it will be invoked just before readRecords executes.\nIt is passed the raw (deserialized) data object. The transform function returns a data object, which can be\na modified version of the original data object, or a completely new data object. The transform can\nbe a function, or an object with a 'fn' key and an optional 'scope' key. Example usage:</p>",
                "default": null
            },
            {
                "name": "typeProperty",
                "type": "string",
                "doc": "<p>The name of the property in a node raw data block which indicates the type of the model to be created from that raw data. Useful for heterogenous trees.</p>",
                "default": "''"
            }
        ],
        "events": [
            {
                "name": "exception",
                "params": "reader(Ext.data.reader.Reader) response(XMLHttpRequest) error(Ext.data.ResultSet) eOpts(Object)",
                "doc": "<p>Fires when the reader receives improperly encoded data from the server</p>"
            }
        ]
    },
    "Ext.data.reader.Xml": {
        "type": "Ext.data.reader.Xml",
        "doc": "<p>The XML Reader is used by a Proxy to read a server response that is sent back in XML format. This usually happens as\na result of loading a Store - for example we might create something like this:</p>",
        "configs": [
            {
                "name": "namespace",
                "type": "string",
                "doc": "<p>A namespace prefix that will be prepended to the field name when reading a\nfield from an XML node.  Take, for example, the following Model:</p>",
                "default": "''"
            },
            {
                "name": "record",
                "type": "string",
                "doc": "<p>The DomQuery path to the repeated element which contains record information.</p>",
                "default": "''"
            }
        ],
        "events": []
    },
    "Ext.data.schema.Association": {
        "type": "Ext.data.schema.Association",
        "doc": "<p>This class and its derivatives describe how two entities are related to each other.\nAssociations have the following forms:</p>",
        "configs": [
            {
                "name": "name",
                "type": "string",
                "doc": "<p>The name of this association.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.schema.ManyToMany": {
        "type": "Ext.data.schema.ManyToMany",
        "doc": "<p>This relationship describes the case where any one entity of one type may relate to any\nnumber of entities of another type, and also in the reverse.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.schema.ManyToOne": {
        "type": "Ext.data.schema.ManyToOne",
        "doc": "<p>This type of association describes the case where one entity is referenced by zero or\nmore other entities typically using a \"foreign key\" field.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.schema.Namer": {
        "type": "Ext.data.schema.Namer",
        "doc": "<p>This class provides name derivation methods for use by a <code>Schema</code>.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.schema.OneToOne": {
        "type": "Ext.data.schema.OneToOne",
        "doc": "<p>This type of association is similar to many-to-one,\nexcept that the reference field also has set\nunique to <code>true</code>.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.schema.Role": {
        "type": "Ext.data.schema.Role",
        "configs": [],
        "events": []
    },
    "Ext.data.schema.Schema": {
        "type": "Ext.data.schema.Schema",
        "doc": "<p>A Schema is a collection of related entities and their respective\nassociations.</p>",
        "configs": [
            {
                "name": "defaultIdentifier",
                "type": "object",
                "doc": "<p>This config is used to initialize the <code>Ext.data.Model.identifier</code> config\nfor classes that do not define one.</p>",
                "default": null
            },
            {
                "name": "keyCheckDelay",
                "type": "number",
                "doc": "<p>The time to wait (in ms) before checking for null foreign keys on records that\nwill cause them to be dropped. This is useful for allowing records to be moved to a different\nsource.</p>",
                "default": "10"
            },
            {
                "name": "namer",
                "type": "string/object/ext.data.schema.namer",
                "doc": "<p>Specifies or configures the name generator for the schema.</p>",
                "default": "'default'"
            },
            {
                "name": "namespace",
                "type": "string",
                "doc": "<p>The namespace for entity classes in this schema.</p>",
                "default": null
            },
            {
                "name": "proxy",
                "type": "object/ext.util.objecttemplate",
                "doc": "<p>This is a template used to produce <code>Ext.data.proxy.Proxy</code> configurations for\nModels that do not define an explicit <code>proxy</code>.</p>",
                "default": "{type: 'ajax', url: '{prefix}/{entityName}'}"
            },
            {
                "name": "urlPrefix",
                "type": "string",
                "doc": "<p>This is the URL prefix used for all requests to the server. It could be something\nlike \"/~api\". This value is included in the <code>proxy</code> template data as \"prefix\".</p>",
                "default": "\"\""
            }
        ],
        "events": []
    },
    "Ext.data.session.BatchVisitor": {
        "type": "Ext.data.session.BatchVisitor",
        "doc": "<p>This class is used internally by <code>Ext.data.Session.getSaveBatch</code> and is\nnot intended for direct use. It can be studied as an example of implementing a visitor\nto pass to <code>Ext.data.Session.visitData</code>.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.session.ChangesVisitor": {
        "type": "Ext.data.session.ChangesVisitor",
        "doc": "<p>This class is used internally by <code>Ext.data.Session.getChanges</code> to build\nup an object describing changes in the session. It is not intended for public use but\ncan be used as an example of the visitor <code>Ext.data.Session.visitData</code>\nrequires.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.session.ChildChangesVisitor": {
        "type": "Ext.data.session.ChildChangesVisitor",
        "doc": "<p>This visitor class adds extra capability to consider changes as\nthey would be considered for a parent session.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.validator.Bound": {
        "type": "Ext.data.validator.Bound",
        "doc": "<p>A superclass for a validator that checks if a value is within a certain range.</p>",
        "configs": [
            {
                "name": "bothMessage",
                "type": "string",
                "doc": "<p>The error message to return when the value is not in the specified range\nand both the minimum and maximum are specified.</p>",
                "default": null
            },
            {
                "name": "emptyMessage",
                "type": "string",
                "doc": "<p>The error message to return when the value is empty.</p>",
                "default": "'Must be present'"
            },
            {
                "name": "max",
                "type": "number",
                "doc": "<p>The maximum length value.</p>",
                "default": null
            },
            {
                "name": "maxOnlyMessage",
                "type": "string",
                "doc": "<p>The error message to return when the value is more than the maximum\nand only a maximum is specified.</p>",
                "default": null
            },
            {
                "name": "min",
                "type": "number",
                "doc": "<p>The minimum length value.</p>",
                "default": null
            },
            {
                "name": "minOnlyMessage",
                "type": "string",
                "doc": "<p>The error message to return when the value is less than the minimum\nand only a minimum is specified.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.validator.Email": {
        "type": "Ext.data.validator.Email",
        "doc": "<p>Validates that the value is a valid email.</p>",
        "configs": [
            {
                "name": "matcher",
                "type": "regexp",
                "doc": "<p>A matcher to check for simple emails. This may be overridden.</p>",
                "default": "/^(\")?(?:[^\\.\"])(?:(?:[\\.])?(?:[\\w\\-!#$%&'*+\\/=?\\^_`{|}~]))*\\1@(\\w[\\-\\w]*\\.){1,5}([A-Za-z]){2,6}$/"
            },
            {
                "name": "message",
                "type": "string",
                "doc": "<p>The error message to return when the value is not a valid email</p>",
                "default": "'Is not a valid email address'"
            }
        ],
        "events": []
    },
    "Ext.data.validator.Exclusion": {
        "type": "Ext.data.validator.Exclusion",
        "doc": "<p>Validates that the value does not exist in a list of values.</p>",
        "configs": [
            {
                "name": "message",
                "type": "string",
                "doc": "<p>The error message to return when the passed value exists in the\nspecified list.</p>",
                "default": "'Is a value that has been excluded'"
            }
        ],
        "events": []
    },
    "Ext.data.validator.Format": {
        "type": "Ext.data.validator.Format",
        "doc": "<p>Validates that the passed value matches a specific format specified by a regex.\nThe format is provided by the matcher config.</p>",
        "configs": [
            {
                "name": "matcher",
                "type": "regexp",
                "doc": "<p>The matcher regex to test against the value.</p>",
                "default": null
            },
            {
                "name": "message",
                "type": "string",
                "doc": "<p>The error message to return when the value does not match the format.</p>",
                "default": "'Is in the wrong format'"
            }
        ],
        "events": []
    },
    "Ext.data.validator.Inclusion": {
        "type": "Ext.data.validator.Inclusion",
        "doc": "<p>Validates that the value exists in a list of values.</p>",
        "configs": [
            {
                "name": "message",
                "type": "string",
                "doc": "<p>The error message to return when the passed value does not exist\nin the specified list.</p>",
                "default": "'Is not in the list of acceptable values'"
            }
        ],
        "events": []
    },
    "Ext.data.validator.Length": {
        "type": "Ext.data.validator.Length",
        "doc": "<p>Validates that the length of the value is between a min and max.</p>",
        "configs": [
            {
                "name": "bothMessage",
                "type": "string",
                "doc": "<p>The error message to return when the value length is not in the specified\nrange and both the minimum and maximum are specified.</p>",
                "default": "'Length must be between {0} and {1}'"
            },
            {
                "name": "max",
                "type": "number",
                "doc": "<p>The maximum length value.</p>",
                "default": null
            },
            {
                "name": "maxOnlyMessage",
                "type": "string",
                "doc": "<p>The error message to return when the value is more than the maximum\nlength and only a maximum is specified.</p>",
                "default": "'Length must be no more than {0}'"
            },
            {
                "name": "min",
                "type": "number",
                "doc": "<p>The minimum length value.</p>",
                "default": null
            },
            {
                "name": "minOnlyMessage",
                "type": "string",
                "doc": "<p>The error message to return when the value is less than the minimum\nlength and only a minimum is specified.</p>",
                "default": "'Length must be at least {0}'"
            }
        ],
        "events": []
    },
    "Ext.data.validator.List": {
        "type": "Ext.data.validator.List",
        "doc": "<p>A superclass for inclusion/exclusion validators.</p>",
        "configs": [
            {
                "name": "list",
                "type": "array",
                "doc": "<p>The list to check the passed value against.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.validator.Presence": {
        "type": "Ext.data.validator.Presence",
        "doc": "<p>Validates that the passed value is not <code>null</code> or <code>undefined</code> or <code>''</code>.</p>",
        "configs": [
            {
                "name": "allowEmpty",
                "type": "boolean",
                "doc": "<p><code>true</code> to allow <code>''</code> as a valid value.</p>",
                "default": "false"
            },
            {
                "name": "message",
                "type": "string",
                "doc": "<p>The error message to return when the value is not specified.</p>",
                "default": "'Must be present'"
            }
        ],
        "events": []
    },
    "Ext.data.validator.Range": {
        "type": "Ext.data.validator.Range",
        "doc": "<p>Validates that the the value is between a min and max.</p>",
        "configs": [
            {
                "name": "bothMessage",
                "type": "string",
                "doc": "<p>The error message to return when the value is not in the specified range\nand both the minimum and maximum are specified.</p>",
                "default": "'Must be between {0} and {1}'"
            },
            {
                "name": "max",
                "type": "number",
                "doc": "<p>The maximum value.</p>",
                "default": null
            },
            {
                "name": "maxOnlyMessage",
                "type": "string",
                "doc": "<p>The error message to return when the value is more than the maximum\nand only a maximum is specified.</p>",
                "default": "'Must be no more than than {0}'"
            },
            {
                "name": "min",
                "type": "number",
                "doc": "<p>The minimum value.</p>",
                "default": null
            },
            {
                "name": "minOnlyMessage",
                "type": "string",
                "doc": "<p>The error message to return when the value is less than the minimum\nand only a minimum is specified.</p>",
                "default": "'Must be must be at least {0}'"
            },
            {
                "name": "nanMessage",
                "type": "string",
                "doc": "<p>The error message to return when the value is not numeric.</p>",
                "default": "'Must be numeric'"
            }
        ],
        "events": []
    },
    "Ext.data.validator.Validator": {
        "type": "Ext.data.validator.Validator",
        "doc": "<p>The base class for validators to be used to validate fields in\na model.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.writer.Json": {
        "type": "Ext.data.writer.Json",
        "doc": "<p>This class is used to write Ext.data.Model data to the server in a JSON format.\nThe allowSingle configuration can be set to false to force the records to always\nbe encoded in an array, even if there is only a single record being sent.</p>",
        "configs": [
            {
                "name": "allowSingle",
                "type": "boolean",
                "doc": "<p>Configure with <code>false</code> to ensure that records are always wrapped in an array, even if there is only\none record being sent. When there is more than one record, they will always be encoded into an array.</p>",
                "default": "true"
            },
            {
                "name": "encode",
                "type": "boolean",
                "doc": "<p>Configure <code>true</code> to send record data (all record fields if writeAllFields is <code>true</code>)\nas a JSON encoded HTTP parameter named by the rootProperty configuration.</p>",
                "default": "false"
            },
            {
                "name": "expandData",
                "type": "boolean",
                "doc": "<p>By default, when dot-delimited field mappings are\nused (e.g. <code>name: 'myProperty', mapping: 'my.nested.property'</code>) the writer will simply output a flat data\nobject containing the mapping string literal as the property name (e.g. <code>{ 'my.nested.property': 'foo' }</code>).</p>",
                "default": "false"
            },
            {
                "name": "rootProperty",
                "type": "string",
                "doc": "<p>The HTTP parameter name by which JSON encoded records will be passed to the server if the\nencode option is <code>true</code>.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.writer.Writer": {
        "type": "Ext.data.writer.Writer",
        "doc": "<p>Base Writer class used by most subclasses of Ext.data.proxy.Server. This class\nis responsible for taking a set of Ext.data.operation.Operation objects and a\nExt.data.Request object and modifying that request based on the Operations.</p>",
        "configs": [
            {
                "name": "allDataOptions",
                "type": "object",
                "doc": "<p>This object contains the options passed to <code>Ext.data.Model.getData</code> when\nwriting <code>Ext.data.Model.phantom</code> records or when <code>writeAllFields</code> is set\nto <code>true</code>.</p>",
                "default": "{persist: true}"
            },
            {
                "name": "clientIdProperty",
                "type": "string",
                "doc": "<p>When specified this property causes the <code>Ext.data.Model.idProperty</code> of\nnewly created records to be sent to the server as this name instead of the\nvalue of the <code>idProperty</code>.</p>",
                "default": null
            },
            {
                "name": "dateFormat",
                "type": "string",
                "doc": "<p>This is used for each field of type date in the model to format the value before\nit is sent to the server.</p>",
                "default": null
            },
            {
                "name": "nameProperty",
                "type": "string",
                "doc": "<p>This property is used to read the key for each value that will be sent to the\nserver.</p>",
                "default": "'name'"
            },
            {
                "name": "partialDataOptions",
                "type": "object",
                "doc": "<p>This object contains the options passed to <code>Ext.data.Model.getData</code> when\nwriting non <code>Ext.data.Model.phantom</code> records or when <code>writeAllFields</code> is\nset to <code>false</code>.</p>",
                "default": "{changes: true, critical: true}"
            },
            {
                "name": "transform",
                "type": "function|object",
                "doc": "<p>If a transform function is set, it will be invoked just before writeRecords\nexecutes. It is passed the unserialized data object and the request\nobject. The transform function returns a data object, which can be a modified version of the original\ndata object, or a completely new data object. The transform can be a function, or an object\nwith a 'fn' key and an optional 'scope' key. Example usage:</p>",
                "default": null
            },
            {
                "name": "writeAllFields",
                "type": "boolean",
                "doc": "<p><code>true</code> to write all fields from the record to the\nserver. If set to <code>false</code> it will only send the fields that were modified. Note\nthat any fields that have <code>Ext.data.field.Field.persist</code> set to <code>false</code>\nwill still be ignored while those with <code>Ext.data.field.Field.critical</code>\nset to <code>true</code> will be included.</p>",
                "default": "false"
            },
            {
                "name": "writeRecordId",
                "type": "boolean",
                "doc": "<p>By default, each record's id is always included in the output for non-phantom\nrecords since in most cases the id will be required on the server to process\nthe record action. This is helpful since the id will normally not be modified,\nand so would not be sent to the server unless writeAllFields was\nexplicitly enabled.</p>",
                "default": "true"
            }
        ],
        "events": []
    },
    "Ext.data.writer.Xml": {
        "type": "Ext.data.writer.Xml",
        "doc": "<p>This class is used to write Ext.data.Model data to the server in an XML format.\nThe documentRoot property is used to specify the root element in the XML document.\nThe record option is used to specify the element name for each record that will make\nup the XML document.</p>",
        "configs": [
            {
                "name": "defaultDocumentRoot",
                "type": "string",
                "doc": "<p>The root to be used if documentRoot is empty and a root is required\nto form a valid XML document.</p>",
                "default": "'xmlData'"
            },
            {
                "name": "documentRoot",
                "type": "string",
                "doc": "<p>The name of the root element of the document. Defaults to <tt>'xmlData'</tt>.\nIf there is more than 1 record and the root is not specified, the default document root will still be used\nto ensure a valid XML document is created.</p>",
                "default": "'xmlData'"
            },
            {
                "name": "header",
                "type": "string",
                "doc": "<p>A header to use in the XML document (such as setting the encoding or version).\nDefaults to <tt>''</tt>.</p>",
                "default": "''"
            },
            {
                "name": "record",
                "type": "string",
                "doc": "<p>The name of the node to use for each record. Defaults to\nthe owning Proxy's Reader's\nExt.data.reader.Xml.record setting, or <code>'record'</code>.</p>",
                "default": "'record'"
            }
        ],
        "events": []
    },
    "Ext.dd.DD": {
        "type": "Ext.dd.DD",
        "doc": "<p>A DragDrop implementation where the linked element follows the\nmouse cursor during a drag.</p>",
        "configs": [],
        "events": []
    },
    "Ext.dd.DDProxy": {
        "type": "Ext.dd.DDProxy",
        "doc": "<p>A DragDrop implementation that inserts an empty, bordered div into\nthe document that follows the cursor during drag operations.  At the time of\nthe click, the frame div is resized to the dimensions of the linked html\nelement, and moved to the exact location of the linked element.</p>",
        "configs": [],
        "events": []
    },
    "Ext.dd.DDTarget": {
        "type": "Ext.dd.DDTarget",
        "doc": "<p>A DragDrop implementation that does not move, but can be a drop\ntarget.  You would get the same result by simply omitting implementation\nfor the event callbacks, but this way we reduce the processing cost of the\nevent listener and the callbacks.</p>",
        "configs": [],
        "events": []
    },
    "Ext.dd.DragDrop": {
        "type": "Ext.dd.DragDrop",
        "doc": "<p>Defines the interface and base operation of items that that can be\ndragged or can be drop targets.  It was designed to be extended, overriding\nthe event handlers for startDrag, onDrag, onDragOver and onDragOut.\nUp to three html elements can be associated with a DragDrop instance:</p>",
        "configs": [],
        "events": []
    },
    "Ext.dd.DragDropElement": {
        "type": "Ext.dd.DragDropElement",
        "configs": [],
        "events": []
    },
    "Ext.dd.DragDropManager.ElementWrapper": {
        "type": "Ext.dd.DragDropManager.ElementWrapper",
        "doc": "<p>Deprecated inner class for cached elements.</p>",
        "configs": [],
        "events": []
    },
    "Ext.dd.DragDropManager": {
        "type": "Ext.dd.DragDropManager",
        "doc": "<p>DragDropManager is a singleton that tracks the element interaction for\nall DragDrop items in the window.  Generally, you will not call\nthis class directly, but it does have helper methods that could\nbe useful in your DragDrop implementations.</p>",
        "configs": [],
        "events": []
    },
    "Ext.dd.DragSource": {
        "type": "Ext.dd.DragSource",
        "doc": "<p>A simple class that provides the basic implementation needed to make any element draggable.</p>",
        "configs": [
            {
                "name": "animRepair",
                "type": "boolean",
                "doc": "<p>If true, animates the proxy element back to the position of the handle element used to trigger the drag.</p>",
                "default": "true"
            },
            {
                "name": "ddGroup",
                "type": "string",
                "doc": "<p>A named drag drop group to which this object belongs.  If a group is specified, then this object will only\ninteract with other drag drop objects in the same group.</p>",
                "default": null
            },
            {
                "name": "dropAllowed",
                "type": "string",
                "doc": "<p>The CSS class returned to the drag source when drop is allowed.</p>",
                "default": "Ext.baseCSSPrefix + 'dd-drop-ok'"
            },
            {
                "name": "dropNotAllowed",
                "type": "string",
                "doc": "<p>The CSS class returned to the drag source when drop is not allowed.</p>",
                "default": "Ext.baseCSSPrefix + 'dd-drop-nodrop'"
            },
            {
                "name": "repairHighlightColor",
                "type": "string",
                "doc": "<p>The color to use when visually highlighting the drag source in the afterRepair\nmethod after a failed drop (defaults to light blue). The color must be a 6 digit hex value, without\na preceding '#'.</p>",
                "default": "'c3daf9'"
            }
        ],
        "events": []
    },
    "Ext.dd.DragTracker": {
        "type": "Ext.dd.DragTracker",
        "doc": "<p>A DragTracker listens for drag events on an Element and fires events at the start and end of the drag,\nas well as during the drag. This is useful for components such as Ext.slider.Multi, where there is\nan element that can be dragged around to change the Slider's value.</p>",
        "configs": [
            {
                "name": "autoStart",
                "type": "boolean/number",
                "doc": "<p>Specify <code>true</code> to defer trigger start by 1000 ms.\nSpecify a Number for the number of milliseconds to defer trigger start.</p>",
                "default": "false"
            },
            {
                "name": "constrainTo",
                "type": "ext.util.region/ext.dom.element",
                "doc": "<p>A Region (Or an element from which a Region measurement will be read)\nwhich is used to constrain the result of the getOffset call.</p>",
                "default": null
            },
            {
                "name": "delegate",
                "type": "string",
                "doc": "<p>A CSS selector which identifies child elements within the DragTracker's encapsulating\nElement which are the tracked elements. This limits tracking to only begin when the matching elements are mousedowned.</p>",
                "default": null
            },
            {
                "name": "overCls",
                "type": "string",
                "doc": "<p>A CSS class to add to the DragTracker's target element when the element (or, if the delegate\noption is used, when a delegate element) is mouseovered.</p>",
                "default": null
            },
            {
                "name": "preventDefault",
                "type": "boolean",
                "doc": "<p>Specify <code>false</code> to enable default actions on onMouseDown events.</p>",
                "default": "true"
            },
            {
                "name": "stopEvent",
                "type": "boolean",
                "doc": "<p>Specify <code>true</code> to stop the <code>mousedown</code> event from bubbling to outer listeners from the target element (or its delegates).</p>",
                "default": "false"
            },
            {
                "name": "tolerance",
                "type": "number",
                "doc": "<p>Number of pixels the drag target must be moved before dragging is\nconsidered to have started.</p>",
                "default": "5"
            },
            {
                "name": "trackOver",
                "type": "boolean",
                "doc": "<p>Set to true to fire mouseover and mouseout events when the mouse enters or leaves the target element.</p>",
                "default": "false"
            }
        ],
        "events": [
            {
                "name": "beforestart",
                "params": "this(Object) e(Object) eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "drag",
                "params": "this(Object) e(Object) eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "dragend",
                "params": "this(Object) e(Object) eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "dragstart",
                "params": "this(Object) e(Object) eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "mousedown",
                "params": "this(Object) e(Object) eOpts(Object)",
                "doc": "<p>Fires when the mouse button is pressed down, but before a drag operation begins. The\ndrag operation begins after either the mouse has been moved by tolerance pixels,\nor after the autoStart timer fires.</p>"
            },
            {
                "name": "mousemove",
                "params": "this(Object) e(Object) eOpts(Object)",
                "doc": "<p>Fired when the mouse is moved. Returning false cancels the drag operation.</p>"
            },
            {
                "name": "mouseout",
                "params": "this(Object) e(Object) eOpts(Object)",
                "doc": "<p>Fires when the mouse exits the DragTracker's target element (or if delegate is\nused, when the mouse exits a delegate element).</p>"
            },
            {
                "name": "mouseover",
                "params": "this(Object) e(Object) target(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when the mouse enters the DragTracker's target element (or if delegate is\nused, when the mouse enters a delegate element).</p>"
            },
            {
                "name": "mouseup",
                "params": "this(Object) e(Object) eOpts(Object)",
                "doc": "\n"
            }
        ]
    },
    "Ext.dd.DragZone": {
        "type": "Ext.dd.DragZone",
        "doc": "<p>This class provides a container DD instance that allows dragging of multiple child source nodes.</p>",
        "configs": [
            {
                "name": "containerScroll",
                "type": "object/boolean",
                "doc": "<p>True to register this container with the Scrollmanager for auto scrolling during drag operations.\nA Ext.dd.ScrollManager configuration may also be passed.</p>",
                "default": null
            },
            {
                "name": "scrollEl",
                "type": "string/htmlelement/ext.dom.element",
                "doc": "<p>An element to register with the ScrollManager if containerScroll\nis set. Defaults to the drag element.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.dd.DropTarget": {
        "type": "Ext.dd.DropTarget",
        "doc": "<p>A simple class that provides the basic implementation needed to make any element a drop target that can have\ndraggable items dropped onto it.  The drop has no effect until an implementation of notifyDrop is provided.</p>",
        "configs": [
            {
                "name": "ddGroup",
                "type": "string",
                "doc": "<p>A named drag drop group to which this object belongs.  If a group is specified, then this object will only\ninteract with other drag drop objects in the same group.</p>",
                "default": null
            },
            {
                "name": "dropAllowed",
                "type": "string",
                "doc": "<p>The CSS class returned to the drag source when drop is allowed.</p>",
                "default": "Ext.baseCSSPrefix + 'dd-drop-ok'"
            },
            {
                "name": "dropNotAllowed",
                "type": "string",
                "doc": "<p>The CSS class returned to the drag source when drop is not allowed.</p>",
                "default": "Ext.baseCSSPrefix + 'dd-drop-nodrop'"
            },
            {
                "name": "overClass",
                "type": "string",
                "doc": "<p>The CSS class applied to the drop target element while the drag source is over it.</p>",
                "default": "\"\""
            }
        ],
        "events": []
    },
    "Ext.dd.DropZone": {
        "type": "Ext.dd.DropZone",
        "doc": "<p>This class provides a container DD instance that allows dropping on multiple child target nodes.</p>",
        "configs": [],
        "events": []
    },
    "Ext.dd.Registry": {
        "type": "Ext.dd.Registry",
        "doc": "<p>Provides easy access to all drag drop components that are registered on a page. Items can be retrieved either\ndirectly by DOM node id, or by passing in the drag drop event that occurred and looking up the event target.</p>",
        "configs": [],
        "events": []
    },
    "Ext.dd.ScrollManager": {
        "type": "Ext.dd.ScrollManager",
        "doc": "<p>Provides automatic scrolling of overflow regions in the page during drag operations.</p>",
        "configs": [],
        "events": []
    },
    "Ext.dd.StatusProxy": {
        "type": "Ext.dd.StatusProxy",
        "doc": "<p>A specialized floating Component that supports a drop status icon and auto-repair.\nThis is the default drag proxy used by all Ext.dd components.</p>",
        "configs": [
            {
                "name": "childEls",
                "type": "object/string[]/object[]",
                "doc": "<p>The canonical form of <code>childEls</code> is an object keyed by child's property name\nwith values that are objects with the following properties.</p>",
                "default": "['ghost']"
            },
            {
                "name": "dropAllowed",
                "type": "string",
                "doc": "<p>The CSS class to apply to the status element when drop is allowed.</p>",
                "default": "Ext.baseCSSPrefix + 'dd-drop-ok'"
            },
            {
                "name": "dropNotAllowed",
                "type": "string",
                "doc": "<p>The CSS class to apply to the status element when drop is not allowed.</p>",
                "default": "Ext.baseCSSPrefix + 'dd-drop-nodrop'"
            },
            {
                "name": "renderTpl",
                "type": "ext.xtemplate/string/string[]",
                "doc": "<p>An XTemplate used to create the internal structure inside this Component's encapsulating\nElement.</p>",
                "default": "['<div class=\"' + Ext.baseCSSPrefix + 'dd-drop-icon\" role=\"presentation\"></div>' + '<div id=\"{id}-ghost\" data-ref=\"ghost\" class=\"' + Ext.baseCSSPrefix + 'dd-drag-ghost\" role=\"presentation\"></div>']"
            }
        ],
        "events": []
    },
    "Ext.direct.Event": {
        "type": "Ext.direct.Event",
        "doc": "<p>Base class for all Ext.direct events. An event is\ncreated after some kind of interaction with the server.\nThe event class is essentially just a data structure\nto hold a Direct response.</p>",
        "configs": [],
        "events": []
    },
    "Ext.direct.ExceptionEvent": {
        "type": "Ext.direct.ExceptionEvent",
        "doc": "<p>An event that is fired when an exception is received from a Ext.direct.RemotingProvider</p>",
        "configs": [],
        "events": []
    },
    "Ext.direct.JsonProvider": {
        "type": "Ext.direct.JsonProvider",
        "doc": "<p>A base provider for communicating using JSON. This is an abstract class\nand should not be instanced directly.</p>",
        "configs": [],
        "events": []
    },
    "Ext.direct.Manager": {
        "type": "Ext.direct.Manager",
        "doc": "<p>Ext Direct aims to streamline communication between the client and server\nby providing a single interface that reduces the amount of common code\ntypically required to validate data and handle returned data packets\n(reading data, error conditions, etc).</p>",
        "configs": [
            {
                "name": "varName",
                "type": "string",
                "doc": "<p>Default variable name to use for Ext.Direct API declaration.</p>",
                "default": "\"Ext.app.REMOTING_API\""
            }
        ],
        "events": [
            {
                "name": "event",
                "params": "event(Ext.direct.Event) provider(Ext.direct.Provider) eOpts(Object)",
                "doc": "<p>Fires after an event.</p>"
            },
            {
                "name": "exception",
                "params": "event(Ext.direct.Event) provider(Ext.direct.Provider) eOpts(Object)",
                "doc": "<p>Fires after an event exception.</p>"
            },
            {
                "name": "providerload",
                "params": "url(String) provider(Ext.direct.Provider) eOpts(Object)",
                "doc": "<p>Fired by loadProvider after successfully loading RemotingProvider API\ndeclaration and creating a new Provider instance.</p>"
            },
            {
                "name": "providerloaderror",
                "params": "url(String) error(String) eOpts(Object)",
                "doc": "<p>Fired by loadProvider when remoting API could not be loaded, or\nProvider instance could not be created.</p>"
            }
        ]
    },
    "Ext.direct.PollingProvider": {
        "type": "Ext.direct.PollingProvider",
        "doc": "<p>Provides for repetitive polling of the server at distinct intervals.\nThe initial request for data originates from the client, and then is responded to by the\nserver.</p>",
        "configs": [
            {
                "name": "baseParams",
                "type": "object",
                "doc": "<p>An object containing properties which are to be sent as parameters on every\npolling request. Note that if baseParams are set and url parameter\nis an URL string, poll requests will use POST method instead of default GET.</p>",
                "default": null
            },
            {
                "name": "interval",
                "type": "number",
                "doc": "<p>How often to poll the server-side in milliseconds. Defaults to every 3 seconds.</p>",
                "default": "3000"
            },
            {
                "name": "pollFn",
                "type": "string/function",
                "doc": "<p>Ext.Direct method to use for polling. If a method name is provided as a string,\nthe actual function will not be resolved until the first time this provider\nis connected.</p>",
                "default": null
            },
            {
                "name": "url",
                "type": "string/function",
                "doc": "<p>The url which the PollingProvider should contact with each request. This can also be\nan imported Ext.Direct method which will be passed baseParams as named arguments.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "beforepoll",
                "params": "this(Ext.direct.PollingProvider) eOpts(Object)",
                "doc": "<p>Fired immediately before a poll takes place.</p>"
            },
            {
                "name": "poll",
                "params": "this(Ext.direct.PollingProvider) eOpts(Object)",
                "doc": "<p>Fired immediately after a poll takes place.</p>"
            }
        ]
    },
    "Ext.direct.Provider": {
        "type": "Ext.direct.Provider",
        "doc": "<p>Ext.direct.Provider is an abstract class meant to be extended.</p>",
        "configs": [
            {
                "name": "id",
                "type": "string",
                "doc": "<p>The unique id of the provider (defaults to an auto-assigned id).\nYou should assign an id if you need to be able to access the provider later and you do\nnot have an object reference available, for example:</p>",
                "default": null
            },
            {
                "name": "relayedEvents",
                "type": "string[]",
                "doc": "<p>List of Provider events that should be relayed by Ext.direct.Manager.\n'data' event is always relayed.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "connect",
                "params": "provider(Ext.direct.Provider) eOpts(Object)",
                "doc": "<p>Fires when the Provider connects to the server-side</p>"
            },
            {
                "name": "data",
                "params": "provider(Ext.direct.Provider) e(Ext.direct.Event) eOpts(Object)",
                "doc": "<p>Fires when the Provider receives data from the server-side</p>"
            },
            {
                "name": "disconnect",
                "params": "provider(Ext.direct.Provider) eOpts(Object)",
                "doc": "<p>Fires when the Provider disconnects from the server-side</p>"
            },
            {
                "name": "exception",
                "params": "eOpts(Object)",
                "doc": "<p>Fires when the Provider receives an exception from the server-side</p>"
            }
        ]
    },
    "Ext.direct.RemotingEvent": {
        "type": "Ext.direct.RemotingEvent",
        "doc": "<p>An event that is fired when data is received from a\nExt.direct.RemotingProvider. Contains a method to the\nrelated transaction for the direct request, see getTransaction</p>",
        "configs": [],
        "events": []
    },
    "Ext.direct.RemotingMethod": {
        "type": "Ext.direct.RemotingMethod",
        "doc": "<p>Small utility class used internally to represent a Direct method.</p>",
        "configs": [],
        "events": []
    },
    "Ext.direct.RemotingProvider": {
        "type": "Ext.direct.RemotingProvider",
        "doc": "<p>The RemotingProvider exposes access to\nserver side methods on the client (a remote procedure call (RPC) type of\nconnection where the client can initiate a procedure on the server).</p>",
        "configs": [
            {
                "name": "actions",
                "type": "object",
                "doc": "<p>Object literal defining the server side actions and methods. For example, if\nthe Provider is configured with:</p>",
                "default": null
            },
            {
                "name": "disableNestedActions",
                "type": "boolean",
                "doc": "<p>In versions prior to 4.2, using dotted Action names was not really meaningful,\nbecause it generated flat namespace object with dotted property names.\nFor example, take this API declaration:</p>",
                "default": "false"
            },
            {
                "name": "enableBuffer",
                "type": "number/boolean",
                "doc": "<p><code>true</code> or <code>false</code> to enable or disable combining of method\ncalls. If a number is specified this is the amount of time in milliseconds\nto wait before sending a batched request.</p>",
                "default": "10"
            },
            {
                "name": "enableUrlEncode",
                "type": "string",
                "doc": "<p>Specify which param will hold the arguments for the method.</p>",
                "default": "data"
            },
            {
                "name": "maxRetries",
                "type": "number",
                "doc": "<p>Number of times to re-attempt delivery on failure of a call.</p>",
                "default": "1"
            },
            {
                "name": "namespace",
                "type": "string/object",
                "doc": "<p>Namespace for the Remoting Provider (defaults to <code>Ext.global</code>).\nExplicitly specify the namespace Object, or specify a String to have a\nnamespace created implicitly.</p>",
                "default": null
            },
            {
                "name": "timeout",
                "type": "number",
                "doc": "<p>The timeout to use for each request.</p>",
                "default": null
            },
            {
                "name": "url",
                "type": "string",
                "doc": "<p><strong>Required</strong>. The url to connect to the Ext.direct.Manager server-side router.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "beforecall",
                "params": "provider(Ext.direct.RemotingProvider) transaction(Ext.direct.Transaction) meta(Object) eOpts(Object)",
                "doc": "<p>Fires immediately before the client-side sends off the RPC call. By returning\n<code>false</code> from an event handler you can prevent the call from being made.</p>"
            },
            {
                "name": "beforecallback",
                "params": "provider(Ext.direct.RemotingProvider) transaction(Ext.direct.Transaction) eOpts(Object)",
                "doc": "<p>Fires before callback function is executed. By returning <code>false</code> from an event handler\nyou can prevent the callback from executing.</p>"
            },
            {
                "name": "call",
                "params": "provider(Ext.direct.RemotingProvider) transaction(Ext.direct.Transaction) meta(Object) eOpts(Object)",
                "doc": "<p>Fires immediately after the request to the server-side is sent. This does\nNOT fire after the response has come back from the call.</p>"
            }
        ]
    },
    "Ext.direct.Transaction": {
        "type": "Ext.direct.Transaction",
        "doc": "<p>Supporting Class for Ext.Direct (not intended to be used directly).</p>",
        "configs": [
            {
                "name": "provider",
                "type": "ext.direct.provider",
                "doc": "<p>Provider to use with this Transaction.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.dom.ButtonElement": {
        "type": "Ext.dom.ButtonElement",
        "doc": "<p>A special Ext.dom.Element used by Buttons.  Since buttons use <code>display:table</code> elements\nfor their layout, some special adjustments are needed when the width switches from\nauto to fixed width and back.</p>",
        "configs": [],
        "events": []
    },
    "Ext.dom.CompositeElement": {
        "type": "Ext.dom.CompositeElement",
        "doc": "<p>This class encapsulates a <em>collection</em> of DOM elements, providing methods to filter members, or to perform collective\nactions upon the whole set.</p>",
        "configs": [],
        "events": []
    },
    "Ext.dom.CompositeElementLite": {
        "type": "Ext.dom.CompositeElementLite",
        "doc": "<p>This class encapsulates a <em>collection</em> of DOM elements, providing methods to filter members, or to perform collective\nactions upon the whole set.</p>",
        "configs": [],
        "events": []
    },
    "Ext.dom.Element": {
        "type": "Ext.dom.Element",
        "doc": "<p>Encapsulates a DOM element, adding simple DOM manipulation facilities, normalizing for browser differences.</p>",
        "configs": [],
        "events": [
            {
                "name": "DOMActivate",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Where supported. Fires when an element is activated, for instance, through a mouse click or a keypress.</p>"
            },
            {
                "name": "DOMAttrModified",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Where supported. Fires when an attribute has been modified.</p>"
            },
            {
                "name": "DOMCharacterDataModified",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Where supported. Fires when the character data has been modified.</p>"
            },
            {
                "name": "DOMFocusIn",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Where supported. Similar to HTML focus event, but can be applied to any focusable element.</p>"
            },
            {
                "name": "DOMFocusOut",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Where supported. Similar to HTML blur event, but can be applied to any focusable element.</p>"
            },
            {
                "name": "DOMNodeInserted",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Where supported. Fires when a node has been added as a child of another node.</p>"
            },
            {
                "name": "DOMNodeInsertedIntoDocument",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Where supported. Fires when a node is being inserted into a document.</p>"
            },
            {
                "name": "DOMNodeRemoved",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Where supported. Fires when a descendant node of the element is removed.</p>"
            },
            {
                "name": "DOMNodeRemovedFromDocument",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Where supported. Fires when a node is being removed from a document.</p>"
            },
            {
                "name": "DOMSubtreeModified",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Where supported. Fires when the subtree is modified.</p>"
            },
            {
                "name": "abort",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when an object/image is stopped from loading before completely loaded.</p>"
            },
            {
                "name": "blur",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when an element loses focus either via the pointing device or by tabbing navigation.</p>"
            },
            {
                "name": "change",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when a control loses the input focus and its value has been modified since gaining focus.</p>"
            },
            {
                "name": "click",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when a mouse click is detected within the element.</p>"
            },
            {
                "name": "contextmenu",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when a right click is detected within the element.</p>"
            },
            {
                "name": "dblclick",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when a mouse double click is detected within the element.</p>"
            },
            {
                "name": "doubletap",
                "params": "event(Ext.event.Event) node(HTMLElement) options(Object) eOpts(Object)",
                "doc": "<p>Fires when there is a double tap.</p>"
            },
            {
                "name": "error",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when an object/image/frame cannot be loaded properly.</p>"
            },
            {
                "name": "focus",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when an element receives focus either via the pointing device or by tab navigation.</p>"
            },
            {
                "name": "keydown",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when a keydown is detected within the element.</p>"
            },
            {
                "name": "keypress",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when a keypress is detected within the element.</p>"
            },
            {
                "name": "keyup",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when a keyup is detected within the element.</p>"
            },
            {
                "name": "load",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when the user agent finishes loading all content within the element. Only supported by window, frames,\nobjects and images.</p>"
            },
            {
                "name": "longpress",
                "params": "event(Ext.event.Event) node(HTMLElement) options(Object) eOpts(Object)",
                "doc": "<p>Fires when you touch and hold still for more than 1 second.</p>"
            },
            {
                "name": "mousedown",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when a mousedown is detected within the element.</p>"
            },
            {
                "name": "mouseenter",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when the mouse enters the element.</p>"
            },
            {
                "name": "mouseleave",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when the mouse leaves the element.</p>"
            },
            {
                "name": "mousemove",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when a mousemove is detected with the element.</p>"
            },
            {
                "name": "mouseout",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when a mouseout is detected with the element.</p>"
            },
            {
                "name": "mouseover",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when a mouseover is detected within the element.</p>"
            },
            {
                "name": "mouseup",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when a mouseup is detected within the element.</p>"
            },
            {
                "name": "painted",
                "params": "this(Ext.dom.Element) eOpts(Object)",
                "doc": "<p>Fires whenever this Element actually becomes visible (painted) on the screen. This is useful when you need to\nperform 'read' operations on the DOM element, i.e: calculating natural sizes and positioning.</p>"
            },
            {
                "name": "pinch",
                "params": "event(Ext.event.Event) node(HTMLElement) options(Object) eOpts(Object)",
                "doc": "<p>Fires continuously when there is pinching (the touch must move for this to be fired).</p>"
            },
            {
                "name": "pinchend",
                "params": "event(Ext.event.Event) node(HTMLElement) options(Object) eOpts(Object)",
                "doc": "<p>Fires when a pinch has ended.</p>"
            },
            {
                "name": "pinchstart",
                "params": "event(Ext.event.Event) node(HTMLElement) options(Object) eOpts(Object)",
                "doc": "<p>Fired once when a pinch has started.</p>"
            },
            {
                "name": "reset",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when a form is reset.</p>"
            },
            {
                "name": "resize",
                "params": "this(Ext.dom.Element) eOpts(Object)",
                "doc": "<p>Important note: For the best performance on mobile devices, use this only when you absolutely need to monitor\na Element's size.</p>"
            },
            {
                "name": "rotate",
                "params": "event(Ext.event.Event) node(HTMLElement) options(Object) eOpts(Object)",
                "doc": "<p>Fires continuously when there is rotation (the touch must move for this to be fired).\nWhen listening to this, ensure you know about the Ext.event.Event.angle and Ext.event.Event.rotation\nproperties in the <code>event</code> object.</p>"
            },
            {
                "name": "rotateend",
                "params": "event(Ext.event.Event) node(HTMLElement) options(Object) eOpts(Object)",
                "doc": "<p>Fires when a rotation event has ended.</p>"
            },
            {
                "name": "rotatestart",
                "params": "event(Ext.event.Event) node(HTMLElement) options(Object) eOpts(Object)",
                "doc": "<p>Fired once when a rotation has started.</p>"
            },
            {
                "name": "scroll",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when a document view is scrolled.</p>"
            },
            {
                "name": "select",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when a user selects some text in a text field, including input and textarea.</p>"
            },
            {
                "name": "singletap",
                "params": "event(Ext.event.Event) node(HTMLElement) options(Object) eOpts(Object)",
                "doc": "<p>Fires when there is a single tap.</p>"
            },
            {
                "name": "submit",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when a form is submitted.</p>"
            },
            {
                "name": "swipe",
                "params": "event(Ext.event.Event) node(HTMLElement) options(Object) eOpts(Object)",
                "doc": "<p>Fires when there is a swipe\nWhen listening to this, ensure you know about the Ext.event.Event.direction property in the <code>event</code> object.</p>"
            },
            {
                "name": "taphold",
                "params": "event(Ext.event.Event) node(HTMLElement) options(Object) eOpts(Object)",
                "doc": "<p>Fires when you touch and hold still for more than 1 second.</p>"
            },
            {
                "name": "unload",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when the user agent removes all content from a window or frame. For elements, it fires when the target\nelement or any of its content has been removed.</p>"
            }
        ]
    },
    "Ext.dom.ElementEvent": {
        "type": "Ext.dom.ElementEvent",
        "doc": "<p>A special Ext.util.Event subclass that adds support for capture (top-down propagation)\nlisteners, and non-delegated (directly attached to the dom) listeners.</p>",
        "configs": [],
        "events": []
    },
    "Ext.dom.Fly": {
        "type": "Ext.dom.Fly",
        "doc": "<p>A flyweight Ext.dom.Element that can be dynamically attached to a DOM node.\nIn general this class should not be instantiated directly.  Use Ext.fly\nto create and retrieve Fly instances.</p>",
        "configs": [],
        "events": []
    },
    "Ext.dom.GarbageCollector": {
        "type": "Ext.dom.GarbageCollector",
        "doc": "<p>Garbage collector for Ext.dom.Element instances.  Automatically cleans up Elements\nthat are no longer in the dom, but were not properly destroyed using\ndestroy().  Recommended practice is for Components to\nclean up their own elements, but the GarbageCollector runs on regularly scheduled\nintervals to attempt to clean up orphaned Elements that may have slipped through the cracks.</p>",
        "configs": [],
        "events": []
    },
    "Ext.dom.Helper": {
        "type": "Ext.dom.Helper",
        "doc": "<p>The DomHelper class provides a layer of abstraction from DOM and transparently supports creating elements via DOM or\nusing HTML fragments. It also has the ability to create HTML fragment templates from your DOM building code.</p>",
        "configs": [],
        "events": []
    },
    "Ext.dom.Layer": {
        "type": "Ext.dom.Layer",
        "doc": "<p>An extended Ext.dom.Element object that supports a shadow and shim</p>",
        "configs": [
            {
                "name": "cls",
                "type": "string",
                "doc": "<p>CSS class to add to the element</p>",
                "default": null
            },
            {
                "name": "constrain",
                "type": "boolean",
                "doc": "<p>False to disable constrain to viewport.</p>",
                "default": "true"
            },
            {
                "name": "dh",
                "type": "object",
                "doc": "<p>DomHelper object config to create element with.</p>",
                "default": "{tag: 'div', cls: 'x-layer'}"
            },
            {
                "name": "hideMode",
                "type": "string",
                "doc": "<p>A String which specifies how this Layer will be hidden.\nValues may be:</p>",
                "default": null
            },
            {
                "name": "shadow",
                "type": "string/boolean",
                "doc": "<p>True to automatically create an Ext.Shadow, or a string indicating the\nshadow's display Ext.Shadow.mode. False to disable the shadow.</p>",
                "default": "false"
            },
            {
                "name": "shadowOffset",
                "type": "number",
                "doc": "<p>Number of pixels to offset the shadow</p>",
                "default": "4"
            },
            {
                "name": "shim",
                "type": "string/boolean",
                "doc": "<p>True to automatically create a Ext.dom.Shim.</p>",
                "default": "false"
            },
            {
                "name": "useDisplay",
                "type": "boolean",
                "doc": "<p>Defaults to use css offsets to hide the Layer. Specify <tt>true</tt>\nto use css style <tt>'display:none;'</tt> to hide the Layer.</p>",
                "default": "false"
            },
            {
                "name": "visibilityCls",
                "type": "string",
                "doc": "<p>The CSS class name to add in order to hide this Layer if this layer\nis configured with <code>hideMode: 'asclass'</code></p>",
                "default": null
            },
            {
                "name": "zindex",
                "type": "number",
                "doc": "<p>Starting z-index.</p>",
                "default": "11000"
            }
        ],
        "events": []
    },
    "Ext.dom.Query": {
        "type": "Ext.dom.Query",
        "doc": "<p>Provides high performance selector/xpath processing by compiling queries into reusable functions. New pseudo classes\nand matchers can be plugged. It works on HTML and XML documents (if a content node is passed in).</p>",
        "configs": [],
        "events": []
    },
    "Ext.dom.Shadow": {
        "type": "Ext.dom.Shadow",
        "doc": "<p>Simple class that can provide a shadow effect for any absolutely positioned Element.</p>",
        "configs": [
            {
                "name": "mode",
                "type": "string",
                "doc": "<p>The shadow display mode.  Supports the following options:</p>",
                "default": "'drop'"
            },
            {
                "name": "offset",
                "type": "number",
                "doc": "<p>The number of pixels to offset the shadow from the element</p>",
                "default": "4"
            }
        ],
        "events": []
    },
    "Ext.dom.Shim": {
        "type": "Ext.dom.Shim",
        "doc": "<p>Simple class that provides an iframe shim for any absolutely positioned Element to prevent windowed objects from showing through.</p>",
        "configs": [],
        "events": []
    },
    "Ext.dom.Underlay": {
        "type": "Ext.dom.Underlay",
        "doc": "<p>A class that provides an underlay element which displays behind an absolutely positioned\ntarget element and tracks its size and position. Abstract base class for\nExt.dom.Shadow and Ext.dom.Shim</p>",
        "configs": [
            {
                "name": "target",
                "type": "ext.dom.element",
                "doc": "<p>The target element</p>",
                "default": null
            },
            {
                "name": "zIndex",
                "type": "number",
                "doc": "<p>The CSS z-index to use for this underlay.  Defaults to the z-index of target.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.dom.UnderlayPool": {
        "type": "Ext.dom.UnderlayPool",
        "doc": "<p>Private utility class that manages the internal cache for Underlays\nand Shims.</p>",
        "configs": [],
        "events": []
    },
    "Ext.draw.Animator": {
        "type": "Ext.draw.Animator",
        "doc": "<p>Singleton class that manages the animation pool.</p>",
        "configs": [],
        "events": []
    },
    "Ext.draw.Color": {
        "type": "Ext.draw.Color",
        "doc": "<p>Represents an RGB color and provides helper functions on it e.g. to get\ncolor components in HSL color space.</p>",
        "configs": [
            {
                "name": "lightnessFactor",
                "type": "number",
                "doc": "<p>The default factor to compute the lighter or darker color.</p>",
                "default": "0.2"
            }
        ],
        "events": []
    },
    "Ext.draw.Container": {
        "type": "Ext.draw.Container",
        "doc": "<p>The container that holds and manages instances of the Ext.draw.Surface\nin which sprites are rendered.</p>",
        "configs": [
            {
                "name": "background",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "cls",
                "type": "string/string[]",
                "doc": "<p>An optional extra CSS class that will be added to this component's Element.\nThe value can be a string, a list of strings separated by spaces, or an array of strings. This can be useful\nfor adding customized styles to the component or any of its children using standard CSS rules.</p>",
                "default": "Ext.baseCSSPrefix + 'draw-container'"
            },
            {
                "name": "defaultType",
                "type": "string",
                "doc": "<p>The default xtype of child Components to create in this Container when\na child item is specified as a raw configuration object, rather than as an instantiated Component.</p>",
                "default": "'surface'"
            },
            {
                "name": "engine",
                "type": "string",
                "doc": "<p>Defines the engine (type of surface) used to render draw container contents.</p>",
                "default": "\"Ext.draw.engine.Canvas\""
            },
            {
                "name": "gradients",
                "type": "object[]",
                "doc": "<p>Defines a set of gradients that can be used as color properties\n(fillStyle and strokeStyle, but not shadowColor) in sprites.\nThe gradients array is an array of objects with the following properties:\n- <strong>id</strong> - string - The unique name of the gradient.\n- <strong>type</strong> - string, optional - The type of the gradient. Available types are: 'linear', 'radial'. Defaults to 'linear'.\n- <strong>angle</strong> - number, optional - The angle of the gradient in degrees.\n- <strong>stops</strong> - array - An array of objects with 'color' and 'offset' properties, where 'offset' is a real number from 0 to 1.</p>",
                "default": "[]"
            },
            {
                "name": "resizeHandler",
                "type": "function",
                "doc": "<p>The resize function that can be configured to have a behavior,\ne.g. resize draw surfaces based on new draw container dimensions.</p>",
                "default": null
            },
            {
                "name": "sprites",
                "type": "object[]",
                "doc": "<p>Defines a set of sprites to be added to the drawContainer surface.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "spriteclick",
                "params": "sprite(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when a click event occurs on a sprite.</p>"
            },
            {
                "name": "spritedblclick",
                "params": "sprite(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when a double click event occurs on a sprite.</p>"
            },
            {
                "name": "spritemousedown",
                "params": "sprite(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when a mousedown event occurs on a sprite.</p>"
            },
            {
                "name": "spritemousemove",
                "params": "sprite(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when the mouse is moved on a sprite.</p>"
            },
            {
                "name": "spritemouseout",
                "params": "sprite(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when the mouse exits a sprite.</p>"
            },
            {
                "name": "spritemouseover",
                "params": "sprite(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when the mouse enters a sprite.</p>"
            },
            {
                "name": "spritemouseup",
                "params": "sprite(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when a mouseup event occurs on a sprite.</p>"
            },
            {
                "name": "spritetap",
                "params": "sprite(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when a tap event occurs on a sprite.</p>"
            }
        ]
    },
    "Ext.draw.ContainerBase": {
        "type": "Ext.draw.ContainerBase",
        "configs": [
            {
                "name": "layout",
                "type": "ext.enums.layout/object",
                "doc": "<p><strong>Important</strong>: In order for child items to be correctly sized and\npositioned, typically a layout manager <strong>must</strong> be specified through\nthe <code>layout</code> configuration option.</p>",
                "default": "'container'"
            }
        ],
        "events": []
    },
    "Ext.draw.Draw": {
        "type": "Ext.draw.Draw",
        "doc": "<p>Utility class providing mathematics functionalities through all the draw package.</p>",
        "configs": [],
        "events": []
    },
    "Ext.draw.LimitedCache": {
        "type": "Ext.draw.LimitedCache",
        "doc": "<p>Limited cache is a size limited cache container that stores limited number of objects.</p>",
        "configs": [
            {
                "name": "feeder",
                "type": "function",
                "doc": "<p>Function that generates the object when look-up failed.</p>",
                "default": null
            },
            {
                "name": "limit",
                "type": "number",
                "doc": "<p>The amount limit of the cache.</p>",
                "default": "40"
            },
            {
                "name": "scope",
                "type": "object",
                "doc": "<p>The scope for feeder</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.draw.Matrix": {
        "type": "Ext.draw.Matrix",
        "doc": "<p>Utility class to calculate affine transformation matrix.</p>",
        "configs": [],
        "events": []
    },
    "Ext.draw.Path": {
        "type": "Ext.draw.Path",
        "doc": "<p>Class representing a path.\nDesigned to be compatible with CanvasPathMethods\nand will hopefully be replaced by the browsers' implementation of the Path object.</p>",
        "configs": [],
        "events": []
    },
    "Ext.draw.PathUtil": {
        "type": "Ext.draw.PathUtil",
        "doc": "<p>Singleton that provides methods used by the Ext.draw.Path\nfor hit testing and finding path intersection points.</p>",
        "configs": [],
        "events": []
    },
    "Ext.draw.SegmentTree": {
        "type": "Ext.draw.SegmentTree",
        "doc": "<p>This class we summarize the data and returns it when required.</p>",
        "configs": [
            {
                "name": "strategy",
                "type": "string",
                "doc": "\n",
                "default": "\"double\""
            }
        ],
        "events": []
    },
    "Ext.draw.Surface": {
        "type": "Ext.draw.Surface",
        "doc": "<p>A Surface is an interface to render methods inside a draw Ext.draw.Container.\nA Surface contains methods to render sprites, get bounding boxes of sprites, add\nsprites to the canvas, initialize other graphic components, etc. One of the most used\nmethods for this class is the <code>add</code> method, to add Sprites to the surface.</p>",
        "configs": [
            {
                "name": "background",
                "type": "object",
                "doc": "<p>Background sprite config of the surface.</p>",
                "default": null
            },
            {
                "name": "cls",
                "type": "string",
                "doc": "\n",
                "default": "Ext.baseCSSPrefix + 'surface'"
            },
            {
                "name": "dirty",
                "type": "boolean",
                "doc": "<p>Indicates whether the surface needs to redraw.</p>",
                "default": "false"
            },
            {
                "name": "flipRtlText",
                "type": "boolean",
                "doc": "<p>If the surface is in the RTL mode, text will render with the RTL direction,\nbut the alignment and position of the text won't change by default.\nSetting this config to 'true' will get text alignment and its position\nwithin a surface mirrored.</p>",
                "default": "false"
            },
            {
                "name": "items",
                "type": "array",
                "doc": "<p>Array of sprite instances.</p>",
                "default": "[]"
            },
            {
                "name": "rect",
                "type": "array",
                "doc": "<p>The [x, y, width, height] rect of the surface related to its container.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.draw.SurfaceBase": {
        "type": "Ext.draw.SurfaceBase",
        "configs": [],
        "events": []
    },
    "Ext.draw.TextMeasurer": {
        "type": "Ext.draw.TextMeasurer",
        "doc": "<p>Utility class to provide a way to <em>approximately</em> measure the dimension of text\nwithout a drawing context.</p>",
        "configs": [
            {
                "name": "precise",
                "type": "boolean",
                "doc": "<p>This singleton tries not to make use of the Ext.util.TextMetrics because it is\nseveral times slower than TextMeasurer's own solution. TextMetrics is more precise\nthough, so if you have a case where the error is too big, you may want to set\nthis config to <code>true</code> to get perfect results at the expense of performance.\nNote: defaults to <code>true</code> in IE8.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.draw.TimingFunctions": {
        "type": "Ext.draw.TimingFunctions",
        "doc": "<p>Contains transition equations such as <code>Quad</code>, <code>Cubic</code>, <code>Quart</code>, <code>Quint</code>,\n<code>Expo</code>, <code>Circ</code>, <code>Pow</code>, <code>Sine</code>, <code>Back</code>, <code>Bounce</code>, <code>Elastic</code>, etc.</p>",
        "configs": [],
        "events": []
    },
    "Ext.draw.engine.Canvas": {
        "type": "Ext.draw.engine.Canvas",
        "doc": "<p>Provides specific methods to draw with 2D Canvas element.</p>",
        "configs": [
            {
                "name": "highPrecision",
                "type": "boolean",
                "doc": "<p>True to have the Canvas use JavaScript Number instead of single precision floating point for transforms.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.draw.engine.Svg": {
        "type": "Ext.draw.engine.Svg",
        "doc": "<p>SVG engine.</p>",
        "configs": [
            {
                "name": "highPrecision",
                "type": "boolean",
                "doc": "<p>Nothing needs to be done in high precision mode.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.draw.engine.SvgContext.Gradient": {
        "type": "Ext.draw.engine.SvgContext.Gradient",
        "configs": [],
        "events": []
    },
    "Ext.draw.engine.SvgContext": {
        "type": "Ext.draw.engine.SvgContext",
        "doc": "<p>A class that imitates a canvas context but generates svg elements instead.</p>",
        "configs": [],
        "events": []
    },
    "Ext.draw.gradient.Gradient": {
        "type": "Ext.draw.gradient.Gradient",
        "doc": "<p>Creates a gradient.</p>",
        "configs": [
            {
                "name": "stops",
                "type": "array",
                "doc": "<p>Defines the stops of the gradient.</p>",
                "default": "[]"
            }
        ],
        "events": []
    },
    "Ext.draw.gradient.GradientDefinition": {
        "type": "Ext.draw.gradient.GradientDefinition",
        "doc": "<p>A global map of all gradient configs.</p>",
        "configs": [],
        "events": []
    },
    "Ext.draw.gradient.Linear": {
        "type": "Ext.draw.gradient.Linear",
        "doc": "<p>Linear gradient.</p>",
        "configs": [
            {
                "name": "The",
                "type": "number",
                "doc": "<p>angle of rotation of the gradient in radians.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.draw.gradient.Radial": {
        "type": "Ext.draw.gradient.Radial",
        "doc": "<p>Radial gradient.</p>",
        "configs": [
            {
                "name": "end",
                "type": "object",
                "doc": "<p>The ending circle of the gradient.</p>",
                "default": "{x: 0, y: 0, r: 1}"
            },
            {
                "name": "start",
                "type": "object",
                "doc": "<p>The starting circle of the gradient.</p>",
                "default": "{x: 0, y: 0, r: 0}"
            }
        ],
        "events": []
    },
    "Ext.draw.modifier.Animation": {
        "type": "Ext.draw.modifier.Animation",
        "doc": "<p>The Animation modifier.</p>",
        "configs": [
            {
                "name": "customDuration",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "customDurations",
                "type": "object",
                "doc": "<p>Overrides the default duration for defined attributes. E.g.:</p>",
                "default": "{}"
            },
            {
                "name": "customEasings",
                "type": "object",
                "doc": "<p>Overrides the default easing function for defined attributes. E.g.:</p>",
                "default": "{}"
            },
            {
                "name": "duration",
                "type": "number",
                "doc": "<p>Default duration time (ms).</p>",
                "default": "0"
            },
            {
                "name": "easing",
                "type": "function",
                "doc": "<p>Default easing function.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.draw.modifier.Highlight": {
        "type": "Ext.draw.modifier.Highlight",
        "doc": "<p>Highlight is a modifier that will override sprite attributes\nwith highlightStyle attributes\nwhen sprite's <code>highlighted</code> attribute is true.</p>",
        "configs": [
            {
                "name": "enabled",
                "type": "boolean",
                "doc": "<p>'true' if the highlight is applied.</p>",
                "default": "false"
            },
            {
                "name": "highlightStyle",
                "type": "object",
                "doc": "<p>The style attributes of the highlight modifier.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.draw.modifier.Modifier": {
        "type": "Ext.draw.modifier.Modifier",
        "doc": "<p>Each sprite has a stack of modifiers. The resulting attributes of sprite is\nthe content of the stack top. When setting attributes to a sprite,\nchanges will be pushed-down though the stack of modifiers and pop-back the\nadditive changes; When modifier is triggered to change the attribute of a\nsprite, it will pop-up the changes to the top.</p>",
        "configs": [
            {
                "name": "next",
                "type": "ext.draw.modifier.modifier",
                "doc": "<p>Next modifier that receives the\npop-up changes.</p>",
                "default": null
            },
            {
                "name": "previous",
                "type": "ext.draw.modifier.modifier",
                "doc": "<p>Previous modifier that receives\nthe push-down changes.</p>",
                "default": null
            },
            {
                "name": "sprite",
                "type": "ext.draw.sprite.sprite",
                "doc": "<p>The sprite to which the modifier belongs.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.draw.modifier.Target": {
        "type": "Ext.draw.modifier.Target",
        "doc": "<p>This is the destination (top) modifier that has to be put at\nthe top of the modifier stack.</p>",
        "configs": [],
        "events": []
    },
    "Ext.draw.plugin.SpriteEvents": {
        "type": "Ext.draw.plugin.SpriteEvents",
        "doc": "<p>A draw container plugin that adds ability to listen\nto sprite events. For example:</p>",
        "configs": [],
        "events": [
            {
                "name": "spriteclick",
                "params": "sprite(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when a click event occurs on a sprite.</p>"
            },
            {
                "name": "spritedblclick",
                "params": "sprite(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when a double click event occurs on a sprite.</p>"
            },
            {
                "name": "spritemousedown",
                "params": "sprite(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when a mousedown event occurs on a sprite.</p>"
            },
            {
                "name": "spritemousemove",
                "params": "sprite(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when the mouse is moved on a sprite.</p>"
            },
            {
                "name": "spritemouseout",
                "params": "sprite(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when the mouse exits a sprite.</p>"
            },
            {
                "name": "spritemouseover",
                "params": "sprite(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when the mouse enters a sprite.</p>"
            },
            {
                "name": "spritemouseup",
                "params": "sprite(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when a mouseup event occurs on a sprite.</p>"
            },
            {
                "name": "spritetap",
                "params": "sprite(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when a tap event occurs on a sprite.</p>"
            }
        ]
    },
    "Ext.draw.sprite.AnimationParser": {
        "type": "Ext.draw.sprite.AnimationParser",
        "doc": "<p>Computes an intermidiate value between two values of the same type for use in animations.\nCan have pre- and post- processor functions if the values need to be processed\nbefore an intermidiate value can be computed (parseInitial), or the computed value\nneeds to be processed before it can be used as a valid attribute value (serve).</p>",
        "configs": [],
        "events": []
    },
    "Ext.draw.sprite.Arc": {
        "type": "Ext.draw.sprite.Arc",
        "doc": "<p>A sprite that represents a circular arc.</p>",
        "configs": [
            {
                "name": "anticlockwise",
                "type": "boolean",
                "doc": "<p>Determines whether or not the arc is drawn clockwise.</p>",
                "default": "false"
            },
            {
                "name": "endAngle",
                "type": "number",
                "doc": "<p>The ending angle of the arc.</p>",
                "default": "Math.PI*2"
            },
            {
                "name": "startAngle",
                "type": "number",
                "doc": "<p>The beginning angle of the arc.</p>",
                "default": "0"
            }
        ],
        "events": []
    },
    "Ext.draw.sprite.Arrow": {
        "type": "Ext.draw.sprite.Arrow",
        "doc": "<p>A sprite that represents an arrow.</p>",
        "configs": [
            {
                "name": "size",
                "type": "number",
                "doc": "<p>The size of the sprite.\nMeant to be comparable to the size of a circle sprite with the same radius.</p>",
                "default": "4"
            }
        ],
        "events": []
    },
    "Ext.draw.sprite.AttributeDefinition": {
        "type": "Ext.draw.sprite.AttributeDefinition",
        "doc": "<p>Flyweight object to process the attributes of a sprite.\nA single instance of the AttributeDefinition is created per sprite class.\nSee <code>onClassCreated</code> and <code>onClassExtended</code> callbacks\nof the Ext.draw.sprite.Sprite for more info.</p>",
        "configs": [
            {
                "name": "aliases",
                "type": "object",
                "doc": "<p>Defines the alternative names for attributes.</p>",
                "default": "{}"
            },
            {
                "name": "animationProcessors",
                "type": "object",
                "doc": "<p>Defines the process used to animate between attributes.\nOne doesn't have to define animation processors for sprite attributes that use\npredefined processors from the Ext.draw.sprite.AttributeParser singleton.\nFor such attributes matching animation processors from the Ext.draw.sprite.AnimationParser\nsingleton will be used automatically.\nHowever, if you have a custom processor for an attribute that should support\nanimation, you must provide a corresponding animation processor for it here.\nFor more information on animation processors please see Ext.draw.sprite.AnimationParser\ndocumentation.</p>",
                "default": "{}"
            },
            {
                "name": "defaults",
                "type": "object",
                "doc": "<p>Defines the default values of attributes.</p>",
                "default": "{}"
            },
            {
                "name": "dirtyTriggers",
                "type": "object",
                "doc": "\n",
                "default": "{}"
            },
            {
                "name": "processors",
                "type": "object",
                "doc": "<p>Defines the preprocessing used on the attributes.\nOne can define a custom processor function here or use the name of a predefined\nprocessor from the Ext.draw.sprite.AttributeParser singleton.</p>",
                "default": "{}"
            },
            {
                "name": "triggers",
                "type": "object",
                "doc": "<p>Defines which updaters have to be called when an attribute is changed.\nFor example, the config below indicates that the 'size' updater\nof a square sprite has to be called\nwhen the 'size' attribute changes.</p>",
                "default": "{}"
            },
            {
                "name": "updaters",
                "type": "object",
                "doc": "<p>Defines the postprocessing used by the attribute.\nInside the updater function 'this' refers to the sprite that the attributes belong to.\nIn case of an instancing sprite 'this' will refer to the instancing template.\nThe two parameters passed to the updater function are the attributes object\nof the sprite or instance, and the names of attributes that triggered this updater call.</p>",
                "default": "{}"
            }
        ],
        "events": []
    },
    "Ext.draw.sprite.AttributeParser": {
        "type": "Ext.draw.sprite.AttributeParser",
        "doc": "<p>Parsers used for sprite attributes if they are normalized\n(default) when being set.</p>",
        "configs": [],
        "events": []
    },
    "Ext.draw.sprite.Circle": {
        "type": "Ext.draw.sprite.Circle",
        "doc": "<p>A sprite that represents a circle.</p>",
        "configs": [
            {
                "name": "cx",
                "type": "number",
                "doc": "<p>The center coordinate of the sprite on the x-axis.</p>",
                "default": "0"
            },
            {
                "name": "cy",
                "type": "number",
                "doc": "<p>The center coordinate of the sprite on the y-axis.</p>",
                "default": "0"
            },
            {
                "name": "r",
                "type": "number",
                "doc": "<p>The radius of the sprite.</p>",
                "default": "0"
            }
        ],
        "events": []
    },
    "Ext.draw.sprite.Composite": {
        "type": "Ext.draw.sprite.Composite",
        "doc": "<p>Represents a group of sprites.</p>",
        "configs": [
            {
                "name": "sprites",
                "type": "array",
                "doc": "\n",
                "default": "[]"
            }
        ],
        "events": []
    },
    "Ext.draw.sprite.Cross": {
        "type": "Ext.draw.sprite.Cross",
        "doc": "<p>A sprite that represents a cross.</p>",
        "configs": [
            {
                "name": "size",
                "type": "number",
                "doc": "<p>The size of the sprite.\nMeant to be comparable to the size of a circle sprite with the same radius.</p>",
                "default": "4"
            }
        ],
        "events": []
    },
    "Ext.draw.sprite.Diamond": {
        "type": "Ext.draw.sprite.Diamond",
        "doc": "<p>A sprite that represents a diamond.</p>",
        "configs": [
            {
                "name": "size",
                "type": "number",
                "doc": "<p>The size of the sprite.\nMeant to be comparable to the size of a circle sprite with the same radius.</p>",
                "default": "4"
            }
        ],
        "events": []
    },
    "Ext.draw.sprite.Ellipse": {
        "type": "Ext.draw.sprite.Ellipse",
        "doc": "<p>A sprite that represents an ellipse.</p>",
        "configs": [
            {
                "name": "axisRotation",
                "type": "number",
                "doc": "<p>The rotation of the sprite about its axis.</p>",
                "default": "0"
            },
            {
                "name": "cx",
                "type": "number",
                "doc": "<p>The center coordinate of the sprite on the x-axis.</p>",
                "default": "0"
            },
            {
                "name": "cy",
                "type": "number",
                "doc": "<p>The center coordinate of the sprite on the y-axis.</p>",
                "default": "0"
            },
            {
                "name": "rx",
                "type": "number",
                "doc": "<p>The radius of the sprite on the x-axis.</p>",
                "default": "1"
            },
            {
                "name": "ry",
                "type": "number",
                "doc": "<p>The radius of the sprite on the y-axis.</p>",
                "default": "1"
            }
        ],
        "events": []
    },
    "Ext.draw.sprite.EllipticalArc": {
        "type": "Ext.draw.sprite.EllipticalArc",
        "doc": "<p>A sprite that represents an elliptical arc.</p>",
        "configs": [
            {
                "name": "anticlockwise",
                "type": "boolean",
                "doc": "<p>Determines whether or not the arc is drawn clockwise.</p>",
                "default": "false"
            },
            {
                "name": "endAngle",
                "type": "number",
                "doc": "<p>The ending angle of the arc.</p>",
                "default": "Math.PI*2"
            },
            {
                "name": "startAngle",
                "type": "number",
                "doc": "<p>The beginning angle of the arc.</p>",
                "default": "0"
            }
        ],
        "events": []
    },
    "Ext.draw.sprite.Image": {
        "type": "Ext.draw.sprite.Image",
        "doc": "<p>A sprite that represents an image.</p>",
        "configs": [
            {
                "name": "height",
                "type": "number",
                "doc": "<p>The height of the image.\nFor consistent image size on all devices the height must be explicitly set.\nOtherwise the natural image height devided by the device pixel ratio\n(for a crisp looking image) will be used as the height of the sprite.</p>",
                "default": "null"
            },
            {
                "name": "src",
                "type": "string",
                "doc": "<p>The image source of the sprite.</p>",
                "default": "''"
            },
            {
                "name": "width",
                "type": "number",
                "doc": "<p>The width of the image.\nFor consistent image size on all devices the width must be explicitly set.\nOtherwise the natural image width devided by the device pixel ratio\n(for a crisp looking image) will be used as the width of the sprite.</p>",
                "default": "null"
            }
        ],
        "events": []
    },
    "Ext.draw.sprite.Instancing": {
        "type": "Ext.draw.sprite.Instancing",
        "doc": "<p>Sprite that represents multiple instances based on the given template.</p>",
        "configs": [
            {
                "name": "template",
                "type": "object",
                "doc": "<p>The sprite template used by all instances.</p>",
                "default": "null"
            }
        ],
        "events": []
    },
    "Ext.draw.sprite.Line": {
        "type": "Ext.draw.sprite.Line",
        "doc": "<p>A sprite that represents a line.</p>",
        "configs": [],
        "events": []
    },
    "Ext.draw.sprite.Path": {
        "type": "Ext.draw.sprite.Path",
        "doc": "<p>A sprite that represents a path.</p>",
        "configs": [
            {
                "name": "path",
                "type": "string",
                "doc": "<p>The SVG based path string used by the sprite.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.draw.sprite.Plus": {
        "type": "Ext.draw.sprite.Plus",
        "doc": "<p>A sprite that represents a plus.</p>",
        "configs": [
            {
                "name": "size",
                "type": "number",
                "doc": "<p>The size of the sprite.\nMeant to be comparable to the size of a circle sprite with the same radius.</p>",
                "default": "4"
            }
        ],
        "events": []
    },
    "Ext.draw.sprite.Rect": {
        "type": "Ext.draw.sprite.Rect",
        "doc": "<p>A sprite that represents a rectangle.</p>",
        "configs": [
            {
                "name": "height",
                "type": "number",
                "doc": "<p>The height of the sprite.</p>",
                "default": "8"
            },
            {
                "name": "radius",
                "type": "number",
                "doc": "<p>The radius of the rounded corners.</p>",
                "default": "0"
            },
            {
                "name": "width",
                "type": "number",
                "doc": "<p>The width of the sprite.</p>",
                "default": "8"
            },
            {
                "name": "x",
                "type": "number",
                "doc": "<p>The position of the sprite on the x-axis.</p>",
                "default": "0"
            },
            {
                "name": "y",
                "type": "number",
                "doc": "<p>The position of the sprite on the y-axis.</p>",
                "default": "0"
            }
        ],
        "events": []
    },
    "Ext.draw.sprite.Sector": {
        "type": "Ext.draw.sprite.Sector",
        "doc": "<p>A sprite representing a pie slice.</p>",
        "configs": [
            {
                "name": "centerX",
                "type": "number",
                "doc": "<p>The center coordinate of the sprite on the x-axis.</p>",
                "default": "0"
            },
            {
                "name": "centerY",
                "type": "number",
                "doc": "<p>The center coordinate of the sprite on the y-axis.</p>",
                "default": "0"
            },
            {
                "name": "endAngle",
                "type": "number",
                "doc": "<p>The ending angle of the sprite.</p>",
                "default": "0"
            },
            {
                "name": "endRho",
                "type": "number",
                "doc": "<p>The ending point of the radius of the sprite.</p>",
                "default": "150"
            },
            {
                "name": "margin",
                "type": "number",
                "doc": "<p>The margin of the sprite from the center of pie.</p>",
                "default": "0"
            },
            {
                "name": "startAngle",
                "type": "number",
                "doc": "<p>The starting angle of the sprite.</p>",
                "default": "0"
            },
            {
                "name": "startRho",
                "type": "number",
                "doc": "<p>The starting point of the radius of the sprite.</p>",
                "default": "0"
            }
        ],
        "events": []
    },
    "Ext.draw.sprite.Sprite": {
        "type": "Ext.draw.sprite.Sprite",
        "doc": "<p>A sprite is an object rendered in a drawing Ext.draw.Surface.\nThe Sprite class itself is an abstract class and is not meant to be used directly.\nEvery sprite in the Draw and Chart packages is a subclass of the Ext.draw.sprite.Sprite.\nThe standard Sprite subclasses are:</p>",
        "configs": [
            {
                "name": "fillOpacity",
                "type": "number",
                "doc": "<p>The opacity of the fill. Limited from 0 to 1.</p>",
                "default": "1"
            },
            {
                "name": "fillStyle",
                "type": "string",
                "doc": "<p>The color of the shape (a CSS color value).</p>",
                "default": "\"none\""
            },
            {
                "name": "globalAlpha",
                "type": "number",
                "doc": "<p>The opacity of the sprite. Limited from 0 to 1.</p>",
                "default": "1"
            },
            {
                "name": "globalCompositeOperation",
                "type": "string",
                "doc": "<p>Indicates how source images are drawn onto a destination image.\nglobalCompositeOperation attribute is not supported by the SVG and VML (excanvas) engines.</p>",
                "default": "source-over"
            },
            {
                "name": "hidden",
                "type": "boolean",
                "doc": "<p>Determines whether or not the sprite is hidden.</p>",
                "default": "false"
            },
            {
                "name": "lineCap",
                "type": "string",
                "doc": "<p>The style of the line caps.</p>",
                "default": "\"butt\""
            },
            {
                "name": "lineDash",
                "type": "array",
                "doc": "<p>An even number of non-negative numbers specifying a dash/space sequence.\nNote that while this is supported in IE8 (VML engine), the behavior is\ndifferent from Canvas and SVG. Please refer to this document for details:\nhttp://msdn.microsoft.com/en-us/library/bb264085(v=vs.85).aspx</p>",
                "default": "[]"
            },
            {
                "name": "lineDashOffset",
                "type": "number",
                "doc": "<p>A number specifying how far into the line dash sequence drawing commences.</p>",
                "default": "0"
            },
            {
                "name": "lineJoin",
                "type": "string",
                "doc": "<p>The style of the line join.</p>",
                "default": "\"miter\""
            },
            {
                "name": "lineWidth",
                "type": "number",
                "doc": "<p>The width of the line stroke.</p>",
                "default": "1"
            },
            {
                "name": "miterLimit",
                "type": "number",
                "doc": "<p>Sets the distance between the inner corner and the outer corner where two lines meet.</p>",
                "default": "10"
            },
            {
                "name": "parent",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "rotationCenterX",
                "type": "number",
                "doc": "<p>The central coordinate of the sprite's scale operation on the x-axis.</p>",
                "default": "null"
            },
            {
                "name": "rotationCenterY",
                "type": "number",
                "doc": "<p>The central coordinate of the sprite's rotate operation on the y-axis.</p>",
                "default": "null"
            },
            {
                "name": "rotationRads",
                "type": "number",
                "doc": "<p>The angle of rotation of the sprite in radians.</p>",
                "default": "0"
            },
            {
                "name": "scalingCenterX",
                "type": "number",
                "doc": "<p>The central coordinate of the sprite's scale operation on the x-axis.</p>",
                "default": "null"
            },
            {
                "name": "scalingCenterY",
                "type": "number",
                "doc": "<p>The central coordinate of the sprite's scale operation on the y-axis.</p>",
                "default": "null"
            },
            {
                "name": "scalingX",
                "type": "number",
                "doc": "<p>The scaling of the sprite on the x-axis.</p>",
                "default": "1"
            },
            {
                "name": "scalingY",
                "type": "number",
                "doc": "<p>The scaling of the sprite on the y-axis.</p>",
                "default": "1"
            },
            {
                "name": "shadowBlur",
                "type": "number",
                "doc": "<p>The amount blur used on the shadow.</p>",
                "default": "0"
            },
            {
                "name": "shadowColor",
                "type": "string",
                "doc": "<p>The color of the shadow (a CSS color value).</p>",
                "default": "\"none\""
            },
            {
                "name": "shadowOffsetX",
                "type": "number",
                "doc": "<p>The offset of the sprite's shadow on the x-axis.</p>",
                "default": "0"
            },
            {
                "name": "shadowOffsetY",
                "type": "number",
                "doc": "<p>The offset of the sprite's shadow on the y-axis.</p>",
                "default": "0"
            },
            {
                "name": "strokeOpacity",
                "type": "number",
                "doc": "<p>The opacity of the stroke. Limited from 0 to 1.</p>",
                "default": "1"
            },
            {
                "name": "strokeStyle",
                "type": "string",
                "doc": "<p>The color of the stroke (a CSS color value).</p>",
                "default": "\"none\""
            },
            {
                "name": "surface",
                "type": "ext.draw.surface",
                "doc": "<p>The surface that this sprite is rendered into.</p>",
                "default": null
            },
            {
                "name": "transformFillStroke",
                "type": "boolean",
                "doc": "<p>Determines whether the fill and stroke are affected by sprite transformations.</p>",
                "default": "false"
            },
            {
                "name": "translationX",
                "type": "number",
                "doc": "<p>The translation of the sprite on the x-axis.</p>",
                "default": "0"
            },
            {
                "name": "translationY",
                "type": "number",
                "doc": "<p>The translation of the sprite on the y-axis.</p>",
                "default": "0"
            },
            {
                "name": "zIndex",
                "type": "number",
                "doc": "<p>The stacking order of the sprite.</p>",
                "default": "0"
            }
        ],
        "events": []
    },
    "Ext.draw.sprite.Square": {
        "type": "Ext.draw.sprite.Square",
        "doc": "<p>A sprite that represents a square.</p>",
        "configs": [
            {
                "name": "size",
                "type": "number",
                "doc": "<p>The size of the sprite.\nMeant to be comparable to the size of a circle sprite with the same radius.</p>",
                "default": "4"
            }
        ],
        "events": []
    },
    "Ext.draw.sprite.Text": {
        "type": "Ext.draw.sprite.Text",
        "doc": "<p>A sprite that represents text.</p>",
        "configs": [
            {
                "name": "font",
                "type": "string",
                "doc": "<p>The font displayed.</p>",
                "default": "'10px sans-serif'"
            },
            {
                "name": "fontFamily",
                "type": "string",
                "doc": "<p>The family of the font displayed.</p>",
                "default": "'sans-serif'"
            },
            {
                "name": "fontSize",
                "type": "string/number",
                "doc": "<p>The size of the font displayed.</p>",
                "default": "'10px'"
            },
            {
                "name": "fontStyle",
                "type": "string",
                "doc": "<p>The style of the font displayed. {normal, italic, oblique}</p>",
                "default": "''"
            },
            {
                "name": "fontVariant",
                "type": "string",
                "doc": "<p>The variant of the font displayed. {normal, small-caps}</p>",
                "default": "''"
            },
            {
                "name": "fontWeight",
                "type": "string",
                "doc": "<p>The weight of the font displayed. {normal, bold, bolder, lighter}</p>",
                "default": "''"
            },
            {
                "name": "text",
                "type": "string",
                "doc": "<p>The text represented in the sprite.</p>",
                "default": "''"
            },
            {
                "name": "textAlign",
                "type": "string",
                "doc": "<p>The alignment of the text displayed. {left, right, center, start, end}</p>",
                "default": "'start'"
            },
            {
                "name": "textBaseline",
                "type": "string",
                "doc": "<p>The baseline of the text displayed. {top, hanging, middle, alphabetic, ideographic, bottom}</p>",
                "default": "\"alphabetic\""
            },
            {
                "name": "x",
                "type": "number",
                "doc": "<p>The position of the sprite on the x-axis.</p>",
                "default": "0"
            },
            {
                "name": "y",
                "type": "number",
                "doc": "<p>The position of the sprite on the y-axis.</p>",
                "default": "0"
            }
        ],
        "events": []
    },
    "Ext.draw.sprite.Tick": {
        "type": "Ext.draw.sprite.Tick",
        "doc": "<p>A sprite that represents a tick.</p>",
        "configs": [
            {
                "name": "size",
                "type": "number",
                "doc": "<p>The size of the sprite.\nMeant to be comparable to the size of a circle sprite with the same radius.</p>",
                "default": "4"
            }
        ],
        "events": []
    },
    "Ext.draw.sprite.Triangle": {
        "type": "Ext.draw.sprite.Triangle",
        "doc": "<p>A sprite that represents a triangle.</p>",
        "configs": [
            {
                "name": "size",
                "type": "number",
                "doc": "<p>The size of the sprite.\nMeant to be comparable to the size of a circle sprite with the same radius.</p>",
                "default": "4"
            }
        ],
        "events": []
    },
    "Ext.enums.Feature": {
        "type": "Ext.enums.Feature",
        "doc": "<p>Enumeration of all ftypes.</p>",
        "configs": [],
        "events": []
    },
    "Ext.enums.Layout": {
        "type": "Ext.enums.Layout",
        "doc": "<p>Enumeration of all layout types.</p>",
        "configs": [],
        "events": []
    },
    "Ext.enums.Plugin": {
        "type": "Ext.enums.Plugin",
        "doc": "<p>Enumeration of all ptypes.</p>",
        "configs": [],
        "events": []
    },
    "Ext.enums.Widget": {
        "type": "Ext.enums.Widget",
        "doc": "<p>Enumeration of all xtypes.</p>",
        "configs": [],
        "events": []
    },
    "Ext.env.Browser": {
        "type": "Ext.env.Browser",
        "doc": "<p>Provides information about browser.</p>",
        "configs": [],
        "events": []
    },
    "Ext.env.OS": {
        "type": "Ext.env.OS",
        "doc": "<p>Provides information about operating system environment.</p>",
        "configs": [],
        "events": []
    },
    "Ext.env.Ready": {
        "type": "Ext.env.Ready",
        "doc": "<p>This class manages ready detection and handling. Direct use of this class is not\nrecommended. Instead use <code>Ext.onReady</code>:</p>",
        "configs": [],
        "events": []
    },
    "Ext.event.Event": {
        "type": "Ext.event.Event",
        "doc": "<p>Just as Ext.dom.Element wraps around a native DOM node, Ext.event.Event wraps the browser's native\nevent-object normalizing cross-browser differences such as mechanisms to stop event-propagation along with a method\nto prevent default actions from taking place.</p>",
        "configs": [],
        "events": []
    },
    "Ext.event.gesture.DoubleTap": {
        "type": "Ext.event.gesture.DoubleTap",
        "doc": "<p>A simple event recognizer which knows when you double tap.</p>",
        "configs": [
            {
                "name": "maxDuration",
                "type": "number",
                "doc": "\n",
                "default": "300"
            },
            {
                "name": "moveDistance",
                "type": "number",
                "doc": "<p>The maximum distance a touch can move without canceling recognition</p>",
                "default": "8"
            },
            {
                "name": "tapDistance",
                "type": "number",
                "doc": "<p>The minimum distance the second tap can occur from the first tap and still\nbe considered a doubletap</p>",
                "default": "24"
            }
        ],
        "events": []
    },
    "Ext.event.gesture.Drag": {
        "type": "Ext.event.gesture.Drag",
        "configs": [
            {
                "name": "minDistance",
                "type": "number",
                "doc": "<p>The minimum distance of pixels before a touch event becomes a drag event.</p>",
                "default": "8"
            }
        ],
        "events": []
    },
    "Ext.event.gesture.EdgeSwipe": {
        "type": "Ext.event.gesture.EdgeSwipe",
        "doc": "<p>A event recognizer created to recognize swipe movements from the edge of a container.</p>",
        "configs": [
            {
                "name": "minDistance",
                "type": "number",
                "doc": "\n",
                "default": "60"
            }
        ],
        "events": []
    },
    "Ext.event.gesture.LongPress": {
        "type": "Ext.event.gesture.LongPress",
        "doc": "<p>A event recognizer which knows when you tap and hold for more than 1 second.</p>",
        "configs": [
            {
                "name": "minDuration",
                "type": "number",
                "doc": "\n",
                "default": "1000"
            },
            {
                "name": "moveDistance",
                "type": "number",
                "doc": "\n",
                "default": "8"
            }
        ],
        "events": []
    },
    "Ext.event.gesture.MultiTouch": {
        "type": "Ext.event.gesture.MultiTouch",
        "doc": "<p>A base class for gesture recognizers that involve multiple simultaneous contact points\nbetween the screen and the input-device, e.g. 'pinch' and 'rotate'</p>",
        "configs": [],
        "events": []
    },
    "Ext.event.gesture.Pinch": {
        "type": "Ext.event.gesture.Pinch",
        "doc": "<p>A event recognizer which knows when you pinch.</p>",
        "configs": [],
        "events": []
    },
    "Ext.event.gesture.Recognizer": {
        "type": "Ext.event.gesture.Recognizer",
        "doc": "<p>A base class for all gesture recognizers.</p>",
        "configs": [
            {
                "name": "callbackScope",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "onRecognized",
                "type": "object",
                "doc": "\n",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.event.gesture.Rotate": {
        "type": "Ext.event.gesture.Rotate",
        "doc": "<p>A simple event recognizer which knows when you rotate.</p>",
        "configs": [],
        "events": []
    },
    "Ext.event.gesture.SingleTouch": {
        "type": "Ext.event.gesture.SingleTouch",
        "doc": "<p>A base class for gesture recognizers that are only concerned with a single point of\ncontact between the screen and the input-device.</p>",
        "configs": [],
        "events": []
    },
    "Ext.event.gesture.Swipe": {
        "type": "Ext.event.gesture.Swipe",
        "doc": "<p>A gesture recognizer for swipe events</p>",
        "configs": [
            {
                "name": "maxDuration",
                "type": "number",
                "doc": "\n",
                "default": "1000"
            },
            {
                "name": "maxOffset",
                "type": "number",
                "doc": "\n",
                "default": "35"
            },
            {
                "name": "minDistance",
                "type": "number",
                "doc": "\n",
                "default": "80"
            }
        ],
        "events": []
    },
    "Ext.event.gesture.Tap": {
        "type": "Ext.event.gesture.Tap",
        "doc": "<p>A simple event recogniser which knows when you tap.</p>",
        "configs": [
            {
                "name": "moveDistance",
                "type": "number",
                "doc": "<p>The maximimum distance in pixels a touchstart event can travel and still be considered a tap event.</p>",
                "default": "8"
            }
        ],
        "events": []
    },
    "Ext.event.publisher.Dom": {
        "type": "Ext.event.publisher.Dom",
        "configs": [],
        "events": []
    },
    "Ext.event.publisher.ElementPaint": {
        "type": "Ext.event.publisher.ElementPaint",
        "configs": [],
        "events": []
    },
    "Ext.event.publisher.ElementSize": {
        "type": "Ext.event.publisher.ElementSize",
        "configs": [],
        "events": []
    },
    "Ext.event.publisher.Focus": {
        "type": "Ext.event.publisher.Focus",
        "configs": [],
        "events": []
    },
    "Ext.event.publisher.Gesture": {
        "type": "Ext.event.publisher.Gesture",
        "configs": [
            {
                "name": "async",
                "type": "boolean",
                "doc": "<p>By default the gesture publisher runs all handlers on requestAnimationFrame\ntiming for smooth performance of gestures and scrolling.  Set this config\nto false to disable requestAnimationFrame and run handlers immediately.</p>",
                "default": "true"
            }
        ],
        "events": []
    },
    "Ext.event.publisher.MouseEnterLeave": {
        "type": "Ext.event.publisher.MouseEnterLeave",
        "doc": "<p>A publisher that adds support for mousenter and mouseleave events on browsers that do\nnot support those events natively</p>",
        "configs": [],
        "events": []
    },
    "Ext.event.publisher.Publisher": {
        "type": "Ext.event.publisher.Publisher",
        "doc": "<p>Abstract base class for event publishers</p>",
        "configs": [],
        "events": []
    },
    "Ext.feature": {
        "type": "Ext.feature",
        "doc": "<p>A simple class to verify if a browser feature exists or not on the current device.</p>",
        "configs": [],
        "events": []
    },
    "Ext.flash.Component": {
        "type": "Ext.flash.Component",
        "doc": "<p>A simple Component for displaying an Adobe Flash SWF movie. The movie will be sized and can participate\nin layout like any other Component.</p>",
        "configs": [
            {
                "name": "backgroundColor",
                "type": "string",
                "doc": "<p>The background color of the SWF movie.</p>",
                "default": "\"#ffffff\""
            },
            {
                "name": "expressInstall",
                "type": "boolean",
                "doc": "<p>True to prompt the user to install flash if not installed. Note that this uses\nExt.FlashComponent.EXPRESS_INSTALL_URL, which should be set to the local resource.</p>",
                "default": "false"
            },
            {
                "name": "flashAttributes",
                "type": "object",
                "doc": "<p>A set of key value pairs to be passed to the flash object as attributes.</p>",
                "default": null
            },
            {
                "name": "flashParams",
                "type": "object",
                "doc": "<p>A set of key value pairs to be passed to the flash object as parameters. Possible parameters can be found here:\nhttp://kb2.adobe.com/cps/127/tn_12701.html</p>",
                "default": null
            },
            {
                "name": "flashVars",
                "type": "object",
                "doc": "<p>A set of key value pairs to be passed to the flash object as flash variables.</p>",
                "default": null
            },
            {
                "name": "flashVersion",
                "type": "string",
                "doc": "<p>Indicates the version the flash content was published for.</p>",
                "default": "\"9.0.115\""
            },
            {
                "name": "renderTpl",
                "type": "ext.xtemplate/string/string[]",
                "doc": "<p>Have to create a placeholder div with the swfId, which SWFObject will replace with the object/embed element.</p>",
                "default": "['<div id=\"{swfId}\" role=\"presentation\"></div>']"
            },
            {
                "name": "swfHeight",
                "type": "string/number",
                "doc": "<p>The height of the embedded SWF movie inside the component.</p>",
                "default": "\"100%\""
            },
            {
                "name": "swfWidth",
                "type": "string/number",
                "doc": "<p>The width of the embedded SWF movie inside the component.</p>",
                "default": "\"100%\""
            },
            {
                "name": "url",
                "type": "string",
                "doc": "<p>The URL of the SWF file to include.</p>",
                "default": null
            },
            {
                "name": "wmode",
                "type": "string",
                "doc": "<p>The wmode of the flash object. This can be used to control layering.\nSet to 'transparent' to ignore the backgroundColor and make the background of the Flash\nmovie transparent.</p>",
                "default": "\"opaque\""
            }
        ],
        "events": [
            {
                "name": "failure",
                "params": "this(Ext.flash.Component) eOpts(Object)",
                "doc": "<p>Fired when the Flash movie embedding fails</p>"
            },
            {
                "name": "success",
                "params": "this(Ext.flash.Component) eOpts(Object)",
                "doc": "<p>Fired when the Flash movie has been successfully embedded</p>"
            }
        ]
    },
    "Ext.form.Basic": {
        "type": "Ext.form.Basic",
        "doc": "<p>Provides input field management, validation, submission, and form loading services for the collection\nof Field instances within a Ext.container.Container. It is recommended\nthat you use a Ext.form.Panel as the form container, as that has logic to automatically\nhook up an instance of Ext.form.Basic (plus other conveniences related to field configuration.)</p>",
        "configs": [
            {
                "name": "api",
                "type": "object",
                "doc": "<p>If specified, load and submit actions will be handled with DirectLoad\nand DirectSubmit.  Methods which have been imported by\nExt.direct.Manager can be specified here to load and submit forms. API methods may also be\nspecified as strings. See Ext.data.proxy.Direct.directFn.  Such as the following:</p>",
                "default": null
            },
            {
                "name": "baseParams",
                "type": "object",
                "doc": "<p>Parameters to pass with all requests. e.g. baseParams: <code>{id: '123', foo: 'bar'}</code>.</p>",
                "default": null
            },
            {
                "name": "errorReader",
                "type": "object/ext.data.reader.reader",
                "doc": "<p>An Ext.data.reader.Reader (e.g. Ext.data.reader.Xml) instance or\nconfiguration to be used to read field error messages returned from 'submit' actions.\nThis is optional as there is built-in support for processing JSON responses.</p>",
                "default": null
            },
            {
                "name": "jsonSubmit",
                "type": "boolean",
                "doc": "<p>If set to true, the field values are sent as JSON in the request body.\nAll of the field values, plus any additional params configured via baseParams\nand/or the <code>options</code> to submit, will be included in the values POSTed in the body of the request.</p>",
                "default": null
            },
            {
                "name": "metadata",
                "type": "object/array",
                "doc": "<p>Optional metadata to pass with the actions when Ext.Direct api is used.\nSee Ext.direct.Manager for more information.</p>",
                "default": null
            },
            {
                "name": "method",
                "type": "string",
                "doc": "<p>The request method to use (GET or POST) for form actions if one isn't supplied in the action options.</p>",
                "default": null
            },
            {
                "name": "paramOrder",
                "type": "string/string[]",
                "doc": "<p>A list of params to be executed server side. Only used for the api <code>load</code>\nconfiguration.</p>",
                "default": null
            },
            {
                "name": "paramsAsHash",
                "type": "boolean",
                "doc": "<p>Only used for the api <code>load</code> configuration. If true, parameters will be sent as a\nsingle hash collection of named arguments. Providing a paramOrder nullifies this\nconfiguration.</p>",
                "default": "false"
            },
            {
                "name": "reader",
                "type": "object/ext.data.reader.reader",
                "doc": "<p>An Ext.data.reader.Reader (e.g. Ext.data.reader.Xml) instance or\nconfiguration to be used to read data when executing 'load' actions. This\nis optional as there is built-in support for processing JSON responses.</p>",
                "default": null
            },
            {
                "name": "standardSubmit",
                "type": "boolean",
                "doc": "<p>If set to true, a standard HTML form submit is used instead of a XHR (Ajax) style form submission.\nAll of the field values, plus any additional params configured via baseParams\nand/or the <code>options</code> to submit, will be included in the values submitted in the form.</p>",
                "default": null
            },
            {
                "name": "timeout",
                "type": "number",
                "doc": "<p>Timeout for form actions in seconds.</p>",
                "default": "30"
            },
            {
                "name": "trackResetOnLoad",
                "type": "boolean",
                "doc": "<p>If set to true, reset() resets to the last loaded or setValues() data instead of\nwhen the form was first created.</p>",
                "default": "false"
            },
            {
                "name": "url",
                "type": "string",
                "doc": "<p>The URL to use for form actions if one isn't supplied in the\ndoAction options.</p>",
                "default": null
            },
            {
                "name": "waitMsgTarget",
                "type": "string/htmlelement/ext.dom.element",
                "doc": "<p>By default wait messages are displayed with Ext.MessageBox.wait. You can target a specific\nelement by passing it or its id or mask the form itself by passing in true.</p>",
                "default": null
            },
            {
                "name": "waitTitle",
                "type": "string",
                "doc": "<p>The default title to show for the waiting message box</p>",
                "default": "'Please Wait...'"
            }
        ],
        "events": [
            {
                "name": "actioncomplete",
                "params": "this(Ext.form.Basic) action(Ext.form.action.Action) eOpts(Object)",
                "doc": "<p>Fires when an action is completed.</p>"
            },
            {
                "name": "actionfailed",
                "params": "this(Ext.form.Basic) action(Ext.form.action.Action) eOpts(Object)",
                "doc": "<p>Fires when an action fails.</p>"
            },
            {
                "name": "beforeaction",
                "params": "this(Ext.form.Basic) action(Ext.form.action.Action) eOpts(Object)",
                "doc": "<p>Fires before any action is performed. Return false to cancel the action.</p>"
            },
            {
                "name": "dirtychange",
                "params": "this(Ext.form.Basic) dirty(Boolean) eOpts(Object)",
                "doc": "<p>Fires when the dirty state of the entire form changes.</p>"
            },
            {
                "name": "errorchange",
                "params": "this(Ext.form.Basic) eOpts(Object)",
                "doc": "<p>Fires when the error of one (or more) of the fields in the form changes.</p>"
            },
            {
                "name": "validitychange",
                "params": "this(Ext.form.Basic) valid(Boolean) eOpts(Object)",
                "doc": "<p>Fires when the validity of the entire form changes.</p>"
            }
        ]
    },
    "Ext.form.CheckboxGroup": {
        "type": "Ext.form.CheckboxGroup",
        "doc": "<p>A field container which has a specialized layout for arranging\nExt.form.field.Checkbox controls into columns, and provides convenience\nExt.form.field.Field methods for getting, setting,\nand validating the group of checkboxes as a whole.</p>",
        "configs": [
            {
                "name": "allowBlank",
                "type": "boolean",
                "doc": "<p>False to validate that at least one item in the group is checked. If no items are selected at\nvalidation time, blankText will be used as the error text.</p>",
                "default": "true"
            },
            {
                "name": "blankText",
                "type": "string",
                "doc": "<p>Error text to display if the allowBlank validation fails</p>",
                "default": "\"You must select at least one item in this group\""
            },
            {
                "name": "columns",
                "type": "string/number/number[]",
                "doc": "<p>Specifies the number of columns to use when displaying grouped checkbox/radio controls using automatic layout.\nThis config can take several types of values:</p>",
                "default": "'auto'"
            },
            {
                "name": "componentCls",
                "type": "string",
                "doc": "<p>CSS Class to be added to a components root level element to give distinction to it via styling.</p>",
                "default": "Ext.baseCSSPrefix + 'form-checkboxgroup'"
            },
            {
                "name": "defaultType",
                "type": "string",
                "doc": "<p>private</p>",
                "default": "'checkboxfield'"
            },
            {
                "name": "items",
                "type": "ext.form.field.checkbox[]/object[]",
                "doc": "<p>An Array of Checkboxes or Checkbox config objects to arrange in the group.</p>",
                "default": null
            },
            {
                "name": "layout",
                "type": "ext.enums.layout/object",
                "doc": "<p>private</p>",
                "default": "'checkboxgroup'"
            },
            {
                "name": "name",
                "type": "string",
                "doc": "\n",
                "default": null
            },
            {
                "name": "vertical",
                "type": "boolean",
                "doc": "<p>True to distribute contained controls across columns, completely filling each column top to bottom before\nstarting on the next column. The number of controls in each column will be automatically calculated to keep\ncolumns as even as possible. The default value is false, so that controls will be added to columns one at a time,\ncompletely filling each row left to right before starting on the next row.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.form.CheckboxManager": {
        "type": "Ext.form.CheckboxManager",
        "doc": "<p>Private utility class for managing all Ext.form.field.Checkbox fields grouped by name.</p>",
        "configs": [],
        "events": []
    },
    "Ext.form.FieldAncestor": {
        "type": "Ext.form.FieldAncestor",
        "doc": "<p>A mixin for Ext.container.Container components that are likely to have form fields in their\nitems subtree. Adds the following capabilities:</p>",
        "configs": [
            {
                "name": "fieldDefaults",
                "type": "object",
                "doc": "<p>If specified, the properties in this object are used as default config values for each Ext.form.Labelable\ninstance (e.g. Ext.form.field.Base or Ext.form.FieldContainer) that is added as a descendant of\nthis container. Corresponding values specified in an individual field's own configuration, or from the defaults config of its parent container, will take precedence. See the\ndocumentation for Ext.form.Labelable to see what config options may be specified in the fieldDefaults.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "fielderrorchange",
                "params": "this(Ext.form.FieldAncestor) field(Ext.form.Labelable) error(String) eOpts(Object)",
                "doc": "<p>Fires when the active error message is changed for any one of the Ext.form.Labelable instances\nwithin this container.</p>"
            },
            {
                "name": "fieldvaliditychange",
                "params": "this(Ext.form.FieldAncestor) field(Ext.form.Labelable) isValid(String) eOpts(Object)",
                "doc": "<p>Fires when the validity state of any one of the Ext.form.field.Field instances within this\ncontainer changes.</p>"
            }
        ]
    },
    "Ext.form.FieldContainer": {
        "type": "Ext.form.FieldContainer",
        "doc": "<p>FieldContainer is a derivation of Container that implements the\nLabelable mixin. This allows it to be configured so that it is rendered with\na field label and optional error message around its sub-items.\nThis is useful for arranging a group of fields or other components within a single item in a form, so\nthat it lines up nicely with other fields. A common use is for grouping a set of related fields under\na single label in a form.</p>",
        "configs": [
            {
                "name": "combineErrors",
                "type": "boolean",
                "doc": "<p>If set to true, the field container will automatically combine and display the validation errors from\nall the fields it contains as a single error on the container, according to the configured\nmsgTarget. Defaults to false.</p>",
                "default": "false"
            },
            {
                "name": "combineLabels",
                "type": "boolean",
                "doc": "<p>If set to true, and there is no defined fieldLabel, the field container will automatically\ngenerate its label by combining the labels of all the fields it contains. Defaults to false.</p>",
                "default": "false"
            },
            {
                "name": "componentCls",
                "type": "string",
                "doc": "<p>CSS Class to be added to a components root level element to give distinction to it via styling.</p>",
                "default": "Ext.baseCSSPrefix + 'form-fieldcontainer'"
            },
            {
                "name": "componentLayout",
                "type": "string/object",
                "doc": "<p>The sizing and positioning of a Component's internal Elements is the responsibility of the Component's layout\nmanager which sizes a Component's internal structure in response to the Component being sized.</p>",
                "default": "'fieldcontainer'"
            },
            {
                "name": "invalidCls",
                "type": "string",
                "doc": "<p>If we allow this to mark with the invalidCls it will cascade to all\nchild fields, let them handle themselves</p>",
                "default": "''"
            },
            {
                "name": "labelConnector",
                "type": "string",
                "doc": "<p>The string to use when joining the labels of individual sub-fields, when combineLabels is\nset to true. Defaults to ', '.</p>",
                "default": "', '"
            },
            {
                "name": "shrinkWrap",
                "type": "boolean/number",
                "doc": "<p>If this property is a number, it is interpreted as follows:</p>",
                "default": "true"
            }
        ],
        "events": []
    },
    "Ext.form.FieldSet": {
        "type": "Ext.form.FieldSet",
        "doc": "<p>A container for grouping sets of fields, rendered as a HTML <code>fieldset</code> element. The title\nconfig will be rendered as the fieldset's <code>legend</code>.</p>",
        "configs": [
            {
                "name": "autoEl",
                "type": "string/object",
                "doc": "<p>A tag name or DomHelper spec used to create the Element which will\nencapsulate this Component.</p>",
                "default": "'fieldset'"
            },
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class applied to the fieldset.</p>",
                "default": "'x-fieldset'"
            },
            {
                "name": "checkboxName",
                "type": "string",
                "doc": "<p>The name to assign to the fieldset's checkbox if checkboxToggle = true\n(defaults to '[fieldset id]-checkbox').</p>",
                "default": null
            },
            {
                "name": "checkboxToggle",
                "type": "boolean",
                "doc": "<p>Set to true to render a checkbox into the fieldset frame just in front of the legend to expand/collapse the\nfieldset when the checkbox is toggled.. This checkbox will be included in form submits using\nthe checkboxName.</p>",
                "default": "false"
            },
            {
                "name": "checkboxUI",
                "type": "string",
                "doc": "<p>The ui to use for the fieldset's checkbox.</p>",
                "default": "'default'"
            },
            {
                "name": "childEls",
                "type": "object/string[]/object[]",
                "doc": "<p>The canonical form of <code>childEls</code> is an object keyed by child's property name\nwith values that are objects with the following properties.</p>",
                "default": "['body']"
            },
            {
                "name": "collapsed",
                "type": "boolean",
                "doc": "<p>Set to true to render the fieldset as collapsed by default. If checkboxToggle is specified, the checkbox\nwill also be unchecked by default.</p>",
                "default": "false"
            },
            {
                "name": "collapsible",
                "type": "boolean",
                "doc": "<p>Set to true to make the fieldset collapsible and have the expand/collapse toggle button automatically rendered\ninto the legend element, false to keep the fieldset statically sized with no collapse button.\nAnother option is to configure checkboxToggle. Use the collapsed config to collapse the\nfieldset by default.</p>",
                "default": "false"
            },
            {
                "name": "componentLayout",
                "type": "string/object",
                "doc": "<p>The sizing and positioning of a Component's internal Elements is the responsibility of the Component's layout\nmanager which sizes a Component's internal structure in response to the Component being sized.</p>",
                "default": "'fieldset'"
            },
            {
                "name": "layout",
                "type": "ext.enums.layout/object",
                "doc": "<p>The Ext.container.Container.layout for the fieldset's immediate child items.</p>",
                "default": "'anchor'"
            },
            {
                "name": "renderTpl",
                "type": "ext.xtemplate/string/string[]",
                "doc": "<p>An XTemplate used to create the internal structure inside this Component's encapsulating\nElement.</p>",
                "default": "['{%this.renderLegend(out,values);%}', '<div id=\"{id}-body\" data-ref=\"body\" class=\"{baseCls}-body {baseCls}-body-{ui} {bodyTargetCls}\" ', 'role=\"presentation\"<tpl if=\"bodyStyle\"> style=\"{bodyStyle}\"</tpl>>', '{%this.renderContainer(out,values);%}', '</div>']"
            },
            {
                "name": "stateEvents",
                "type": "string[]",
                "doc": "<p>An array of events that, when fired, should trigger this object to\nsave its state. Defaults to none. <code>stateEvents</code> may be any type\nof event supported by this object, including browser or custom events\n(e.g., <code>['click', 'customerchange']</code>).</p>",
                "default": "['collapse', 'expand']"
            },
            {
                "name": "title",
                "type": "string",
                "doc": "<p>A title to be displayed in the fieldset's legend. May contain HTML markup.</p>",
                "default": null
            },
            {
                "name": "toggleOnTitleClick",
                "type": "boolean",
                "doc": "<p>Set to true will add a listener to the titleCmp property for the click event which will execute the\ntoggle method. This option is only used when the collapsible property is set to true.</p>",
                "default": "true"
            }
        ],
        "events": [
            {
                "name": "beforecollapse",
                "params": "fieldset(Ext.form.FieldSet) eOpts(Object)",
                "doc": "<p>Fires before this FieldSet is collapsed. Return false to prevent the collapse.</p>"
            },
            {
                "name": "beforeexpand",
                "params": "fieldset(Ext.form.FieldSet) eOpts(Object)",
                "doc": "<p>Fires before this FieldSet is expanded. Return false to prevent the expand.</p>"
            },
            {
                "name": "collapse",
                "params": "fieldset(Ext.form.FieldSet) eOpts(Object)",
                "doc": "<p>Fires after this FieldSet has collapsed.</p>"
            },
            {
                "name": "expand",
                "params": "fieldset(Ext.form.FieldSet) eOpts(Object)",
                "doc": "<p>Fires after this FieldSet has expanded.</p>"
            }
        ]
    },
    "Ext.form.Label": {
        "type": "Ext.form.Label",
        "doc": "<p>Produces a standalone <code>&lt;label /&gt;</code> element which can be inserted into a form and be associated with a field\nin that form using the forId property.</p>",
        "configs": [
            {
                "name": "autoEl",
                "type": "string/object",
                "doc": "<p>A tag name or DomHelper spec used to create the Element which will\nencapsulate this Component.</p>",
                "default": "'label'"
            },
            {
                "name": "forId",
                "type": "string",
                "doc": "<p>The id of the input element to which this label will be bound via the standard HTML 'for'\nattribute. If not specified, the attribute will not be added to the label. In most cases you will be\nassociating the label with a Ext.form.field.Base component, so you should make sure this matches\nthe inputId of that field.</p>",
                "default": null
            },
            {
                "name": "html",
                "type": "string",
                "doc": "<p>An HTML fragment that will be used as the label's innerHTML.\nNote that if text is specified it will take precedence and this value will be ignored.</p>",
                "default": "''"
            },
            {
                "name": "text",
                "type": "string",
                "doc": "<p>The plain text to display within the label. If you need to include HTML\ntags within the label's innerHTML, use the html config instead.</p>",
                "default": "''"
            }
        ],
        "events": []
    },
    "Ext.form.Labelable": {
        "type": "Ext.form.Labelable",
        "doc": "<p>A mixin which allows a component to be configured and decorated with a label and/or error message as is\ncommon for form fields. This is used by e.g. Ext.form.field.Base and Ext.form.FieldContainer\nto let them be managed by the Field layout.</p>",
        "configs": [
            {
                "name": "activeError",
                "type": "string",
                "doc": "<p>If specified, then the component will be displayed with this value as its active error when first rendered. Use\nsetActiveError or unsetActiveError to change it after component creation.</p>",
                "default": null
            },
            {
                "name": "activeErrorsTpl",
                "type": "string/string[]/ext.xtemplate",
                "doc": "<p>The template used to format the Array of error messages passed to setActiveErrors into a single HTML\nstring. if the msgTarget is title, it defaults to a list separated by new lines. Otherwise, it\nrenders each message as an item in an unordered list.</p>",
                "default": null
            },
            {
                "name": "afterBodyEl",
                "type": "string/array/ext.xtemplate",
                "doc": "<p>An optional string or <code>XTemplate</code> configuration to insert in the field markup\nat the end of the input containing element. If an <code>XTemplate</code> is used, the component's render data\nserves as the context.</p>",
                "default": null
            },
            {
                "name": "afterLabelTextTpl",
                "type": "string/array/ext.xtemplate",
                "doc": "<p>An optional string or <code>XTemplate</code> configuration to insert in the field markup\nafter the label text. If an <code>XTemplate</code> is used, the component's render data\nserves as the context.</p>",
                "default": null
            },
            {
                "name": "afterLabelTpl",
                "type": "string/array/ext.xtemplate",
                "doc": "<p>An optional string or <code>XTemplate</code> configuration to insert in the field markup\nafter the label element. If an <code>XTemplate</code> is used, the component's render data\nserves as the context.</p>",
                "default": null
            },
            {
                "name": "afterSubTpl",
                "type": "string/array/ext.xtemplate",
                "doc": "<p>An optional string or <code>XTemplate</code> configuration to insert in the field markup\nafter the subTpl markup. If an <code>XTemplate</code> is used, the\ncomponent's render data serves as the context.</p>",
                "default": null
            },
            {
                "name": "autoFitErrors",
                "type": "boolean",
                "doc": "<p>Whether to adjust the component's body width to make room for 'side'\nerror messages.</p>",
                "default": "true"
            },
            {
                "name": "baseBodyCls",
                "type": "string",
                "doc": "<p>The CSS class to be applied to the body content element.</p>",
                "default": "Ext.baseCSSPrefix + 'form-item-body'"
            },
            {
                "name": "beforeBodyEl",
                "type": "string/array/ext.xtemplate",
                "doc": "<p>An optional string or <code>XTemplate</code> configuration to insert in the field markup\nat the beginning of the input containing element. If an <code>XTemplate</code> is used, the component's render data\nserves as the context.</p>",
                "default": null
            },
            {
                "name": "beforeLabelTextTpl",
                "type": "string/array/ext.xtemplate",
                "doc": "<p>An optional string or <code>XTemplate</code> configuration to insert in the field markup\nbefore the label text. If an <code>XTemplate</code> is used, the component's render data\nserves as the context.</p>",
                "default": null
            },
            {
                "name": "beforeLabelTpl",
                "type": "string/array/ext.xtemplate",
                "doc": "<p>An optional string or <code>XTemplate</code> configuration to insert in the field markup\nbefore the label element. If an <code>XTemplate</code> is used, the component's render data\nserves as the context.</p>",
                "default": null
            },
            {
                "name": "beforeSubTpl",
                "type": "string/array/ext.xtemplate",
                "doc": "<p>An optional string or <code>XTemplate</code> configuration to insert in the field markup\nbefore the subTpl markup. If an <code>XTemplate</code> is used, the\ncomponent's render data serves as the context.</p>",
                "default": null
            },
            {
                "name": "childEls",
                "type": "array",
                "doc": "\n",
                "default": "['labelEl', 'bodyEl', 'errorEl', 'errorWrapEl']"
            },
            {
                "name": "errorMsgCls",
                "type": "string",
                "doc": "<p>The CSS class to be applied to the error message element.</p>",
                "default": "Ext.baseCSSPrefix + 'form-error-msg'"
            },
            {
                "name": "fieldBodyCls",
                "type": "string",
                "doc": "<p>An extra CSS class to be applied to the body content element in addition to baseBodyCls.</p>",
                "default": "''"
            },
            {
                "name": "fieldLabel",
                "type": "string",
                "doc": "<p>The label for the field. It gets appended with the labelSeparator, and its position and sizing is\ndetermined by the labelAlign and labelWidth configs.</p>",
                "default": null
            },
            {
                "name": "formItemCls",
                "type": "string",
                "doc": "<p>A CSS class to be applied to the outermost element to denote that it is participating in the form field layout.</p>",
                "default": "Ext.baseCSSPrefix + 'form-item'"
            },
            {
                "name": "hideEmptyLabel",
                "type": "boolean",
                "doc": "<p>When set to true, the label element (fieldLabel and labelSeparator) will be automatically\nhidden if the fieldLabel is empty. Setting this to false will cause the empty label element to be\nrendered and space to be reserved for it; this is useful if you want a field without a label to line up with\nother labeled fields in the same form.</p>",
                "default": "true"
            },
            {
                "name": "hideLabel",
                "type": "boolean",
                "doc": "<p>Set to true to completely hide the label element (fieldLabel and labelSeparator). Also see\nhideEmptyLabel, which controls whether space will be reserved for an empty fieldLabel.</p>",
                "default": "false"
            },
            {
                "name": "invalidCls",
                "type": "string",
                "doc": "<p>The CSS class to use when marking the component invalid.</p>",
                "default": "Ext.baseCSSPrefix + 'form-invalid'"
            },
            {
                "name": "labelAlign",
                "type": "string",
                "doc": "<p>Controls the position and alignment of the fieldLabel. Valid values are:</p>",
                "default": "'left'"
            },
            {
                "name": "labelAttrTpl",
                "type": "string/array/ext.xtemplate",
                "doc": "<p>An optional string or <code>XTemplate</code> configuration to insert in the field markup\ninside the label element (as attributes). If an <code>XTemplate</code> is used, the component's\nrender data serves as the context.</p>",
                "default": null
            },
            {
                "name": "labelCls",
                "type": "string",
                "doc": "<p>The CSS class to be applied to the label element. This (single) CSS class is used to formulate the renderSelector\nand drives the field layout where it is concatenated with a hyphen ('-') and labelAlign. To add\nadditional classes, use labelClsExtra.</p>",
                "default": "Ext.baseCSSPrefix + 'form-item-label'"
            },
            {
                "name": "labelClsExtra",
                "type": "string",
                "doc": "<p>An optional string of one or more additional CSS classes to add to the label element. Defaults to empty.</p>",
                "default": null
            },
            {
                "name": "labelPad",
                "type": "number",
                "doc": "<p>The amount of space in pixels between the fieldLabel and the field body.\nThis defaults to <code>5</code> for compatibility with Ext JS 4, however, as of Ext JS 5\nthe space between the label and the body can optionally be determined by the theme\nusing the $form-label-horizontal-spacing (for side-aligned labels) and\n$form-label-vertical-spacing (for top-aligned labels) SASS variables.\nIn order for the stylesheet values as to take effect, you must use a labelPad value\nof <code>null</code>.</p>",
                "default": "5"
            },
            {
                "name": "labelSeparator",
                "type": "string",
                "doc": "<p>Character(s) to be inserted at the end of the label text.</p>",
                "default": "':'"
            },
            {
                "name": "labelStyle",
                "type": "string",
                "doc": "<p>A CSS style specification string to apply directly to this field's label.</p>",
                "default": null
            },
            {
                "name": "labelWidth",
                "type": "number",
                "doc": "<p>The width of the fieldLabel in pixels. Only applicable if labelAlign\nis set to \"left\" or \"right\".</p>",
                "default": "100"
            },
            {
                "name": "labelableRenderTpl",
                "type": "string/string[]/ext.xtemplate",
                "doc": "<p>The rendering template for the field decorations. Component classes using this mixin\nshould include logic to use this as their renderTpl,\nand implement the getSubTplMarkup method to generate the field body content.</p>",
                "default": "['{beforeLabelTpl}', '<label id=\"{id}-labelEl\" data-ref=\"labelEl\" class=\"{labelCls} {labelCls}-{ui} {labelClsExtra} ', '{unselectableCls}\" style=\"{labelStyle}\"<tpl if=\"inputId\">', ' for=\"{inputId}\"</tpl> {labelAttrTpl}>', '<span class=\"{labelInnerCls} {labelInnerCls}-{ui}\" style=\"{labelInnerStyle}\">', '{beforeLabelTextTpl}', '<tpl if=\"fieldLabel\">{fieldLabel}', '<tpl if=\"labelSeparator\">{labelSeparator}</tpl>', '</tpl>', '{afterLabelTextTpl}', '</span>', '</label>', '{afterLabelTpl}', '<div id=\"{id}-bodyEl\" data-ref=\"bodyEl\" class=\"{baseBodyCls} {baseBodyCls}-{ui}<tpl if=\"fieldBodyCls\">', ' {fieldBodyCls} {fieldBodyCls}-{ui}</tpl> {growCls} {extraFieldBodyCls}\"', '<tpl if=\"bodyStyle\"> style=\"{bodyStyle}\"</tpl>>', '{beforeBodyEl}', '{beforeSubTpl}', '{[values.$comp.getSubTplMarkup(values)]}', '{afterSubTpl}', '{afterBodyEl}', '</div>', '<tpl if=\"renderError\">', '<div id=\"{id}-errorWrapEl\" data-ref=\"errorWrapEl\" class=\"{errorWrapCls} {errorWrapCls}-{ui}', ' {errorWrapExtraCls}\" style=\"{errorWrapStyle}\">', '<div role=\"alert\" aria-live=\"polite\" id=\"{id}-errorEl\" data-ref=\"errorEl\" ', 'class=\"{errorMsgCls} {invalidMsgCls} {invalidMsgCls}-{ui}\" ', 'data-anchorTarget=\"{id}-inputEl\">', '</div>', '</div>', '</tpl>', {disableFormats: true}]"
            },
            {
                "name": "msgTarget",
                "type": "string",
                "doc": "<p>The location where the error message text should display. Must be one of the following values:</p>",
                "default": "'qtip'"
            },
            {
                "name": "preventMark",
                "type": "boolean",
                "doc": "<p>true to disable displaying any error message set on this object.</p>",
                "default": "false"
            }
        ],
        "events": [
            {
                "name": "errorchange",
                "params": "this(Ext.form.Labelable) error(String) eOpts(Object)",
                "doc": "<p>Fires when the active error message is changed via setActiveError.</p>"
            }
        ]
    },
    "Ext.form.Panel": {
        "type": "Ext.form.Panel",
        "doc": "<p>FormPanel provides a standard container for forms. It is essentially a standard Ext.panel.Panel which\nautomatically creates a BasicForm for managing any Ext.form.field.Field\nobjects that are added as descendants of the panel. It also includes conveniences for configuring and\nworking with the BasicForm and the collection of Fields.</p>",
        "configs": [
            {
                "name": "api",
                "type": "object",
                "doc": "<p>If specified, load and submit actions will be handled with DirectLoad\nand DirectSubmit.  Methods which have been imported by\nExt.direct.Manager can be specified here to load and submit forms. API methods may also be\nspecified as strings. See Ext.data.proxy.Direct.directFn.  Such as the following:</p>",
                "default": null
            },
            {
                "name": "baseParams",
                "type": "object",
                "doc": "<p>Parameters to pass with all requests. e.g. baseParams: <code>{id: '123', foo: 'bar'}</code>.</p>",
                "default": null
            },
            {
                "name": "errorReader",
                "type": "object/ext.data.reader.reader",
                "doc": "<p>An Ext.data.reader.Reader (e.g. Ext.data.reader.Xml) instance or\nconfiguration to be used to read field error messages returned from 'submit' actions.\nThis is optional as there is built-in support for processing JSON responses.</p>",
                "default": null
            },
            {
                "name": "jsonSubmit",
                "type": "boolean",
                "doc": "<p>If set to true, the field values are sent as JSON in the request body.\nAll of the field values, plus any additional params configured via baseParams\nand/or the <code>options</code> to submit, will be included in the values POSTed in the body of the request.</p>",
                "default": null
            },
            {
                "name": "layout",
                "type": "ext.enums.layout/object",
                "doc": "<p>The Ext.container.Container.layout for the form panel's immediate child items.</p>",
                "default": "'anchor'"
            },
            {
                "name": "method",
                "type": "string",
                "doc": "<p>The request method to use (GET or POST) for form actions if one isn't supplied in the action options.</p>",
                "default": null
            },
            {
                "name": "paramOrder",
                "type": "string/string[]",
                "doc": "<p>A list of params to be executed server side. Only used for the api <code>load</code>\nconfiguration.</p>",
                "default": null
            },
            {
                "name": "paramsAsHash",
                "type": "boolean",
                "doc": "<p>Only used for the api <code>load</code> configuration. If true, parameters will be sent as a\nsingle hash collection of named arguments. Providing a paramOrder nullifies this\nconfiguration.</p>",
                "default": null
            },
            {
                "name": "pollForChanges",
                "type": "boolean",
                "doc": "<p>If set to <code>true</code>, sets up an interval task (using the pollInterval) in which the\npanel's fields are repeatedly checked for changes in their values. This is in addition to the normal detection\neach field does on its own input element, and is not needed in most cases. It does, however, provide a\nmeans to absolutely guarantee detection of all changes including some edge cases in some browsers which\ndo not fire native events. Defaults to <code>false</code>.</p>",
                "default": null
            },
            {
                "name": "pollInterval",
                "type": "number",
                "doc": "<p>Interval in milliseconds at which the form's fields are checked for value changes. Only used if\nthe pollForChanges option is set to <code>true</code>. Defaults to 500 milliseconds.</p>",
                "default": null
            },
            {
                "name": "reader",
                "type": "object/ext.data.reader.reader",
                "doc": "<p>An Ext.data.reader.Reader (e.g. Ext.data.reader.Xml) instance or\nconfiguration to be used to read data when executing 'load' actions. This\nis optional as there is built-in support for processing JSON responses.</p>",
                "default": null
            },
            {
                "name": "standardSubmit",
                "type": "boolean",
                "doc": "<p>If set to true, a standard HTML form submit is used instead of a XHR (Ajax) style form submission.\nAll of the field values, plus any additional params configured via baseParams\nand/or the <code>options</code> to submit, will be included in the values submitted in the form.</p>",
                "default": null
            },
            {
                "name": "timeout",
                "type": "number",
                "doc": "<p>Timeout for form actions in seconds.</p>",
                "default": null
            },
            {
                "name": "trackResetOnLoad",
                "type": "boolean",
                "doc": "<p>If set to true, reset() resets to the last loaded or setValues() data instead of\nwhen the form was first created.</p>",
                "default": null
            },
            {
                "name": "url",
                "type": "string",
                "doc": "<p>The URL to use for form actions if one isn't supplied in the\ndoAction options.</p>",
                "default": null
            },
            {
                "name": "waitMsgTarget",
                "type": "string/htmlelement/ext.dom.element",
                "doc": "<p>By default wait messages are displayed with Ext.MessageBox.wait. You can target a specific\nelement by passing it or its id or mask the form itself by passing in true.</p>",
                "default": null
            },
            {
                "name": "waitTitle",
                "type": "string",
                "doc": "<p>The default title to show for the waiting message box</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "actioncomplete",
                "params": "this(Ext.form.Basic) action(Ext.form.action.Action) eOpts(Object)",
                "doc": "<p>Fires when an action is completed.</p>"
            },
            {
                "name": "actionfailed",
                "params": "this(Ext.form.Basic) action(Ext.form.action.Action) eOpts(Object)",
                "doc": "<p>Fires when an action fails.</p>"
            },
            {
                "name": "beforeaction",
                "params": "this(Ext.form.Basic) action(Ext.form.action.Action) eOpts(Object)",
                "doc": "<p>Fires before any action is performed. Return false to cancel the action.</p>"
            },
            {
                "name": "dirtychange",
                "params": "this(Ext.form.Basic) dirty(Boolean) eOpts(Object)",
                "doc": "<p>Fires when the dirty state of the entire form changes.</p>"
            },
            {
                "name": "validitychange",
                "params": "this(Ext.form.Basic) valid(Boolean) eOpts(Object)",
                "doc": "<p>Fires when the validity of the entire form changes.</p>"
            }
        ]
    },
    "Ext.form.RadioGroup": {
        "type": "Ext.form.RadioGroup",
        "doc": "<p>A field container which has a specialized layout for arranging\nExt.form.field.Radio controls into columns, and provides convenience Ext.form.field.Field\nmethods for getting, setting, and validating the\ngroup of radio buttons as a whole.</p>",
        "configs": [
            {
                "name": "allowBlank",
                "type": "boolean",
                "doc": "<p>True to allow every item in the group to be blank.\nIf allowBlank = false and no items are selected at validation time, blankText will\nbe used as the error text.</p>",
                "default": "true"
            },
            {
                "name": "blankText",
                "type": "string",
                "doc": "<p>Error text to display if the allowBlank validation fails</p>",
                "default": "'You must select one item in this group'"
            },
            {
                "name": "defaultType",
                "type": "string",
                "doc": "<p>private</p>",
                "default": "'radiofield'"
            },
            {
                "name": "items",
                "type": "ext.form.field.radio[]/object[]",
                "doc": "<p>An Array of Radios or Radio config objects to arrange in the group.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.form.RadioManager": {
        "type": "Ext.form.RadioManager",
        "doc": "<p>Private utility class for managing all Ext.form.field.Radio fields grouped by name.</p>",
        "configs": [],
        "events": []
    },
    "Ext.form.action.Action": {
        "type": "Ext.form.action.Action",
        "doc": "<p>The subclasses of this class provide actions to perform upon Forms.</p>",
        "configs": [
            {
                "name": "failure",
                "type": "function",
                "doc": "<p>The function to call when a failure packet was received, or when an error ocurred in the Ajax communication.</p>",
                "default": null
            },
            {
                "name": "form",
                "type": "ext.form.basic",
                "doc": "<p>The BasicForm instance that is invoking this Action. Required.</p>",
                "default": null
            },
            {
                "name": "headers",
                "type": "object",
                "doc": "<p>Extra headers to be sent in the AJAX request for submit and load actions.\nSee Ext.data.proxy.Ajax.headers.</p>",
                "default": null
            },
            {
                "name": "method",
                "type": "string",
                "doc": "<p>The HTTP method to use to access the requested URL.\nDefaults to the BasicForm's method, or 'POST' if not specified.</p>",
                "default": null
            },
            {
                "name": "params",
                "type": "object/string",
                "doc": "<p>Extra parameter values to pass. These are added to the Form's Ext.form.Basic.baseParams and passed to the\nspecified URL along with the Form's input fields.</p>",
                "default": null
            },
            {
                "name": "reset",
                "type": "boolean",
                "doc": "<p>When set to <strong>true</strong>, causes the Form to be reset on Action success. If specified,\nthis happens before the success callback is called and before the Form's\nactioncomplete event fires.</p>",
                "default": null
            },
            {
                "name": "scope",
                "type": "object",
                "doc": "<p>The scope in which to call the configured success and failure callback functions\n(the <code>this</code> reference for the callback functions).</p>",
                "default": null
            },
            {
                "name": "submitEmptyText",
                "type": "boolean",
                "doc": "<p>If set to true, the emptyText value will be sent with the form when it is submitted.</p>",
                "default": "true"
            },
            {
                "name": "success",
                "type": "function",
                "doc": "<p>The function to call when a valid success return packet is received.</p>",
                "default": null
            },
            {
                "name": "timeout",
                "type": "number",
                "doc": "<p>The number of seconds to wait for a server response before failing with the failureType as\nCONNECT_FAILURE. If not specified, defaults to the configured\ntimeout of the form.</p>",
                "default": null
            },
            {
                "name": "url",
                "type": "string",
                "doc": "<p>The URL that the Action is to invoke. Will default to the url configured on the\nform.</p>",
                "default": null
            },
            {
                "name": "waitMsg",
                "type": "string",
                "doc": "<p>The message to be displayed by a call to Ext.window.MessageBox.wait during the time the action is being\nprocessed.</p>",
                "default": null
            },
            {
                "name": "waitTitle",
                "type": "string",
                "doc": "<p>The title to be displayed by a call to Ext.window.MessageBox.wait during the time the action is being\nprocessed.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.form.action.DirectAction": {
        "type": "Ext.form.action.DirectAction",
        "doc": "<p>A mixin that contains methods specific to Ext.Direct actions shared\nby DirectLoad and DirectSubmit.</p>",
        "configs": [],
        "events": []
    },
    "Ext.form.action.DirectLoad": {
        "type": "Ext.form.action.DirectLoad",
        "doc": "<p>Provides Ext.direct.Manager support for loading form data.</p>",
        "configs": [],
        "events": []
    },
    "Ext.form.action.DirectSubmit": {
        "type": "Ext.form.action.DirectSubmit",
        "doc": "<p>Provides Ext.direct support for submitting form data.</p>",
        "configs": [],
        "events": []
    },
    "Ext.form.action.Load": {
        "type": "Ext.form.action.Load",
        "doc": "<p>A class which handles loading of data from a server into the Fields of an Ext.form.Basic.</p>",
        "configs": [],
        "events": []
    },
    "Ext.form.action.StandardSubmit": {
        "type": "Ext.form.action.StandardSubmit",
        "doc": "<p>A class which handles submission of data from Forms using a standard <code>&lt;form&gt;</code> element submit.\nIt does not handle the response from the submit.</p>",
        "configs": [
            {
                "name": "target",
                "type": "string",
                "doc": "<p>Optional target attribute to be used for the form when submitting.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.form.action.Submit": {
        "type": "Ext.form.action.Submit",
        "doc": "<p>A class which handles submission of data from Forms and processes the returned response.</p>",
        "configs": [
            {
                "name": "clientValidation",
                "type": "boolean",
                "doc": "<p>Determines whether a Form's fields are validated in a final call to isValid prior\nto submission. Pass false in the Form's submit options to prevent this.</p>",
                "default": "true"
            }
        ],
        "events": []
    },
    "Ext.form.field.Base": {
        "type": "Ext.form.field.Base",
        "doc": "<p>Base class for form fields that provides default event handling, rendering, and other common functionality\nneeded by all form field types. Utilizes the Ext.form.field.Field mixin for value handling and validation,\nand the Ext.form.Labelable mixin to provide label and error message display.</p>",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to elements within this\ncomponent like Panel's body will get a class <code>x-panel-body</code>. This means that if you create a subclass of Panel, and\nyou want it to get all the Panels styling for the element and the body, you leave the <code>baseCls</code> <code>x-panel</code> and use\n<code>componentCls</code> to add specific styling for this component.</p>",
                "default": "Ext.baseCSSPrefix + 'field'"
            },
            {
                "name": "checkChangeBuffer",
                "type": "number",
                "doc": "<p>Defines a timeout in milliseconds for buffering checkChangeEvents that fire in rapid succession.\nDefaults to 50 milliseconds.</p>",
                "default": "50"
            },
            {
                "name": "checkChangeEvents",
                "type": "string[]",
                "doc": "<p>A list of event names that will be listened for on the field's input element, which will cause\nthe field's value to be checked for changes. If a change is detected, the change event will be\nfired, followed by validation if the validateOnChange option is enabled.</p>",
                "default": null
            },
            {
                "name": "dirtyCls",
                "type": "string",
                "doc": "<p>The CSS class to use when the field value is dirty.</p>",
                "default": "Ext.baseCSSPrefix + 'form-dirty'"
            },
            {
                "name": "fieldBodyCls",
                "type": "string",
                "doc": "<p>An extra CSS class to be applied to the body content element in addition to baseBodyCls.</p>",
                "default": "Ext.baseCSSPrefix + 'field-body'"
            },
            {
                "name": "fieldCls",
                "type": "string",
                "doc": "<p>The default CSS class for the field input</p>",
                "default": "'x-form-field'"
            },
            {
                "name": "fieldStyle",
                "type": "string",
                "doc": "<p>Optional CSS style(s) to be applied to the field input element. Should be a valid argument to\nExt.dom.Element.applyStyles. Defaults to undefined. See also the setFieldStyle method for changing\nthe style after initialization.</p>",
                "default": null
            },
            {
                "name": "fieldSubTpl",
                "type": "ext.xtemplate",
                "doc": "<p>The content of the field body is defined by this config option.</p>",
                "default": "['<input id=\"{id}\" data-ref=\"inputEl\" type=\"{type}\" role=\"{role}\" {inputAttrTpl}', ' size=\"1\"', '<tpl if=\"name\"> name=\"{name}\"</tpl>', '<tpl if=\"value\"> value=\"{[Ext.util.Format.htmlEncode(values.value)]}\"</tpl>', '<tpl if=\"placeholder\"> placeholder=\"{placeholder}\"</tpl>', '{%if (values.maxLength !== undefined){%} maxlength=\"{maxLength}\"{%}%}', '<tpl if=\"readOnly\"> readonly=\"readonly\"</tpl>', '<tpl if=\"disabled\"> disabled=\"disabled\"</tpl>', '<tpl if=\"tabIdx != null\"> tabindex=\"{tabIdx}\"</tpl>', '<tpl if=\"fieldStyle\"> style=\"{fieldStyle}\"</tpl>', ' class=\"{fieldCls} {typeCls} {typeCls}-{ui} {editableCls} {inputCls}\" autocomplete=\"off\"/>', {disableFormats: true}]"
            },
            {
                "name": "focusCls",
                "type": "string",
                "doc": "<p>The CSS class to use when the field receives focus</p>",
                "default": "'x-form-focus'"
            },
            {
                "name": "inputAttrTpl",
                "type": "string/array/ext.xtemplate",
                "doc": "<p>An optional string or <code>XTemplate</code> configuration to insert in the field markup\ninside the input element (as attributes). If an <code>XTemplate</code> is used, the component's\nsubTpl data serves as the context.</p>",
                "default": null
            },
            {
                "name": "inputId",
                "type": "string",
                "doc": "<p>The id that will be given to the generated input DOM element. Defaults to an automatically generated id. If you\nconfigure this manually, you must make sure it is unique in the document.</p>",
                "default": null
            },
            {
                "name": "inputType",
                "type": "string",
                "doc": "<p>The type attribute for input fields -- e.g. radio, text, password, file. The extended types\nsupported by HTML5 inputs (url, email, etc.) may also be used, though using them will cause older browsers to\nfall back to 'text'.</p>",
                "default": "'text'"
            },
            {
                "name": "invalidText",
                "type": "string",
                "doc": "<p>The error text to use when marking a field invalid and no message is provided</p>",
                "default": "'The value in this field is invalid'"
            },
            {
                "name": "isTextInput",
                "type": "boolean",
                "doc": "<p><code>true</code> if this field renders as a text input.</p>",
                "default": "true"
            },
            {
                "name": "liquidLayout",
                "type": "boolean",
                "doc": "<p>Components that achieve their internal layout results using solely CSS with no JS\nintervention must set this to true.  This allows the component to opt out of the\nlayout run when used inside certain container layouts such as Form and Auto\nresulting in a performance gain. The following components currently use liquid\nlayout (<code>liquidLayout: true</code>):</p>",
                "default": "true"
            },
            {
                "name": "name",
                "type": "string",
                "doc": "<p>The name of the field. This is used as the parameter name when including the field value\nin a form submit(). If no name is configured, it falls back to the inputId.\nTo prevent the field from being included in the form submit, set submitValue to false.</p>",
                "default": null
            },
            {
                "name": "readOnly",
                "type": "boolean",
                "doc": "<p>true to mark the field as readOnly in HTML.</p>",
                "default": "false"
            },
            {
                "name": "readOnlyCls",
                "type": "string",
                "doc": "<p>The CSS class applied to the component's main element when it is readOnly.</p>",
                "default": "Ext.baseCSSPrefix + 'form-readonly'"
            },
            {
                "name": "shrinkWrap",
                "type": "boolean/number",
                "doc": "<p>If this property is a number, it is interpreted as follows:</p>",
                "default": "true"
            },
            {
                "name": "tabIndex",
                "type": "number",
                "doc": "<p>The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via\napplyTo</p>",
                "default": null
            },
            {
                "name": "validateOnBlur",
                "type": "boolean",
                "doc": "<p>Whether the field should validate when it loses focus. This will cause fields to be validated\nas the user steps through the fields in the form regardless of whether they are making changes to those fields\nalong the way. See also validateOnChange.</p>",
                "default": "true"
            }
        ],
        "events": [
            {
                "name": "specialkey",
                "params": "this(Ext.form.field.Base) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed. To handle other keys\nsee Ext.util.KeyMap. You can check Ext.event.Event.getKey to determine which key was\npressed. For example:</p>"
            },
            {
                "name": "writeablechange",
                "params": "this(Ext.form.field.Base) Read(Boolean) eOpts(Object)",
                "doc": "<p>Fires when this field changes its read-only status.</p>"
            }
        ]
    },
    "Ext.form.field.Checkbox": {
        "type": "Ext.form.field.Checkbox",
        "doc": "<p>Single checkbox field. Can be used as a direct replacement for traditional checkbox fields. Also serves as a\nparent class for radio buttons.</p>",
        "configs": [
            {
                "name": "afterBoxLabelTextTpl",
                "type": "string/array/ext.xtemplate",
                "doc": "<p>An optional string or <code>XTemplate</code> configuration to insert in the field markup\nafter the box label text. If an <code>XTemplate</code> is used, the component's\nsubTpl data serves as the context.</p>",
                "default": null
            },
            {
                "name": "afterBoxLabelTpl",
                "type": "string/array/ext.xtemplate",
                "doc": "<p>An optional string or <code>XTemplate</code> configuration to insert in the field markup\nafter the box label element. If an <code>XTemplate</code> is used, the component's\nsubTpl data serves as the context.</p>",
                "default": null
            },
            {
                "name": "beforeBoxLabelTextTpl",
                "type": "string/array/ext.xtemplate",
                "doc": "<p>An optional string or <code>XTemplate</code> configuration to insert in the field markup\nbefore the box label text. If an <code>XTemplate</code> is used, the component's\nsubTpl data serves as the context.</p>",
                "default": null
            },
            {
                "name": "beforeBoxLabelTpl",
                "type": "string/array/ext.xtemplate",
                "doc": "<p>An optional string or <code>XTemplate</code> configuration to insert in the field markup\nbefore the box label element. If an <code>XTemplate</code> is used, the component's\nsubTpl data serves as the context.</p>",
                "default": null
            },
            {
                "name": "boxLabel",
                "type": "string",
                "doc": "<p>An optional text label that will appear next to the checkbox. Whether it appears before or after the checkbox is\ndetermined by the boxLabelAlign config.</p>",
                "default": null
            },
            {
                "name": "boxLabelAlign",
                "type": "string",
                "doc": "<p>The position relative to the checkbox where the boxLabel should appear. Recognized values are 'before'\nand 'after'.</p>",
                "default": "'after'"
            },
            {
                "name": "boxLabelAttrTpl",
                "type": "string/array/ext.xtemplate",
                "doc": "<p>An optional string or <code>XTemplate</code> configuration to insert in the field markup\ninside the box label element (as attributes). If an <code>XTemplate</code> is used, the component's\nsubTpl data serves as the context.</p>",
                "default": null
            },
            {
                "name": "boxLabelCls",
                "type": "string",
                "doc": "<p>The CSS class to be applied to the boxLabel element</p>",
                "default": "'x-form-cb-label'"
            },
            {
                "name": "checkChangeEvents",
                "type": "string[]",
                "doc": "<p>private overrides</p>",
                "default": "[]"
            },
            {
                "name": "checked",
                "type": "boolean",
                "doc": "<p>true if the checkbox should render initially checked</p>",
                "default": "false"
            },
            {
                "name": "checkedCls",
                "type": "string",
                "doc": "<p>The CSS class(es) added to the component's main element when it is in the checked state.\nYou can add your own class (checkedCls='myClass x-form-cb-checked') or replace the default\nclass altogether (checkedCls='myClass').</p>",
                "default": "'x-form-cb-checked'"
            },
            {
                "name": "fieldBodyCls",
                "type": "string",
                "doc": "<p>private</p>",
                "default": "Ext.baseCSSPrefix + 'form-cb-wrap'"
            },
            {
                "name": "fieldCls",
                "type": "string",
                "doc": "<p>The default CSS class for the checkbox</p>",
                "default": "'x-form-field'"
            },
            {
                "name": "fieldSubTpl",
                "type": "ext.xtemplate",
                "doc": "<p>note: {id} here is really {inputId}, but {cmpId} is available</p>",
                "default": "['<div class=\"{wrapInnerCls} {noBoxLabelCls}\" role=\"presentation\">', '<tpl if=\"labelAlignedBefore\">', '{beforeBoxLabelTpl}', '<label id=\"{cmpId}-boxLabelEl\" data-ref=\"boxLabelEl\" {boxLabelAttrTpl} class=\"{boxLabelCls} ', '{boxLabelCls}-{ui} {boxLabelCls}-{boxLabelAlign} {childElCls}\" for=\"{id}\">', '{beforeBoxLabelTextTpl}', '{boxLabel}', '{afterBoxLabelTextTpl}', '</label>', '{afterBoxLabelTpl}', '</tpl>', '<input type=\"button\" id=\"{id}\" data-ref=\"inputEl\" role=\"{role}\" {inputAttrTpl}', '<tpl if=\"tabIdx != null\"> tabindex=\"{tabIdx}\"</tpl>', '<tpl if=\"disabled\"> disabled=\"disabled\"</tpl>', '<tpl if=\"fieldStyle\"> style=\"{fieldStyle}\"</tpl>', ' class=\"{fieldCls} {typeCls} {typeCls}-{ui} {inputCls} {inputCls}-{ui} {childElCls} {afterLabelCls}\" autocomplete=\"off\" hidefocus=\"true\" />', '<tpl if=\"boxLabel && !labelAlignedBefore\">', '{beforeBoxLabelTpl}', '<label id=\"{cmpId}-boxLabelEl\" data-ref=\"boxLabelEl\" {boxLabelAttrTpl} class=\"{boxLabelCls} ', '{boxLabelCls}-{ui} {boxLabelCls}-{boxLabelAlign} {childElCls}\" for=\"{id}\">', '{beforeBoxLabelTextTpl}', '{boxLabel}', '{afterBoxLabelTextTpl}', '</label>', '{afterBoxLabelTpl}', '</tpl>', '</div>', {disableFormats: true, compiled: true}]"
            },
            {
                "name": "focusCls",
                "type": "string",
                "doc": "<p>The CSS class to use when the checkbox receives focus</p>",
                "default": "'x-form-checkbox-focus'"
            },
            {
                "name": "handler",
                "type": "function",
                "doc": "<p>A function called when the checked value changes (can be used instead of handling the change event).</p>",
                "default": null
            },
            {
                "name": "inputType",
                "type": "string",
                "doc": "<p>The type attribute for input fields -- e.g. radio, text, password, file. The extended types\nsupported by HTML5 inputs (url, email, etc.) may also be used, though using them will cause older browsers to\nfall back to 'text'.</p>",
                "default": "'checkbox'"
            },
            {
                "name": "inputValue",
                "type": "string",
                "doc": "<p>The value that should go into the generated input element's value attribute and should be used as the parameter\nvalue when submitting as part of a form.</p>",
                "default": "'on'"
            },
            {
                "name": "isTextInput",
                "type": "boolean",
                "doc": "<p><code>true</code> if this field renders as a text input.</p>",
                "default": "false"
            },
            {
                "name": "publishes",
                "type": "string/string[]/object",
                "doc": "<p>One or more names of config properties that this component should publish to\nits <code>ViewModel</code>. Some components override this and publish their most useful\nconfigs by default.</p>",
                "default": "{checked: 1}"
            },
            {
                "name": "scope",
                "type": "object",
                "doc": "<p>An object to use as the scope ('this' reference) of the handler function.</p>",
                "default": null
            },
            {
                "name": "uncheckedValue",
                "type": "string",
                "doc": "<p>If configured, this will be submitted as the checkbox's value during form submit if the checkbox is unchecked. By\ndefault this is undefined, which results in nothing being submitted for the checkbox field when the form is\nsubmitted (the default behavior of HTML checkboxes).</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.form.field.ComboBox": {
        "type": "Ext.form.field.ComboBox",
        "doc": "<p>A combobox control with support for autocomplete, remote loading, and many other features.</p>",
        "configs": [
            {
                "name": "allQuery",
                "type": "string",
                "doc": "<p>The text query to send to the server to return all records for the list with no filtering</p>",
                "default": "''"
            },
            {
                "name": "anyMatch",
                "type": "boolean",
                "doc": "<p>Configure as <code>true</code> to allow matching of the typed characters at any position in the valueField's value.</p>",
                "default": "false"
            },
            {
                "name": "autoLoadOnValue",
                "type": "boolean",
                "doc": "<p>This option controls whether to <em>initially</em> load the store when a value is set so that\nthe display value can be determined from the appropriate record.\nThe store will only be loaded in a limited set of circumstances:\n- The store is not currently loading.\n- The store does not have a pending Ext.data.Store.autoLoad.\n- The store has not been loaded before.</p>",
                "default": "false"
            },
            {
                "name": "autoSelect",
                "type": "boolean",
                "doc": "<p><code>true</code> to automatically highlight the first result gathered by the data store in the dropdown list when it is\nopened. A false value would cause nothing in the list to be highlighted automatically, so\nthe user would have to manually highlight an item before pressing the enter or tab key to\nselect it (unless the value of (typeAhead) were true), or use the mouse to select a value.</p>",
                "default": "true"
            },
            {
                "name": "caseSensitive",
                "type": "boolean",
                "doc": "<p>Configure as <code>true</code> to make the filtering match with exact case matching</p>",
                "default": "false"
            },
            {
                "name": "clearFilterOnBlur",
                "type": "boolean",
                "doc": "<p><em>When queryMode is <code>'local'</code> only</em></p>",
                "default": "true"
            },
            {
                "name": "collapseOnSelect",
                "type": "boolean",
                "doc": "<p>Has no effect if multiSelect is <code>false</code></p>",
                "default": "false"
            },
            {
                "name": "defaultListConfig",
                "type": "object",
                "doc": "<p>Set of options that will be used as defaults for the user-configured listConfig object.</p>",
                "default": "{loadingHeight: 70, minWidth: 70, maxHeight: 300, shadow: 'sides'}"
            },
            {
                "name": "delimiter",
                "type": "string",
                "doc": "<p>The character(s) used to separate the display values of multiple selected items when\n<code>multiSelect = true</code>.</p>",
                "default": "', '"
            },
            {
                "name": "displayField",
                "type": "string",
                "doc": "<p>The underlying data field name to bind to this ComboBox.</p>",
                "default": "'text'"
            },
            {
                "name": "displayTpl",
                "type": "string/string[]/ext.xtemplate",
                "doc": "<p>The template to be used to display selected records inside the text field. An array of the selected records' data\nwill be passed to the template. Defaults to:</p>",
                "default": null
            },
            {
                "name": "enableRegEx",
                "type": "boolean",
                "doc": "<p><em>When queryMode is <code>'local'</code> only</em></p>",
                "default": null
            },
            {
                "name": "filters",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "forceSelection",
                "type": "boolean",
                "doc": "<p><code>true</code> to restrict the selected value to one of the values in the list, <code>false</code> to allow the user to set\narbitrary text into the field.</p>",
                "default": "false"
            },
            {
                "name": "growToLongestValue",
                "type": "boolean",
                "doc": "<p><code>false</code> to not allow the component to resize itself when its data changes\n(and its grow property is <code>true</code>)</p>",
                "default": "true"
            },
            {
                "name": "hiddenDataCls",
                "type": "string",
                "doc": "<p>CSS class used to find the hiddenDataEl</p>",
                "default": "Ext.baseCSSPrefix + 'hidden-display ' + Ext.baseCSSPrefix + 'form-data-hidden'"
            },
            {
                "name": "hiddenName",
                "type": "string",
                "doc": "<p>The name of an underlying hidden field which will be synchronized with the underlying value of the combo.\nThis option is useful if the combo is part of a form element doing a regular form post. The hidden field\nwill not be created unless a hiddenName is specified.</p>",
                "default": "\"\""
            },
            {
                "name": "listConfig",
                "type": "object",
                "doc": "<p>An optional set of configuration properties that will be passed to the Ext.view.BoundList's constructor.\nAny configuration that is valid for BoundList can be included. Some of the more useful ones are:</p>",
                "default": null
            },
            {
                "name": "minChars",
                "type": "number",
                "doc": "<p>The minimum number of characters the user must type before autocomplete and typeAhead activate.</p>",
                "default": null
            },
            {
                "name": "multiSelect",
                "type": "boolean",
                "doc": "<p>If set to <code>true</code>, allows the combo field to hold more than one value at a time, and allows selecting multiple\nitems from the dropdown list. The combo's text field will show all selected values separated by the\ndelimiter.</p>",
                "default": "false"
            },
            {
                "name": "pageSize",
                "type": "number",
                "doc": "<p>If greater than <code>0</code>, a Ext.toolbar.Paging is displayed in the footer of the dropdown list and the\nfilter queries will execute with page start and limit\nparameters. Only applies when <code>queryMode = 'remote'</code>.</p>",
                "default": "0"
            },
            {
                "name": "pinList",
                "type": "boolean",
                "doc": "<p>Has no effect if multiSelect is <code>false</code></p>",
                "default": "true"
            },
            {
                "name": "publishes",
                "type": "string/string[]/object",
                "doc": "<p>One or more names of config properties that this component should publish to\nits <code>ViewModel</code>. Some components override this and publish their most useful\nconfigs by default.</p>",
                "default": "['selection']"
            },
            {
                "name": "queryCaching",
                "type": "boolean",
                "doc": "<p>When true, this prevents the combo from re-querying (either locally or remotely) when the current query\nis the same as the previous query.</p>",
                "default": "true"
            },
            {
                "name": "queryDelay",
                "type": "number",
                "doc": "<p>The length of time in milliseconds to delay between the start of typing and sending the query to filter the\ndropdown list.</p>",
                "default": null
            },
            {
                "name": "queryMode",
                "type": "string",
                "doc": "<p>The mode in which the ComboBox uses the configured Store. Acceptable values are:</p>",
                "default": "'remote'"
            },
            {
                "name": "queryParam",
                "type": "string",
                "doc": "<p>Name of the parameter used by the Store to pass the typed string when the ComboBox is configured with\n<code>queryMode: 'remote'</code>. If explicitly set to a falsy value it will not be sent.</p>",
                "default": "'query'"
            },
            {
                "name": "selectOnTab",
                "type": "boolean",
                "doc": "<p>Whether the Tab key should select the currently highlighted item.</p>",
                "default": "true"
            },
            {
                "name": "selection",
                "type": "ext.data.model",
                "doc": "<p>The selected model. Typically used with binding.</p>",
                "default": null
            },
            {
                "name": "store",
                "type": "ext.data.store/string/array",
                "doc": "<p>The data source to which this combo is bound. Acceptable values for this property are:</p>",
                "default": null
            },
            {
                "name": "transform",
                "type": "string/htmlelement/ext.dom.element",
                "doc": "<p>The id, DOM node or Ext.dom.Element of an existing HTML <code>&lt;select&gt;</code> element to convert into a ComboBox. The\ntarget select's options will be used to build the options in the ComboBox dropdown; a configured store\nwill take precedence over this.</p>",
                "default": null
            },
            {
                "name": "transformInPlace",
                "type": "boolean",
                "doc": "<p><code>true</code> to automatically render this combo box in place of the select element that is being\ntransformed. If <code>false</code>, this combo will be rendered using the normal rendering,\neither as part of a layout, or using renderTo or render.</p>",
                "default": "true"
            },
            {
                "name": "triggerAction",
                "type": "string",
                "doc": "<p>The action to execute when the trigger is clicked.</p>",
                "default": "'all'"
            },
            {
                "name": "triggerCls",
                "type": "string",
                "doc": "<p>An additional CSS class used to style the trigger button. The trigger will always get the Ext.form.trigger.Trigger.baseCls\nby default and <code>triggerCls</code> will be <strong>appended</strong> if specified.</p>",
                "default": "'x-form-arrow-trigger'"
            },
            {
                "name": "twoWayBindable",
                "type": "string/string[]/object",
                "doc": "<p>This object holds a map of <code>config</code> properties that will update their binding\nas they are modified. For example, <code>value</code> is a key added by form fields. The\nform of this config is the same as <code>publishes</code>.</p>",
                "default": "['selection']"
            },
            {
                "name": "typeAhead",
                "type": "boolean",
                "doc": "<p><code>true</code> to populate and autoselect the remainder of the text being typed after a configurable delay\n(typeAheadDelay) if it matches a known value.</p>",
                "default": "false"
            },
            {
                "name": "typeAheadDelay",
                "type": "number",
                "doc": "<p>The length of time in milliseconds to wait until the typeahead text is displayed if <code>typeAhead = true</code></p>",
                "default": "250"
            },
            {
                "name": "valueField",
                "type": "string",
                "doc": "<p>The underlying data value name to bind to this ComboBox.</p>",
                "default": null
            },
            {
                "name": "valueNotFoundText",
                "type": "string",
                "doc": "<p>When using a name/value combo, if the value passed to setValue is not found in the store, valueNotFoundText will\nbe displayed as the field text if defined. If this default text is used, it means there\nis no value set and no validation will occur on this field.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "beforedeselect",
                "params": "combo(Ext.form.field.ComboBox) record(Ext.data.Record) index(Number) eOpts(Object)",
                "doc": "<p>Fires before the deselected item is removed from the collection</p>"
            },
            {
                "name": "beforequery",
                "params": "queryPlan(Object) eOpts(Object)",
                "doc": "<p>Fires before all queries are processed. Return false to cancel the query or set the queryPlan's cancel\nproperty to true.</p>"
            },
            {
                "name": "beforeselect",
                "params": "combo(Ext.form.field.ComboBox) record(Ext.data.Record) index(Number) eOpts(Object)",
                "doc": "<p>Fires before the selected item is added to the collection</p>"
            },
            {
                "name": "select",
                "params": "combo(Ext.form.field.ComboBox) record(Ext.data.Model/Ext.data.Model[]) eOpts(Object)",
                "doc": "<p>Fires when at least one list item is selected.</p>"
            }
        ]
    },
    "Ext.form.field.Date": {
        "type": "Ext.form.field.Date",
        "doc": "<p>Provides a date input field with a date picker dropdown and automatic date\nvalidation.</p>",
        "configs": [
            {
                "name": "altFormats",
                "type": "string",
                "doc": "<p>Multiple date formats separated by \"|\" to try when parsing a user input value and it does not match the defined\nformat.</p>",
                "default": "\"m/d/Y|n/j/Y|n/j/y|m/j/y|n/d/y|m/j/Y|n/d/Y|m-d-y|m-d-Y|m/d|m-d|md|mdy|mdY|d|Y-m-d|n-j|n/j\""
            },
            {
                "name": "disabledDates",
                "type": "string[]",
                "doc": "<p>An array of \"dates\" to disable, as strings. These strings will be used to build a dynamic regular expression so\nthey are very powerful. Some examples:</p>",
                "default": null
            },
            {
                "name": "disabledDatesText",
                "type": "string",
                "doc": "<p>The tooltip text to display when the date falls on a disabled date.</p>",
                "default": "\"Disabled\""
            },
            {
                "name": "disabledDays",
                "type": "number[]",
                "doc": "<p>An array of days to disable, 0 based. Some examples:</p>",
                "default": null
            },
            {
                "name": "disabledDaysText",
                "type": "string",
                "doc": "<p>The tooltip to display when the date falls on a disabled day.</p>",
                "default": "\"Disabled\""
            },
            {
                "name": "format",
                "type": "string",
                "doc": "<p>The default date format string which can be overriden for localization support. The format must be valid\naccording to Ext.Date.parse.</p>",
                "default": "\"m/d/Y\""
            },
            {
                "name": "grow",
                "type": "boolean",
                "doc": "\n",
                "default": null
            },
            {
                "name": "growMax",
                "type": "number",
                "doc": "\n",
                "default": null
            },
            {
                "name": "growMin",
                "type": "number",
                "doc": "\n",
                "default": null
            },
            {
                "name": "invalidText",
                "type": "string",
                "doc": "<p>The error text to display when the date in the field is invalid.</p>",
                "default": "\"{0} is not a valid date - it must be in the format {1}\""
            },
            {
                "name": "matchFieldWidth",
                "type": "boolean",
                "doc": "<p>Whether the picker dropdown's width should be explicitly set to match the width of the field. Defaults to true.</p>",
                "default": "false"
            },
            {
                "name": "maxText",
                "type": "string",
                "doc": "<p>The error text to display when the date in the cell is after maxValue.</p>",
                "default": "\"The date in this field must be equal to or before {0}\""
            },
            {
                "name": "maxValue",
                "type": "date/string",
                "doc": "<p>The maximum allowed date. Can be either a Javascript date object or a string date in a valid format.</p>",
                "default": null
            },
            {
                "name": "minText",
                "type": "string",
                "doc": "<p>The error text to display when the date in the cell is before minValue.</p>",
                "default": "\"The date in this field must be equal to or after {0}\""
            },
            {
                "name": "minValue",
                "type": "date/string",
                "doc": "<p>The minimum allowed date. Can be either a Javascript date object or a string date in a valid format.</p>",
                "default": null
            },
            {
                "name": "showToday",
                "type": "boolean",
                "doc": "<p>false to hide the footer area of the Date picker containing the Today button and disable the keyboard handler for\nspacebar that selects the current date.</p>",
                "default": "true"
            },
            {
                "name": "startDay",
                "type": "number",
                "doc": "<p>Day index at which the week should begin, 0-based.</p>",
                "default": "undefined"
            },
            {
                "name": "submitFormat",
                "type": "string",
                "doc": "<p>The date format string which will be submitted to the server. The format must be valid according to\nExt.Date.parse.</p>",
                "default": null
            },
            {
                "name": "triggerCls",
                "type": "string",
                "doc": "<p>An additional CSS class used to style the trigger button. The trigger will always get the class 'x-form-trigger'\nand triggerCls will be <strong>appended</strong> if specified (default class displays a calendar icon).</p>",
                "default": "'x-form-date-trigger'"
            },
            {
                "name": "useStrict",
                "type": "boolean",
                "doc": "<p>True to enforce strict date parsing to prevent the default Javascript \"date rollover\".\nDefaults to the useStrict parameter set on Ext.Date\nSee Ext.Date.parse.</p>",
                "default": null
            },
            {
                "name": "valuePublishEvent",
                "type": "string[]/string",
                "doc": "<p>The event name(s) to use to publish the value bind for this field.</p>",
                "default": "['select', 'blur']"
            }
        ],
        "events": []
    },
    "Ext.form.field.Display": {
        "type": "Ext.form.field.Display",
        "doc": "<p>A display-only text field which is not validated and not submitted. This is useful for when you want to display a\nvalue from a form's loaded data but do not want to allow the user to edit or submit that\nvalue. The value can be optionally HTML encoded if it contains HTML markup that you do not want\nto be rendered.</p>",
        "configs": [
            {
                "name": "checkChangeBuffer",
                "type": "number",
                "doc": "\n",
                "default": null
            },
            {
                "name": "checkChangeEvents",
                "type": "number",
                "doc": "\n",
                "default": null
            },
            {
                "name": "disabled",
                "type": "boolean",
                "doc": "\n",
                "default": null
            },
            {
                "name": "fieldBodyCls",
                "type": "string",
                "doc": "<p>An extra CSS class to be applied to the body content element in addition to baseBodyCls.</p>",
                "default": "Ext.baseCSSPrefix + 'form-display-field-body'"
            },
            {
                "name": "fieldCls",
                "type": "string",
                "doc": "<p>The default CSS class for the field.</p>",
                "default": "\"x-form-display-field\""
            },
            {
                "name": "fieldSubTpl",
                "type": "ext.xtemplate",
                "doc": "<p>The content of the field body is defined by this config option.</p>",
                "default": "['<div id=\"{id}\" role=\"{role}\" {inputAttrTpl}', '<tpl if=\"fieldStyle\"> style=\"{fieldStyle}\"</tpl>', ' class=\"{fieldCls} {fieldCls}-{ui}\">{value}</div>', {compiled: true, disableFormats: true}]"
            },
            {
                "name": "htmlEncode",
                "type": "boolean",
                "doc": "<p>True to escape HTML in text when rendering it.</p>",
                "default": "false"
            },
            {
                "name": "inputType",
                "type": "string",
                "doc": "\n",
                "default": null
            },
            {
                "name": "readOnly",
                "type": "boolean",
                "doc": "\n",
                "default": "true"
            },
            {
                "name": "renderer",
                "type": "function",
                "doc": "<p>A function to transform the raw value for display in the field. The function will receive 2 arguments, the raw value\nand the Ext.form.field.Display object.</p>",
                "default": null
            },
            {
                "name": "scope",
                "type": "object",
                "doc": "<p>The scope to execute the renderer function. Defaults to this.</p>",
                "default": null
            },
            {
                "name": "submitValue",
                "type": "boolean",
                "doc": "<p>Setting this to false will prevent the field from being submitted even when it is\nnot disabled.</p>",
                "default": "false"
            },
            {
                "name": "validateOnChange",
                "type": "boolean",
                "doc": "\n",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.form.field.Field": {
        "type": "Ext.form.field.Field",
        "doc": "<p>This mixin provides a common interface for the logical behavior and state of form fields, including:</p>",
        "configs": [
            {
                "name": "disabled",
                "type": "boolean",
                "doc": "<p>True to disable the field. Disabled Fields will not be submitted.</p>",
                "default": "false"
            },
            {
                "name": "name",
                "type": "string",
                "doc": "<p>The name of the field. By default this is used as the parameter name when including the\nfield value in a form submit(). To prevent the field from\nbeing included in the form submit, set submitValue to false.</p>",
                "default": null
            },
            {
                "name": "submitValue",
                "type": "boolean",
                "doc": "<p>Setting this to false will prevent the field from being submitted even when it is\nnot disabled.</p>",
                "default": "true"
            },
            {
                "name": "validateOnChange",
                "type": "boolean",
                "doc": "<p>Specifies whether this field should be validated immediately whenever a change in its value is detected.\nIf the validation results in a change in the field's validity, a validitychange event will be\nfired. This allows the field to show feedback about the validity of its contents immediately as the user is\ntyping.</p>",
                "default": "true"
            },
            {
                "name": "validation",
                "type": "boolean/string",
                "doc": "<p>This property, when a <code>String</code>, contributes its value to the error state of this\ninstance as reported by <code>getErrors</code>.</p>",
                "default": null
            },
            {
                "name": "validationField",
                "type": "ext.data.field",
                "doc": "<p>When binding is used with a model, this maps to the underlying Ext.data.field.Field if\nit is available. This can be used to validate the value against the model field without needing\nto push the value back into the model.</p>",
                "default": null
            },
            {
                "name": "value",
                "type": "object",
                "doc": "<p>A value to initialize this field with.</p>",
                "default": null
            },
            {
                "name": "valuePublishEvent",
                "type": "string[]/string",
                "doc": "<p>The event name(s) to use to publish the value bind for this field.</p>",
                "default": "'change'"
            }
        ],
        "events": [
            {
                "name": "change",
                "params": "this(Ext.form.field.Field) newValue(Object) oldValue(Object) eOpts(Object)",
                "doc": "<p>Fires when the value of a field is changed via the setValue method.</p>"
            },
            {
                "name": "dirtychange",
                "params": "this(Ext.form.field.Field) isDirty(Boolean) eOpts(Object)",
                "doc": "<p>Fires when a change in the field's isDirty state is detected.</p>"
            },
            {
                "name": "validitychange",
                "params": "this(Ext.form.field.Field) isValid(Boolean) eOpts(Object)",
                "doc": "<p>Fires when a change in the field's validity is detected.</p>"
            }
        ]
    },
    "Ext.form.field.File": {
        "type": "Ext.form.field.File",
        "doc": "<p>A file upload field which has custom styling and allows control over the button text and other\nfeatures of text fields like empty text.\nIt uses a hidden file input element behind the scenes to allow user selection of a file and to\nperform the actual upload during form submit.</p>",
        "configs": [
            {
                "name": "buttonConfig",
                "type": "object",
                "doc": "<p>Specify optional custom button Ext.button.Button config (eg. iconCls, text) for the upload button</p>",
                "default": null
            },
            {
                "name": "buttonMargin",
                "type": "number",
                "doc": "<p>The number of pixels of space reserved between the button and the text field. Note that this only\napplies if buttonOnly = false.</p>",
                "default": "3"
            },
            {
                "name": "buttonOnly",
                "type": "boolean",
                "doc": "<p>True to display the file upload field as a button with no visible text field. If true, all\ninherited Text members will still be available.</p>",
                "default": "false"
            },
            {
                "name": "buttonText",
                "type": "string",
                "doc": "<p>The button text to display on the upload button. Note that if you supply a value for\nbuttonConfig, the buttonConfig.text value will be used instead if available.</p>",
                "default": "'Browse...'"
            },
            {
                "name": "clearOnSubmit",
                "type": "boolean",
                "doc": "<p>True to clear the selected file value when the form this field belongs to\nis submitted to the server.</p>",
                "default": "true"
            },
            {
                "name": "editable",
                "type": "boolean",
                "doc": "<p>false to prevent the user from typing text directly into the field; the field can\nonly have its value set programmatically or via an action invoked by a trigger.</p>",
                "default": "false"
            },
            {
                "name": "readOnly",
                "type": "boolean",
                "doc": "<p>Unlike with other form fields, the readOnly config defaults to true in File field.</p>",
                "default": "true"
            },
            {
                "name": "submitValue",
                "type": "boolean",
                "doc": "<p>Setting this to false will prevent the field from being submitted even when it is\nnot disabled.</p>",
                "default": "false"
            },
            {
                "name": "triggers",
                "type": "object",
                "doc": "<p>Triggers to use in this field.  The keys in\nthis object are unique identifiers for the triggers. The values in this object\nare Trigger configuration objects.</p>",
                "default": "{filebutton: {type: 'component', hideOnReadOnly: false, preventMouseDown: false}}"
            }
        ],
        "events": [
            {
                "name": "change",
                "params": "this(Ext.ux.form.FileUploadField) value(String) eOpts(Object)",
                "doc": "<p>Fires when the underlying file input field's value has changed from the user selecting a new file from the system\nfile selection dialog.</p>"
            }
        ]
    },
    "Ext.form.field.FileButton": {
        "type": "Ext.form.field.FileButton",
        "configs": [
            {
                "name": "autoEl",
                "type": "string/object",
                "doc": "<p>A tag name or DomHelper spec used to create the Element which will\nencapsulate this Component.</p>",
                "default": "{tag: 'div', unselectable: 'on'}"
            },
            {
                "name": "childEls",
                "type": "object/string[]/object[]",
                "doc": "<p>The canonical form of <code>childEls</code> is an object keyed by child's property name\nwith values that are objects with the following properties.</p>",
                "default": "['fileInputEl']"
            },
            {
                "name": "cls",
                "type": "string",
                "doc": "<p>A CSS class string to apply to the button's main element.</p>",
                "default": "Ext.baseCSSPrefix + 'form-file-btn'"
            },
            {
                "name": "preventDefault",
                "type": "boolean",
                "doc": "<p><code>true</code> to prevent the default action when the clickEvent is processed.</p>",
                "default": "false"
            },
            {
                "name": "tabIndex",
                "type": "number",
                "doc": "<p>Button element <em>looks</em> focused but it should never really receive focus itself,\nand with it being a <div> we don't need to render tabindex attribute at all</div></p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.form.field.Hidden": {
        "type": "Ext.form.field.Hidden",
        "doc": "<p>A basic hidden field for storing hidden values in forms that need to be passed in the form submit.</p>",
        "configs": [
            {
                "name": "hidden",
                "type": "boolean",
                "doc": "<p><code>true</code> to hide the component.</p>",
                "default": "true"
            },
            {
                "name": "hideLabel",
                "type": "boolean",
                "doc": "<p>Set to true to completely hide the label element (fieldLabel and labelSeparator). Also see\nhideEmptyLabel, which controls whether space will be reserved for an empty fieldLabel.</p>",
                "default": "true"
            },
            {
                "name": "inputType",
                "type": "string",
                "doc": "<p>The type attribute for input fields -- e.g. radio, text, password, file. The extended types\nsupported by HTML5 inputs (url, email, etc.) may also be used, though using them will cause older browsers to\nfall back to 'text'.</p>",
                "default": "'hidden'"
            },
            {
                "name": "isTextInput",
                "type": "boolean",
                "doc": "<p><code>true</code> if this field renders as a text input.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.form.field.HtmlEditor": {
        "type": "Ext.form.field.HtmlEditor",
        "doc": "<p>Provides a lightweight HTML Editor component. Some toolbar features are not supported by Safari and will be\nautomatically hidden when needed. These are noted in the config options where appropriate.</p>",
        "configs": [
            {
                "name": "afterIFrameTpl",
                "type": "string/array/ext.xtemplate",
                "doc": "<p>An optional string or <code>XTemplate</code> configuration to insert in the field markup\nafter the iframe element. If an <code>XTemplate</code> is used, the component's\nsubTpl data serves as the context.</p>",
                "default": null
            },
            {
                "name": "afterTextAreaTpl",
                "type": "string/array/ext.xtemplate",
                "doc": "<p>An optional string or <code>XTemplate</code> configuration to insert in the field markup\nafter the textarea element. If an <code>XTemplate</code> is used, the component's\nsubTpl data serves as the context.</p>",
                "default": null
            },
            {
                "name": "allowDomMove",
                "type": "boolean",
                "doc": "\n",
                "default": null
            },
            {
                "name": "autoCreate",
                "type": "string",
                "doc": "\n",
                "default": null
            },
            {
                "name": "beforeIFrameTpl",
                "type": "string/array/ext.xtemplate",
                "doc": "<p>An optional string or <code>XTemplate</code> configuration to insert in the field markup\nbefore the iframe element. If an <code>XTemplate</code> is used, the component's\nsubTpl data serves as the context.</p>",
                "default": null
            },
            {
                "name": "beforeTextAreaTpl",
                "type": "string/array/ext.xtemplate",
                "doc": "<p>An optional string or <code>XTemplate</code> configuration to insert in the field markup\nbefore the textarea element. If an <code>XTemplate</code> is used, the component's\nsubTpl data serves as the context.</p>",
                "default": null
            },
            {
                "name": "componentLayout",
                "type": "string/object",
                "doc": "<p>The sizing and positioning of a Component's internal Elements is the responsibility of the Component's layout\nmanager which sizes a Component's internal structure in response to the Component being sized.</p>",
                "default": "'htmleditor'"
            },
            {
                "name": "createLinkText",
                "type": "string",
                "doc": "<p>The default text for the create link prompt</p>",
                "default": "'Please enter the URL for the link:'"
            },
            {
                "name": "defaultButtonUI",
                "type": "string",
                "doc": "<p>A default ui to use for the HtmlEditor's toolbar\nButtons</p>",
                "default": "'default-toolbar'"
            },
            {
                "name": "defaultLinkValue",
                "type": "string",
                "doc": "<p>The default value for the create link prompt</p>",
                "default": "'http://'"
            },
            {
                "name": "defaultValue",
                "type": "string",
                "doc": "<p>A default value to be put into the editor to resolve focus issues.</p>",
                "default": null
            },
            {
                "name": "enableAlignments",
                "type": "boolean",
                "doc": "<p>Enable the left, center, right alignment buttons</p>",
                "default": "true"
            },
            {
                "name": "enableColors",
                "type": "boolean",
                "doc": "<p>Enable the fore/highlight color buttons</p>",
                "default": "true"
            },
            {
                "name": "enableFont",
                "type": "boolean",
                "doc": "<p>Enable font selection. Not available in Safari 2.</p>",
                "default": "true"
            },
            {
                "name": "enableFontSize",
                "type": "boolean",
                "doc": "<p>Enable the increase/decrease font size buttons</p>",
                "default": "true"
            },
            {
                "name": "enableFormat",
                "type": "boolean",
                "doc": "<p>Enable the bold, italic and underline buttons</p>",
                "default": "true"
            },
            {
                "name": "enableLinks",
                "type": "boolean",
                "doc": "<p>Enable the create link button. Not available in Safari 2.</p>",
                "default": "true"
            },
            {
                "name": "enableLists",
                "type": "boolean",
                "doc": "<p>Enable the bullet and numbered list buttons. Not available in Safari 2.</p>",
                "default": "true"
            },
            {
                "name": "enableSourceEdit",
                "type": "boolean",
                "doc": "<p>Enable the switch to source edit button. Not available in Safari 2.</p>",
                "default": "true"
            },
            {
                "name": "fieldCls",
                "type": "string",
                "doc": "\n",
                "default": null
            },
            {
                "name": "focusCls",
                "type": "string",
                "doc": "\n",
                "default": null
            },
            {
                "name": "fontFamilies",
                "type": "string[]",
                "doc": "<p>An array of available font families</p>",
                "default": "['Arial', 'Courier New', 'Tahoma', 'Times New Roman', 'Verdana']"
            },
            {
                "name": "hideMode",
                "type": "string",
                "doc": "<p>A String which specifies how this Component's encapsulating DOM element will be hidden. Values may be:</p>",
                "default": "'offsets'"
            },
            {
                "name": "iframeAttrTpl",
                "type": "string/array/ext.xtemplate",
                "doc": "<p>An optional string or <code>XTemplate</code> configuration to insert in the field markup\ninside the iframe element (as attributes). If an <code>XTemplate</code> is used, the component's\nsubTpl data serves as the context.</p>",
                "default": null
            },
            {
                "name": "inputType",
                "type": "string",
                "doc": "\n",
                "default": null
            },
            {
                "name": "invalidCls",
                "type": "string",
                "doc": "\n",
                "default": null
            },
            {
                "name": "invalidText",
                "type": "string",
                "doc": "\n",
                "default": null
            },
            {
                "name": "readOnly",
                "type": "string",
                "doc": "\n",
                "default": null
            },
            {
                "name": "tabIndex",
                "type": "string",
                "doc": "\n",
                "default": null
            }
        ],
        "events": [
            {
                "name": "activate",
                "params": "this(Ext.form.field.HtmlEditor) eOpts(Object)",
                "doc": "<p>Fires when the editor is first receives the focus. Any insertion must wait until after this event.</p>"
            },
            {
                "name": "beforepush",
                "params": "this(Ext.form.field.HtmlEditor) html(String) eOpts(Object)",
                "doc": "<p>Fires before the iframe editor is updated with content from the textarea. Return false to cancel the\npush.</p>"
            },
            {
                "name": "beforesync",
                "params": "this(Ext.form.field.HtmlEditor) html(String) eOpts(Object)",
                "doc": "<p>Fires before the textarea is updated with content from the editor iframe. Return false to cancel the\nsync.</p>"
            },
            {
                "name": "blur",
                "params": "eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "editmodechange",
                "params": "this(Ext.form.field.HtmlEditor) sourceEdit(Boolean) eOpts(Object)",
                "doc": "<p>Fires when the editor switches edit modes</p>"
            },
            {
                "name": "focus",
                "params": "eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "initialize",
                "params": "this(Ext.form.field.HtmlEditor) eOpts(Object)",
                "doc": "<p>Fires when the editor is fully initialized (including the iframe)</p>"
            },
            {
                "name": "push",
                "params": "this(Ext.form.field.HtmlEditor) html(String) eOpts(Object)",
                "doc": "<p>Fires when the iframe editor is updated with content from the textarea.</p>"
            },
            {
                "name": "specialkey",
                "params": "eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "sync",
                "params": "this(Ext.form.field.HtmlEditor) html(String) eOpts(Object)",
                "doc": "<p>Fires when the textarea is updated with content from the editor iframe.</p>"
            }
        ]
    },
    "Ext.form.field.Number": {
        "type": "Ext.form.field.Number",
        "doc": "<p>A numeric text field that provides automatic keystroke filtering to disallow non-numeric characters,\nand numeric validation to limit the value to a range of valid numbers. The range of acceptable number\nvalues can be controlled by setting the minValue and maxValue configs, and fractional\ndecimals can be disallowed by setting allowDecimals to <code>false</code>.</p>",
        "configs": [
            {
                "name": "allowDecimals",
                "type": "boolean",
                "doc": "<p>False to disallow decimal values</p>",
                "default": "true"
            },
            {
                "name": "allowExponential",
                "type": "boolean",
                "doc": "<p>Set to <code>false</code> to disallow Exponential number notation</p>",
                "default": "true"
            },
            {
                "name": "autoStripChars",
                "type": "boolean",
                "doc": "<p>True to automatically strip not allowed characters from the field.</p>",
                "default": "false"
            },
            {
                "name": "baseChars",
                "type": "string",
                "doc": "<p>The base set of characters to evaluate as valid numbers.</p>",
                "default": "'0123456789'"
            },
            {
                "name": "decimalPrecision",
                "type": "number",
                "doc": "<p>The maximum precision to display after the decimal separator</p>",
                "default": "2"
            },
            {
                "name": "decimalSeparator",
                "type": "string",
                "doc": "<p>Character(s) to allow as the decimal separator. Defaults to decimalSeparator.</p>",
                "default": null
            },
            {
                "name": "maskRe",
                "type": "regexp",
                "doc": "\n",
                "default": null
            },
            {
                "name": "maxText",
                "type": "string",
                "doc": "<p>Error text to display if the maximum value validation fails.</p>",
                "default": "'The maximum value for this field is {0}'"
            },
            {
                "name": "maxValue",
                "type": "number",
                "doc": "<p>The maximum allowed value. Will be used by the field's validation logic, and for\nenabling/disabling the up spinner button.</p>",
                "default": null
            },
            {
                "name": "minText",
                "type": "string",
                "doc": "<p>Error text to display if the minimum value validation fails.</p>",
                "default": "'The minimum value for this field is {0}'"
            },
            {
                "name": "minValue",
                "type": "number",
                "doc": "<p>The minimum allowed value. Will be used by the field's validation logic,\nand for enabling/disabling the down spinner button.</p>",
                "default": null
            },
            {
                "name": "nanText",
                "type": "string",
                "doc": "<p>Error text to display if the value is not a valid number. For example, this can happen if a valid character like\n'.' or '-' is left in the field with no number.</p>",
                "default": "'{0} is not a valid number'"
            },
            {
                "name": "negativeText",
                "type": "string",
                "doc": "<p>Error text to display if the value is negative and minValue is set to 0. This is used instead of the\nminText in that circumstance only.</p>",
                "default": "'The value cannot be negative'"
            },
            {
                "name": "step",
                "type": "number",
                "doc": "<p>Specifies a numeric interval by which the field's value will be incremented or decremented when the user invokes\nthe spinner.</p>",
                "default": "1"
            },
            {
                "name": "stripCharsRe",
                "type": "regexp",
                "doc": "\n",
                "default": null
            },
            {
                "name": "submitLocaleSeparator",
                "type": "boolean",
                "doc": "<p>False to ensure that the getSubmitValue method strips\nalways uses <code>.</code> as the separator, regardless of the decimalSeparator\nconfiguration.</p>",
                "default": "true"
            }
        ],
        "events": []
    },
    "Ext.form.field.Picker": {
        "type": "Ext.form.field.Picker",
        "doc": "<p>An abstract class for fields that have a single trigger which opens a \"picker\" popup below the field, e.g. a combobox\nmenu list or a date picker. It provides a base implementation for toggling the picker's visibility when the trigger\nis clicked, as well as keyboard navigation and some basic events. Sizing and alignment of the picker can be\ncontrolled via the matchFieldWidth and pickerAlign/pickerOffset config properties\nrespectively.</p>",
        "configs": [
            {
                "name": "editable",
                "type": "boolean",
                "doc": "<p>False to prevent the user from typing text directly into the field; the field can only have its value set via\nselecting a value from the picker. In this state, the picker can also be opened by clicking directly on the input\nfield itself.</p>",
                "default": "true"
            },
            {
                "name": "matchFieldWidth",
                "type": "boolean",
                "doc": "<p>Whether the picker dropdown's width should be explicitly set to match the width of the field. Defaults to true.</p>",
                "default": "true"
            },
            {
                "name": "openCls",
                "type": "string",
                "doc": "<p>A class to be added to the field's bodyEl element when the picker is opened.</p>",
                "default": "'x-pickerfield-open'"
            },
            {
                "name": "pickerAlign",
                "type": "string",
                "doc": "<p>The alignment position with which to align the picker. Defaults to \"tl-bl?\"</p>",
                "default": "'tl-bl?'"
            },
            {
                "name": "pickerOffset",
                "type": "number[]",
                "doc": "<p>An offset [x,y] to use in addition to the pickerAlign when positioning the picker.\nDefaults to undefined.</p>",
                "default": null
            },
            {
                "name": "triggerCls",
                "type": "string",
                "doc": "<p>An additional CSS class used to style the trigger button. The trigger will always\nget the class 'x-form-trigger' and triggerCls will be appended if specified.</p>",
                "default": null
            },
            {
                "name": "triggers",
                "type": "object",
                "doc": "<p>Triggers to use in this field.  The keys in\nthis object are unique identifiers for the triggers. The values in this object\nare Trigger configuration objects.</p>",
                "default": "{picker: {handler: 'onTriggerClick', scope: 'this'}}"
            }
        ],
        "events": [
            {
                "name": "collapse",
                "params": "field(Ext.form.field.Picker) eOpts(Object)",
                "doc": "<p>Fires when the field's picker is collapsed.</p>"
            },
            {
                "name": "expand",
                "params": "field(Ext.form.field.Picker) eOpts(Object)",
                "doc": "<p>Fires when the field's picker is expanded.</p>"
            },
            {
                "name": "select",
                "params": "field(Ext.form.field.Picker) value(Object) eOpts(Object)",
                "doc": "<p>Fires when a value is selected via the picker.</p>"
            }
        ]
    },
    "Ext.form.field.Radio": {
        "type": "Ext.form.field.Radio",
        "doc": "<p>Single radio field. Similar to checkbox, but automatically handles making sure only one radio is checked\nat a time within a group of radios with the same name.</p>",
        "configs": [
            {
                "name": "inputType",
                "type": "string",
                "doc": "<p>private</p>",
                "default": "'radio'"
            },
            {
                "name": "tabIndex",
                "type": "number",
                "doc": "<p>Radios are naturally focusable but they need to participate in RadioGroups\nwhich are focusable containers; we set tabIndex to >= 0 here to make that work</p>",
                "default": "0"
            },
            {
                "name": "uncheckedValue",
                "type": "string",
                "doc": "\n",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.form.field.Spinner": {
        "type": "Ext.form.field.Spinner",
        "doc": "<p>A field with a pair of up/down spinner buttons. This class is not normally instantiated directly,\ninstead it is subclassed and the onSpinUp and onSpinDown methods are implemented\nto handle when the buttons are clicked. A good example of this is the Ext.form.field.Number\nfield which uses the spinner to increment and decrement the field's value by its\nstep config value.</p>",
        "configs": [
            {
                "name": "keyNavEnabled",
                "type": "boolean",
                "doc": "<p>Specifies whether the up and down arrow keys should trigger spinning up and down. Defaults to true.</p>",
                "default": "true"
            },
            {
                "name": "mouseWheelEnabled",
                "type": "boolean",
                "doc": "<p>Specifies whether the mouse wheel should trigger spinning up and down while the field has focus.\nDefaults to true.</p>",
                "default": "true"
            },
            {
                "name": "repeatTriggerClick",
                "type": "boolean",
                "doc": "<p>Whether a click repeater should be attached to the spinner buttons.\nDefaults to true.</p>",
                "default": "true"
            },
            {
                "name": "spinDownEnabled",
                "type": "boolean",
                "doc": "<p>Specifies whether the down spinner button is enabled. Defaults to true. To change this after the component is\ncreated, use the setSpinDownEnabled method.</p>",
                "default": "true"
            },
            {
                "name": "spinUpEnabled",
                "type": "boolean",
                "doc": "<p>Specifies whether the up spinner button is enabled. Defaults to true. To change this after the component is\ncreated, use the setSpinUpEnabled method.</p>",
                "default": "true"
            },
            {
                "name": "triggers",
                "type": "object",
                "doc": "<p>Triggers to use in this field.  The keys in\nthis object are unique identifiers for the triggers. The values in this object\nare Trigger configuration objects.</p>",
                "default": "{spinner: {type: 'spinner', upHandler: 'onSpinnerUpClick', downHandler: 'onSpinnerDownClick', scope: 'this'}}"
            }
        ],
        "events": [
            {
                "name": "spin",
                "params": "this(Ext.form.field.Spinner) direction(String) eOpts(Object)",
                "doc": "<p>Fires when the spinner is made to spin up or down.</p>"
            },
            {
                "name": "spindown",
                "params": "this(Ext.form.field.Spinner) eOpts(Object)",
                "doc": "<p>Fires when the spinner is made to spin down.</p>"
            },
            {
                "name": "spinup",
                "params": "this(Ext.form.field.Spinner) eOpts(Object)",
                "doc": "<p>Fires when the spinner is made to spin up.</p>"
            }
        ]
    },
    "Ext.form.field.Tag": {
        "type": "Ext.form.field.Tag",
        "doc": "<p>The <code>tagfield</code> is a combo box improved for multiple value editing, selection and easy\nmanagement.</p>",
        "configs": [
            {
                "name": "createNewOnBlur",
                "type": "boolean",
                "doc": "<p>Has no effect if forceSelection is <code>true</code>.</p>",
                "default": "false"
            },
            {
                "name": "createNewOnEnter",
                "type": "boolean",
                "doc": "<p>Has no effect if forceSelection is <code>true</code>.</p>",
                "default": "false"
            },
            {
                "name": "delimiter",
                "type": "string",
                "doc": "<p>The character(s) used to separate new values to be added when createNewOnEnter\nor createNewOnBlur are set.\n<code>multiSelect = true</code>.</p>",
                "default": "','"
            },
            {
                "name": "encodeSubmitValue",
                "type": "boolean",
                "doc": "<p>Has no effect if multiSelect is <code>false</code>.</p>",
                "default": "false"
            },
            {
                "name": "filterPickList",
                "type": "boolean",
                "doc": "<p>True to hide the currently selected values from the drop down list.</p>",
                "default": "false"
            },
            {
                "name": "forceSelection",
                "type": "boolean",
                "doc": "<p>When forceSelection is <code>false</code>, new records can be created by the user as they\nare typed. These records are <strong>not</strong> added to the combo's store. Multiple new values\nmay be added by separating them with the delimiter, and can be further configured using the\ncreateNewOnEnter and createNewOnBlur configuration options.</p>",
                "default": "true"
            },
            {
                "name": "grow",
                "type": "boolean",
                "doc": "<p><code>true</code> if this field should automatically grow and shrink vertically to its content.\nNote that this overrides the natural trigger grow functionality, which is used to size\nthe field horizontally.</p>",
                "default": "true"
            },
            {
                "name": "growMax",
                "type": "number/boolean",
                "doc": "<p>Has no effect if grow is <code>false</code></p>",
                "default": "false"
            },
            {
                "name": "growMin",
                "type": "number/boolean",
                "doc": "<p>Has no effect if grow is <code>false</code></p>",
                "default": "false"
            },
            {
                "name": "labelTpl",
                "type": "string/ext.xtemplate",
                "doc": "<p>The XTemplate to use for the inner\nmarkup of the labelled items. Defaults to the configured displayField</p>",
                "default": null
            },
            {
                "name": "multiSelect",
                "type": "boolean",
                "doc": "<p>If set to <code>true</code>, allows the combo field to hold more than one value at a time, and allows selecting multiple\nitems from the dropdown list. The combo's text field will show all selected values using the template\ndefined by labelTpl.</p>",
                "default": "true"
            },
            {
                "name": "selectOnFocus",
                "type": "boolean",
                "doc": "<p><code>true</code> to automatically select any existing field text when the field receives input\nfocus. Only applies when editable = true</p>",
                "default": "true"
            },
            {
                "name": "stacked",
                "type": "boolean",
                "doc": "<ul>\n<li><code>true</code> to have each selected value fill to the width of the form field</li>\n<li>`false to have each selected value size to its displayed contents</li>\n</ul>\n\n",
                "default": "false"
            },
            {
                "name": "triggerOnClick",
                "type": "boolean",
                "doc": "<p><code>true</code> to activate the trigger when clicking in empty space in the field. Note that the\nsubsequent behavior of this is controlled by the field's triggerAction.\nThis behavior is similar to that of a basic ComboBox with editable <code>false</code>.</p>",
                "default": "true"
            },
            {
                "name": "valueParam",
                "type": "string",
                "doc": "<p>The name of the parameter used to load unknown records into the store. If left unspecified, valueField\nwill be used.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "autosize",
                "params": "this(Ext.form.field.Tag) height(Number) eOpts(Object)",
                "doc": "<p>Fires when the <strong>autoSize</strong> function is triggered and the field is resized according to the\ngrow/growMin/growMax configs as a result. This event provides a hook for the\ndeveloper to apply additional logic at runtime to resize the field if needed.</p>"
            }
        ]
    },
    "Ext.form.field.Text": {
        "type": "Ext.form.field.Text",
        "doc": "<p>A basic text field.  Can be used as a direct replacement for traditional text inputs,\nor as the base class for more sophisticated input controls (like Ext.form.field.TextArea\nand Ext.form.field.ComboBox). Has support for empty-field placeholder values (see emptyText).</p>",
        "configs": [
            {
                "name": "allowBlank",
                "type": "boolean",
                "doc": "<p>Specify false to validate that the value's length must be > 0. If <code>true</code>, then a blank value is <strong>always</strong> taken to be valid regardless of any vtype\nvalidation that may be applied.</p>",
                "default": "true"
            },
            {
                "name": "allowOnlyWhitespace",
                "type": "boolean",
                "doc": "<p>Specify false to automatically trim the value before validating\nthe whether the value is blank. Setting this to false automatically\nsets allowBlank to false.</p>",
                "default": "true"
            },
            {
                "name": "blankText",
                "type": "string",
                "doc": "<p>The error text to display if the <strong>allowBlank</strong> validation fails</p>",
                "default": "'This field is required'"
            },
            {
                "name": "disableKeyFilter",
                "type": "boolean",
                "doc": "<p>Specify true to disable input keystroke filtering</p>",
                "default": "false"
            },
            {
                "name": "editable",
                "type": "boolean",
                "doc": "<p>false to prevent the user from typing text directly into the field; the field can\nonly have its value set programmatically or via an action invoked by a trigger.</p>",
                "default": "true"
            },
            {
                "name": "emptyCls",
                "type": "string",
                "doc": "<p>The CSS class to apply to an empty field to style the <strong>emptyText</strong>.\nThis class is automatically added and removed as needed depending on the current field value.</p>",
                "default": "'x-form-empty-field'"
            },
            {
                "name": "emptyText",
                "type": "string",
                "doc": "<p>The default text to place into an empty field.</p>",
                "default": null
            },
            {
                "name": "enableKeyEvents",
                "type": "boolean",
                "doc": "<p>true to enable the proxying of key events for the HTML input field</p>",
                "default": "false"
            },
            {
                "name": "enforceMaxLength",
                "type": "boolean",
                "doc": "<p>True to set the maxLength property on the underlying input field. Defaults to false</p>",
                "default": null
            },
            {
                "name": "fieldBodyCls",
                "type": "string",
                "doc": "<p>An extra CSS class to be applied to the body content element in addition to baseBodyCls.</p>",
                "default": "Ext.baseCSSPrefix + 'form-text-field-body'"
            },
            {
                "name": "grow",
                "type": "boolean",
                "doc": "<p>true if this field should automatically grow and shrink to its content</p>",
                "default": "false"
            },
            {
                "name": "growAppend",
                "type": "string",
                "doc": "<p>A string that will be appended to the field's current value for the purposes of calculating the target field\nsize. Only used when the grow config is true. Defaults to a single capital \"W\" (the widest character in\ncommon fonts) to leave enough space for the next typed character and avoid the field value shifting before the\nwidth is adjusted.</p>",
                "default": "'W'"
            },
            {
                "name": "growMax",
                "type": "number",
                "doc": "<p>The maximum width to allow when <code>grow = true</code></p>",
                "default": "800"
            },
            {
                "name": "growMin",
                "type": "number",
                "doc": "<p>The minimum width to allow when <code>grow = true</code></p>",
                "default": "30"
            },
            {
                "name": "hideTrigger",
                "type": "boolean",
                "doc": "<p><code>true</code> to hide all triggers</p>",
                "default": "false"
            },
            {
                "name": "inputWrapCls",
                "type": "string",
                "doc": "<p>The CSS class that is added to the element wrapping the input element</p>",
                "default": "Ext.baseCSSPrefix + 'form-text-wrap'"
            },
            {
                "name": "maskRe",
                "type": "regexp",
                "doc": "<p>An input mask regular expression that will be used to filter keystrokes (character being\ntyped) that do not match.\nNote: It does not filter characters already in the input.</p>",
                "default": null
            },
            {
                "name": "maxLength",
                "type": "number",
                "doc": "<p>Maximum input field length allowed by validation. This behavior is intended to\nprovide instant feedback to the user by improving usability to allow pasting and editing or overtyping and back\ntracking. To restrict the maximum number of characters that can be entered into the field use the\n<strong>enforceMaxLength</strong> option.</p>",
                "default": null
            },
            {
                "name": "maxLengthText",
                "type": "string",
                "doc": "<p>Error text to display if the <strong>maximum length</strong> validation fails</p>",
                "default": "'The maximum length for this field is {0}'"
            },
            {
                "name": "minLength",
                "type": "number",
                "doc": "<p>Minimum input field length required</p>",
                "default": "0"
            },
            {
                "name": "minLengthText",
                "type": "string",
                "doc": "<p>Error text to display if the <strong>minimum length</strong> validation fails.</p>",
                "default": "'The minimum length for this field is {0}'"
            },
            {
                "name": "readOnly",
                "type": "boolean",
                "doc": "<p><code>true</code> to prevent the user from changing the field, and hide all triggers.</p>",
                "default": null
            },
            {
                "name": "regex",
                "type": "regexp",
                "doc": "<p>A JavaScript RegExp object to be tested against the field value during validation.\nIf the test fails, the field will be marked invalid using\neither <strong>regexText</strong> or <strong>invalidText</strong>.</p>",
                "default": null
            },
            {
                "name": "regexText",
                "type": "string",
                "doc": "<p>The error text to display if <strong>regex</strong> is used and the test fails during validation</p>",
                "default": "''"
            },
            {
                "name": "repeatTriggerClick",
                "type": "boolean",
                "doc": "<p><code>true</code> to attach a click repeater to the trigger(s).\nClick repeating behavior can also be configured on the individual trigger instances using the trigger's {@link {Ext.form.trigger.Trigger#repeatClick\nrepeatClick config.</p>",
                "default": "false"
            },
            {
                "name": "requiredCls",
                "type": "string",
                "doc": "<p>The CSS class to apply to a required field, i.e. a field where <strong>allowBlank</strong> is false.</p>",
                "default": "'x-form-required-field'"
            },
            {
                "name": "selectOnFocus",
                "type": "boolean",
                "doc": "<p><code>true</code> to automatically select any existing field text when the field receives input\nfocus. Only applies when editable = true</p>",
                "default": "false"
            },
            {
                "name": "size",
                "type": "number",
                "doc": "<p>An initial value for the 'size' attribute on the text input element. This is only\nused if the field has no configured width and is not given a width by its\ncontainer's layout. Defaults to 20.</p>",
                "default": null
            },
            {
                "name": "stripCharsRe",
                "type": "regexp",
                "doc": "<p>A JavaScript RegExp object used to strip unwanted content from the value\nduring input. If <code>stripCharsRe</code> is specified,\nevery <em>character sequence</em> matching <code>stripCharsRe</code> will be removed.</p>",
                "default": null
            },
            {
                "name": "triggerWrapCls",
                "type": "string",
                "doc": "<p>The CSS class that is added to the div wrapping the input element and trigger button(s).</p>",
                "default": "Ext.baseCSSPrefix + 'form-trigger-wrap'"
            },
            {
                "name": "triggers",
                "type": "object",
                "doc": "<p>Triggers to use in this field.  The keys in\nthis object are unique identifiers for the triggers. The values in this object\nare Trigger configuration objects.</p>",
                "default": null
            },
            {
                "name": "validateBlank",
                "type": "boolean",
                "doc": "<p>Specify as <code>true</code> to modify the behaviour of allowBlank so that blank values are not passed as valid, but are subject to any configure vtype validation.</p>",
                "default": "false"
            },
            {
                "name": "validator",
                "type": "function",
                "doc": "<p>A custom validation function to be called during field validation (getErrors).\nIf specified, this function will be called first, allowing the developer to override the default validation\nprocess.</p>",
                "default": null
            },
            {
                "name": "vtype",
                "type": "string",
                "doc": "<p>A validation type name as defined in Ext.form.field.VTypes</p>",
                "default": null
            },
            {
                "name": "vtypeText",
                "type": "string",
                "doc": "<p>A custom error message to display in place of the default message provided for the <strong><code>vtype</code></strong> currently\nset for this field. <strong>Note</strong>: only applies if <strong><code>vtype</code></strong> is set, else ignored.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "autosize",
                "params": "this(Ext.form.field.Text) width(Number) eOpts(Object)",
                "doc": "<p>Fires when the <strong>autoSize</strong> function is triggered and the field is resized according to the\ngrow/growMin/growMax configs as a result. This event provides a hook for the\ndeveloper to apply additional logic at runtime to resize the field if needed.</p>"
            },
            {
                "name": "keydown",
                "params": "this(Ext.form.field.Text) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Keydown input field event. This event only fires if <strong>enableKeyEvents</strong> is set to true.</p>"
            },
            {
                "name": "keypress",
                "params": "this(Ext.form.field.Text) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Keypress input field event. This event only fires if <strong>enableKeyEvents</strong> is set to true.</p>"
            },
            {
                "name": "keyup",
                "params": "this(Ext.form.field.Text) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Keyup input field event. This event only fires if <strong>enableKeyEvents</strong> is set to true.</p>"
            }
        ]
    },
    "Ext.form.field.TextArea": {
        "type": "Ext.form.field.TextArea",
        "doc": "<p>This class creates a multiline text field, which can be used as a direct replacement for traditional\ntextarea fields. In addition, it supports automatically growing the height of the textarea to\nfit its content.</p>",
        "configs": [
            {
                "name": "enterIsSpecial",
                "type": "boolean",
                "doc": "<p>True if you want the ENTER key to be classed as a special key and the specialkey event to be fired\nwhen ENTER is pressed.</p>",
                "default": "false"
            },
            {
                "name": "fieldSubTpl",
                "type": "ext.xtemplate",
                "doc": "<p>This template includes a <code>\\n</code> after <code>&lt;textarea&gt;</code> opening tag so that an\ninitial value starting with <code>\\n</code> does not lose its first character when\nthe markup is parsed. Both textareas below have the same value:</p>",
                "default": "['<textarea id=\"{id}\" role=\"{role}\" {inputAttrTpl}', '<tpl if=\"name\"> name=\"{name}\"</tpl>', '<tpl if=\"placeholder\"> placeholder=\"{placeholder}\"</tpl>', '<tpl if=\"maxLength !== undefined\"> maxlength=\"{maxLength}\"</tpl>', '<tpl if=\"readOnly\"> readonly=\"readonly\"</tpl>', '<tpl if=\"disabled\"> disabled=\"disabled\"</tpl>', '<tpl if=\"tabIdx != null\"> tabindex=\"{tabIdx}\"</tpl>', ' class=\"{fieldCls} {typeCls} {typeCls}-{ui} {inputCls}\" ', '<tpl if=\"fieldStyle\"> style=\"{fieldStyle}\"</tpl>', ' autocomplete=\"off\">\\n', '<tpl if=\"value\">{[Ext.util.Format.htmlEncode(values.value)]}</tpl>', '</textarea>', {disableFormats: true}]"
            },
            {
                "name": "growAppend",
                "type": "string",
                "doc": "<p>A string that will be appended to the field's current value for the purposes of calculating the target field\nsize. Only used when the grow config is true. Defaults to a newline for TextArea to ensure there is\nalways a space below the current line.</p>",
                "default": "'\\n-'"
            },
            {
                "name": "growMax",
                "type": "number",
                "doc": "<p>The maximum height to allow when grow=true</p>",
                "default": "1000"
            },
            {
                "name": "growMin",
                "type": "number",
                "doc": "<p>The minimum height to allow when grow=true</p>",
                "default": "60"
            },
            {
                "name": "preventScrollbars",
                "type": "boolean",
                "doc": "<p>true to prevent scrollbars from appearing regardless of how much text is in the field. This option is only\nrelevant when grow is true. Equivalent to setting overflow: hidden.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.form.field.Time": {
        "type": "Ext.form.field.Time",
        "doc": "<p>Provides a time input field with a time dropdown and automatic time validation.</p>",
        "configs": [
            {
                "name": "altFormats",
                "type": "string",
                "doc": "<p>Multiple date formats separated by \"|\" to try when parsing a user input value and it doesn't match the defined\nformat.</p>",
                "default": "\"g:ia|g:iA|g:i a|g:i A|h:i|g:i|H:i|ga|ha|gA|h a|g a|g A|gi|hi|gia|hia|g|H|gi a|hi a|giA|hiA|gi A|hi A\""
            },
            {
                "name": "displayField",
                "type": "string",
                "doc": "<p>The underlying data field name to bind to this ComboBox.</p>",
                "default": "'disp'"
            },
            {
                "name": "format",
                "type": "string",
                "doc": "<p>The default time format string which can be overriden for localization support. The format must be valid\naccording to Ext.Date.parse.</p>",
                "default": "undefined"
            },
            {
                "name": "increment",
                "type": "number",
                "doc": "<p>The number of minutes between each time value in the list.</p>",
                "default": "15"
            },
            {
                "name": "invalidText",
                "type": "string",
                "doc": "<p>The error text to display when the time in the field is invalid.</p>",
                "default": "\"{0} is not a valid time\""
            },
            {
                "name": "maxText",
                "type": "string",
                "doc": "<p>The error text to display when the entered time is after maxValue.</p>",
                "default": "\"The time in this field must be equal to or before {0}\""
            },
            {
                "name": "maxValue",
                "type": "date/string",
                "doc": "<p>The maximum allowed time. Can be either a Javascript date object with a valid time value or a string time in a\nvalid format -- see format and altFormats.</p>",
                "default": null
            },
            {
                "name": "minText",
                "type": "string",
                "doc": "<p>The error text to display when the entered time is before minValue.</p>",
                "default": "\"The time in this field must be equal to or after {0}\""
            },
            {
                "name": "minValue",
                "type": "date/string",
                "doc": "<p>The minimum allowed time. Can be either a Javascript date object with a valid time value or a string time in a\nvalid format -- see format and altFormats.</p>",
                "default": null
            },
            {
                "name": "pickerMaxHeight",
                "type": "number",
                "doc": "<p>The maximum height of the Ext.picker.Time dropdown.</p>",
                "default": "300"
            },
            {
                "name": "queryMode",
                "type": "string",
                "doc": "<p>The mode in which the ComboBox uses the configured Store. Acceptable values are:</p>",
                "default": "'local'"
            },
            {
                "name": "selectOnTab",
                "type": "boolean",
                "doc": "<p>Whether the Tab key should select the currently highlighted item.</p>",
                "default": "true"
            },
            {
                "name": "snapToIncrement",
                "type": "boolean",
                "doc": "<p>Specify as <code>true</code> to enforce that only values on the increment boundary are accepted.</p>",
                "default": "false"
            },
            {
                "name": "submitFormat",
                "type": "string",
                "doc": "<p>The date format string which will be submitted to the server. The format must be valid according to\nExt.Date.parse.</p>",
                "default": "undefined"
            },
            {
                "name": "triggerCls",
                "type": "string",
                "doc": "<p>An additional CSS class used to style the trigger button. The trigger will always get the Ext.form.trigger.Trigger.baseCls\nby default and triggerCls will be <strong>appended</strong> if specified.</p>",
                "default": "'x-form-time-trigger'"
            },
            {
                "name": "valueField",
                "type": "string",
                "doc": "<p>The underlying data value name to bind to this ComboBox.</p>",
                "default": "'date'"
            },
            {
                "name": "valuePublishEvent",
                "type": "string[]/string",
                "doc": "<p>The event name(s) to use to publish the value bind for this field.</p>",
                "default": "['select', 'blur']"
            }
        ],
        "events": []
    },
    "Ext.form.field.Trigger": {
        "type": "Ext.form.field.Trigger",
        "configs": [
            {
                "name": "triggerCls",
                "type": "string",
                "doc": "<p>An additional CSS class used to style the trigger button. The trigger will always get the Ext.form.trigger.Trigger.baseCls\nby default and triggerCls will be <strong>appended</strong> if specified.</p>",
                "default": "Ext.baseCSSPrefix + 'form-arrow-trigger'"
            }
        ],
        "events": []
    },
    "Ext.form.field.VTypes": {
        "type": "Ext.form.field.VTypes",
        "doc": "<p>This is a singleton object which contains a set of commonly used field validation functions\nand provides a mechanism for creating reusable custom field validations.\nThe following field validation functions are provided out of the box:</p>",
        "configs": [],
        "events": []
    },
    "Ext.form.trigger.Component": {
        "type": "Ext.form.trigger.Component",
        "doc": "<p>A Text Field Trigger that contains a Component or Widget.</p>",
        "configs": [
            {
                "name": "A",
                "type": "object/ext.component/ext.widget",
                "doc": "<p>config object for a Component or Widget,\nor an already instantiated Component or Widget.</p>",
                "default": null
            },
            {
                "name": "cls",
                "type": "string",
                "doc": "<p>CSS class to add to the trigger element.</p>",
                "default": "Ext.baseCSSPrefix + 'form-trigger-cmp'"
            }
        ],
        "events": []
    },
    "Ext.form.trigger.Spinner": {
        "type": "Ext.form.trigger.Spinner",
        "doc": "<p>A Trigger that contains 2 clickable elements inside in the form of a \"up\" and a \"down\"\ntrigger.</p>",
        "configs": [
            {
                "name": "cls",
                "type": "string",
                "doc": "<p>CSS class to add to the trigger element.</p>",
                "default": "Ext.baseCSSPrefix + 'form-trigger-spinner'"
            },
            {
                "name": "downHandler",
                "type": "function/string",
                "doc": "<p>The handler for the 'down' button</p>",
                "default": null
            },
            {
                "name": "upHandler",
                "type": "function/string",
                "doc": "<p>The handler for the 'up' button</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.form.trigger.Trigger": {
        "type": "Ext.form.trigger.Trigger",
        "doc": "<p>Base class for Text Field triggers</p>",
        "configs": [
            {
                "name": "cls",
                "type": "string",
                "doc": "<p>CSS class to add to the trigger element.</p>",
                "default": null
            },
            {
                "name": "extraCls",
                "type": "string",
                "doc": "<p>An additional CSS class (or classes) to be added to the trigger's element. Can\nbe a single class name (e.g. 'foo') or a space-separated list of class names\n(e.g. 'foo bar').</p>",
                "default": null
            },
            {
                "name": "handler",
                "type": "function/string",
                "doc": "<p>Function to run when trigger is clicked or tapped.</p>",
                "default": null
            },
            {
                "name": "hidden",
                "type": "boolean",
                "doc": "<p><code>true</code> to initially render the trigger hidden.</p>",
                "default": "false"
            },
            {
                "name": "hideOnReadOnly",
                "type": "boolean",
                "doc": "<p>Set 'false' to prevent trigger from being hidden even though the related field is set readOnly</p>",
                "default": "true"
            },
            {
                "name": "preventMouseDown",
                "type": "boolean",
                "doc": "<p>If true, preventDefault() will be called on the mousedown event.  This prevents\na click on the trigger from blurring the field, which is desirable in most cases.\nFile field sets this to false, because preventing the default behavior of touchstart\nprevents the browser's file dialog from opening.</p>",
                "default": "true"
            },
            {
                "name": "repeatClick",
                "type": "boolean",
                "doc": "<p><code>true</code> to attach a click repeater to the trigger</p>",
                "default": "false"
            },
            {
                "name": "scope",
                "type": "object",
                "doc": "<p>Execution context for the handler function.</p>",
                "default": null
            },
            {
                "name": "weight",
                "type": "number",
                "doc": "<p>An optional weighting to change the ordering of the items. The default weight is\n<code>0</code>.  Triggers are sorted by weight in ascending order before being rendered.</p>",
                "default": "0"
            },
            {
                "name": "width",
                "type": "number",
                "doc": "<p>The trigger's width, in pixels. Typically this is not needed\nas the trigger width is normally determined by the stylesheet, (see extjs-text-field or Ext.form.field.Text#$extjs-text-field-ui).</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.fx.Anim": {
        "type": "Ext.fx.Anim",
        "doc": "<p>This class manages animation for a specific target. The animation allows\nanimation of various properties on the target, such as size, position, color and others.</p>",
        "configs": [
            {
                "name": "alternate",
                "type": "boolean",
                "doc": "<p>Used in conjunction with iterations to reverse the animation each time an iteration completes.</p>",
                "default": "false"
            },
            {
                "name": "autoEnd",
                "type": "boolean",
                "doc": "<p><code>true</code> to immediately force this animation to its final state. This can be useful\nin cases where you want the final effect of an animation, but need to the actual\nanimation dynamically. Also see the jumpToEnd method.</p>",
                "default": "false"
            },
            {
                "name": "callback",
                "type": "function",
                "doc": "<p>A function to be run after the animation has completed.</p>",
                "default": null
            },
            {
                "name": "delay",
                "type": "number",
                "doc": "<p>Time to delay before starting the animation.</p>",
                "default": "0"
            },
            {
                "name": "duration",
                "type": "number",
                "doc": "<p>Time in milliseconds for a single animation to last. If the iterations property is\nspecified, then each animate will take the same duration for each iteration.</p>",
                "default": "250"
            },
            {
                "name": "dynamic",
                "type": "boolean",
                "doc": "<p>Currently only for Component Animation: Only set a component's outer element size bypassing layouts.\nSet to true to do full layouts for every frame of the animation.</p>",
                "default": "false"
            },
            {
                "name": "easing",
                "type": "string",
                "doc": "<p>This describes how the intermediate values used during a transition will be calculated.\nIt allows for a transition to change speed over its duration.</p>",
                "default": "'ease'"
            },
            {
                "name": "from",
                "type": "object",
                "doc": "<p>An object containing property/value pairs for the beginning of the animation.  If not specified, the current state of the\nExt.fx.target will be used. For example:</p>",
                "default": null
            },
            {
                "name": "iterations",
                "type": "number",
                "doc": "<p>Number of times to execute the animation.</p>",
                "default": "1"
            },
            {
                "name": "keyframes",
                "type": "object",
                "doc": "<p>Animation keyframes follow the CSS3 Animation configuration pattern. 'from' is always considered '0%' and 'to'\nis considered '100%'. <strong>Every keyframe declaration must have a keyframe rule for 0% and 100%, possibly defined using\n\"from\" or \"to\".</strong>  A keyframe declaration without these keyframe selectors is invalid and will not be available for\nanimation.  The keyframe declaration for a keyframe rule consists of properties and values. Properties that are unable to\nbe animated are ignored in these rules, with the exception of 'easing' which can be changed at each keyframe. For example:</p>",
                "default": null
            },
            {
                "name": "remove",
                "type": "boolean",
                "doc": "<p><code>true</code> to remove the target when the animation is complete, using the appropriate removal\nmethod for the target. For example, a component will be destroyed, elements will be removed.</p>",
                "default": null
            },
            {
                "name": "reverse",
                "type": "boolean",
                "doc": "<p>Run the animation from the end to the beginning\nDefaults to false.</p>",
                "default": "false"
            },
            {
                "name": "scope",
                "type": "function",
                "doc": "<p>The scope that the callback function will be called with</p>",
                "default": null
            },
            {
                "name": "target",
                "type": "string/object",
                "doc": "<p>The Ext.fx.target.Target to apply the animation to.  This should only be specified when creating an Ext.fx.Anim directly.\nThe target does not need to be a Ext.fx.target.Target instance, it can be the underlying object. For example, you can\npass a Component, Element or Sprite as the target and the Anim will create the appropriate Ext.fx.target.Target object\nautomatically.</p>",
                "default": null
            },
            {
                "name": "to",
                "type": "object",
                "doc": "<p>An object containing property/value pairs for the end of the animation. For example:</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "afteranimate",
                "params": "this(Ext.fx.Anim) startTime(Date) eOpts(Object)",
                "doc": "<p>Fires when the animation is complete.</p>"
            },
            {
                "name": "beforeanimate",
                "params": "this(Ext.fx.Anim) eOpts(Object)",
                "doc": "<p>Fires before the animation starts. A handler can return false to cancel the animation.</p>"
            },
            {
                "name": "lastframe",
                "params": "this(Ext.fx.Anim) startTime(Date) eOpts(Object)",
                "doc": "<p>Fires when the animation's last frame has been set.</p>"
            }
        ]
    },
    "Ext.fx.Animation": {
        "type": "Ext.fx.Animation",
        "doc": "<p>This class is a factory class that will create and return an animation class based on the type configuration.</p>",
        "configs": [
            {
                "name": "type",
                "type": "string",
                "doc": "<p>The type of animation to use. The possible values are:</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.fx.Animator": {
        "type": "Ext.fx.Animator",
        "doc": "<p>This class is used to run keyframe based animations, which follows the CSS3 based animation structure.\nKeyframe animations differ from typical from/to animations in that they offer the ability to specify values\nat various points throughout the animation.</p>",
        "configs": [
            {
                "name": "delay",
                "type": "number",
                "doc": "<p>Time to delay before starting the animation. Defaults to 0.</p>",
                "default": "0"
            },
            {
                "name": "duration",
                "type": "number",
                "doc": "<p>Time in milliseconds for the animation to last. Defaults to 250.</p>",
                "default": "250"
            },
            {
                "name": "dynamic",
                "type": "boolean",
                "doc": "<p>Currently only for Component Animation: Only set a component's outer element size bypassing layouts.  Set to true to do full layouts for every frame of the animation.  Defaults to false.</p>",
                "default": "false"
            },
            {
                "name": "easing",
                "type": "string",
                "doc": "<p>This describes how the intermediate values used during a transition will be calculated. It allows for a transition to change\nspeed over its duration.</p>",
                "default": "'ease'"
            },
            {
                "name": "iterations",
                "type": "number",
                "doc": "<p>Number of times to execute the animation. Defaults to 1.</p>",
                "default": "1"
            },
            {
                "name": "keyframes",
                "type": "object",
                "doc": "<p>Animation keyframes follow the CSS3 Animation configuration pattern. 'from' is always considered '0%' and 'to'\nis considered '100%'.<b>Every keyframe declaration must have a keyframe rule for 0% and 100%, possibly defined using\n\"from\" or \"to\"</b>.  A keyframe declaration without these keyframe selectors is invalid and will not be available for\nanimation.  The keyframe declaration for a keyframe rule consists of properties and values. Properties that are unable to\nbe animated are ignored in these rules, with the exception of 'easing' which can be changed at each keyframe. For example:</p>",
                "default": null
            },
            {
                "name": "target",
                "type": "ext.fx.target.target",
                "doc": "<p>The Ext.fx.target to apply the animation to.  If not specified during initialization, this can be passed to the applyAnimator\nmethod to apply the same animation to many targets.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "afteranimate",
                "params": "this(Ext.fx.Animator) startTime(Date) eOpts(Object)",
                "doc": "<p>Fires when the animation is complete.</p>"
            },
            {
                "name": "beforeanimate",
                "params": "this(Ext.fx.Animator) eOpts(Object)",
                "doc": "<p>Fires before the animation starts. A handler can return false to cancel the animation.</p>"
            },
            {
                "name": "keyframe",
                "params": "this(Ext.fx.Animator) keyframe(Number) eOpts(Object)",
                "doc": "<p>Fires at each keyframe.</p>"
            }
        ]
    },
    "Ext.fx.CubicBezier": {
        "type": "Ext.fx.CubicBezier",
        "configs": [],
        "events": []
    },
    "Ext.fx.DrawPath": {
        "type": "Ext.fx.DrawPath",
        "doc": "<p>Provides SVG Paths handling functions. Copied from Ext.draw.Draw in ExtJs 4.2 in order\nto break the dependencies on parsePathString() and interpolatePaths() in PropertyHandler.js</p>",
        "configs": [],
        "events": []
    },
    "Ext.fx.Easing": {
        "type": "Ext.fx.Easing",
        "doc": "<p>This class contains a series of function definitions used to modify values during an animation.\nThey describe how the intermediate values used during a transition will be calculated. It allows for a transition to change\nspeed over its duration. The following options are available:</p>",
        "configs": [],
        "events": []
    },
    "Ext.fx.Manager": {
        "type": "Ext.fx.Manager",
        "doc": "<p>Animation Manager which keeps track of all current animations and manages them on a frame by frame basis.</p>",
        "configs": [
            {
                "name": "forceJS",
                "type": "boolean",
                "doc": "<p>Force the use of JavaScript-based animation instead of CSS3 animation, even when CSS3\nanimation is supported by the browser. This defaults to true currently, as CSS3 animation support is still\nconsidered experimental at this time, and if used should be thouroughly tested across all targeted browsers.</p>",
                "default": "true"
            },
            {
                "name": "interval",
                "type": "number",
                "doc": "<p>Default interval in miliseconds to calculate each frame.  Defaults to 16ms (~60fps)</p>",
                "default": "16"
            }
        ],
        "events": []
    },
    "Ext.fx.PropertyHandler": {
        "type": "Ext.fx.PropertyHandler",
        "configs": [],
        "events": []
    },
    "Ext.fx.Queue": {
        "type": "Ext.fx.Queue",
        "doc": "<p>Animation Queue mixin to handle chaining and queueing by target.</p>",
        "configs": [],
        "events": []
    },
    "Ext.fx.Runner": {
        "type": "Ext.fx.Runner",
        "configs": [],
        "events": []
    },
    "Ext.fx.State": {
        "type": "Ext.fx.State",
        "configs": [],
        "events": []
    },
    "Ext.fx.animation.Abstract": {
        "type": "Ext.fx.animation.Abstract",
        "configs": [
            {
                "name": "after",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "before",
                "type": "object",
                "doc": "<p>Before configuration.</p>",
                "default": null
            },
            {
                "name": "delay",
                "type": "number",
                "doc": "\n",
                "default": "0"
            },
            {
                "name": "direction",
                "type": "string",
                "doc": "\n",
                "default": "'normal'"
            },
            {
                "name": "duration",
                "type": "number",
                "doc": "\n",
                "default": "300"
            },
            {
                "name": "easing",
                "type": "string",
                "doc": "<p>Easing type.</p>",
                "default": "'linear'"
            },
            {
                "name": "element",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "from",
                "type": "object",
                "doc": "\n",
                "default": "{}"
            },
            {
                "name": "iteration",
                "type": "number",
                "doc": "\n",
                "default": "1"
            },
            {
                "name": "name",
                "type": "string",
                "doc": "\n",
                "default": "''"
            },
            {
                "name": "onBeforeEnd",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "onBeforeStart",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "onEnd",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "preserveEndState",
                "type": "boolean",
                "doc": "\n",
                "default": "false"
            },
            {
                "name": "replacePrevious",
                "type": "boolean",
                "doc": "\n",
                "default": "true"
            },
            {
                "name": "reverse",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "scope",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "states",
                "type": "object",
                "doc": "\n",
                "default": "{}"
            },
            {
                "name": "to",
                "type": "object",
                "doc": "\n",
                "default": "{}"
            }
        ],
        "events": []
    },
    "Ext.fx.animation.Cube": {
        "type": "Ext.fx.animation.Cube",
        "configs": [
            {
                "name": "after",
                "type": "object",
                "doc": "\n",
                "default": "{}"
            },
            {
                "name": "before",
                "type": "object",
                "doc": "<p>Before configuration.</p>",
                "default": "{}"
            },
            {
                "name": "direction",
                "type": "string",
                "doc": "<p>The direction of which the slide animates</p>",
                "default": "'right'"
            },
            {
                "name": "out",
                "type": "boolean",
                "doc": "\n",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.fx.animation.Fade": {
        "type": "Ext.fx.animation.Fade",
        "configs": [
            {
                "name": "after",
                "type": "object",
                "doc": "\n",
                "default": "{opacity: null}"
            },
            {
                "name": "before",
                "type": "object",
                "doc": "<p>Before configuration.</p>",
                "default": "{display: null, opacity: 0}"
            },
            {
                "name": "out",
                "type": "boolean",
                "doc": "<p>True if you want to make this animation fade out, instead of fade in.</p>",
                "default": "false"
            },
            {
                "name": "reverse",
                "type": "object",
                "doc": "\n",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.fx.animation.FadeOut": {
        "type": "Ext.fx.animation.FadeOut",
        "configs": [
            {
                "name": "before",
                "type": "object",
                "doc": "<p>Before configuration.</p>",
                "default": "{}"
            }
        ],
        "events": []
    },
    "Ext.fx.animation.Flip": {
        "type": "Ext.fx.animation.Flip",
        "configs": [
            {
                "name": "direction",
                "type": "string",
                "doc": "<p>The direction of which the slide animates</p>",
                "default": "'right'"
            },
            {
                "name": "easing",
                "type": "string",
                "doc": "<p>Easing type.</p>",
                "default": "'ease-in'"
            },
            {
                "name": "half",
                "type": "boolean",
                "doc": "\n",
                "default": "false"
            },
            {
                "name": "out",
                "type": "object",
                "doc": "\n",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.fx.animation.Pop": {
        "type": "Ext.fx.animation.Pop",
        "configs": [
            {
                "name": "after",
                "type": "object",
                "doc": "\n",
                "default": "{opacity: null}"
            },
            {
                "name": "before",
                "type": "object",
                "doc": "<p>Before configuration.</p>",
                "default": "{display: null, opacity: 0}"
            },
            {
                "name": "out",
                "type": "boolean",
                "doc": "<p>True if you want to make this animation pop out, instead of pop in.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.fx.animation.PopOut": {
        "type": "Ext.fx.animation.PopOut",
        "configs": [
            {
                "name": "before",
                "type": "object",
                "doc": "<p>Before configuration.</p>",
                "default": "{}"
            }
        ],
        "events": []
    },
    "Ext.fx.animation.Slide": {
        "type": "Ext.fx.animation.Slide",
        "configs": [
            {
                "name": "containerBox",
                "type": "string",
                "doc": "\n",
                "default": "'auto'"
            },
            {
                "name": "direction",
                "type": "string",
                "doc": "<p>The direction of which the slide animates</p>",
                "default": "'left'"
            },
            {
                "name": "easing",
                "type": "string",
                "doc": "<p>Easing type.</p>",
                "default": "'auto'"
            },
            {
                "name": "elementBox",
                "type": "string",
                "doc": "\n",
                "default": "'auto'"
            },
            {
                "name": "isElementBoxFit",
                "type": "boolean",
                "doc": "\n",
                "default": "true"
            },
            {
                "name": "offset",
                "type": "number",
                "doc": "<p>The offset that the animation should go offscreen before entering (or when exiting)</p>",
                "default": "0"
            },
            {
                "name": "out",
                "type": "boolean",
                "doc": "<p>True if you want to make this animation slide out, instead of slide in.</p>",
                "default": "false"
            },
            {
                "name": "useCssTransform",
                "type": "boolean",
                "doc": "\n",
                "default": "true"
            }
        ],
        "events": []
    },
    "Ext.fx.animation.SlideOut": {
        "type": "Ext.fx.animation.SlideOut",
        "configs": [],
        "events": []
    },
    "Ext.fx.animation.Wipe": {
        "type": "Ext.fx.animation.Wipe",
        "configs": [
            {
                "name": "direction",
                "type": "string",
                "doc": "<p>The direction of which the slide animates</p>",
                "default": "'right'"
            },
            {
                "name": "easing",
                "type": "string",
                "doc": "<p>Valid values are 'ease', 'linear', ease-in', 'ease-out', 'ease-in-out',\nor a cubic-bezier curve as defined by CSS.</p>",
                "default": "'ease-out'"
            },
            {
                "name": "out",
                "type": "boolean",
                "doc": "<p>True if you want to make this animation wipe out, instead of slide in.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.fx.animation.WipeOut": {
        "type": "Ext.fx.animation.WipeOut",
        "configs": [],
        "events": []
    },
    "Ext.fx.easing.Abstract": {
        "type": "Ext.fx.easing.Abstract",
        "configs": [
            {
                "name": "startTime",
                "type": "number",
                "doc": "\n",
                "default": "0"
            },
            {
                "name": "startValue",
                "type": "number",
                "doc": "\n",
                "default": "0"
            }
        ],
        "events": []
    },
    "Ext.fx.easing.Bounce": {
        "type": "Ext.fx.easing.Bounce",
        "configs": [
            {
                "name": "acceleration",
                "type": "number",
                "doc": "\n",
                "default": "30"
            },
            {
                "name": "springTension",
                "type": "number",
                "doc": "\n",
                "default": "0.3"
            },
            {
                "name": "startVelocity",
                "type": "number",
                "doc": "\n",
                "default": "0"
            }
        ],
        "events": []
    },
    "Ext.fx.easing.BoundMomentum": {
        "type": "Ext.fx.easing.BoundMomentum",
        "doc": "<p>This easing is typically used for Ext.scroll.Scroller. It's a combination of\nExt.fx.easing.Momentum and Ext.fx.easing.Bounce, which emulates deceleration when the animated element\nis still within its boundary, then bouncing back (snapping) when it's out-of-bound.</p>",
        "configs": [
            {
                "name": "bounce",
                "type": "object",
                "doc": "<p>A valid config object for Ext.fx.easing.Bounce</p>",
                "default": null
            },
            {
                "name": "maxMomentumValue",
                "type": "number",
                "doc": "\n",
                "default": "0"
            },
            {
                "name": "minMomentumValue",
                "type": "number",
                "doc": "\n",
                "default": "0"
            },
            {
                "name": "minVelocity",
                "type": "number",
                "doc": "<p>The minimum velocity to end this easing</p>",
                "default": "0.01"
            },
            {
                "name": "momentum",
                "type": "object",
                "doc": "<p>A valid config object for Ext.fx.easing.Momentum</p>",
                "default": null
            },
            {
                "name": "startVelocity",
                "type": "number",
                "doc": "<p>The start velocity</p>",
                "default": "0"
            }
        ],
        "events": []
    },
    "Ext.fx.easing.EaseIn": {
        "type": "Ext.fx.easing.EaseIn",
        "configs": [
            {
                "name": "duration",
                "type": "number",
                "doc": "\n",
                "default": "1500"
            },
            {
                "name": "exponent",
                "type": "number",
                "doc": "\n",
                "default": "4"
            }
        ],
        "events": []
    },
    "Ext.fx.easing.EaseOut": {
        "type": "Ext.fx.easing.EaseOut",
        "configs": [
            {
                "name": "duration",
                "type": "number",
                "doc": "\n",
                "default": "1500"
            },
            {
                "name": "exponent",
                "type": "number",
                "doc": "\n",
                "default": "4"
            }
        ],
        "events": []
    },
    "Ext.fx.easing.Easing": {
        "type": "Ext.fx.easing.Easing",
        "configs": [],
        "events": []
    },
    "Ext.fx.easing.Linear": {
        "type": "Ext.fx.easing.Linear",
        "configs": [
            {
                "name": "duration",
                "type": "number",
                "doc": "\n",
                "default": "0"
            },
            {
                "name": "endValue",
                "type": "number",
                "doc": "\n",
                "default": "0"
            }
        ],
        "events": []
    },
    "Ext.fx.easing.Momentum": {
        "type": "Ext.fx.easing.Momentum",
        "configs": [
            {
                "name": "acceleration",
                "type": "number",
                "doc": "\n",
                "default": "30"
            },
            {
                "name": "friction",
                "type": "number",
                "doc": "\n",
                "default": "0"
            },
            {
                "name": "startVelocity",
                "type": "number",
                "doc": "\n",
                "default": "0"
            }
        ],
        "events": []
    },
    "Ext.fx.layout.Card": {
        "type": "Ext.fx.layout.Card",
        "configs": [],
        "events": []
    },
    "Ext.fx.layout.card.Abstract": {
        "type": "Ext.fx.layout.card.Abstract",
        "configs": [
            {
                "name": "direction",
                "type": "string",
                "doc": "\n",
                "default": "'left'"
            },
            {
                "name": "duration",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "layout",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "reverse",
                "type": "object",
                "doc": "\n",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.fx.layout.card.Cover": {
        "type": "Ext.fx.layout.card.Cover",
        "configs": [
            {
                "name": "inAnimation",
                "type": "object",
                "doc": "\n",
                "default": "{before: {'z-index': 100}, after: {'z-index': 0}, type: 'slide', easing: 'ease-out'}"
            },
            {
                "name": "outAnimation",
                "type": "object",
                "doc": "\n",
                "default": "{easing: 'ease-out', from: {opacity: 0.99}, to: {opacity: 1}, out: true}"
            },
            {
                "name": "reverse",
                "type": "object",
                "doc": "\n",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.fx.layout.card.Cube": {
        "type": "Ext.fx.layout.card.Cube",
        "configs": [
            {
                "name": "inAnimation",
                "type": "object",
                "doc": "\n",
                "default": "{type: 'cube'}"
            },
            {
                "name": "outAnimation",
                "type": "object",
                "doc": "\n",
                "default": "{type: 'cube', out: true}"
            },
            {
                "name": "reverse",
                "type": "object",
                "doc": "\n",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.fx.layout.card.Fade": {
        "type": "Ext.fx.layout.card.Fade",
        "configs": [
            {
                "name": "inAnimation",
                "type": "object",
                "doc": "\n",
                "default": "{type: 'fade', easing: 'ease-out'}"
            },
            {
                "name": "outAnimation",
                "type": "object",
                "doc": "\n",
                "default": "{type: 'fade', easing: 'ease-out', out: true}"
            },
            {
                "name": "reverse",
                "type": "object",
                "doc": "\n",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.fx.layout.card.Flip": {
        "type": "Ext.fx.layout.card.Flip",
        "configs": [
            {
                "name": "duration",
                "type": "number",
                "doc": "\n",
                "default": "500"
            },
            {
                "name": "inAnimation",
                "type": "object",
                "doc": "\n",
                "default": "{type: 'flip', half: true, easing: 'ease-out', before: {'backface-visibility': 'hidden'}, after: {'backface-visibility': null}}"
            },
            {
                "name": "outAnimation",
                "type": "object",
                "doc": "\n",
                "default": "{type: 'flip', half: true, easing: 'ease-in', before: {'backface-visibility': 'hidden'}, after: {'backface-visibility': null}, out: true}"
            }
        ],
        "events": []
    },
    "Ext.fx.layout.card.Pop": {
        "type": "Ext.fx.layout.card.Pop",
        "configs": [
            {
                "name": "duration",
                "type": "number",
                "doc": "\n",
                "default": "500"
            },
            {
                "name": "inAnimation",
                "type": "object",
                "doc": "\n",
                "default": "{type: 'pop', easing: 'ease-out'}"
            },
            {
                "name": "outAnimation",
                "type": "object",
                "doc": "\n",
                "default": "{type: 'pop', easing: 'ease-in', out: true}"
            }
        ],
        "events": []
    },
    "Ext.fx.layout.card.Reveal": {
        "type": "Ext.fx.layout.card.Reveal",
        "configs": [
            {
                "name": "inAnimation",
                "type": "object",
                "doc": "\n",
                "default": "{easing: 'ease-out', from: {opacity: 0.99}, to: {opacity: 1}}"
            },
            {
                "name": "outAnimation",
                "type": "object",
                "doc": "\n",
                "default": "{before: {'z-index': 100}, after: {'z-index': 0}, type: 'slide', easing: 'ease-out', out: true}"
            }
        ],
        "events": []
    },
    "Ext.fx.layout.card.Scroll": {
        "type": "Ext.fx.layout.card.Scroll",
        "configs": [
            {
                "name": "duration",
                "type": "number",
                "doc": "\n",
                "default": "150"
            }
        ],
        "events": []
    },
    "Ext.fx.layout.card.ScrollCover": {
        "type": "Ext.fx.layout.card.ScrollCover",
        "configs": [],
        "events": []
    },
    "Ext.fx.layout.card.ScrollReveal": {
        "type": "Ext.fx.layout.card.ScrollReveal",
        "configs": [],
        "events": []
    },
    "Ext.fx.layout.card.Slide": {
        "type": "Ext.fx.layout.card.Slide",
        "configs": [
            {
                "name": "inAnimation",
                "type": "object",
                "doc": "\n",
                "default": "{type: 'slide', easing: 'ease-out'}"
            },
            {
                "name": "outAnimation",
                "type": "object",
                "doc": "\n",
                "default": "{type: 'slide', easing: 'ease-out', out: true}"
            }
        ],
        "events": []
    },
    "Ext.fx.layout.card.Style": {
        "type": "Ext.fx.layout.card.Style",
        "configs": [
            {
                "name": "inAnimation",
                "type": "object",
                "doc": "\n",
                "default": "{before: {visibility: null}, preserveEndState: false, replacePrevious: true}"
            },
            {
                "name": "outAnimation",
                "type": "object",
                "doc": "\n",
                "default": "{preserveEndState: false, replacePrevious: true}"
            }
        ],
        "events": []
    },
    "Ext.fx.runner.Css": {
        "type": "Ext.fx.runner.Css",
        "configs": [],
        "events": []
    },
    "Ext.fx.runner.CssAnimation": {
        "type": "Ext.fx.runner.CssAnimation",
        "configs": [],
        "events": []
    },
    "Ext.fx.runner.CssTransition": {
        "type": "Ext.fx.runner.CssTransition",
        "configs": [],
        "events": []
    },
    "Ext.fx.target.Component": {
        "type": "Ext.fx.target.Component",
        "doc": "<p>This class represents a animation target for a Ext.Component. In general this class will not be\ncreated directly, the Ext.Component will be passed to the animation and\nand the appropriate target will be created.</p>",
        "configs": [],
        "events": []
    },
    "Ext.fx.target.CompositeElement": {
        "type": "Ext.fx.target.CompositeElement",
        "doc": "<p>This class represents a animation target for a Ext.CompositeElement. It allows\neach Ext.dom.Element in the group to be animated as a whole. In general this class will not be\ncreated directly, the Ext.CompositeElement will be passed to the animation and\nand the appropriate target will be created.</p>",
        "configs": [],
        "events": []
    },
    "Ext.fx.target.CompositeElementCSS": {
        "type": "Ext.fx.target.CompositeElementCSS",
        "doc": "<p>This class represents a animation target for a Ext.CompositeElement, where the\nconstituent elements support CSS based animation. It allows each Ext.dom.Element in\nthe group to be animated as a whole. In general this class will not be created directly,\nthe Ext.CompositeElement will be passed to the animation and the appropriate target\nwill be created.</p>",
        "configs": [],
        "events": []
    },
    "Ext.fx.target.CompositeSprite": {
        "type": "Ext.fx.target.CompositeSprite",
        "doc": "<p>This class represents a animation target for a Ext.draw.sprite.Composite. It allows\neach Ext.draw.sprite.Sprite in the group to be animated as a whole. In general this class will not be\ncreated directly, the Ext.draw.sprite.Composite will be passed to the animation and\nand the appropriate target will be created.</p>",
        "configs": [],
        "events": []
    },
    "Ext.fx.target.Element": {
        "type": "Ext.fx.target.Element",
        "doc": "<p>This class represents a animation target for an Ext.dom.Element. In general this class will not be\ncreated directly, the Ext.dom.Element will be passed to the animation and\nand the appropriate target will be created.</p>",
        "configs": [],
        "events": []
    },
    "Ext.fx.target.ElementCSS": {
        "type": "Ext.fx.target.ElementCSS",
        "doc": "<p>This class represents a animation target for an Ext.dom.Element that supports CSS\nbased animation. In general this class will not be created directly, the Ext.dom.Element\nwill be passed to the animation and the appropriate target will be created.</p>",
        "configs": [],
        "events": []
    },
    "Ext.fx.target.Sprite": {
        "type": "Ext.fx.target.Sprite",
        "doc": "<p>This class represents an animation target for a Ext.draw.sprite.Sprite. In general this class will not be\n created directly, the Ext.draw.sprite.Sprite will be passed to the animation and\n and the appropriate target will be created.</p>",
        "configs": [],
        "events": []
    },
    "Ext.fx.target.Target": {
        "type": "Ext.fx.target.Target",
        "doc": "<p>This class specifies a generic target for an animation. It provides a wrapper around a\nseries of different types of objects to allow for a generic animation API.\nA target can be a single object or a Composite object containing other objects that are\nto be animated. This class and it's subclasses are generally not created directly, the\nunderlying animation will create the appropriate Ext.fx.target.Target object by passing\nthe instance to be animated.</p>",
        "configs": [],
        "events": []
    },
    "Ext.grid.CellContext": {
        "type": "Ext.grid.CellContext",
        "doc": "<p>Internal utility class that provides a unique cell context.</p>",
        "configs": [],
        "events": []
    },
    "Ext.grid.CellEditor": {
        "type": "Ext.grid.CellEditor",
        "doc": "<p>Internal utility class that provides default configuration for cell editing.</p>",
        "configs": [
            {
                "name": "alignment",
                "type": "string",
                "doc": "<p>The position to align to (see Ext.util.Positionable.alignTo for more details).</p>",
                "default": "'l-l?'"
            },
            {
                "name": "cls",
                "type": "string/string[]",
                "doc": "<p>An optional extra CSS class that will be added to this component's Element.\nThe value can be a string, a list of strings separated by spaces, or an array of strings. This can be useful\nfor adding customized styles to the component or any of its children using standard CSS rules.</p>",
                "default": "Ext.baseCSSPrefix + 'small-editor ' + Ext.baseCSSPrefix + 'grid-editor ' + Ext.baseCSSPrefix + 'grid-cell-editor'"
            },
            {
                "name": "hideEl",
                "type": "boolean",
                "doc": "<p>False to keep the bound element visible while the editor is displayed</p>",
                "default": "false"
            },
            {
                "name": "shadow",
                "type": "boolean/string",
                "doc": "<p>\"sides\" for sides/bottom only, \"frame\" for 4-way shadow, and \"drop\" for bottom-right shadow.</p>",
                "default": "false"
            },
            {
                "name": "shim",
                "type": "boolean",
                "doc": "<p><code>true</code> to enable an iframe shim for this Component to keep\nwindowed objects from showing through.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.grid.ColumnComponentLayout": {
        "type": "Ext.grid.ColumnComponentLayout",
        "doc": "<p>Component layout for grid column headers which have a title element at the top followed by content.</p>",
        "configs": [
            {
                "name": "setWidthInDom",
                "type": "boolean",
                "doc": "<p>When publishing width of an auto Component, it is usually not written to the DOM.\nSetting this to <code>true</code> overrides this behaviour.</p>",
                "default": "true"
            }
        ],
        "events": []
    },
    "Ext.grid.ColumnLayout": {
        "type": "Ext.grid.ColumnLayout",
        "doc": "<p>This class is used only by the grid's HeaderContainer docked child.</p>",
        "configs": [],
        "events": []
    },
    "Ext.grid.ColumnManager": {
        "type": "Ext.grid.ColumnManager",
        "doc": "<p>Manages and provides information about a TablePanel's <em>visible leaf</em> columns.</p>",
        "configs": [],
        "events": []
    },
    "Ext.grid.NavigationModel": {
        "type": "Ext.grid.NavigationModel",
        "doc": "<p>This class listens for key events fired from a GridPanel, and moves the currently focused item\nby adding the class focusCls.</p>",
        "configs": [],
        "events": [
            {
                "name": "navigate",
                "params": "event(Object) eOpts(Object)",
                "doc": "<p>Fired when a key has been used to navigate around the view.</p>"
            }
        ]
    },
    "Ext.grid.Panel": {
        "type": "Ext.grid.Panel",
        "doc": "<p>Grids are an excellent way of showing large amounts of tabular data on the client side. Essentially a supercharged\n<code>&lt;table&gt;</code>, GridPanel makes it easy to fetch, sort and filter large amounts of data.</p>",
        "configs": [
            {
                "name": "columns",
                "type": "ext.grid.column.column[]/object",
                "doc": "<p>An array of column definition objects which define all columns that appear in this\ngrid. Each column definition provides the header text for the column, and a definition of where the data for that\ncolumn comes from.</p>",
                "default": null
            },
            {
                "name": "rowLines",
                "type": "boolean",
                "doc": "<p>False to remove row line styling</p>",
                "default": "true"
            },
            {
                "name": "viewType",
                "type": "string",
                "doc": "<p>An xtype of view to use. This is automatically set to 'tableview' by Grid\nand to 'treeview' by Tree.</p>",
                "default": "'tableview'"
            }
        ],
        "events": [
            {
                "name": "beforereconfigure",
                "params": "this(Ext.grid.Panel) store(Ext.data.Store) columns(Object[]) oldStore(Ext.data.Store) oldColumns(Ext.grid.column.Column[]) eOpts(Object)",
                "doc": "<p>Fires before a reconfigure to enable modification of incoming Store and columns.</p>"
            },
            {
                "name": "reconfigure",
                "params": "this(Ext.grid.Panel) store(Ext.data.Store) columns(Object[]) oldStore(Ext.data.Store) oldColumns(Ext.grid.column.Column[]) eOpts(Object)",
                "doc": "<p>Fires after a reconfigure.</p>"
            }
        ]
    },
    "Ext.grid.RowEditor": {
        "type": "Ext.grid.RowEditor",
        "doc": "<p>Internal utility class used to provide row editing functionality. For developers, they should use\nthe RowEditing plugin to use this functionality with a grid.</p>",
        "configs": [
            {
                "name": "border",
                "type": "boolean",
                "doc": "<p>Specify as <code>false</code> to render the Panel with zero width borders.</p>",
                "default": "false"
            },
            {
                "name": "hideMode",
                "type": "string",
                "doc": "<p>Change the hideMode to offsets so that we get accurate measurements when\nthe roweditor is hidden for laying out things like a TriggerField.</p>",
                "default": "'offsets'"
            }
        ],
        "events": []
    },
    "Ext.grid.RowEditorButtons": {
        "type": "Ext.grid.RowEditorButtons",
        "doc": "<p>Private Container class used by the Ext.grid.RowEditor to hold its buttons.</p>",
        "configs": [
            {
                "name": "frame",
                "type": "boolean",
                "doc": "<p>Specify as <code>true</code> to have the Component inject framing elements within the Component at render time to provide a\ngraphical rounded frame around the Component content.</p>",
                "default": "true"
            },
            {
                "name": "shrinkWrap",
                "type": "boolean/number",
                "doc": "<p>If this property is a number, it is interpreted as follows:</p>",
                "default": "true"
            }
        ],
        "events": []
    },
    "Ext.grid.ViewDropZone": {
        "type": "Ext.grid.ViewDropZone",
        "configs": [],
        "events": []
    },
    "Ext.grid.column.Action": {
        "type": "Ext.grid.column.Action",
        "doc": "<p>A Grid header type which renders an icon, or a series of icons in a grid cell, and offers a scoped click\nhandler for each icon.</p>",
        "configs": [
            {
                "name": "altText",
                "type": "string",
                "doc": "<p>The alt text to use for the image element.</p>",
                "default": "''"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "doc": "<p>If true, the action will not respond to click events, and will be displayed semi-opaque.</p>",
                "default": null
            },
            {
                "name": "getClass",
                "type": "function",
                "doc": "<p>A function which returns the CSS class to apply to the icon image.</p>",
                "default": null
            },
            {
                "name": "getTip",
                "type": "function",
                "doc": "<p>A function which returns the tooltip string for any row.</p>",
                "default": null
            },
            {
                "name": "handler",
                "type": "function",
                "doc": "<p>A function called when the icon is clicked.</p>",
                "default": null
            },
            {
                "name": "icon",
                "type": "string",
                "doc": "<p>The URL of an image to display as the clickable element in the column.</p>",
                "default": null
            },
            {
                "name": "iconCls",
                "type": "string",
                "doc": "<p>A CSS class to apply to the icon image. To determine the class dynamically, configure the Column with\na <code>getClass</code> function.</p>",
                "default": null
            },
            {
                "name": "isDisabled",
                "type": "function",
                "doc": "<p>A function which determines whether the action item for any row is disabled and returns <code>true</code> or <code>false</code>.</p>",
                "default": null
            },
            {
                "name": "items",
                "type": "object[]",
                "doc": "<p>An Array which may contain multiple icon definitions, each element of which may contain:</p>",
                "default": null
            },
            {
                "name": "menuText",
                "type": "string",
                "doc": "<p>Text to display in this column's menu item if no text was specified as a header.</p>",
                "default": "<i>Actions</i>"
            },
            {
                "name": "scope",
                "type": "object",
                "doc": "<p>The scope (<code>this</code> reference) in which the <code>handler</code>, <code>getClass</code>, <code>isDisabled</code> and <code>getTip</code> fuctions are executed.\nDefaults to this Column.</p>",
                "default": null
            },
            {
                "name": "sortable",
                "type": "boolean",
                "doc": "<p>False to disable sorting of this column. Whether local/remote sorting is used is specified in\n<code>Ext.data.Store.remoteSort</code>.</p>",
                "default": "false"
            },
            {
                "name": "stopSelection",
                "type": "boolean",
                "doc": "<p>Prevent grid selection upon click.\nBeware that if you allow for the selection to happen then the selection model will steal focus from\nany possible floating window (like a message box) raised in the handler. This will prevent closing the\nwindow when pressing the Escape button since it will no longer contain a focused component.</p>",
                "default": "true"
            },
            {
                "name": "tooltip",
                "type": "string",
                "doc": "<p>A tooltip message to be displayed on hover. Ext.tip.QuickTipManager must\nhave been initialized.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.grid.column.Boolean": {
        "type": "Ext.grid.column.Boolean",
        "doc": "<p>A Column definition class which renders boolean data fields.  See the xtype\nconfig option of Ext.grid.column.Column for more details.</p>",
        "configs": [
            {
                "name": "falseText",
                "type": "string",
                "doc": "<p>The string returned by the renderer when the column value is falsey (but not undefined).</p>",
                "default": "'false'"
            },
            {
                "name": "producesHTML",
                "type": "boolean",
                "doc": "<p>This flag indicates that the renderer produces HTML.</p>",
                "default": "false"
            },
            {
                "name": "trueText",
                "type": "string",
                "doc": "<p>The string returned by the renderer when the column value is not falsey.</p>",
                "default": "'true'"
            },
            {
                "name": "undefinedText",
                "type": "string",
                "doc": "<p>The string returned by the renderer when the column value is undefined.</p>",
                "default": "'&#160;'"
            }
        ],
        "events": []
    },
    "Ext.grid.column.Check": {
        "type": "Ext.grid.column.Check",
        "doc": "<p>A Column subclass which renders a checkbox in each column cell which toggles the truthiness of the associated data field on click.</p>",
        "configs": [
            {
                "name": "stopSelection",
                "type": "boolean",
                "doc": "<p>Prevent grid selection upon mousedown.</p>",
                "default": "true"
            },
            {
                "name": "tdCls",
                "type": "string",
                "doc": "<p>A CSS class names to apply to the table cells for this column.</p>",
                "default": "Ext.baseCSSPrefix + 'grid-cell-checkcolumn'"
            }
        ],
        "events": [
            {
                "name": "beforecheckchange",
                "params": "this(Ext.ux.CheckColumn) rowIndex(Number) checked(Boolean) eOpts(Object)",
                "doc": "<p>Fires when before checked state of a row changes.\nThe change may be vetoed by returning <code>false</code> from a listener.</p>"
            },
            {
                "name": "checkchange",
                "params": "this(Ext.ux.CheckColumn) rowIndex(Number) checked(Boolean) eOpts(Object)",
                "doc": "<p>Fires when the checked state of a row changes</p>"
            }
        ]
    },
    "Ext.grid.column.Column": {
        "type": "Ext.grid.column.Column",
        "doc": "<p>This class specifies the definition for a column inside a Ext.grid.Panel. It encompasses\nboth the grid header configuration as well as displaying data within the grid itself. If the\ncolumns configuration is specified, this column will become a column group and can\ncontain other columns inside. In general, this class will not be created directly, rather\nan array of column configurations will be passed to the grid:</p>",
        "configs": [
            {
                "name": "align",
                "type": "string",
                "doc": "<p>Sets the alignment of the header and rendered columns.\nPossible values are: <code>'left'</code>, <code>'center'</code>, and <code>'right'</code>.</p>",
                "default": "'left'"
            },
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>TODO: Implement visible triggers for touch.\nStyling will need tweaking - looks a bit ugly with all triggers always visible.\n   platformConfig: [{\n       platform: 'tablet',\n       triggerVisible: 'true'\n   }],</p>",
                "default": "Ext.baseCSSPrefix + 'column-header'"
            },
            {
                "name": "cellWrap",
                "type": "boolean",
                "doc": "<p>True to allow whitespace in this column's cells to wrap, and cause taller column height where\nnecessary.</p>",
                "default": "false"
            },
            {
                "name": "childEls",
                "type": "object/string[]/object[]",
                "doc": "<p>The canonical form of <code>childEls</code> is an object keyed by child's property name\nwith values that are objects with the following properties.</p>",
                "default": "['titleEl', 'triggerEl', 'textEl']"
            },
            {
                "name": "columns",
                "type": "object[]",
                "doc": "<p>An optional array of sub-column definitions. This column becomes a group, and houses the columns defined in the\n<code>columns</code> config.</p>",
                "default": null
            },
            {
                "name": "componentLayout",
                "type": "string/object",
                "doc": "<p>The sizing and positioning of a Component's internal Elements is the responsibility of the Component's layout\nmanager which sizes a Component's internal structure in response to the Component being sized.</p>",
                "default": "'columncomponent'"
            },
            {
                "name": "dataIndex",
                "type": "string",
                "doc": "<p>The name of the field in the grid's Ext.data.Store's Ext.data.Model definition from\nwhich to draw the column's value. <strong>Required.</strong></p>",
                "default": null
            },
            {
                "name": "detachOnRemove",
                "type": "boolean",
                "doc": "<p>So that when removing from group headers which are then empty and then get destroyed, there's no child DOM left</p>",
                "default": "true"
            },
            {
                "name": "draggable",
                "type": "boolean",
                "doc": "<p>False to disable drag-drop reordering of this column.</p>",
                "default": "true"
            },
            {
                "name": "editRenderer",
                "type": "function/string",
                "doc": "<p>A renderer to be used in conjunction with RowEditing. This renderer is used to\ndisplay a custom value for non-editable fields.</p>",
                "default": null
            },
            {
                "name": "editor",
                "type": "object/string",
                "doc": "<p>An optional xtype or config object for a Field to use for editing.\nOnly applicable if the grid is using an Editing plugin.</p>",
                "default": null
            },
            {
                "name": "emptyCellText",
                "type": "string",
                "doc": "<p>The text to diplay in empty cells (cells with a value of <code>undefined</code>, <code>null</code>, or <code>''</code>).</p>",
                "default": "undefined"
            },
            {
                "name": "enableFocusableContainer",
                "type": "boolean",
                "doc": "<p>Enable or disable\nnavigation with arrow keys for this FocusableContainer. This option may\nbe useful with nested FocusableContainers such as Grid column headers,\nwhen only the root container should handle keyboard events.</p>",
                "default": "false"
            },
            {
                "name": "field",
                "type": "object/string",
                "doc": "<p>Alias for editor.</p>",
                "default": null
            },
            {
                "name": "fixed",
                "type": "boolean",
                "doc": "<p>True to prevent the column from being resizable.</p>",
                "default": null
            },
            {
                "name": "formatter",
                "type": "string",
                "doc": "<p>This config accepts a format specification as would be used in a <code>Ext.Template</code>\nformatted token. For example <code>'round(2)'</code> to round numbers to 2 decimal places\nor <code>'date(\"Y-m-d\")'</code> to format a Date.</p>",
                "default": null
            },
            {
                "name": "groupable",
                "type": "boolean",
                "doc": "<p>If the grid uses a Ext.grid.feature.Grouping, this option may be used to disable the header menu\nitem to group by the column selected. By default, the header menu group option is enabled. Set to false to\ndisable (but still show) the group option in the header menu for the column.</p>",
                "default": null
            },
            {
                "name": "header",
                "type": "string",
                "doc": "<p>The header text.</p>",
                "default": null
            },
            {
                "name": "headerWrap",
                "type": "boolean",
                "doc": "<p>The default setting indicates that external CSS rules dictate that the title is <code>white-space: nowrap</code> and\ntherefore, width cannot affect the measured height by causing text wrapping. This is what the Sencha-supplied\nstyles set. If you change those styles to allow text wrapping, you must set this to <code>true</code>.</p>",
                "default": "false"
            },
            {
                "name": "hideable",
                "type": "boolean",
                "doc": "<p>False to prevent the user from hiding this column.</p>",
                "default": "true"
            },
            {
                "name": "lockable",
                "type": "boolean",
                "doc": "<p>If the grid is configured with enableLocking, or has columns which are\nconfigured with a locked value, this option may be used to disable user-driven locking or unlocking\nof this column. This column will remain in the side into which its own locked configuration placed it.</p>",
                "default": null
            },
            {
                "name": "locked",
                "type": "boolean",
                "doc": "<p>True to lock this column in place.  Implicitly enables locking on the grid.\nSee also Ext.grid.Panel.enableLocking.</p>",
                "default": "false"
            },
            {
                "name": "menuDisabled",
                "type": "boolean",
                "doc": "<p>True to disable the column header menu containing sort/hide options.</p>",
                "default": "false"
            },
            {
                "name": "menuText",
                "type": "string",
                "doc": "<p>The text to render in the column visibility selection menu for this column.  If not\nspecified, will default to the text value.</p>",
                "default": null
            },
            {
                "name": "producesHTML",
                "type": "boolean",
                "doc": "<p>This flag indicates that the renderer produces HTML.</p>",
                "default": "true"
            },
            {
                "name": "renderTpl",
                "type": "ext.xtemplate/string/string[]",
                "doc": "<p>An XTemplate used to create the internal structure inside this Component's encapsulating\nElement.</p>",
                "default": "['<div id=\"{id}-titleEl\" data-ref=\"titleEl\" {tipMarkup}class=\"', Ext.baseCSSPrefix, 'column-header-inner<tpl if=\"!$comp.isContainer\"> ', Ext.baseCSSPrefix, 'leaf-column-header</tpl>', '<tpl if=\"empty\"> ', Ext.baseCSSPrefix, 'column-header-inner-empty</tpl>\">', '<span class=\"', Ext.baseCSSPrefix, 'column-header-text-container\">', '<span class=\"', Ext.baseCSSPrefix, 'column-header-text-wrapper\">', '<span id=\"{id}-textEl\" data-ref=\"textEl\" class=\"', Ext.baseCSSPrefix, 'column-header-text', '{childElCls}\">', '{text}', '</span>', '</span>', '</span>', '<tpl if=\"!menuDisabled\">', '<div id=\"{id}-triggerEl\" data-ref=\"triggerEl\" role=\"presentation\" class=\"', Ext.baseCSSPrefix, 'column-header-trigger', '{childElCls}\" style=\"{triggerStyle}\"></div>', '</tpl>', '</div>', '{%this.renderContainer(out,values)%}']"
            },
            {
                "name": "renderer",
                "type": "function/string",
                "doc": "<p>A renderer is an 'interceptor' method which can be used to transform data (value, appearance, etc.)\nbefore it is rendered. Example:</p>",
                "default": "false"
            },
            {
                "name": "resizable",
                "type": "boolean",
                "doc": "<p>False to prevent the column from being resizable.</p>",
                "default": "true"
            },
            {
                "name": "scope",
                "type": "object",
                "doc": "<p>The scope to use when calling the renderer function.</p>",
                "default": null
            },
            {
                "name": "sortable",
                "type": "boolean",
                "doc": "<p>False to disable sorting of this column. Whether local/remote sorting is used is specified in\n<code>Ext.data.Store.remoteSort</code>.</p>",
                "default": "true"
            },
            {
                "name": "stateId",
                "type": "string",
                "doc": "<p>An identifier which identifies this column uniquely within the owning grid's state.</p>",
                "default": null
            },
            {
                "name": "summaryRenderer",
                "type": "function/string",
                "doc": "<p>A renderer to be used in conjunction with the Summary or\nGroupingSummary features. This renderer is used to\ndisplay a summary value for this column.</p>",
                "default": null
            },
            {
                "name": "tabIndex",
                "type": "number",
                "doc": "<p>DOM tabIndex attribute for this Focusable</p>",
                "default": null
            },
            {
                "name": "tdCls",
                "type": "string",
                "doc": "<p>A CSS class names to apply to the table cells for this column.</p>",
                "default": "''"
            },
            {
                "name": "text",
                "type": "string",
                "doc": "<p>The header text to be used as innerHTML (html tags are accepted) to display in the Grid.\n<strong>Note</strong>: to have a clickable header with no text displayed you can use the default of <code>&amp;#160;</code> aka <code>&amp;nbsp;</code>.</p>",
                "default": "'&#160;'"
            },
            {
                "name": "tooltip",
                "type": "string",
                "doc": "<p>A tooltip to display for this column header</p>",
                "default": null
            },
            {
                "name": "tooltipType",
                "type": "string",
                "doc": "<p>The type of tooltip to use. Either 'qtip' for QuickTips or 'title' for title attribute.</p>",
                "default": "\"qtip\""
            },
            {
                "name": "triggerVisible",
                "type": "boolean",
                "doc": "\n",
                "default": "false"
            },
            {
                "name": "updater",
                "type": "function/string",
                "doc": "<p>An updater is a method which is used when records are updated, and an <em>existing</em> grid row needs updating.\nThe method is passed the cell element and may manipulate it in any way.</p>",
                "default": null
            },
            {
                "name": "variableRowHeight",
                "type": "boolean",
                "doc": "<p>True to indicate that data in this column may take on an unpredictable height, possibly differing from row to row.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.grid.column.Date": {
        "type": "Ext.grid.column.Date",
        "doc": "<p>A Column definition class which renders a passed date according to the default locale, or a configured\nformat.</p>",
        "configs": [
            {
                "name": "format",
                "type": "string",
                "doc": "<p>A formatting string as used by Ext.Date.format to format a Date for this Column.</p>",
                "default": null
            },
            {
                "name": "producesHTML",
                "type": "boolean",
                "doc": "<p>This flag indicates that the renderer produces HTML.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.grid.column.Number": {
        "type": "Ext.grid.column.Number",
        "doc": "<p>A Column definition class which renders a numeric data field according to a format string.</p>",
        "configs": [
            {
                "name": "format",
                "type": "string",
                "doc": "<p>A formatting string as used by Ext.util.Format.number to format a numeric value for this Column.</p>",
                "default": "'0,000.00'"
            },
            {
                "name": "producesHTML",
                "type": "boolean",
                "doc": "<p>This flag indicates that the renderer produces HTML.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.grid.column.RowNumberer": {
        "type": "Ext.grid.column.RowNumberer",
        "doc": "<p>A special type of Grid Ext.grid.column.Column that provides automatic\nrow numbering.</p>",
        "configs": [
            {
                "name": "align",
                "type": "string",
                "doc": "<p>Sets the alignment of the header and rendered columns.\nPossible values are: <code>'left'</code>, <code>'center'</code>, and <code>'right'</code>.</p>",
                "default": "'right'"
            },
            {
                "name": "cls",
                "type": "string/string[]",
                "doc": "<p>An optional extra CSS class that will be added to this component's Element.\nThe value can be a string, a list of strings separated by spaces, or an array of strings. This can be useful\nfor adding customized styles to the component or any of its children using standard CSS rules.</p>",
                "default": "Ext.baseCSSPrefix + 'row-numberer'"
            },
            {
                "name": "dataIndex",
                "type": "string",
                "doc": "<p>The name of the field in the grid's Ext.data.Store's Ext.data.Model definition from\nwhich to draw the column's value. <strong>Required.</strong></p>",
                "default": "''"
            },
            {
                "name": "draggable",
                "type": "boolean",
                "doc": "<p>False to disable drag-drop reordering of this column.</p>",
                "default": "false"
            },
            {
                "name": "hideable",
                "type": "boolean",
                "doc": "<p>False to prevent the user from hiding this column.</p>",
                "default": "false"
            },
            {
                "name": "lockable",
                "type": "boolean",
                "doc": "<p>May not be moved from its preferred locked side when grid is enableLocking:true</p>",
                "default": "false"
            },
            {
                "name": "menuDisabled",
                "type": "boolean",
                "doc": "<p>True to disable the column header menu containing sort/hide options.</p>",
                "default": "true"
            },
            {
                "name": "producesHTML",
                "type": "boolean",
                "doc": "<p>This flag indicates that the renderer produces HTML.</p>",
                "default": "false"
            },
            {
                "name": "resizable",
                "type": "boolean",
                "doc": "<p>private</p>",
                "default": "false"
            },
            {
                "name": "tdCls",
                "type": "string",
                "doc": "<p>A CSS class names to apply to the table cells for this column.</p>",
                "default": "Ext.baseCSSPrefix + 'grid-cell-row-numberer ' + Ext.baseCSSPrefix + 'grid-cell-special'"
            },
            {
                "name": "text",
                "type": "string",
                "doc": "<p>Any valid text or HTML fragment to display in the header cell for the row number column.</p>",
                "default": "\"&#160;\""
            },
            {
                "name": "width",
                "type": "number",
                "doc": "<p>The default width in pixels of the row number column.</p>",
                "default": "23"
            }
        ],
        "events": []
    },
    "Ext.grid.column.Template": {
        "type": "Ext.grid.column.Template",
        "doc": "<p>A Column definition class which renders a value by processing a Model's\ndata using a configured\nXTemplate.</p>",
        "configs": [
            {
                "name": "tpl",
                "type": "string/ext.xtemplate",
                "doc": "<p>An XTemplate, or an XTemplate <em>definition string</em> to use to process a\nModel's data object to produce a cell's rendered value.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.grid.column.Widget": {
        "type": "Ext.grid.column.Widget",
        "doc": "<p>A widget column is configured with a widget config object which specifies an\nxtype to indicate which type of Widget or Component belongs\nin the cells of this column.</p>",
        "configs": [
            {
                "name": "defaultCellUI",
                "type": "object",
                "doc": "<p>{Object}\nA map of xtype to Ext.Component.ui names to use when using Components in this column.</p>",
                "default": null
            },
            {
                "name": "onWidgetAttach",
                "type": "function",
                "doc": "<p>A function that will be called when a widget is attached to a record. This may be useful for\ndoing any post-processing.</p>",
                "default": null
            },
            {
                "name": "sortable",
                "type": "boolean",
                "doc": "<p>False to disable sorting of this column. Whether local/remote sorting is used is specified in\n<code>Ext.data.Store.remoteSort</code>.</p>",
                "default": "false"
            },
            {
                "name": "stopSelection",
                "type": "boolean",
                "doc": "<p>Prevent grid selection upon click on the widget.</p>",
                "default": "true"
            },
            {
                "name": "widget",
                "type": "object",
                "doc": "<p>A config object containing an xtype.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.grid.feature.AbstractSummary": {
        "type": "Ext.grid.feature.AbstractSummary",
        "doc": "<p>A small abstract class that contains the shared behaviour for any summary\ncalculations to be used in the grid.</p>",
        "configs": [
            {
                "name": "showSummaryRow",
                "type": "boolean",
                "doc": "<p>True to show the summary row.</p>",
                "default": "true"
            }
        ],
        "events": []
    },
    "Ext.grid.feature.Feature": {
        "type": "Ext.grid.feature.Feature",
        "doc": "<p>A feature is a type of plugin that is specific to the Ext.grid.Panel. It provides several\nhooks that allows the developer to inject additional functionality at certain points throughout the\ngrid creation cycle. This class provides the base template methods that are available to the developer,\nit should be extended.</p>",
        "configs": [],
        "events": []
    },
    "Ext.grid.feature.GroupStore": {
        "type": "Ext.grid.feature.GroupStore",
        "doc": "<p>Private record store class which takes the place of the view's data store to provide a grouped\nview of the data when the Grouping feature is used.</p>",
        "configs": [],
        "events": []
    },
    "Ext.grid.feature.Grouping": {
        "type": "Ext.grid.feature.Grouping",
        "doc": "<p>This feature allows to display the grid rows aggregated into groups as specified by the grouper\nspecified on the Store. The group will show the title for the group name and then the appropriate records for the group\nunderneath. The groups can also be expanded and collapsed.</p>",
        "configs": [
            {
                "name": "collapsible",
                "type": "boolean",
                "doc": "<p>Set to <code>false</code> to disable collapsing groups from the UI.</p>",
                "default": "true"
            },
            {
                "name": "depthToIndent",
                "type": "number",
                "doc": "<p>Number of pixels to indent per grouping level</p>",
                "default": "17"
            },
            {
                "name": "enableGroupingMenu",
                "type": "boolean",
                "doc": "<p>True to enable the grouping control in the header menu.</p>",
                "default": "true"
            },
            {
                "name": "enableNoGroups",
                "type": "boolean",
                "doc": "<p>True to allow the user to turn off grouping.</p>",
                "default": "true"
            },
            {
                "name": "groupByText",
                "type": "string",
                "doc": "<p>Text displayed in the grid header menu for grouping by header.</p>",
                "default": "\"Group by this field\""
            },
            {
                "name": "groupHeaderTpl",
                "type": "string/array/ext.template",
                "doc": "<p>A string Template snippet, an array of strings (optionally followed by an object containing Template methods) to be used to construct a Template, or a Template instance.</p>",
                "default": "'{columnName}: {name}'"
            },
            {
                "name": "hideGroupedHeader",
                "type": "boolean",
                "doc": "<p>True to hide the header that is currently grouped.</p>",
                "default": "false"
            },
            {
                "name": "remoteRoot",
                "type": "string",
                "doc": "<p>The name of the property which contains the Array of summary objects.\nIt allows to use server-side calculated summaries.</p>",
                "default": "undefined"
            },
            {
                "name": "showGroupsText",
                "type": "string",
                "doc": "<p>Text displayed in the grid header for enabling/disabling grouping.</p>",
                "default": "\"Show in groups\""
            },
            {
                "name": "showSummaryRow",
                "type": "boolean",
                "doc": "<p></p>",
                "default": "false"
            },
            {
                "name": "startCollapsed",
                "type": "boolean",
                "doc": "<p>True to start all groups collapsed.</p>",
                "default": "false"
            }
        ],
        "events": [
            {
                "name": "groupclick",
                "params": "view(Ext.view.Table) node(HTMLElement) group(String) e(Ext.event.Event) eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "groupcollapse",
                "params": "view(Ext.view.Table) node(HTMLElement) group(String) eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "groupcontextmenu",
                "params": "view(Ext.view.Table) node(HTMLElement) group(String) e(Ext.event.Event) eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "groupdblclick",
                "params": "view(Ext.view.Table) node(HTMLElement) group(String) e(Ext.event.Event) eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "groupexpand",
                "params": "view(Ext.view.Table) node(HTMLElement) group(String) eOpts(Object)",
                "doc": "\n"
            }
        ]
    },
    "Ext.grid.feature.GroupingSummary": {
        "type": "Ext.grid.feature.GroupingSummary",
        "doc": "<p>This feature adds an aggregate summary row at the bottom of each group that is provided\nby the Ext.grid.feature.Grouping feature. There are two aspects to the summary:</p>",
        "configs": [
            {
                "name": "showSummaryRow",
                "type": "boolean",
                "doc": "<p>True to show the summary row.</p>",
                "default": "true"
            }
        ],
        "events": []
    },
    "Ext.grid.feature.RowBody": {
        "type": "Ext.grid.feature.RowBody",
        "doc": "<p>The rowbody feature enhances the grid's markup to have an additional\ntr -> td -> div which spans the entire width of the original row.</p>",
        "configs": [
            {
                "name": "bodyBefore",
                "type": "boolean",
                "doc": "<p>Configure as <code>true</code> to put the row expander body <em>before</em> the data row.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.grid.feature.Summary": {
        "type": "Ext.grid.feature.Summary",
        "doc": "<p>This feature is used to place a summary row at the bottom of the grid. If using a grouping,\nsee Ext.grid.feature.GroupingSummary. There are 2 aspects to calculating the summaries,\ncalculation and rendering.</p>",
        "configs": [
            {
                "name": "dock",
                "type": "string",
                "doc": "<p>Configure <code>'top'</code> or <code>'bottom'</code> top create a fixed summary row either above or below the scrollable table.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.grid.filters.Filters": {
        "type": "Ext.grid.filters.Filters",
        "doc": "<p>This class is a grid plugin that adds a simple and flexible\npresentation for store filters.</p>",
        "configs": [
            {
                "name": "menuFilterText",
                "type": "string",
                "doc": "<p>The text for the filters menu.</p>",
                "default": "\"Filters\""
            },
            {
                "name": "pluginId",
                "type": "string",
                "doc": "<p>A name for the plugin that can be set at creation time to then retrieve the plugin\nthrough getPlugin method.  For example:</p>",
                "default": "'gridfilters'"
            },
            {
                "name": "showMenu",
                "type": "boolean",
                "doc": "<p>Defaults to true, including a filter submenu in the default header menu.</p>",
                "default": "true"
            },
            {
                "name": "stateId",
                "type": "string",
                "doc": "<p>Name of the value to be used to store state information.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.grid.filters.filter.Base": {
        "type": "Ext.grid.filters.filter.Base",
        "doc": "<p>Abstract base class for filter implementations.</p>",
        "configs": [
            {
                "name": "active",
                "type": "boolean",
                "doc": "<p>Indicates the initial status of the filter (defaults to false).</p>",
                "default": "false"
            },
            {
                "name": "dataIndex",
                "type": "string",
                "doc": "<p>The Ext.data.Store dataIndex of the field this filter represents.\nThe dataIndex does not actually have to exist in the store.</p>",
                "default": null
            },
            {
                "name": "itemDefaults",
                "type": "object",
                "doc": "<p>The default configuration options for any menu items created by this filter.</p>",
                "default": null
            },
            {
                "name": "menuDefaults",
                "type": "object",
                "doc": "\n",
                "default": "{xtype: 'menu'}"
            },
            {
                "name": "updateBuffer",
                "type": "number",
                "doc": "<p>Number of milliseconds to wait after user interaction to fire an update. Only supported\nby filters: 'list', 'numeric', and 'string'.</p>",
                "default": "500"
            }
        ],
        "events": [
            {
                "name": "activate",
                "params": "this(Ext.grid.filters.filter.Filter) eOpts(Object)",
                "doc": "<p>Fires when an inactive filter becomes active</p>"
            },
            {
                "name": "deactivate",
                "params": "this(Ext.grid.filters.filter.Filter) eOpts(Object)",
                "doc": "<p>Fires when an active filter becomes inactive</p>"
            },
            {
                "name": "update",
                "params": "this(Ext.grid.filters.filter.Filter) eOpts(Object)",
                "doc": "<p>Fires when a filter configuration has changed</p>"
            }
        ]
    },
    "Ext.grid.filters.filter.Boolean": {
        "type": "Ext.grid.filters.filter.Boolean",
        "doc": "<p>Boolean filters use unique radio group IDs (so you can have more than one!)</p>",
        "configs": [
            {
                "name": "defaultValue",
                "type": "boolean",
                "doc": "<p>Set this to null if you do not want either option to be checked by default. Defaults to false.</p>",
                "default": "false"
            },
            {
                "name": "noText",
                "type": "string",
                "doc": "<p>Defaults to 'No'.</p>",
                "default": "'No'"
            },
            {
                "name": "updateBuffer",
                "type": "number",
                "doc": "<p>Number of milliseconds to wait after user interaction to fire an update. Only supported\nby filters: 'list', 'numeric', and 'string'.</p>",
                "default": "0"
            },
            {
                "name": "yesText",
                "type": "string",
                "doc": "<p>Defaults to 'Yes'.</p>",
                "default": "'Yes'"
            }
        ],
        "events": []
    },
    "Ext.grid.filters.filter.Date": {
        "type": "Ext.grid.filters.filter.Date",
        "doc": "<p>Filter by a configurable Ext.picker.DatePicker menu</p>",
        "configs": [
            {
                "name": "dateFormat",
                "type": "string",
                "doc": "<p>The date format to return when using getValue.\nDefaults to Ext.Date.defaultFormat.</p>",
                "default": null
            },
            {
                "name": "fields",
                "type": "object",
                "doc": "<p>Configures field items individually. These properties override those defined\nby <code>itemDefaults</code>.</p>",
                "default": "{lt: {text: 'Before'}, gt: {text: 'After'}, eq: {text: 'On'}}"
            },
            {
                "name": "itemDefaults",
                "type": "object",
                "doc": "<p>The default configuration options for any menu items created by this filter.</p>",
                "default": "{xtype: 'menucheckitem', selectOnFocus: true, width: 125, menu: {layout: 'auto', plain: true}}"
            },
            {
                "name": "maxDate",
                "type": "date",
                "doc": "<p>Allowable date as passed to the Ext.DatePicker\nDefaults to undefined.</p>",
                "default": null
            },
            {
                "name": "minDate",
                "type": "date",
                "doc": "<p>Allowable date as passed to the Ext.DatePicker\nDefaults to undefined.</p>",
                "default": null
            },
            {
                "name": "pickerDefaults",
                "type": "object",
                "doc": "<p>Configuration options for the date picker associated with each field.</p>",
                "default": "{xtype: 'datepicker', border: 0}"
            },
            {
                "name": "updateBuffer",
                "type": "number",
                "doc": "<p>Number of milliseconds to wait after user interaction to fire an update. Only supported\nby filters: 'list', 'numeric', and 'string'.</p>",
                "default": "0"
            }
        ],
        "events": []
    },
    "Ext.grid.filters.filter.List": {
        "type": "Ext.grid.filters.filter.List",
        "doc": "<p>List filters are able to be preloaded/backed by an Ext.data.Store to load\ntheir options the first time they are shown.</p>",
        "configs": [
            {
                "name": "idField",
                "type": "string",
                "doc": "<p>The field name for the <code>id</code> of records in this list's <code>store</code>. These values are\nused to populate the filter for the grid's store.</p>",
                "default": "\"id\""
            },
            {
                "name": "itemDefaults",
                "type": "object",
                "doc": "<p>See the documentation for the base class for\ndetails.</p>",
                "default": null
            },
            {
                "name": "labelField",
                "type": "string",
                "doc": "<p>The field name for the menu item text in the records in this list's <code>store</code>.</p>",
                "default": "\"text\""
            },
            {
                "name": "labelIndex",
                "type": "string",
                "doc": "<p>The field in the records of the grid's store from which the menu item text should be retrieved.\nThis field is only used when no <code>options</code> and no <code>store</code> is provided\nand the distinct value of the grid's store need to be generated dynamically.</p>",
                "default": null
            },
            {
                "name": "loadOnShow",
                "type": "boolean",
                "doc": "<p>Defaults to true.</p>",
                "default": "true"
            },
            {
                "name": "options",
                "type": "array",
                "doc": "<p>The data to be used to implicitly create a data store to back this list. This is used only when\nthe data source is <strong>local</strong>. If the data for the list is remote, use the store\nconfig instead.</p>",
                "default": null
            },
            {
                "name": "paramPrefix",
                "type": "string",
                "doc": "<p>Defaults to 'Loading...'.</p>",
                "default": null
            },
            {
                "name": "single",
                "type": "boolean",
                "doc": "<p>Specify true to group all items in this list into a single-select\nradio button group. Defaults to false.</p>",
                "default": "false"
            },
            {
                "name": "store",
                "type": "ext.data.store",
                "doc": "<p>The Ext.data.Store this list should use as its data source.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.grid.filters.filter.Number": {
        "type": "Ext.grid.filters.filter.Number",
        "doc": "<p>Filter type for number columns.</p>",
        "configs": [
            {
                "name": "emptyText",
                "type": "string",
                "doc": "<p>The empty text to show for each field.</p>",
                "default": "'Enter Number...'"
            },
            {
                "name": "fields",
                "type": "object",
                "doc": "<p>Configures field items individually. These properties override those defined\nby <code>itemDefaults</code>.</p>",
                "default": "{gt: {iconCls: Ext.baseCSSPrefix + 'grid-filters-gt', margin: '0 0 3px 0'}, lt: {iconCls: Ext.baseCSSPrefix + 'grid-filters-lt', margin: '0 0 3px 0'}, eq: {iconCls: Ext.baseCSSPrefix + 'grid-filters-eq', margin: 0}}"
            },
            {
                "name": "itemDefaults",
                "type": "object",
                "doc": "<p>The default configuration options for any menu items created by this filter.</p>",
                "default": "{xtype: 'numberfield', enableKeyEvents: true, hideEmptyLabel: false, labelSeparator: '', labelWidth: 29, selectOnFocus: false}"
            }
        ],
        "events": []
    },
    "Ext.grid.filters.filter.SingleFilter": {
        "type": "Ext.grid.filters.filter.SingleFilter",
        "doc": "<p>This abstract base class is used by grid filters that have a single\nstore filter.</p>",
        "configs": [],
        "events": []
    },
    "Ext.grid.filters.filter.String": {
        "type": "Ext.grid.filters.filter.String",
        "doc": "<p>Filter by a configurable Ext.form.field.Text</p>",
        "configs": [
            {
                "name": "emptyText",
                "type": "string",
                "doc": "<p>The empty text to show for each field.</p>",
                "default": "'Enter Filter Text...'"
            },
            {
                "name": "itemDefaults",
                "type": "object",
                "doc": "<p>The default configuration options for any menu items created by this filter.</p>",
                "default": "{xtype: 'textfield', enableKeyEvents: true, hideEmptyLabel: false, iconCls: Ext.baseCSSPrefix + 'grid-filters-find', labelSeparator: '', labelWidth: 29, margin: 0, selectOnFocus: true}"
            }
        ],
        "events": []
    },
    "Ext.grid.filters.filter.TriFilter": {
        "type": "Ext.grid.filters.filter.TriFilter",
        "doc": "<p>This abstract base class is used by grid filters that have a three\nstore filter.</p>",
        "configs": [],
        "events": []
    },
    "Ext.grid.header.Container": {
        "type": "Ext.grid.header.Container",
        "doc": "<p>Container which holds headers and is docked at the top or bottom of a TablePanel.\nThe HeaderContainer drives resizing/moving/hiding of columns within the TableView.\nAs headers are hidden, moved or resized the headercontainer is responsible for\ntriggering changes within the view.</p>",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to elements within this\ncomponent like Panel's body will get a class <code>x-panel-body</code>. This means that if you create a subclass of Panel, and\nyou want it to get all the Panels styling for the element and the body, you leave the <code>baseCls</code> <code>x-panel</code> and use\n<code>componentCls</code> to add specific styling for this component.</p>",
                "default": "Ext.baseCSSPrefix + 'grid-header-ct'"
            },
            {
                "name": "border",
                "type": "number/string/boolean",
                "doc": "<p>Specifies the border size for this component. The border can be a single numeric value to apply to all sides or it can\nbe a CSS style specification for each style, for example: '10 5 3 10' (top, right, bottom, left).</p>",
                "default": "true"
            },
            {
                "name": "defaultType",
                "type": "string",
                "doc": "<p>The default xtype of child Components to create in this Container when\na child item is specified as a raw configuration object, rather than as an instantiated Component.</p>",
                "default": "'gridcolumn'"
            },
            {
                "name": "defaultWidth",
                "type": "number",
                "doc": "<p>Width of the header if no width or flex is specified.</p>",
                "default": "100"
            },
            {
                "name": "detachOnRemove",
                "type": "boolean",
                "doc": "<p>True to move any component to the detachedBody when the component is\nremoved from this container. This option is only applicable when the component is not destroyed while\nbeing removed, see autoDestroy and remove. If this option is set to false, the DOM\nof the component will remain in the current place until it is explicitly moved.</p>",
                "default": "false"
            },
            {
                "name": "enableColumnHide",
                "type": "boolean",
                "doc": "<p>False to disable column hiding within this grid.</p>",
                "default": "true"
            },
            {
                "name": "enableFocusableContainer",
                "type": "boolean",
                "doc": "<p>Disable FocusableContainer behavior by default, since we only want it\nto be enabled for the root header container (we'll set the flag in initComponent)</p>",
                "default": "false"
            },
            {
                "name": "sealed",
                "type": "boolean",
                "doc": "<p>Specify as <code>true</code> to constrain column dragging so that a column cannot be dragged into or out of this column.</p>",
                "default": "false"
            },
            {
                "name": "sortable",
                "type": "boolean",
                "doc": "<p>Provides the default sortable state for all Headers within this HeaderContainer.\nAlso turns on or off the menus in the HeaderContainer. Note that the menu is\nshared across every header and therefore turning it off will remove the menu\nitems for every header.</p>",
                "default": "true"
            },
            {
                "name": "weight",
                "type": "number",
                "doc": "<p>HeaderContainer overrides the default weight of 0 for all docked items to 100.\nThis is so that it has more priority over things like toolbars.</p>",
                "default": "100"
            }
        ],
        "events": [
            {
                "name": "columnhide",
                "params": "ct(Ext.grid.header.Container) column(Ext.grid.column.Column) eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "columnmove",
                "params": "ct(Ext.grid.header.Container) column(Ext.grid.column.Column) fromIdx(Number) toIdx(Number) eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "columnresize",
                "params": "ct(Ext.grid.header.Container) column(Ext.grid.column.Column) width(Number) eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "columnschanged",
                "params": "ct(Ext.grid.header.Container) eOpts(Object)",
                "doc": "<p>Fired after the columns change in any way, when a column has been hidden or shown, or when a column\nis added to or removed from this header container.</p>"
            },
            {
                "name": "columnshow",
                "params": "ct(Ext.grid.header.Container) column(Ext.grid.column.Column) eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "headerclick",
                "params": "ct(Ext.grid.header.Container) column(Ext.grid.column.Column) e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "headercontextmenu",
                "params": "ct(Ext.grid.header.Container) column(Ext.grid.column.Column) e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "headertriggerclick",
                "params": "ct(Ext.grid.header.Container) column(Ext.grid.column.Column) e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "menucreate",
                "params": "ct(Ext.grid.header.Container) menu(Ext.menu.Menu) eOpts(Object)",
                "doc": "<p>Fired immediately after the column header menu is created.</p>"
            },
            {
                "name": "sortchange",
                "params": "ct(Ext.grid.header.Container) column(Ext.grid.column.Column) direction(String) eOpts(Object)",
                "doc": "\n"
            }
        ]
    },
    "Ext.grid.header.DragZone": {
        "type": "Ext.grid.header.DragZone",
        "configs": [],
        "events": []
    },
    "Ext.grid.header.DropZone": {
        "type": "Ext.grid.header.DropZone",
        "configs": [],
        "events": []
    },
    "Ext.grid.locking.HeaderContainer": {
        "type": "Ext.grid.locking.HeaderContainer",
        "doc": "<p>Private class which acts as a HeaderContainer for the Lockable which aggregates all columns\nfrom both sides of the Lockable. It is never rendered, it's just used to interrogate the\ncolumn collection.</p>",
        "configs": [],
        "events": []
    },
    "Ext.grid.locking.Lockable": {
        "type": "Ext.grid.locking.Lockable",
        "doc": "<p>Lockable is a private mixin which injects lockable behavior into any\nTablePanel subclass such as GridPanel or TreePanel. TablePanel will\nautomatically inject the Ext.grid.locking.Lockable mixin in when one of the\nthese conditions are met:</p>",
        "configs": [
            {
                "name": "layout",
                "type": "object",
                "doc": "<p>By default, a lockable grid uses an HBox layout to arrange\nthe two grids (possibly separated by a splitter).</p>",
                "default": null
            },
            {
                "name": "lockedGridConfig",
                "type": "object",
                "doc": "<p>Any special configuration options for the locked part of the grid</p>",
                "default": null
            },
            {
                "name": "lockedViewConfig",
                "type": "object",
                "doc": "<p>A view configuration to be applied to the\nlocked side of the grid. Any conflicting configurations between lockedViewConfig\nand viewConfig will be overwritten by the lockedViewConfig.</p>",
                "default": null
            },
            {
                "name": "normalGridConfig",
                "type": "object",
                "doc": "<p>Any special configuration options for the normal part of the grid</p>",
                "default": null
            },
            {
                "name": "normalViewConfig",
                "type": "object",
                "doc": "<p>A view configuration to be applied to the\nnormal/unlocked side of the grid. Any conflicting configurations between normalViewConfig\nand viewConfig will be overwritten by the normalViewConfig.</p>",
                "default": null
            },
            {
                "name": "scrollDelta",
                "type": "number",
                "doc": "<p>Number of pixels to scroll when scrolling the locked section with mousewheel.</p>",
                "default": "40"
            },
            {
                "name": "split",
                "type": "boolean",
                "doc": "<p>Configure as true to place a resizing splitter between the locked\nand unlocked columns.</p>",
                "default": "false"
            },
            {
                "name": "subGridXType",
                "type": "string",
                "doc": "<p>The xtype of the subgrid to specify. If this is\nnot specified lockable will determine the subgrid xtype to create by the\nfollowing rule. Use the superclasses xtype if the superclass is NOT\ntablepanel, otherwise use the xtype itself.</p>",
                "default": null
            },
            {
                "name": "syncRowHeight",
                "type": "boolean",
                "doc": "<p>Synchronize rowHeight between the normal and\nlocked grid view. This is turned on by default. If your grid is guaranteed\nto have rows of all the same height, you should set this to false to\noptimize performance.</p>",
                "default": "true"
            }
        ],
        "events": [
            {
                "name": "filterchange",
                "params": "store(Ext.data.Store) filters(Ext.util.Filter[]) eOpts(Object)",
                "doc": "<p>Fired whenever the filter set changes.</p>"
            },
            {
                "name": "groupchange",
                "params": "store(Ext.data.Store) grouper(Ext.util.Grouper) eOpts(Object)",
                "doc": "<p>Fired whenever the grouping in the grid changes.</p>"
            },
            {
                "name": "lockcolumn",
                "params": "this(Ext.grid.Panel) column(Ext.grid.column.Column) eOpts(Object)",
                "doc": "<p>Fires when a column is locked.</p>"
            },
            {
                "name": "processcolumns",
                "params": "lockedColumns(Ext.grid.column.Column[]) normalColumns(Ext.grid.column.Column[]) eOpts(Object)",
                "doc": "<p>Fires when the configured (or <strong>reconfigured</strong>) column set is split into two depending on the locked flag.</p>"
            },
            {
                "name": "unlockcolumn",
                "params": "this(Ext.grid.Panel) column(Ext.grid.column.Column) eOpts(Object)",
                "doc": "<p>Fires when a column is unlocked.</p>"
            },
            {
                "name": "viewready",
                "params": "this(Ext.panel.Table) eOpts(Object)",
                "doc": "<p>Fires when the grid view is available (use this for selecting a default row).</p>"
            }
        ]
    },
    "Ext.grid.locking.RowSynchronizer": {
        "type": "Ext.grid.locking.RowSynchronizer",
        "configs": [],
        "events": []
    },
    "Ext.grid.locking.View": {
        "type": "Ext.grid.locking.View",
        "doc": "<p>This class is used internally to provide a single interface when using\na locking grid. Internally, the locking grid creates two separate grids,\nso this class is used to map calls appropriately.</p>",
        "configs": [],
        "events": []
    },
    "Ext.grid.plugin.BufferedRenderer": {
        "type": "Ext.grid.plugin.BufferedRenderer",
        "doc": "<p>Implements buffered rendering of a grid, allowing users to scroll\nthrough thousands of records without the performance penalties of\nrenderering all the records into the DOM at once.</p>",
        "configs": [
            {
                "name": "leadingBufferZone",
                "type": "number",
                "doc": "<p>The number of extra rows to render on the leading side of scrolling\n<strong>outside the numFromEdge</strong> buffer as scrolling proceeds.</p>",
                "default": "20"
            },
            {
                "name": "numFromEdge",
                "type": "number",
                "doc": "<p>The zone which causes new rows to be appended to the view. As soon as the edge\nof the rendered grid is this number of rows from the edge of the viewport, the view is moved.</p>",
                "default": "2"
            },
            {
                "name": "scrollToLoadBuffer",
                "type": "number",
                "doc": "<p>This is the time in milliseconds to buffer load requests when the store is a buffered store\nand a page required for rendering is not present in the store's cache and needs loading.</p>",
                "default": "200"
            },
            {
                "name": "synchronousRender",
                "type": "boolean",
                "doc": "<p>By default, on detection of a scroll event which brings the end of the rendered table within\n<code>numFromEdge</code> rows of the grid viewport, if the required rows are available in the Store,\nthe BufferedRenderer will render rows from the Store <em>immediately</em> before returning from the event handler.\nThis setting helps avoid the impression of whitespace appearing during scrolling.</p>",
                "default": "true"
            },
            {
                "name": "trailingBufferZone",
                "type": "number",
                "doc": "<p>The number of extra rows to render on the trailing side of scrolling\n<strong>outside the numFromEdge</strong> buffer as scrolling proceeds.</p>",
                "default": "10"
            }
        ],
        "events": []
    },
    "Ext.grid.plugin.CellEditing": {
        "type": "Ext.grid.plugin.CellEditing",
        "doc": "<p>The Ext.grid.plugin.CellEditing plugin injects editing at a cell level for a Grid. Only a single\ncell will be editable at a time. The field that will be used for the editor is defined at the\neditor. The editor can be a field instance or a field configuration.</p>",
        "configs": [],
        "events": [
            {
                "name": "beforeedit",
                "params": "editor(Ext.grid.plugin.CellEditing) context(Object) eOpts(Object)",
                "doc": "<p>Fires before cell editing is triggered. Return false from event handler to stop the editing.</p>"
            },
            {
                "name": "canceledit",
                "params": "editor(Ext.grid.plugin.CellEditing) context(Object) eOpts(Object)",
                "doc": "<p>Fires when the user started editing a cell but then cancelled the edit.</p>"
            },
            {
                "name": "edit",
                "params": "editor(Ext.grid.plugin.CellEditing) context(Object) eOpts(Object)",
                "doc": "<p>Fires after a cell is edited. Usage example:</p>"
            },
            {
                "name": "validateedit",
                "params": "editor(Ext.grid.plugin.CellEditing) context(Object) eOpts(Object)",
                "doc": "<p>Fires after a cell is edited, but before the value is set in the record. Return false from event handler to\ncancel the change.</p>"
            }
        ]
    },
    "Ext.grid.plugin.Clipboard": {
        "type": "Ext.grid.plugin.Clipboard",
        "doc": "<p>This grid plugin adds clipboard support to a grid.</p>",
        "configs": [
            {
                "name": "formats",
                "type": "object",
                "doc": "<p>This object is keyed by the names of the data formats supported by this plugin.\nThe property values of this object are objects with <code>get</code> and <code>put</code> properties\nthat name the methods for getting data from (copy) and putting to into (paste)\nthe associated component.</p>",
                "default": "{cell: {get: 'getCells'}, html: {get: 'getCellData'}, raw: {get: 'getCellData'}}"
            }
        ],
        "events": []
    },
    "Ext.grid.plugin.DragDrop": {
        "type": "Ext.grid.plugin.DragDrop",
        "doc": "<p>This plugin provides drag and/or drop functionality for a GridView.</p>",
        "configs": [
            {
                "name": "containerScroll",
                "type": "object/boolean",
                "doc": "<p><code>true</code> to register this container with the Scrollmanager for auto scrolling during drag operations.\nA Ext.dd.ScrollManager configuration may also be passed.</p>",
                "default": "false"
            },
            {
                "name": "ddGroup",
                "type": "string",
                "doc": "<p>A named drag drop group to which this object belongs. If a group is specified, then both the DragZones and\nDropZone used by this plugin will only interact with other drag drop objects in the same group.</p>",
                "default": "gridDD"
            },
            {
                "name": "dragGroup",
                "type": "string",
                "doc": "<p>The ddGroup to which the DragZone will belong.</p>",
                "default": null
            },
            {
                "name": "dragText",
                "type": "string",
                "doc": "<p>The text to show while dragging.</p>",
                "default": "'{0} selected row{1}'"
            },
            {
                "name": "dragZone",
                "type": "object",
                "doc": "<p>A config object to apply to the creation of the DragZone which handles for drag start gestures.</p>",
                "default": null
            },
            {
                "name": "dropGroup",
                "type": "string",
                "doc": "<p>The ddGroup to which the DropZone will belong.</p>",
                "default": null
            },
            {
                "name": "dropZone",
                "type": "object",
                "doc": "<p>A config object to apply to the creation of the DropZone which handles mouseover and drop gestures.</p>",
                "default": null
            },
            {
                "name": "enableDrag",
                "type": "boolean",
                "doc": "<p><code>false</code> to disallow dragging items from the View.</p>",
                "default": "true"
            },
            {
                "name": "enableDrop",
                "type": "boolean",
                "doc": "<p><code>false</code> to disallow the View from accepting drop gestures.</p>",
                "default": "true"
            }
        ],
        "events": [
            {
                "name": "beforedrop",
                "params": "node(HTMLElement) data(Object) overModel(Ext.data.Model) dropPosition(String) dropHandlers(Object) eOpts(Object)",
                "doc": "<p><strong>This event is fired through the GridView. Add listeners to the GridView object</strong></p>"
            },
            {
                "name": "drop",
                "params": "node(HTMLElement) data(Object) overModel(Ext.data.Model) dropPosition(String) eOpts(Object)",
                "doc": "<p><strong>This event is fired through the GridView. Add listeners to the GridView object</strong> Fired when a drop operation\nhas been completed and the data has been moved or copied.</p>"
            }
        ]
    },
    "Ext.grid.plugin.Editing": {
        "type": "Ext.grid.plugin.Editing",
        "doc": "<p>This class provides an abstract grid editing plugin on selected columns.\nThe editable columns are specified by providing an editor\nin the column configuration.</p>",
        "configs": [
            {
                "name": "clicksToEdit",
                "type": "number",
                "doc": "<p>The number of clicks on a grid required to display the editor.\nThe only accepted values are <strong>1</strong> and <strong>2</strong>.</p>",
                "default": "2"
            },
            {
                "name": "default",
                "type": "string",
                "doc": "<p>UI for editor fields</p>",
                "default": null
            },
            {
                "name": "triggerEvent",
                "type": "string",
                "doc": "<p>The event which triggers editing. Supercedes the clicksToEdit configuration. Maybe one of:</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "beforeedit",
                "params": "editor(Ext.grid.plugin.Editing) context(Object) eOpts(Object)",
                "doc": "<p>Fires before editing is triggered. Return false from event handler to stop the editing.</p>"
            },
            {
                "name": "canceledit",
                "params": "editor(Ext.grid.plugin.Editing) context(Object) eOpts(Object)",
                "doc": "<p>Fires when the user started editing but then cancelled the edit.</p>"
            },
            {
                "name": "edit",
                "params": "editor(Ext.grid.plugin.Editing) context(Object) eOpts(Object)",
                "doc": "<p>Fires after editing. Usage example:</p>"
            },
            {
                "name": "validateedit",
                "params": "editor(Ext.grid.plugin.Editing) context(Object) eOpts(Object)",
                "doc": "<p>Fires after editing, but before the value is set in the record. Return false from event handler to\ncancel the change.</p>"
            }
        ]
    },
    "Ext.grid.plugin.HeaderReorderer": {
        "type": "Ext.grid.plugin.HeaderReorderer",
        "configs": [],
        "events": []
    },
    "Ext.grid.plugin.HeaderResizer": {
        "type": "Ext.grid.plugin.HeaderResizer",
        "doc": "<p>Plugin to add header resizing functionality to a HeaderContainer.\nAlways resizing header to the left of the splitter you are resizing.</p>",
        "configs": [
            {
                "name": "dynamic",
                "type": "boolean",
                "doc": "<p>True to resize on the fly rather than using a proxy marker.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.grid.plugin.RowEditing": {
        "type": "Ext.grid.plugin.RowEditing",
        "doc": "<p>The Ext.grid.plugin.RowEditing plugin injects editing at a row level for a Grid. When editing begins,\na small floating dialog will be shown for the appropriate row. Each editable column will show a field\nfor editing. There is a button to save or cancel all changes for the edit.</p>",
        "configs": [
            {
                "name": "autoCancel",
                "type": "boolean",
                "doc": "<p><code>true</code> to automatically cancel any pending changes when the row editor begins editing a new row.\n<code>false</code> to force the user to explicitly cancel the pending changes.</p>",
                "default": "true"
            },
            {
                "name": "clicksToMoveEditor",
                "type": "number",
                "doc": "<p>The number of clicks to move the row editor to a new row while it is visible and actively editing another row.\nThis will default to the same value as clicksToEdit.</p>",
                "default": null
            },
            {
                "name": "errorSummary",
                "type": "boolean",
                "doc": "<p>True to show a tooltip that summarizes all validation errors present\nin the row editor. Set to false to prevent the tooltip from showing.</p>",
                "default": "true"
            }
        ],
        "events": []
    },
    "Ext.grid.plugin.RowExpander": {
        "type": "Ext.grid.plugin.RowExpander",
        "doc": "<p>Plugin (ptype = 'rowexpander') that adds the ability to have a Column in a grid which enables\na second row body which expands/contracts.  The expand/contract behavior is configurable to react\non clicking of the column, double click of the row, and/or hitting enter while a row is selected.</p>",
        "configs": [
            {
                "name": "bodyBefore",
                "type": "boolean",
                "doc": "<p>Configure as <code>true</code> to put the row expander body <em>before</em> the data row.</p>",
                "default": "false"
            },
            {
                "name": "columnWidth",
                "type": "number",
                "doc": "<p>The width of the row expander column which contains the [+]/[-] icons to toggle row expansion.</p>",
                "default": "24"
            },
            {
                "name": "expandOnDblClick",
                "type": "boolean",
                "doc": "<p><code>true</code> to toggle a row between expanded/collapsed when double clicked\n(defaults to <code>true</code>).</p>",
                "default": "true"
            },
            {
                "name": "expandOnEnter",
                "type": "boolean",
                "doc": "<p><code>true</code> to toggle selected row(s) between expanded/collapsed when the enter\nkey is pressed (defaults to <code>true</code>).</p>",
                "default": "true"
            },
            {
                "name": "headerWidth",
                "type": "number",
                "doc": "<p>The width of the Row Expander column header</p>",
                "default": "24"
            },
            {
                "name": "lockedTpl",
                "type": "ext.xtemplate",
                "doc": "<p>An XTemplate which, when passed a record data object, produces HTML for the expanded row content <em>on the locked side of a lockable grid</em>.</p>",
                "default": null
            },
            {
                "name": "rowBodyTpl",
                "type": "ext.xtemplate",
                "doc": "<p>An XTemplate which, when passed a record data object, produces HTML for the expanded row content.</p>",
                "default": null
            },
            {
                "name": "selectRowOnExpand",
                "type": "boolean",
                "doc": "<p><code>true</code> to select a row when clicking on the expander icon\n(defaults to <code>false</code>).</p>",
                "default": "false"
            }
        ],
        "events": [
            {
                "name": "collapsebody",
                "params": "rowNode(HTMLElement) record(Ext.data.Model) expandRow(HTMLElement) eOpts(Object)",
                "doc": "<p><strong>Fired through the grid's View.</strong></p>"
            },
            {
                "name": "expandbody",
                "params": "rowNode(HTMLElement) record(Ext.data.Model) expandRow(HTMLElement) eOpts(Object)",
                "doc": "<p><strong>Fired through the grid's View</strong></p>"
            }
        ]
    },
    "Ext.grid.property.Grid": {
        "type": "Ext.grid.property.Grid",
        "doc": "<p>A specialized grid implementation intended to mimic the traditional property grid as typically seen in\ndevelopment IDEs.  Each row in the grid represents a property of some object, and the data is stored\nas a set of name/value pairs in Properties. By default, the editors\nshown are inferred from the data in the cell. More control over this can be specified by using the\nsourceConfig option. Example usage:</p>",
        "configs": [
            {
                "name": "columnLines",
                "type": "boolean",
                "doc": "<p>Adds column line styling</p>",
                "default": "true"
            },
            {
                "name": "columns",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "customEditors",
                "type": "object",
                "doc": "<p>An object containing name/value pairs of custom editor type definitions that allow\nthe grid to support additional types of editable fields.  By default, the grid supports strongly-typed editing\nof strings, dates, numbers and booleans using built-in form editors, but any custom type can be supported and\nassociated with a custom input control by specifying a custom editor.  The name of the editor\ntype should correspond with the name of the property that will use the editor.  Example usage:</p>",
                "default": null
            },
            {
                "name": "customRenderers",
                "type": "object",
                "doc": "<p>An object containing name/value pairs of custom renderer type definitions that allow\nthe grid to support custom rendering of fields.  By default, the grid supports strongly-typed rendering\nof strings, dates, numbers and booleans using built-in form editors, but any custom type can be supported and\nassociated with the type of the value.  The name of the renderer type should correspond with the name of the property\nthat it will render.  Example usage:</p>",
                "default": null
            },
            {
                "name": "enableColumnMove",
                "type": "boolean",
                "doc": "<p>private config overrides</p>",
                "default": "false"
            },
            {
                "name": "inferTypes",
                "type": "boolean",
                "doc": "<p>True to automatically infer the type based on the initial value passed\nfor each field. This ensures the editor remains the correct type even if the value is blanked\nand becomes empty.</p>",
                "default": "true"
            },
            {
                "name": "nameColumnWidth",
                "type": "number/string",
                "doc": "<p>Specify the width for the name column. The value column will take any remaining space.</p>",
                "default": "115"
            },
            {
                "name": "nameField",
                "type": "string",
                "doc": "<p>The name of the field from the property store to use as the property field name.\nThis may be useful if you do not configure the property Grid from an object, but use your own store configuration.</p>",
                "default": "'name'"
            },
            {
                "name": "propertyNames",
                "type": "object",
                "doc": "<p>An object containing custom property name/display name pairs.\nIf specified, the display name will be shown in the name column instead of the property name.</p>",
                "default": null
            },
            {
                "name": "source",
                "type": "object",
                "doc": "<p>A data object to use as the data source of the grid (see setSource for details).</p>",
                "default": null
            },
            {
                "name": "sourceConfig",
                "type": "object",
                "doc": "<p>This option allows various configurations to be set for each field in the property grid.\nNone of these configurations are required</p>",
                "default": null
            },
            {
                "name": "store",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "valueField",
                "type": "string",
                "doc": "<p>The name of the field from the property store to use as the value field name.\nThis may be useful if you do not configure the property Grid from an object, but use your own store configuration.</p>",
                "default": "'value'"
            }
        ],
        "events": [
            {
                "name": "beforepropertychange",
                "params": "source(Object) recordId(String) value(Object) oldValue(Object) eOpts(Object)",
                "doc": "<p>Fires before a property value changes.  Handlers can return false to cancel the property change\n(this will internally call Ext.data.Model.reject on the property's record).</p>"
            },
            {
                "name": "propertychange",
                "params": "source(Object) recordId(String) value(Object) oldValue(Object) eOpts(Object)",
                "doc": "<p>Fires after a property value has changed.</p>"
            }
        ]
    },
    "Ext.grid.property.HeaderContainer": {
        "type": "Ext.grid.property.HeaderContainer",
        "doc": "<p>A custom HeaderContainer for the Ext.grid.property.Grid.\nGenerally it should not need to be used directly.</p>",
        "configs": [],
        "events": []
    },
    "Ext.grid.property.Property": {
        "type": "Ext.grid.property.Property",
        "doc": "<p>A specific Ext.data.Model type that represents a name/value pair and is made to work with the\nExt.grid.property.Grid. Typically, Properties do not need to be created directly as they can be\ncreated implicitly by simply using the appropriate data configs either via the\nExt.grid.property.Grid.source config property or by calling Ext.grid.property.Grid.setSource.\nHowever, if the need arises, these records can also be created explicitly as shown below. Example usage:</p>",
        "configs": [
            {
                "name": "idProperty",
                "type": "string",
                "doc": "<p>The name of the field treated as this Model's unique id.</p>",
                "default": "'name'"
            }
        ],
        "events": []
    },
    "Ext.grid.property.Reader": {
        "type": "Ext.grid.property.Reader",
        "doc": "<p>Custom reader for property grid data</p>",
        "configs": [
            {
                "name": "messageProperty",
                "type": "string",
                "doc": "<p>The name of the property which contains a response message for exception handling. If you want to return a false success\nresponse from the server, maybe due to some server-side validation, the messageProperty can hold the error message. For\nexample:</p>",
                "default": null
            },
            {
                "name": "successProperty",
                "type": "string",
                "doc": "<p>Name of the property from which to retrieve the <code>success</code> attribute, the value of which indicates\nwhether a given request succeeded or failed (typically a boolean or 'true'|'false'). See\nExt.data.proxy.Server.exception for additional information.</p>",
                "default": null
            },
            {
                "name": "totalProperty",
                "type": "string",
                "doc": "<p>Name of the property from which to retrieve the total number of records in the dataset. This is only needed if\nthe whole dataset is not passed in one go, but is being paged from the remote server.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.grid.property.Store": {
        "type": "Ext.grid.property.Store",
        "doc": "<p>A custom Ext.data.Store for the Ext.grid.property.Grid. This class handles the mapping\nbetween the custom data source objects supported by the grid and the Ext.grid.property.Property format\nused by the Ext.data.Store base class.</p>",
        "configs": [
            {
                "name": "remoteSort",
                "type": "boolean",
                "doc": "<p><code>true</code> if the sorting should be performed on the server side, false if it is local only.</p>",
                "default": "true"
            }
        ],
        "events": []
    },
    "Ext.grid.selection.Cells": {
        "type": "Ext.grid.selection.Cells",
        "doc": "<p>A class which encapsulates a range of cells defining a selection in a grid.</p>",
        "configs": [],
        "events": []
    },
    "Ext.grid.selection.Columns": {
        "type": "Ext.grid.selection.Columns",
        "doc": "<p>A class which encapsulates a range of columns defining a selection in a grid.</p>",
        "configs": [],
        "events": []
    },
    "Ext.grid.selection.Rows": {
        "type": "Ext.grid.selection.Rows",
        "doc": "<p>A class which encapsulates a range of rows defining a selection in a grid.</p>",
        "configs": [],
        "events": []
    },
    "Ext.grid.selection.Selection": {
        "type": "Ext.grid.selection.Selection",
        "doc": "<p>Base class for selections which may be of three subtypes:</p>",
        "configs": [],
        "events": []
    },
    "Ext.grid.selection.SpreadsheetModel": {
        "type": "Ext.grid.selection.SpreadsheetModel",
        "doc": "<p>A selection model for grids which allows you to select data in\na spreadsheet-like manner.</p>",
        "configs": [
            {
                "name": "cellSelect",
                "type": "boolean",
                "doc": "<p>Set to <code>true</code> to enable selection of individual cells or a single rectangular\nrange of cells. This will provide cell range selection using click, and\npotentially drag to select a rectangular range. You can also use \"SHIFT + arrow\"\nkey navigation to select a range of cells.</p>",
                "default": "true"
            },
            {
                "name": "checkboxColumnIndex",
                "type": "number/string",
                "doc": "<p>The index at which to insert the checkbox column.\nSupported values are a numeric index, and the strings 'first' and 'last'. Only valid when set\n<em>before</em> render.</p>",
                "default": "0"
            },
            {
                "name": "checkboxHeaderWidth",
                "type": "number/string",
                "doc": "<p>Width of checkbox column.</p>",
                "default": "24"
            },
            {
                "name": "checkboxSelect",
                "type": "boolean",
                "doc": "<p>[checkboxSelect=false]\nEnables selection of the row via clicking on checkbox. Note: this feature will add\nnew column at position specified by checkboxColumnIndex.</p>",
                "default": "false"
            },
            {
                "name": "columnSelect",
                "type": "boolean",
                "doc": "<p>Set to <code>true</code> to enable selection of columns.</p>",
                "default": "false"
            },
            {
                "name": "dragSelect",
                "type": "boolean",
                "doc": "<p>Set to <code>true</code> to enables cell range selection by cell dragging.</p>",
                "default": "true"
            },
            {
                "name": "rowNumbererHeaderWidth",
                "type": "number/string",
                "doc": "<p>Width of row numbering column.</p>",
                "default": "46"
            },
            {
                "name": "rowSelect",
                "type": "boolean",
                "doc": "<p>Set to <code>true</code> to enable selection of rows by clicking on a row number column.</p>",
                "default": "true"
            },
            {
                "name": "selected",
                "type": "ext.grid.selection.selection",
                "doc": "<p>Pass an instance of one of the subclasses of Ext.grid.selection.Selection.</p>",
                "default": null
            },
            {
                "name": "showHeaderCheckbox",
                "type": "boolean",
                "doc": "<p>Configure as <code>false</code> to not display the header checkbox at the top of the checkbox column\nwhen checkboxSelect is set.</p>",
                "default": "true"
            }
        ],
        "events": [
            {
                "name": "selectionchange",
                "params": "grid(Ext.grid.Panel) selection(Ext.grid.selection.Selection) eOpts(Object)",
                "doc": "<p>Fired <em>by the grid</em> after the selection changes.</p>"
            }
        ]
    },
    "Ext.layout.Context": {
        "type": "Ext.layout.Context",
        "doc": "<p>Manages context information during a layout.</p>",
        "configs": [],
        "events": []
    },
    "Ext.layout.ContextItem": {
        "type": "Ext.layout.ContextItem",
        "doc": "<p>This class manages state information for a component or element during a layout.</p>",
        "configs": [],
        "events": []
    },
    "Ext.layout.Layout": {
        "type": "Ext.layout.Layout",
        "doc": "<p>This class is the base for all layout types: component and container.</p>",
        "configs": [],
        "events": []
    },
    "Ext.layout.SizeModel": {
        "type": "Ext.layout.SizeModel",
        "doc": "<p>This class describes a size determination strategy or algorithm used by the layout\nsystem. There are special instances of this class stored as static properties to\navoid needless object instantiation. These instances should be treated as readonly.</p>",
        "configs": [],
        "events": []
    },
    "Ext.layout.SizePolicy": {
        "type": "Ext.layout.SizePolicy",
        "doc": "<p>This class describes how a layout will interact with a component it manages.</p>",
        "configs": [],
        "events": []
    },
    "Ext.layout.component.Auto": {
        "type": "Ext.layout.component.Auto",
        "doc": "<p>The class is the default component layout for Ext.Component when no explicit\n<code>componentLayout</code> is configured.</p>",
        "configs": [
            {
                "name": "setHeightInDom",
                "type": "boolean",
                "doc": "<p>When publishing height of an auto Component, it is usually not written to the DOM.\nSetting this to <code>true</code> overrides this behaviour.</p>",
                "default": "false"
            },
            {
                "name": "setWidthInDom",
                "type": "boolean",
                "doc": "<p>When publishing width of an auto Component, it is usually not written to the DOM.\nSetting this to <code>true</code> overrides this behaviour.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.layout.component.Body": {
        "type": "Ext.layout.component.Body",
        "doc": "<p>Component layout for components which maintain an inner body element which must be resized to synchronize with the\nComponent size.</p>",
        "configs": [],
        "events": []
    },
    "Ext.layout.component.BoundList": {
        "type": "Ext.layout.component.BoundList",
        "doc": "<p>Component layout for Ext.view.BoundList.</p>",
        "configs": [],
        "events": []
    },
    "Ext.layout.component.Component": {
        "type": "Ext.layout.component.Component",
        "doc": "<p>This class is intended to be extended or created via the layout\nconfiguration property.  See Ext.Component.componentLayout for additional details.</p>",
        "configs": [],
        "events": []
    },
    "Ext.layout.component.Dock": {
        "type": "Ext.layout.component.Dock",
        "doc": "<p>This ComponentLayout handles docking for Panels. It takes care of panels that are\npart of a ContainerLayout that sets this Panel's size and Panels that are part of\nan AutoContainerLayout in which this panel get his height based of the CSS or\nits content.</p>",
        "configs": [],
        "events": []
    },
    "Ext.layout.component.FieldSet": {
        "type": "Ext.layout.component.FieldSet",
        "doc": "<p>Component layout for Ext.form.FieldSet components</p>",
        "configs": [],
        "events": []
    },
    "Ext.layout.component.ProgressBar": {
        "type": "Ext.layout.component.ProgressBar",
        "configs": [],
        "events": []
    },
    "Ext.layout.component.field.FieldContainer": {
        "type": "Ext.layout.component.field.FieldContainer",
        "configs": [],
        "events": []
    },
    "Ext.layout.component.field.HtmlEditor": {
        "type": "Ext.layout.component.field.HtmlEditor",
        "doc": "<p>Layout class for Ext.form.field.HtmlEditor fields. Sizes textarea and iframe elements.</p>",
        "configs": [],
        "events": []
    },
    "Ext.layout.container.Absolute": {
        "type": "Ext.layout.container.Absolute",
        "doc": "<p>This is a layout that inherits the anchoring of Ext.layout.container.Anchor and adds the\nability for x/y positioning using the standard x and y component config options.</p>",
        "configs": [
            {
                "name": "ignoreOnContentChange",
                "type": "boolean",
                "doc": "<p>True indicates that changes to one item in this layout do not effect the layout in\ngeneral. This may need to be set to false if the component is\nscrollable.</p>",
                "default": "true"
            },
            {
                "name": "itemCls",
                "type": "string",
                "doc": "<p>An optional extra CSS class that will be added to the container. This can be useful for\nadding customized styles to the container or any of its children using standard CSS\nrules. See Ext.Component.componentCls also.</p>",
                "default": "Ext.baseCSSPrefix + 'abs-layout-item'"
            }
        ],
        "events": []
    },
    "Ext.layout.container.Accordion": {
        "type": "Ext.layout.container.Accordion",
        "doc": "<p>This is a layout that manages multiple Panels in an expandable accordion style such that by default only\none Panel can be expanded at any given time (set multi config to have more open). Each Panel has\nbuilt-in support for expanding and collapsing.</p>",
        "configs": [
            {
                "name": "activeOnTop",
                "type": "boolean",
                "doc": "<p>Only valid when multi is <code>false</code> and animate is <code>false</code>.</p>",
                "default": "false"
            },
            {
                "name": "align",
                "type": "string",
                "doc": "<p>Controls how the child items of the container are aligned. The value is used to\nposition items \"perpendicularly\". That is, for horizontal boxes (where <code>vertical</code>\nis <code>false</code>), then this will position items vertically. Otherwise, this will position\nitems horizontally. The acceptable values for this property are best explained in\ncontext with the value of <code>vertical</code>.</p>",
                "default": "'stretch'"
            },
            {
                "name": "animate",
                "type": "boolean",
                "doc": "<p>True to slide the contained panels open and closed during expand/collapse using animation, false to open and\nclose directly with no animation. Note: The layout performs animated collapsing\nand expanding, <em>not</em> the child Panels.</p>",
                "default": "true"
            },
            {
                "name": "autoWidth",
                "type": "boolean",
                "doc": "<p>Child Panels have their width actively managed to fit within the accordion's width.</p>",
                "default": null
            },
            {
                "name": "collapseFirst",
                "type": "boolean",
                "doc": "<p>True to make sure the collapse/expand toggle button always renders first (to the left of) any other tools\nin the contained Panels' title bars, false to render it last. By default, this will use the\nExt.panel.Panel.collapseFirst setting on the panel. If the config option is specified on the layout,\nit will override the panel value.</p>",
                "default": null
            },
            {
                "name": "enableSplitters",
                "type": "boolean",
                "doc": "<p>This flag can be set to <code>false</code> to ignore the <code>split</code> config on box items. This is\nset to <code>false</code> by <code>Ext.layout.container.Accordion</code>.</p>",
                "default": "false"
            },
            {
                "name": "fill",
                "type": "boolean",
                "doc": "<p>True to adjust the active item's height to fill the available space in the container, false to use the\nitem's current height, or auto height if not explicitly set.</p>",
                "default": "true"
            },
            {
                "name": "hideCollapseTool",
                "type": "boolean",
                "doc": "<p>True to hide the contained Panels' collapse/expand toggle buttons, false to display them.\nWhen set to true, titleCollapse is automatically set to true.</p>",
                "default": "false"
            },
            {
                "name": "itemCls",
                "type": "string",
                "doc": "<p>An optional extra CSS class that will be added to the container. This can be useful for\nadding customized styles to the container or any of its children using standard CSS\nrules. See Ext.Component.componentCls also.</p>",
                "default": "[Ext.baseCSSPrefix + 'box-item', Ext.baseCSSPrefix + 'accordion-item']"
            },
            {
                "name": "multi",
                "type": "boolean",
                "doc": "<p>Set to true to enable multiple accordion items to be open at once.</p>",
                "default": "false"
            },
            {
                "name": "titleCollapse",
                "type": "boolean",
                "doc": "<p>True to allow expand/collapse of each contained panel by clicking anywhere on the title bar, false to allow\nexpand/collapse only when the toggle tool button is clicked.  When set to false,\nhideCollapseTool should be false also. An explicit Ext.panel.Panel.titleCollapse declared\non the panel will override this setting.</p>",
                "default": "true"
            }
        ],
        "events": []
    },
    "Ext.layout.container.Anchor": {
        "type": "Ext.layout.container.Anchor",
        "doc": "<p>This is a layout that enables anchoring of contained elements relative to the container's dimensions.\nIf the container is resized, all anchored items are automatically rerendered according to their\n<code>anchor</code> rules.</p>",
        "configs": [
            {
                "name": "anchor",
                "type": "string",
                "doc": "<p>This configuation option is to be applied to <strong>child <code>items</code></strong> of a container managed by\nthis layout (ie. configured with <code>layout:'anchor'</code>).</p>",
                "default": null
            },
            {
                "name": "defaultAnchor",
                "type": "string",
                "doc": "<p>Default anchor for all child <strong>container</strong> items applied if no anchor or specific width is set on the child item.</p>",
                "default": "'100%'"
            }
        ],
        "events": []
    },
    "Ext.layout.container.Auto": {
        "type": "Ext.layout.container.Auto",
        "doc": "<p>The AutoLayout is the default layout manager delegated by Ext.container.Container to\nrender any child Components when no <code>layout</code> is configured into\na <code>Container.</code> AutoLayout provides only a passthrough of any layout calls\nto any child containers.</p>",
        "configs": [
            {
                "name": "childEls",
                "type": "object/string[]/object[]",
                "doc": "<p>The canonical form of <code>childEls</code> is an object keyed by child's property name\nwith values that are objects with the following properties.</p>",
                "default": "['outerCt', 'innerCt']"
            },
            {
                "name": "reserveScrollbar",
                "type": "boolean",
                "doc": "<p>Set to <code>true</code> to leave space for a vertical scrollbar (if the OS shows space-consuming scrollbars) regardless\nof whether a scrollbar is needed.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.layout.container.Border": {
        "type": "Ext.layout.container.Border",
        "doc": "<p>This is a multi-pane, application-oriented UI layout style that supports multiple nested panels, automatic bars\nbetween regions and built-in expanding and collapsing of regions.</p>",
        "configs": [
            {
                "name": "itemCls",
                "type": "string",
                "doc": "<p>An optional extra CSS class that will be added to the container. This can be useful for\nadding customized styles to the container or any of its children using standard CSS\nrules. See Ext.Component.componentCls also.</p>",
                "default": "[Ext.baseCSSPrefix + 'border-item', Ext.baseCSSPrefix + 'box-item']"
            },
            {
                "name": "padding",
                "type": "number/string/object",
                "doc": "<p>Sets the padding to be applied to all child items managed by this layout.</p>",
                "default": null
            },
            {
                "name": "regionWeights",
                "type": "object",
                "doc": "<p>The default weights to assign to regions in the border layout. These values are\nused when a region does not contain a <code>weight</code> property. This object must have\nproperties for all regions (\"north\", \"south\", \"east\" and \"west\").</p>",
                "default": null
            },
            {
                "name": "split",
                "type": "boolean/ext.resizer.bordersplitter",
                "doc": "<p>This configuration option is to be applied to the <strong>child <code>items</code></strong> managed by this layout.\nEach region with <code>split:true</code> will get a Splitter that\nallows for manual resizing of the container. Except for the <code>center</code> region.</p>",
                "default": null
            },
            {
                "name": "splitterResize",
                "type": "boolean",
                "doc": "<p>This configuration option is to be applied to the <strong>child <code>items</code></strong> managed by this layout and\nis used in conjunction with split. By default, when specifying split, the region\ncan be dragged to be resized. Set this option to false to show the split bar but prevent resizing.</p>",
                "default": "true"
            }
        ],
        "events": []
    },
    "Ext.layout.container.Box": {
        "type": "Ext.layout.container.Box",
        "doc": "<p>Base Class for HBoxLayout and VBoxLayout Classes. Generally it should not need to be used directly.</p>",
        "configs": [
            {
                "name": "align",
                "type": "string",
                "doc": "<p>Controls how the child items of the container are aligned. The value is used to\nposition items \"perpendicularly\". That is, for horizontal boxes (where <code>vertical</code>\nis <code>false</code>), then this will position items vertically. Otherwise, this will position\nitems horizontally. The acceptable values for this property are best explained in\ncontext with the value of <code>vertical</code>.</p>",
                "default": "\"begin\""
            },
            {
                "name": "alignRoundingMethod",
                "type": "\"round\"/\"floor\"/\"ceil\"",
                "doc": "<p>The Math method to\nuse for rounding fractional pixels when <code>align:middle</code> is used.</p>",
                "default": "'round'"
            },
            {
                "name": "childEls",
                "type": "object/string[]/object[]",
                "doc": "<p>The canonical form of <code>childEls</code> is an object keyed by child's property name\nwith values that are objects with the following properties.</p>",
                "default": "['innerCt', 'targetEl']"
            },
            {
                "name": "constrainAlign",
                "type": "boolean",
                "doc": "<p>Limits the size of aligned components to the size of the container\nunder certain circumstances. Firstly, the container's height (for <code>hbox</code>) or width\n(for <code>vbox</code>) must not be determined by the size of the child components. Secondly,\nthe child components must have shrinkwrap\nenabled for this dimension.</p>",
                "default": "false"
            },
            {
                "name": "enableSplitters",
                "type": "boolean",
                "doc": "<p>This flag can be set to <code>false</code> to ignore the <code>split</code> config on box items. This is\nset to <code>false</code> by <code>Ext.layout.container.Accordion</code>.</p>",
                "default": "true"
            },
            {
                "name": "flex",
                "type": "number",
                "doc": "<p>This configuration option is to be applied to <strong>child items</strong> of the container\nmanaged by this layout. Each child item with a flex property will be flexed\n(horizontally in <code>hbox</code>, vertically in <code>vbox</code>) according to each item's\n<strong>relative</strong> flex value compared to the sum of all items with a flex value\nspecified. Any child items that have either a <code>flex = 0</code> or <code>flex = undefined</code>\nwill not be 'flexed' (the initial size will not be changed).</p>",
                "default": null
            },
            {
                "name": "overflowHandler",
                "type": "string/ext.layout.container.boxoverflow.none",
                "doc": "<p>An overflow handler or config object for an overflow handler.  This is typically\nspecified as one of the following strings:</p>",
                "default": null
            },
            {
                "name": "pack",
                "type": "string",
                "doc": "<p>Controls how the child items of the container are packed together. Acceptable\nconfiguration values for this property are:</p>",
                "default": "'start'"
            },
            {
                "name": "padding",
                "type": "string",
                "doc": "<p>Sets the padding to be applied to all child items managed by this layout.</p>",
                "default": "0"
            },
            {
                "name": "stretchMaxPartner",
                "type": "string/ext.component",
                "doc": "<p>Allows stretchMax calculation to take into account the max perpendicular size\n(height for HBox layout and width for VBox layout) of another Box layout when\ncalculating its maximum perpendicular child size.</p>",
                "default": null
            },
            {
                "name": "vertical",
                "type": "boolean",
                "doc": "<p>Set to <code>true</code> to switch the layout to <code>vbox</code>.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.layout.container.Card": {
        "type": "Ext.layout.container.Card",
        "doc": "<p>This layout manages multiple child Components, each fitted to the Container, where only a single child Component can be\nvisible at any given time.  This layout style is most commonly used for wizards, tab implementations, etc.\nThis class is intended to be extended or created via the layout:'card' Ext.container.Container.layout config,\nand should generally not need to be created directly via the new keyword.</p>",
        "configs": [
            {
                "name": "deferredRender",
                "type": "boolean",
                "doc": "<p>True to render each contained item at the time it becomes active, false to render all contained items\nas soon as the layout is rendered (defaults to false).  If there is a significant amount of content or\na lot of heavy controls being rendered into panels that are not displayed by default, setting this to\ntrue might improve performance.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.layout.container.Center": {
        "type": "Ext.layout.container.Center",
        "doc": "<p>This layout manager is used to center contents within a container. As a subclass of\nfit layout, CenterLayout expects to have one child\nitem; multiple items will be placed overlapping. The layout does not require any config\noptions. Items in the container can use percentage width or height rather than be fit\nto the full size of the container.</p>",
        "configs": [
            {
                "name": "itemCls",
                "type": "string",
                "doc": "<p>An optional extra CSS class that will be added to the container. This can be useful for\nadding customized styles to the container or any of its children using standard CSS\nrules. See Ext.Component.componentCls also.</p>",
                "default": "Ext.baseCSSPrefix + 'center-layout-item'"
            }
        ],
        "events": []
    },
    "Ext.layout.container.CheckboxGroup": {
        "type": "Ext.layout.container.CheckboxGroup",
        "doc": "<p>This layout implements the column arrangement for Ext.form.CheckboxGroup and Ext.form.RadioGroup.\nIt groups the component's sub-items into columns based on the component's\ncolumns and Ext.form.CheckboxGroup.vertical config properties.</p>",
        "configs": [
            {
                "name": "autoFlex",
                "type": "boolean",
                "doc": "<p>By default,  CheckboxGroup allocates all available space to the configured columns meaning that\ncolumn are evenly spaced across the container.</p>",
                "default": "true"
            },
            {
                "name": "childEls",
                "type": "object/string[]/object[]",
                "doc": "<p>The canonical form of <code>childEls</code> is an object keyed by child's property name\nwith values that are objects with the following properties.</p>",
                "default": "['innerCt']"
            }
        ],
        "events": []
    },
    "Ext.layout.container.Column": {
        "type": "Ext.layout.container.Column",
        "doc": "<p>This is the layout style of choice for creating structural layouts in a multi-column format where the width of each\ncolumn can be specified as a percentage or fixed width, but the height is allowed to vary based on the content. This\nclass is intended to be extended or created via the layout:'column' Ext.container.Container.layout config,\nand should generally not need to be created directly via the new keyword.</p>",
        "configs": [
            {
                "name": "itemCls",
                "type": "string",
                "doc": "<p>An optional extra CSS class that will be added to the container. This can be useful for\nadding customized styles to the container or any of its children using standard CSS\nrules. See Ext.Component.componentCls also.</p>",
                "default": "Ext.baseCSSPrefix + 'column'"
            }
        ],
        "events": []
    },
    "Ext.layout.container.ColumnSplitter": {
        "type": "Ext.layout.container.ColumnSplitter",
        "configs": [
            {
                "name": "cls",
                "type": "string/string[]",
                "doc": "<p>An optional extra CSS class that will be added to this component's Element.\nThe value can be a string, a list of strings separated by spaces, or an array of strings. This can be useful\nfor adding customized styles to the component or any of its children using standard CSS rules.</p>",
                "default": "Ext.baseCSSPrefix + 'splitter-vertical'"
            },
            {
                "name": "height",
                "type": "number|string",
                "doc": "<p>The height of this component. A numeric value will be interpreted as the number of\npixels; a string value will be treated as a CSS value with units.</p>",
                "default": "1"
            },
            {
                "name": "width",
                "type": "number|string",
                "doc": "<p>The width of this component. A numeric value will be interpreted as the number of\npixels; a string value will be treated as a CSS value with units.</p>",
                "default": "7"
            }
        ],
        "events": []
    },
    "Ext.layout.container.ColumnSplitterTracker": {
        "type": "Ext.layout.container.ColumnSplitterTracker",
        "configs": [],
        "events": []
    },
    "Ext.layout.container.Container": {
        "type": "Ext.layout.container.Container",
        "doc": "<p>This class is intended to be extended or created via the layout\nconfiguration property.  See Ext.container.Container.layout for additional details.</p>",
        "configs": [
            {
                "name": "itemCls",
                "type": "string",
                "doc": "<p>An optional extra CSS class that will be added to the container. This can be useful for\nadding customized styles to the container or any of its children using standard CSS\nrules. See Ext.Component.componentCls also.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.layout.container.Dashboard": {
        "type": "Ext.layout.container.Dashboard",
        "doc": "<p>This layout extends <code>Ext.layout.container.Column</code> and adds splitters between adjacent\ncolumns allowing the user to resize them.</p>",
        "configs": [],
        "events": []
    },
    "Ext.layout.container.Editor": {
        "type": "Ext.layout.container.Editor",
        "doc": "<p>Component layout for editors</p>",
        "configs": [],
        "events": []
    },
    "Ext.layout.container.Fit": {
        "type": "Ext.layout.container.Fit",
        "doc": "<p>This is a base class for layouts that contain a single item that automatically expands to fill the layout's\ncontainer. This class is intended to be extended or created via the layout:'fit'\nExt.container.Container.layout config, and should generally not need to be created directly via the new keyword.</p>",
        "configs": [
            {
                "name": "itemCls",
                "type": "string",
                "doc": "<p>End Definitions</p>",
                "default": "Ext.baseCSSPrefix + 'fit-item'"
            }
        ],
        "events": []
    },
    "Ext.layout.container.Form": {
        "type": "Ext.layout.container.Form",
        "doc": "<p>This is a layout that will render form Fields, one under the other all stretched to the Container width.</p>",
        "configs": [
            {
                "name": "itemSpacing",
                "type": "number",
                "doc": "<p>The amount of space, in pixels, to use between the items. Defaults to the value\ninherited from the theme's stylesheet as configured by\n$form-item-margin-bottom.</p>",
                "default": null
            },
            {
                "name": "labelWidth",
                "type": "number/string",
                "doc": "<p>The width of the labels. This can be either a number in pixels, or a valid CSS\n\"width\" style, e.g. <code>'100px'</code>, or <code>'30%'</code>.  When configured, all labels will assume\nthis width, and any labelWidth specified\non the items will be ignored.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.layout.container.HBox": {
        "type": "Ext.layout.container.HBox",
        "doc": "<p>A layout that arranges items horizontally across a Container. This layout optionally divides available horizontal\nspace between child items containing a numeric <code>flex</code> configuration.</p>",
        "configs": [
            {
                "name": "vertical",
                "type": "boolean",
                "doc": "<p>Set to <code>true</code> to switch the layout to <code>vbox</code>.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.layout.container.Table": {
        "type": "Ext.layout.container.Table",
        "doc": "<p>This layout allows you to easily render content into an HTML table. The total number of columns can be specified, and\nrowspan and colspan can be used to create complex layouts within the table. This class is intended to be extended or\ncreated via the <code>layout: {type: 'table'}</code> Ext.container.Container.layout config, and should generally not\nneed to be created directly via the new keyword.</p>",
        "configs": [
            {
                "name": "columns",
                "type": "number",
                "doc": "<p>The total number of columns to create in the table for this layout. If not specified, all Components added to\nthis layout will be rendered into a single row using one column per Component.</p>",
                "default": null
            },
            {
                "name": "tableAttrs",
                "type": "object",
                "doc": "<p>An object containing properties which are added to the DomHelper specification used to\ncreate the layout's <code>&lt;table&gt;</code> element. Example:</p>",
                "default": null
            },
            {
                "name": "tdAttrs",
                "type": "object",
                "doc": "<p>An object containing properties which are added to the DomHelper specification used to\ncreate the layout's <code>&lt;td&gt;</code> elements.</p>",
                "default": null
            },
            {
                "name": "trAttrs",
                "type": "object",
                "doc": "<p>An object containing properties which are added to the DomHelper specification used to\ncreate the layout's <code>&lt;tr&gt;</code> elements.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.layout.container.VBox": {
        "type": "Ext.layout.container.VBox",
        "doc": "<p>A layout that arranges items vertically down a Container. This layout optionally divides available vertical space\nbetween child items containing a numeric <code>flex</code> configuration.</p>",
        "configs": [
            {
                "name": "vertical",
                "type": "boolean",
                "doc": "<p>Set to <code>true</code> to switch the layout to <code>vbox</code>.</p>",
                "default": "true"
            }
        ],
        "events": []
    },
    "Ext.layout.container.boxOverflow.Menu": {
        "type": "Ext.layout.container.boxOverflow.Menu",
        "configs": [],
        "events": []
    },
    "Ext.layout.container.boxOverflow.None": {
        "type": "Ext.layout.container.boxOverflow.None",
        "doc": "<p>Base class for Box Layout overflow handlers. These specialized classes are invoked when a Box Layout\n(either an HBox or a VBox) has child items that are either too wide (for HBox) or too tall (for VBox)\nfor its container.</p>",
        "configs": [],
        "events": []
    },
    "Ext.layout.container.boxOverflow.Scroller": {
        "type": "Ext.layout.container.boxOverflow.Scroller",
        "configs": [
            {
                "name": "animateScroll",
                "type": "boolean",
                "doc": "<p>True to animate the scrolling of items within the layout (ignored if enableScroll is false)</p>",
                "default": "false"
            },
            {
                "name": "scrollDuration",
                "type": "number",
                "doc": "<p>Number of milliseconds that each scroll animation lasts</p>",
                "default": "400"
            },
            {
                "name": "scrollIncrement",
                "type": "number",
                "doc": "<p>The number of pixels to scroll by on scroller click</p>",
                "default": "20"
            },
            {
                "name": "scrollRepeatInterval",
                "type": "number",
                "doc": "<p>Number of milliseconds between each scroll while a scroller button is held down</p>",
                "default": "60"
            },
            {
                "name": "wheelIncrement",
                "type": "number",
                "doc": "<p>The number of pixels to increment on mouse wheel scrolling.</p>",
                "default": "10"
            }
        ],
        "events": [
            {
                "name": "scroll",
                "params": "scroller(Ext.layout.container.boxOverflow.Scroller) newPosition(Number) animate(Boolean/Object) eOpts(Object)",
                "doc": "\n"
            }
        ]
    },
    "Ext.menu.CheckItem": {
        "type": "Ext.menu.CheckItem",
        "doc": "<p>A menu item that contains a togglable checkbox by default, but that can also be a part of a radio group.</p>",
        "configs": [
            {
                "name": "ariaRole",
                "type": "string",
                "doc": "\n",
                "default": "'menuitemcheckbox'"
            },
            {
                "name": "checkChangeDisabled",
                "type": "boolean",
                "doc": "<p>True to prevent the checked item from being toggled. Any submenu will still be accessible.</p>",
                "default": "false"
            },
            {
                "name": "checkHandler",
                "type": "function",
                "doc": "<p>Alternative for the checkchange event.  Gets called with the same parameters.</p>",
                "default": null
            },
            {
                "name": "checked",
                "type": "boolean",
                "doc": "<p>True to render the menuitem initially checked.</p>",
                "default": "false"
            },
            {
                "name": "checkedCls",
                "type": "string",
                "doc": "<p>The CSS class used by cls to show the checked state.\nDefaults to <code>Ext.baseCSSPrefix + 'menu-item-checked'</code>.</p>",
                "default": "Ext.baseCSSPrefix + 'menu-item-checked'"
            },
            {
                "name": "childEls",
                "type": "object/string[]/object[]",
                "doc": "<p>The canonical form of <code>childEls</code> is an object keyed by child's property name\nwith values that are objects with the following properties.</p>",
                "default": "['checkEl']"
            },
            {
                "name": "group",
                "type": "string",
                "doc": "<p>Name of a radio group that the item belongs.</p>",
                "default": null
            },
            {
                "name": "groupCls",
                "type": "string",
                "doc": "<p>The CSS class applied to this item's icon image to denote being a part of a radio group.\nDefaults to <code>Ext.baseCSSClass + 'menu-group-icon'</code>.\nAny specified iconCls overrides this.</p>",
                "default": "Ext.baseCSSPrefix + 'menu-group-icon'"
            },
            {
                "name": "hideOnClick",
                "type": "boolean",
                "doc": "<p>Whether to not to hide the owning menu when this item is clicked.\nDefaults to <code>false</code> for checkbox items, and to <code>true</code> for radio group items.</p>",
                "default": "false"
            },
            {
                "name": "scope",
                "type": "object",
                "doc": "<p>Scope for the checkHandler callback.</p>",
                "default": null
            },
            {
                "name": "uncheckedCls",
                "type": "string",
                "doc": "<p>The CSS class used by cls to show the unchecked state.\nDefaults to <code>Ext.baseCSSPrefix + 'menu-item-unchecked'</code>.</p>",
                "default": "Ext.baseCSSPrefix + 'menu-item-unchecked'"
            }
        ],
        "events": [
            {
                "name": "beforecheckchange",
                "params": "this(Ext.menu.CheckItem) checked(Boolean) eOpts(Object)",
                "doc": "<p>Fires before a change event. Return false to cancel.</p>"
            },
            {
                "name": "checkchange",
                "params": "this(Ext.menu.CheckItem) checked(Boolean) eOpts(Object)",
                "doc": "<p>Fires after a change event.</p>"
            }
        ]
    },
    "Ext.menu.ColorPicker": {
        "type": "Ext.menu.ColorPicker",
        "doc": "<p>A menu containing a Ext.picker.Color Component.</p>",
        "configs": [
            {
                "name": "hideOnClick",
                "type": "boolean",
                "doc": "<p>False to continue showing the menu after a color is selected.</p>",
                "default": "true"
            },
            {
                "name": "maxHeight",
                "type": "number",
                "doc": "\n",
                "default": null
            },
            {
                "name": "pickerId",
                "type": "string",
                "doc": "<p>An id to assign to the underlying color picker.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "click",
                "params": "eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "select",
                "params": "this(Ext.picker.Color) color(String) eOpts(Object)",
                "doc": "<p>Fires when a color is selected</p>"
            }
        ]
    },
    "Ext.menu.DatePicker": {
        "type": "Ext.menu.DatePicker",
        "doc": "<p>A menu containing an Ext.picker.Date Component.</p>",
        "configs": [
            {
                "name": "ariaLabel",
                "type": "string",
                "doc": "<p>ARIA label for the Date Picker menu</p>",
                "default": "'Date picker'"
            },
            {
                "name": "hideOnClick",
                "type": "boolean",
                "doc": "<p>False to continue showing the menu after a date is selected.</p>",
                "default": "true"
            },
            {
                "name": "maxHeight",
                "type": "number",
                "doc": "\n",
                "default": null
            },
            {
                "name": "pickerId",
                "type": "string",
                "doc": "<p>An id to assign to the underlying date picker.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "select",
                "params": "this(Ext.picker.Date) date(Date) eOpts(Object)",
                "doc": "<p>Fires when a date is selected</p>"
            }
        ]
    },
    "Ext.menu.Item": {
        "type": "Ext.menu.Item",
        "doc": "<p>A base class for all menu items that require menu-related functionality such as click handling,\nsub-menus, icons, etc.</p>",
        "configs": [
            {
                "name": "activeCls",
                "type": "string",
                "doc": "<p>The CSS class added to the menu item when the item is focused.</p>",
                "default": "Ext.baseCSSPrefix + 'menu-item-active'"
            },
            {
                "name": "ariaRole",
                "type": "string",
                "doc": "\n",
                "default": "'menuitem'"
            },
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to elements within this\ncomponent like Panel's body will get a class <code>x-panel-body</code>. This means that if you create a subclass of Panel, and\nyou want it to get all the Panels styling for the element and the body, you leave the <code>baseCls</code> <code>x-panel</code> and use\n<code>componentCls</code> to add specific styling for this component.</p>",
                "default": "Ext.baseCSSPrefix + 'menu-item'"
            },
            {
                "name": "canActivate",
                "type": "boolean",
                "doc": "<p>Whether or not this menu item can be focused.</p>",
                "default": null
            },
            {
                "name": "childEls",
                "type": "object/string[]/object[]",
                "doc": "<p>The canonical form of <code>childEls</code> is an object keyed by child's property name\nwith values that are objects with the following properties.</p>",
                "default": "['itemEl', 'iconEl', 'textEl', 'arrowEl']"
            },
            {
                "name": "clickHideDelay",
                "type": "number",
                "doc": "<p>The delay in milliseconds to wait before hiding the menu after clicking the menu item.\nThis only has an effect when <code>hideOnClick: true</code>.</p>",
                "default": "0"
            },
            {
                "name": "destroyMenu",
                "type": "boolean",
                "doc": "<p>Whether or not to destroy any associated sub-menu when this item is destroyed.</p>",
                "default": "true"
            },
            {
                "name": "disabledCls",
                "type": "string",
                "doc": "<p>The CSS class added to the menu item when the item is disabled.</p>",
                "default": "Ext.baseCSSPrefix + 'menu-item-disabled'"
            },
            {
                "name": "glyph",
                "type": "number/string",
                "doc": "<p>A numeric unicode character code to use as the icon for this item. The default\nfont-family for glyphs can be set globally using\nExt.setGlyphFontFamily(). Alternatively, this\nconfig option accepts a string with the charCode and font-family separated by the\n<code>@</code> symbol. For example '65@My Font Family'.</p>",
                "default": null
            },
            {
                "name": "handler",
                "type": "function",
                "doc": "<p>A function called when the menu item is clicked (can be used instead of click event).</p>",
                "default": null
            },
            {
                "name": "hideOnClick",
                "type": "boolean",
                "doc": "<p>Whether to not to hide the owning menu when this item is clicked.</p>",
                "default": "true"
            },
            {
                "name": "href",
                "type": "string",
                "doc": "<p>The href attribute to use for the underlying anchor link.</p>",
                "default": "'#'"
            },
            {
                "name": "hrefTarget",
                "type": "string",
                "doc": "<p>The target attribute to use for the underlying anchor link.</p>",
                "default": null
            },
            {
                "name": "icon",
                "type": "string",
                "doc": "<p>The path to an icon to display in this item.</p>",
                "default": null
            },
            {
                "name": "iconCls",
                "type": "string",
                "doc": "<p>A CSS class that specifies a <code>background-image</code> to use as the icon for this item.</p>",
                "default": null
            },
            {
                "name": "menu",
                "type": "ext.menu.menu/object",
                "doc": "<p>Either an instance of Ext.menu.Menu or a config object for an Ext.menu.Menu\nwhich will act as a sub-menu to this item.</p>",
                "default": null
            },
            {
                "name": "menuAlign",
                "type": "string",
                "doc": "<p>The default Ext.util.Positionable.getAlignToXY anchor position value for this\nitem's sub-menu relative to this item's position.</p>",
                "default": "'tl-tr?'"
            },
            {
                "name": "menuExpandDelay",
                "type": "number",
                "doc": "<p>The delay in milliseconds before this item's sub-menu expands after this item is moused over.</p>",
                "default": "200"
            },
            {
                "name": "menuHideDelay",
                "type": "number",
                "doc": "<p>The delay in milliseconds before this item's sub-menu hides after this item is moused out.</p>",
                "default": "200"
            },
            {
                "name": "plain",
                "type": "boolean",
                "doc": "<p>Whether or not this item is plain text/html with no icon or visual activation.</p>",
                "default": null
            },
            {
                "name": "renderTpl",
                "type": "ext.xtemplate/string/string[]",
                "doc": "<p>An XTemplate used to create the internal structure inside this Component's encapsulating\nElement.</p>",
                "default": "'<tpl if=\"plain\">' + '{text}' + '<tpl else>' + '<a id=\"{id}-itemEl\" data-ref=\"itemEl\"' + ' class=\"{linkCls}<tpl if=\"hasHref\"> {linkHrefCls}</tpl>{childElCls}\"' + ' href=\"{href}\" role=\"menuitem\" ' + '<tpl if=\"hrefTarget\"> target=\"{hrefTarget}\"</tpl>' + ' hidefocus=\"true\"' + ' unselectable=\"on\"' + '<tpl if=\"tabIndex != null\">' + ' tabindex=\"{tabIndex}\"' + '</tpl>' + '>' + '<span id=\"{id}-textEl\" data-ref=\"textEl\" class=\"{textCls} {textCls}-{ui} {indentCls}{childElCls}\" unselectable=\"on\">{text}</span>' + '<tpl if=\"hasIcon\">' + '<div role=\"presentation\" id=\"{id}-iconEl\" data-ref=\"iconEl\" class=\"{baseIconCls}-{ui} {baseIconCls}' + '{[values.rightIcon ? \"-right\" : \"\"]} {iconCls}' + '{childElCls} {glyphCls}\" style=\"<tpl if=\"icon\">background-image:url({icon});</tpl>' + '<tpl if=\"glyph && glyphFontFamily\">font-family:{glyphFontFamily};</tpl>\">' + '<tpl if=\"glyph\">&#{glyph};</tpl>' + '</div>' + '</tpl>' + '<tpl if=\"showCheckbox\">' + '<div role=\"presentation\" id=\"{id}-checkEl\" data-ref=\"checkEl\" class=\"{baseIconCls}-{ui} {baseIconCls}' + '{[(values.hasIcon && !values.rightIcon) ? \"-right\" : \"\"]} ' + '{groupCls} {checkboxCls}{childElCls}\">' + '</div>' + '</tpl>' + '<tpl if=\"hasMenu\">' + '<div role=\"presentation\" id=\"{id}-arrowEl\" data-ref=\"arrowEl\" class=\"{arrowCls} {arrowCls}-{ui}{childElCls}\"></div>' + '</tpl>' + '</a>' + '</tpl>'"
            },
            {
                "name": "text",
                "type": "string",
                "doc": "<p>The text/html to display in this item.</p>",
                "default": null
            },
            {
                "name": "tooltip",
                "type": "string/object",
                "doc": "<p>The tooltip for the button - can be a string to be used as innerHTML (html tags are accepted) or\nQuickTips config object.</p>",
                "default": null
            },
            {
                "name": "tooltipType",
                "type": "string",
                "doc": "<p>The type of tooltip to use. Either 'qtip' for QuickTips or 'title' for title attribute.</p>",
                "default": "'qtip'"
            }
        ],
        "events": [
            {
                "name": "activate",
                "params": "item(Ext.menu.Item) eOpts(Object)",
                "doc": "<p>Fires when this item is activated</p>"
            },
            {
                "name": "click",
                "params": "item(Ext.menu.Item) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when this item is clicked</p>"
            },
            {
                "name": "deactivate",
                "params": "item(Ext.menu.Item) eOpts(Object)",
                "doc": "<p>Fires when this tiem is deactivated</p>"
            },
            {
                "name": "iconchange",
                "params": "this(Ext.menu.Item) oldIcon(String) newIcon(String) eOpts(Object)",
                "doc": "<p>Fired when the item's icon is changed by the setIcon or setIconCls methods.</p>"
            },
            {
                "name": "textchange",
                "params": "this(Ext.menu.Item) oldText(String) newText(String) eOpts(Object)",
                "doc": "<p>Fired when the item's text is changed by the setText method.</p>"
            }
        ]
    },
    "Ext.menu.Manager": {
        "type": "Ext.menu.Manager",
        "doc": "<p>Provides a common registry groups of Ext.menu.CheckItems.</p>",
        "configs": [],
        "events": []
    },
    "Ext.menu.Menu": {
        "type": "Ext.menu.Menu",
        "doc": "<p>A menu object. This is the container to which you may add menu items.</p>",
        "configs": [
            {
                "name": "allowOtherMenus",
                "type": "boolean",
                "doc": "<p>True to allow multiple menus to be displayed at the same time.</p>",
                "default": "false"
            },
            {
                "name": "ariaRole",
                "type": "string",
                "doc": "\n",
                "default": "'menu'"
            },
            {
                "name": "autoRender",
                "type": "boolean",
                "doc": "<p>Floating is true, so autoRender always happens.</p>",
                "default": null
            },
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>private</p>",
                "default": "Ext.baseCSSPrefix + 'menu'"
            },
            {
                "name": "constrain",
                "type": "boolean",
                "doc": "<p>Menus are constrained to the document body by default.</p>",
                "default": "true"
            },
            {
                "name": "defaultAlign",
                "type": "string",
                "doc": "<p>The default Ext.dom.Element#getAlignToXY anchor position value for this menu\nrelative to its owner. Used in conjunction with showBy.</p>",
                "default": "\"tl-bl?\""
            },
            {
                "name": "defaultFocus",
                "type": "string",
                "doc": "<p>Specifies a child Component to receive focus when this Container's focus\nmethod is called. Should be a valid query selector.</p>",
                "default": "':focusable'"
            },
            {
                "name": "enableKeyNav",
                "type": "boolean",
                "doc": "\n",
                "default": "true"
            },
            {
                "name": "floating",
                "type": "boolean",
                "doc": "<p>A Menu configured as <code>floating: true</code> (the default) will be rendered as an absolutely positioned,\nfloating Component. If configured as <code>floating: false</code>, the Menu may be\nused as a child item of another Container.</p>",
                "default": "true"
            },
            {
                "name": "hidden",
                "type": "boolean",
                "doc": "<p>True to initially render the Menu as hidden, requiring to be shown manually.</p>",
                "default": "true"
            },
            {
                "name": "hideMode",
                "type": "string",
                "doc": "<p>A String which specifies how this Component's encapsulating DOM element will be hidden. Values may be:</p>",
                "default": "'visibility'"
            },
            {
                "name": "ignoreParentClicks",
                "type": "boolean",
                "doc": "<p>True to ignore clicks on any item in this menu that is a parent item (displays a submenu)\nso that the submenu is not dismissed when clicking the parent item.</p>",
                "default": "false"
            },
            {
                "name": "layout",
                "type": "ext.enums.layout/object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "minWidth",
                "type": "number",
                "doc": "<p>The minimum width of the Menu. The default minWidth only applies when the floating config is true.</p>",
                "default": "120"
            },
            {
                "name": "plain",
                "type": "boolean",
                "doc": "<p>True to remove the incised line down the left side of the menu and to not indent general Component items.</p>",
                "default": "false"
            },
            {
                "name": "showSeparator",
                "type": "boolean",
                "doc": "<p>True to show the icon separator.</p>",
                "default": "true"
            }
        ],
        "events": [
            {
                "name": "click",
                "params": "menu(Ext.menu.Menu) item(Ext.Component) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when this menu is clicked</p>"
            },
            {
                "name": "mouseenter",
                "params": "menu(Ext.menu.Menu) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when the mouse enters this menu</p>"
            },
            {
                "name": "mouseleave",
                "params": "menu(Ext.menu.Menu) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when the mouse leaves this menu</p>"
            },
            {
                "name": "mouseover",
                "params": "menu(Ext.menu.Menu) item(Ext.Component) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when the mouse is hovering over this menu</p>"
            }
        ]
    },
    "Ext.menu.Separator": {
        "type": "Ext.menu.Separator",
        "doc": "<p>Adds a separator bar to a menu, used to divide logical groups of menu items. Generally you will\nadd one of these by using \"-\" in your call to add() or in your items config rather than creating one directly.</p>",
        "configs": [
            {
                "name": "activeCls",
                "type": "string",
                "doc": "\n",
                "default": null
            },
            {
                "name": "ariaRole",
                "type": "string",
                "doc": "\n",
                "default": "'separator'"
            },
            {
                "name": "canActivate",
                "type": "boolean",
                "doc": "\n",
                "default": "false"
            },
            {
                "name": "clickHideDelay",
                "type": "boolean",
                "doc": "\n",
                "default": null
            },
            {
                "name": "destroyMenu",
                "type": "boolean",
                "doc": "\n",
                "default": null
            },
            {
                "name": "disabledCls",
                "type": "boolean",
                "doc": "\n",
                "default": null
            },
            {
                "name": "hideOnClick",
                "type": "boolean",
                "doc": "\n",
                "default": "false"
            },
            {
                "name": "href",
                "type": "string",
                "doc": "\n",
                "default": null
            },
            {
                "name": "hrefTarget",
                "type": "string",
                "doc": "\n",
                "default": null
            },
            {
                "name": "icon",
                "type": "string",
                "doc": "\n",
                "default": null
            },
            {
                "name": "iconCls",
                "type": "string",
                "doc": "\n",
                "default": null
            },
            {
                "name": "menu",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "menuAlign",
                "type": "string",
                "doc": "\n",
                "default": null
            },
            {
                "name": "menuExpandDelay",
                "type": "number",
                "doc": "\n",
                "default": null
            },
            {
                "name": "menuHideDelay",
                "type": "number",
                "doc": "\n",
                "default": null
            },
            {
                "name": "plain",
                "type": "boolean",
                "doc": "\n",
                "default": "true"
            },
            {
                "name": "separatorCls",
                "type": "string",
                "doc": "<p>The CSS class used by the separator item to show the incised line.</p>",
                "default": "Ext.baseCSSPrefix + 'menu-item-separator'"
            },
            {
                "name": "text",
                "type": "string",
                "doc": "\n",
                "default": "'&#160;'"
            }
        ],
        "events": []
    },
    "Ext.mixin.Bindable": {
        "type": "Ext.mixin.Bindable",
        "doc": "<p>This class is intended as a mixin for classes that want to provide a \"bind\" config that\nconnects to a <code>ViewModel</code>.</p>",
        "configs": [
            {
                "name": "bind",
                "type": "object",
                "doc": "<p>Setting this config option adds or removes data bindings for other configs.\nFor example, to bind the <code>title</code> config:</p>",
                "default": "{$value: null, lazy: true}"
            },
            {
                "name": "controller",
                "type": "string/object/ext.app.viewcontroller",
                "doc": "<p>A string alias, a configuration object or an instance of a <code>ViewController</code> for\nthis container. Sample usage:</p>",
                "default": null
            },
            {
                "name": "defaultListenerScope",
                "type": "boolean",
                "doc": "<p>If <code>true</code>, this component will be the default scope (this pointer) for events\nspecified with string names so that the scope can be dynamically resolved. The\ncomponent will automatically become the defaultListenerScope if a\ncontroller is specified.</p>",
                "default": "false"
            },
            {
                "name": "publishes",
                "type": "string/string[]/object",
                "doc": "<p>One or more names of config properties that this component should publish to\nits <code>ViewModel</code>. Some components override this and publish their most useful\nconfigs by default.</p>",
                "default": null
            },
            {
                "name": "reference",
                "type": "string",
                "doc": "<p>Specifies a name for this component inside its component hierarchy. This name\nmust be unique within its view\nor its ViewController. See the documentation in\nExt.container.Container for more information about references.</p>",
                "default": null
            },
            {
                "name": "session",
                "type": "boolean/object/ext.data.session",
                "doc": "<p>If provided this creates a new <code>Session</code> instance for this component. If this\nis a <code>Container</code>, this will then be inherited by all child components.</p>",
                "default": "null"
            },
            {
                "name": "twoWayBindable",
                "type": "string/string[]/object",
                "doc": "<p>This object holds a map of <code>config</code> properties that will update their binding\nas they are modified. For example, <code>value</code> is a key added by form fields. The\nform of this config is the same as <code>publishes</code>.</p>",
                "default": null
            },
            {
                "name": "viewModel",
                "type": "string/object/ext.app.viewmodel",
                "doc": "<p>The <code>ViewModel</code> is a data provider for this component and its children. The\ndata contained in the <code>ViewModel</code> is typically used by adding <code>bind</code> configs\nto the components that want present or edit this data.</p>",
                "default": "{$value: null, lazy: true}"
            }
        ],
        "events": []
    },
    "Ext.mixin.Factoryable": {
        "type": "Ext.mixin.Factoryable",
        "doc": "<p>This mixin automates use of <code>Ext.Factory</code>. When mixed in to a class, the <code>alias</code> of the\nclass is retrieved and combined with an optional <code>factoryConfig</code> property on that class\nto produce the configuration to pass to <code>Ext.Factory</code>.</p>",
        "configs": [],
        "events": []
    },
    "Ext.mixin.Hookable": {
        "type": "Ext.mixin.Hookable",
        "configs": [],
        "events": []
    },
    "Ext.mixin.Identifiable": {
        "type": "Ext.mixin.Identifiable",
        "doc": "<p>An Identifiable mixin.</p>",
        "configs": [],
        "events": []
    },
    "Ext.mixin.Inheritable": {
        "type": "Ext.mixin.Inheritable",
        "doc": "<p>A mixin that provides the functionality for inheritable configs. This allows linking\ncomponents and containers via a prototype-chained object for accessing inherited\nvalues.</p>",
        "configs": [],
        "events": []
    },
    "Ext.mixin.Mashup": {
        "type": "Ext.mixin.Mashup",
        "doc": "<p>This mixin allows users to easily require external scripts in their classes. This load\nprocess delays application launch (<code>Ext.onReady</code>) until all such scripts are loaded\nensuring that your class will have access to its required scripts from the start.</p>",
        "configs": [],
        "events": []
    },
    "Ext.mixin.Observable": {
        "type": "Ext.mixin.Observable",
        "doc": "<p>Base class that provides a common interface for publishing events. Subclasses are\nexpected to have a property \"events\" which is populated as event listeners register,\nand, optionally, a property \"listeners\" with configured listeners defined.</p>",
        "configs": [
            {
                "name": "listeners",
                "type": "object",
                "doc": "<p>A config object containing one or more event handlers to be added to this object during initialization. This\nshould be a valid listeners config object as specified in the addListener example for attaching multiple\nhandlers at once.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.mixin.Queryable": {
        "type": "Ext.mixin.Queryable",
        "doc": "<p>A mixin for providing query related methods for Ext.ComponentQuery for classes that\nimplement getRefItems.</p>",
        "configs": [],
        "events": []
    },
    "Ext.mixin.Responsive": {
        "type": "Ext.mixin.Responsive",
        "doc": "<p>This mixin provides its user with a <code>responsiveConfig</code> config that allows the class\nto conditionally control config properties.</p>",
        "configs": [
            {
                "name": "responsiveConfig",
                "type": "object",
                "doc": "<p>This object consists of keys that represent the conditions on which configs\nwill be applied. For example:</p>",
                "default": null
            },
            {
                "name": "responsiveFormulas",
                "type": "object",
                "doc": "<p>It is common when using <code>responsiveConfig</code> to have recurring expressions that\nmake for complex configurations. Using <code>responsiveFormulas</code> allows you to cut\ndown on this repetition by adding new properties to the \"scope\" for the rules\nin a <code>responsiveConfig</code>.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.mixin.Selectable": {
        "type": "Ext.mixin.Selectable",
        "doc": "<p>Tracks what records are currently selected in a databound widget. This class is mixed in to\ndataview and all subclasses.</p>",
        "configs": [
            {
                "name": "allowDeselect",
                "type": "boolean",
                "doc": "<p>Allow users to deselect a record in a DataView, List or Grid. Only applicable when the Selectable's <code>mode</code> is\n<code>'SINGLE'</code>.</p>",
                "default": "false"
            },
            {
                "name": "deselectOnContainerClick",
                "type": "boolean",
                "doc": "<p><code>true</code> to deselect current selection when the container body is\nclicked.</p>",
                "default": "true"
            },
            {
                "name": "disableSelection",
                "type": "boolean",
                "doc": "<p><code>true</code> to disable selection.\nThis configuration will lock the selection model that the DataView uses.</p>",
                "default": null
            },
            {
                "name": "lastFocused",
                "type": "ext.data.model",
                "doc": "\n",
                "default": null
            },
            {
                "name": "lastSelected",
                "type": "ext.data.model",
                "doc": "\n",
                "default": null
            },
            {
                "name": "locked",
                "type": "boolean",
                "doc": "<p><code>true</code> to disable selection.\nThis configuration will lock the selection model that the DataView uses.</p>",
                "default": null
            },
            {
                "name": "mode",
                "type": "string",
                "doc": "<p>Modes of selection.\nValid values are <code>'SINGLE'</code>, <code>'SIMPLE'</code>, and <code>'MULTI'</code>.</p>",
                "default": "'SINGLE'"
            }
        ],
        "events": [
            {
                "name": "beforeselectionchange",
                "params": "this(Ext.mixin.Selectable) eOpts(Object)",
                "doc": "<p>Fires before an item is selected.</p>"
            },
            {
                "name": "selectionchange",
                "params": "this(Ext.mixin.Selectable) records(Ext.data.Model[]) eOpts(Object)",
                "doc": "<p>Fires when a selection changes.</p>"
            }
        ]
    },
    "Ext.mixin.Templatable": {
        "type": "Ext.mixin.Templatable",
        "configs": [],
        "events": []
    },
    "Ext.mixin.Traversable": {
        "type": "Ext.mixin.Traversable",
        "doc": "<p>A Traversable mixin.</p>",
        "configs": [],
        "events": []
    },
    "Ext.os": {
        "type": "Ext.os",
        "doc": "<p>Provides useful information about the current operating system environment.</p>",
        "configs": [],
        "events": []
    },
    "Ext.panel.Bar": {
        "type": "Ext.panel.Bar",
        "doc": "<p>Abstract base class for common functionality shared between Ext.panel.Header\nand Ext.tab.Bar</p>",
        "configs": [],
        "events": []
    },
    "Ext.panel.DD": {
        "type": "Ext.panel.DD",
        "doc": "<p>DD implementation for Panels.</p>",
        "configs": [],
        "events": []
    },
    "Ext.panel.Header": {
        "type": "Ext.panel.Header",
        "doc": "<p>Simple header class which is used for on Ext.panel.Panel and Ext.window.Window.</p>",
        "configs": [
            {
                "name": "defaultType",
                "type": "string",
                "doc": "<p>The default xtype of child Components to create in this Container when\na child item is specified as a raw configuration object, rather than as an instantiated Component.</p>",
                "default": "'tool'"
            },
            {
                "name": "glyph",
                "type": "number/string",
                "doc": "<p>A numeric unicode character code to use as the icon for the panel header. The\ndefault font-family for glyphs can be set globally using\nExt.setGlyphFontFamily(). Alternatively, this\nconfig option accepts a string with the charCode and font-family separated by the\n<code>@</code> symbol. For example '65@My Font Family'.</p>",
                "default": null
            },
            {
                "name": "icon",
                "type": "string",
                "doc": "<p>Path to image for an icon.</p>",
                "default": null
            },
            {
                "name": "iconAlign",
                "type": "'top'/'right'/'bottom'/'left'",
                "doc": "<p>The side of the title to render the icon.</p>",
                "default": "'left'"
            },
            {
                "name": "iconCls",
                "type": "string",
                "doc": "<p>CSS class for an icon.</p>",
                "default": null
            },
            {
                "name": "shrinkWrap",
                "type": "boolean/number",
                "doc": "<p>If this property is a number, it is interpreted as follows:</p>",
                "default": "3"
            },
            {
                "name": "title",
                "type": "string/ext.panel.title",
                "doc": "<p>The title text or config object for the Title component.</p>",
                "default": null
            },
            {
                "name": "titleAlign",
                "type": "string",
                "doc": "<p>The alignment of the title text.</p>",
                "default": "'left'"
            },
            {
                "name": "titlePosition",
                "type": "number",
                "doc": "<p>The ordinal position among the header items (tools and other components specified using the items config)\nat which the title component is inserted. See Panel's header config.</p>",
                "default": "0"
            },
            {
                "name": "titleRotation",
                "type": "'default'/0/1/2",
                "doc": "<p>The rotation of the header's title text.  Can be one of the following values:</p>",
                "default": "'default'"
            },
            {
                "name": "weight",
                "type": "number",
                "doc": "<p>A value to control how Components are laid out in a Border layout or as docked items.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "click",
                "params": "this(Ext.panel.Header) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when the header is clicked. This event will not be fired\nif the click was on a Ext.panel.Tool</p>"
            },
            {
                "name": "dblclick",
                "params": "this(Ext.panel.Header) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when the header is double clicked. This event will not\nbe fired if the click was on a Ext.panel.Tool</p>"
            }
        ]
    },
    "Ext.panel.Panel": {
        "type": "Ext.panel.Panel",
        "doc": "<p>Panel is a container that has specific functionality and structural components that make it the perfect building\nblock for application-oriented user interfaces.</p>",
        "configs": [
            {
                "name": "animCollapse",
                "type": "boolean",
                "doc": "<p><code>true</code> to animate the transition when the panel is collapsed, <code>false</code> to skip the animation (defaults to <code>true</code>\nif the Ext.fx.Anim class is available, otherwise <code>false</code>). May also be specified as the animation\nduration in milliseconds.</p>",
                "default": null
            },
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p><editor-fold desc=\"Properties\"></editor></p>",
                "default": "Ext.baseCSSPrefix + 'panel'"
            },
            {
                "name": "bbar",
                "type": "object/object[]",
                "doc": "<p>Convenience config. Short for 'Bottom Bar'.</p>",
                "default": null
            },
            {
                "name": "bodyBorder",
                "type": "boolean",
                "doc": "<p>A shortcut to add or remove the border on the body of a panel. In the classic theme\nthis only applies to a panel which has the frame configuration set to <code>true</code>.</p>",
                "default": null
            },
            {
                "name": "bodyCls",
                "type": "string/string[]",
                "doc": "<p>A CSS class, space-delimited string of classes, or array of classes to be applied to the panel's body element.\nThe following examples are all valid:</p>",
                "default": null
            },
            {
                "name": "bodyPadding",
                "type": "number/string",
                "doc": "<p>A shortcut for setting a padding style on the body element. The value can either be\na number to be applied to all sides, or a normal css string describing padding.</p>",
                "default": "undefined"
            },
            {
                "name": "bodyStyle",
                "type": "string/object/function",
                "doc": "<p>Custom CSS styles to be applied to the panel's body element, which can be supplied as a valid CSS style string,\nan object containing style property name/value pairs or a function that returns such a string or object.\nFor example, these two formats are interpreted to be equivalent:</p>",
                "default": null
            },
            {
                "name": "border",
                "type": "boolean",
                "doc": "<p>Specify as <code>false</code> to render the Panel with zero width borders.</p>",
                "default": "true"
            },
            {
                "name": "buttonAlign",
                "type": "string",
                "doc": "<p>The alignment of any buttons added to this panel. Valid values are 'right', 'left' and 'center' (defaults to\n'right' for buttons/fbar, 'left' for other toolbar types).</p>",
                "default": null
            },
            {
                "name": "buttons",
                "type": "object/object[]",
                "doc": "<p>Convenience config used for adding buttons docked to the bottom of the panel. This is a\nsynonym for the fbar config.</p>",
                "default": null
            },
            {
                "name": "childEls",
                "type": "object/string[]/object[]",
                "doc": "<p>The canonical form of <code>childEls</code> is an object keyed by child's property name\nwith values that are objects with the following properties.</p>",
                "default": "['body']"
            },
            {
                "name": "closable",
                "type": "boolean",
                "doc": "<p>True to display the 'close' tool button and allow the user to close the window, false to hide the button and\ndisallow closing the window.</p>",
                "default": "false"
            },
            {
                "name": "closeAction",
                "type": "string",
                "doc": "<p>The action to take when the close header tool is clicked:</p>",
                "default": "'destroy'"
            },
            {
                "name": "collapseDirection",
                "type": "string",
                "doc": "<p>The direction to collapse the Panel when the toggle button is clicked.</p>",
                "default": null
            },
            {
                "name": "collapseFirst",
                "type": "boolean",
                "doc": "<p><code>true</code> to make sure the collapse/expand toggle button always renders first (to the left of) any other tools in\nthe panel's title bar, <code>false</code> to render it last.</p>",
                "default": "true"
            },
            {
                "name": "collapseMode",
                "type": "string",
                "doc": "<p><strong>Important: this config is only effective for collapsible Panels which are direct child items of a\nborder layout.</strong></p>",
                "default": null
            },
            {
                "name": "collapsed",
                "type": "boolean",
                "doc": "<p><code>true</code> to render the panel collapsed, <code>false</code> to render it expanded.</p>",
                "default": "false"
            },
            {
                "name": "collapsedCls",
                "type": "string",
                "doc": "<p>A CSS class to add to the panel's element after it has been collapsed.</p>",
                "default": "'collapsed'"
            },
            {
                "name": "collapsible",
                "type": "boolean",
                "doc": "<p>True to make the panel collapsible and have an expand/collapse toggle Tool added into the header tool button\narea. False to keep the panel sized either statically, or by an owning layout manager, with no toggle Tool.\nWhen a panel is used in a border layout, the floatable option\ncan influence the behavior of collapsing.\nSee collapseMode and collapseDirection</p>",
                "default": null
            },
            {
                "name": "componentLayout",
                "type": "string/object",
                "doc": "<p>The sizing and positioning of a Component's internal Elements is the responsibility of the Component's layout\nmanager which sizes a Component's internal structure in response to the Component being sized.</p>",
                "default": "'dock'"
            },
            {
                "name": "constrain",
                "type": "boolean",
                "doc": "<p>True to constrain the panel within its containing element, false to allow it to fall outside of its containing\nelement. By default floating components such as Windows will be rendered to <code>document.body</code>. To render and constrain the window within\nanother element specify renderTo. Optionally the header only can be constrained\nusing constrainHeader.</p>",
                "default": "false"
            },
            {
                "name": "constrainHeader",
                "type": "boolean",
                "doc": "<p>True to constrain the panel header within its containing element (allowing the panel body to fall outside of\nits containing element) or false to allow the header to fall outside its containing element.\nOptionally the entire panel can be constrained using constrain.</p>",
                "default": "false"
            },
            {
                "name": "dockedItems",
                "type": "object/object[]",
                "doc": "<p>A component or series of components to be added as docked items to this panel. The docked items can be docked to\neither the top, right, left or bottom of a panel. This is typically used for things like toolbars or tab bars:</p>",
                "default": null
            },
            {
                "name": "fbar",
                "type": "object/object[]",
                "doc": "<p>Convenience config used for adding items to the bottom of the panel. Short for Footer Bar.</p>",
                "default": null
            },
            {
                "name": "floatable",
                "type": "boolean",
                "doc": "<p><strong>Important: This config is only effective for collapsible Panels which are direct child items of a\nborder layout.</strong></p>",
                "default": "true"
            },
            {
                "name": "frame",
                "type": "boolean",
                "doc": "<p>True to apply a frame to the panel.</p>",
                "default": "false"
            },
            {
                "name": "frameHeader",
                "type": "boolean",
                "doc": "<p>True to apply a frame to the panel panels header (if 'frame' is true).</p>",
                "default": "true"
            },
            {
                "name": "glyph",
                "type": "number/string",
                "doc": "<p>A numeric unicode character code to use as the icon for the panel header. The\ndefault font-family for glyphs can be set globally using\nExt.setGlyphFontFamily(). Alternatively, this\nconfig option accepts a string with the charCode and font-family separated by the\n<code>@</code> symbol. For example '65@My Font Family'.</p>",
                "default": null
            },
            {
                "name": "header",
                "type": "boolean/object",
                "doc": "<p>Pass as <code>false</code> to prevent a Header from being created and shown.</p>",
                "default": null
            },
            {
                "name": "headerOverCls",
                "type": "string",
                "doc": "<p>Optional CSS class to apply to the header element on mouseover</p>",
                "default": null
            },
            {
                "name": "headerPosition",
                "type": "string",
                "doc": "<p>Specify as <code>'top'</code>, <code>'bottom'</code>, <code>'left'</code> or <code>'right'</code>.</p>",
                "default": "'top'"
            },
            {
                "name": "hideCollapseTool",
                "type": "boolean",
                "doc": "<p><code>true</code> to hide the expand/collapse toggle button when <code>collapsible == true</code>, <code>false</code> to display it.</p>",
                "default": "false"
            },
            {
                "name": "icon",
                "type": "string",
                "doc": "<p>Path to image for an icon.</p>",
                "default": null
            },
            {
                "name": "iconAlign",
                "type": "'top'/'right'/'bottom'/'left'",
                "doc": "<p>The side of the title to render the icon.</p>",
                "default": "'left'"
            },
            {
                "name": "iconCls",
                "type": "string",
                "doc": "<p>CSS class for an icon.</p>",
                "default": null
            },
            {
                "name": "lbar",
                "type": "object/object[]",
                "doc": "<p>Convenience config. Short for 'Left Bar' (left-docked, vertical toolbar).</p>",
                "default": null
            },
            {
                "name": "manageHeight",
                "type": "boolean",
                "doc": "<p>When true, the dock component layout writes\nheight information to the panel's DOM elements based on its shrink wrap height\ncalculation. This ensures that the browser respects the calculated height.\nWhen false, the dock component layout will not write heights on the panel or its\nbody element. In some simple layout cases, not writing the heights to the DOM may\nbe desired because this allows the browser to respond to direct DOM manipulations\n(like animations).</p>",
                "default": "true"
            },
            {
                "name": "maskElement",
                "type": "string",
                "doc": "<p>The name of the element property in this Panel to mask when masked by a LoadMask.</p>",
                "default": "\"el\""
            },
            {
                "name": "minButtonWidth",
                "type": "number",
                "doc": "<p>Minimum width of all footer toolbar buttons in pixels. If set, this will be used as the default\nvalue for the Ext.button.Button.minWidth config of each Button added to the <strong>footer toolbar</strong> via the\nfbar or buttons configurations. It will be ignored for buttons that have a minWidth configured\nsome other way, e.g. in their own config object or via the defaults of\ntheir parent container.</p>",
                "default": "75"
            },
            {
                "name": "overlapHeader",
                "type": "boolean",
                "doc": "<p>True to overlap the header in a panel over the framing of the panel itself. This is needed when frame:true (and\nis done automatically for you). Otherwise it is undefined. If you manually add rounded corners to a panel header\nwhich does not have frame:true, this will need to be set to true.</p>",
                "default": null
            },
            {
                "name": "placeholder",
                "type": "ext.component/object",
                "doc": "<p><strong>Important: This config is only effective for collapsible Panels which are direct child items of a\nborder layout when not using the <code>'header'</code> collapseMode.</strong></p>",
                "default": null
            },
            {
                "name": "placeholderCollapseHideMode",
                "type": "number",
                "doc": "<p>The mode for hiding collapsed panels when\nusing collapseMode \"placeholder\".</p>",
                "default": "Ext.Element.VISIBILITY"
            },
            {
                "name": "preventHeader",
                "type": "boolean",
                "doc": "\n",
                "default": "false"
            },
            {
                "name": "rbar",
                "type": "object/object[]",
                "doc": "<p>Convenience config. Short for 'Right Bar' (right-docked, vertical toolbar).</p>",
                "default": null
            },
            {
                "name": "renderTpl",
                "type": "ext.xtemplate/string/string[]",
                "doc": "<p>An XTemplate used to create the internal structure inside this Component's encapsulating\nElement.</p>",
                "default": "['{% this.renderDockedItems(out,values,0); %}', '<div id=\"{id}-body\" data-ref=\"body\" class=\"{baseCls}-body<tpl if=\"bodyCls\"> {bodyCls}</tpl>', ' {baseCls}-body-{ui}<tpl if=\"uiCls\">', '<tpl for=\"uiCls\"> {parent.baseCls}-body-{parent.ui}-{.}</tpl>', '</tpl>{childElCls}\"', '<tpl if=\"bodyRole\"> role=\"{bodyRole}\"<tpl else> role=\"presentation\"</tpl>', '<tpl if=\"bodyStyle\"> style=\"{bodyStyle}\"</tpl>>', '{%this.renderContainer(out,values);%}', '</div>', '{% this.renderDockedItems(out,values,1); %}']"
            },
            {
                "name": "shrinkWrapDock",
                "type": "boolean/number",
                "doc": "<p>Allows for this panel to include the dockedItems when trying to determine the overall\nsize of the panel. This option is only applicable when this panel is also shrink wrapping in the\nsame dimensions. See Ext.Component.shrinkWrap for an explanation of the configuration options.</p>",
                "default": "false"
            },
            {
                "name": "simpleDrag",
                "type": "boolean",
                "doc": "<p>When draggable is <code>true</code>, Specify this as <code>true</code> to  cause the <code>draggable</code> config\nto work the same as it does in Window. This Panel\njust becomes movable. No DragDrop instances receive any notifications.\nFor example:</p>",
                "default": "false"
            },
            {
                "name": "tbar",
                "type": "object/object[]",
                "doc": "<p>Convenience config. Short for 'Top Bar'.</p>",
                "default": null
            },
            {
                "name": "title",
                "type": "string",
                "doc": "<p>The title text to be used to display in the Panel Header.\nOr a config object for a Panel Title. When a <code>title</code> is\nspecified the Ext.panel.Header will automatically be created and\ndisplayed unless header is set to <code>false</code>.</p>",
                "default": null
            },
            {
                "name": "titleAlign",
                "type": "string",
                "doc": "<p>The alignment of the title text within the available space between the\nicon and the tools.</p>",
                "default": "'left'"
            },
            {
                "name": "titleCollapse",
                "type": "boolean",
                "doc": "<p><code>true</code> to allow expanding and collapsing the panel (when <code>collapsible = true</code>) by clicking anywhere in\nthe header bar, <code>false</code>) to allow it only by clicking to tool button). When a panel is used in a\nborder layout, the floatable option can influence the behavior of collapsing.</p>",
                "default": null
            },
            {
                "name": "titleRotation",
                "type": "'default'/0/1/2",
                "doc": "<p>The rotation of the header's title text.  Can be one of the following values:</p>",
                "default": "'default'"
            },
            {
                "name": "tools",
                "type": "object[]/ext.panel.tool[]",
                "doc": "<p>An array of Ext.panel.Tool configs/instances to be added to the header tool area. The tools are stored as\nchild components of the header container. They can be accessed using down and {query}, as well as the\nother component methods. The toggle tool is automatically created if collapsible is set to true.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "beforeclose",
                "params": "panel(Ext.panel.Panel) eOpts(Object)",
                "doc": "<p>Fires before the user closes the panel. Return false from any listener to stop the close event being\nfired</p>"
            },
            {
                "name": "beforecollapse",
                "params": "p(Ext.panel.Panel) direction(String) animate(Boolean) eOpts(Object)",
                "doc": "<p>Fires before this panel is collapsed. Return false to prevent the collapse.</p>"
            },
            {
                "name": "beforeexpand",
                "params": "p(Ext.panel.Panel) animate(Boolean) eOpts(Object)",
                "doc": "<p>Fires before this panel is expanded. Return false to prevent the expand.</p>"
            },
            {
                "name": "close",
                "params": "panel(Ext.panel.Panel) eOpts(Object)",
                "doc": "<p>Fires when the user closes the panel.</p>"
            },
            {
                "name": "collapse",
                "params": "p(Ext.panel.Panel) eOpts(Object)",
                "doc": "<p>Fires after this Panel has collapsed.</p>"
            },
            {
                "name": "expand",
                "params": "p(Ext.panel.Panel) eOpts(Object)",
                "doc": "<p>Fires after this Panel has expanded.</p>"
            },
            {
                "name": "float",
                "params": "eOpts(Object)",
                "doc": "<p>Fires after a collapsed Panel has been \"floated\" by clicking on\nit's header. Only applicable when the Panel is an item in a\nBorder Layout.</p>"
            },
            {
                "name": "glyphchange",
                "params": "this(Ext.panel.Panel) newGlyph(Number/String) oldGlyph(Number/String) eOpts(Object)",
                "doc": "<p>Fired when the Panel glyph has been changed by the setGlyph method.</p>"
            },
            {
                "name": "iconchange",
                "params": "p(Ext.panel.Panel) newIcon(String) oldIcon(String) eOpts(Object)",
                "doc": "<p>Fires after the Panel icon has been set or changed.</p>"
            },
            {
                "name": "iconclschange",
                "params": "p(Ext.panel.Panel) newIconCls(String) oldIconCls(String) eOpts(Object)",
                "doc": "<p>Fires after the Panel iconCls has been set or changed.</p>"
            },
            {
                "name": "titlechange",
                "params": "p(Ext.panel.Panel) newTitle(String) oldTitle(String) eOpts(Object)",
                "doc": "<p>Fires after the Panel title has been set or changed.</p>"
            },
            {
                "name": "unfloat",
                "params": "eOpts(Object)",
                "doc": "<p>Fires after a \"floated\" Panel has returned to it's collapsed state\nas a result of the mouse leaving the Panel. Only applicable when\nthe Panel is an item in a\nBorder Layout.</p>"
            }
        ]
    },
    "Ext.panel.Pinnable": {
        "type": "Ext.panel.Pinnable",
        "doc": "<p>This mixin is applied to panels that want to manage a Pin state and corresponding tool.</p>",
        "configs": [],
        "events": []
    },
    "Ext.panel.Proxy": {
        "type": "Ext.panel.Proxy",
        "doc": "<p>A custom drag proxy implementation specific to Ext.panel.Panels. This class\nis primarily used internally for the Panel's drag drop implementation, and\nshould never need to be created directly.</p>",
        "configs": [
            {
                "name": "insertProxy",
                "type": "boolean",
                "doc": "<p>True to insert a placeholder proxy element while dragging the panel, false to drag with no proxy.\nMost Panels are not absolute positioned and therefore we need to reserve this space.</p>",
                "default": "true"
            },
            {
                "name": "moveOnDrag",
                "type": "boolean",
                "doc": "<p>True to move the panel to the dragged position when dropped</p>",
                "default": "true"
            }
        ],
        "events": []
    },
    "Ext.panel.Table": {
        "type": "Ext.panel.Table",
        "doc": "<p>This class is the base class for both TreePanel and\nGridPanel.</p>",
        "configs": [
            {
                "name": "allowDeselect",
                "type": "boolean",
                "doc": "<p>True to allow deselecting a record. This config is forwarded to Ext.selection.Model.allowDeselect.</p>",
                "default": "false"
            },
            {
                "name": "autoLoad",
                "type": "boolean",
                "doc": "<p>Use <code>true</code> to load the store as soon as this component is fully constructed. It is\nbest to initiate the store load this way to allow this component and potentially\nits plugins (such as <code>Ext.grid.filters.Filters</code> to be ready to load.</p>",
                "default": "false"
            },
            {
                "name": "bufferedRenderer",
                "type": "boolean",
                "doc": "<p>Buffered rendering is enabled by default.</p>",
                "default": "true"
            },
            {
                "name": "columnLines",
                "type": "boolean",
                "doc": "<p>Adds column line styling</p>",
                "default": null
            },
            {
                "name": "columns",
                "type": "ext.grid.column.column[]/object",
                "doc": "<p>An array of column definition objects which define all columns that appear in this\ngrid. Each column definition provides the header text for the column, and a definition of where the data for that\ncolumn comes from.</p>",
                "default": null
            },
            {
                "name": "deferRowRender",
                "type": "boolean",
                "doc": "<p>Configure as <code>true</code> to enable deferred row rendering.</p>",
                "default": "false"
            },
            {
                "name": "disableSelection",
                "type": "boolean",
                "doc": "<p>True to disable selection model.</p>",
                "default": "false"
            },
            {
                "name": "emptyText",
                "type": "string",
                "doc": "<p>Default text (HTML tags are accepted) to display in the\nPanel body when the Store is empty. When specified, and the Store is empty, the\ntext will be rendered inside a DIV with the CSS class \"x-grid-empty\". The emptyText\nwill not display until the first load of the associated store by default. If you\nwant the text to be displayed prior to the first store load use the\ndeferEmptyText config in the viewConfig config.</p>",
                "default": null
            },
            {
                "name": "enableColumnHide",
                "type": "boolean",
                "doc": "<p>False to disable column hiding within this grid.</p>",
                "default": "true"
            },
            {
                "name": "enableColumnMove",
                "type": "boolean",
                "doc": "<p>False to disable column dragging within this grid.</p>",
                "default": "true"
            },
            {
                "name": "enableColumnResize",
                "type": "boolean",
                "doc": "<p>False to disable column resizing within this grid.</p>",
                "default": "true"
            },
            {
                "name": "enableLocking",
                "type": "boolean",
                "doc": "<p>Configure as <code>true</code> to enable locking support for this grid. Alternatively, locking will also be automatically\nenabled if any of the columns in the columns configuration contain a locked config option.</p>",
                "default": "false"
            },
            {
                "name": "features",
                "type": "ext.grid.feature.feature[]/object[]/ext.enums.feature[]",
                "doc": "<p>An array of grid Features to be added to this grid. Can also be just a single feature instead of array.</p>",
                "default": null
            },
            {
                "name": "forceFit",
                "type": "boolean",
                "doc": "<p>True to force the columns to fit into the available width. Headers are first sized according to configuration,\nwhether that be a specific width, or flex. Then they are all proportionally changed in width so that the entire\ncontent width is used. For more accurate control, it is more optimal to specify a flex setting on the columns\nthat are to be stretched &amp; explicit widths on columns that are not.</p>",
                "default": null
            },
            {
                "name": "hideHeaders",
                "type": "boolean",
                "doc": "<p>True to hide column headers.</p>",
                "default": "false"
            },
            {
                "name": "layout",
                "type": "ext.enums.layout/object",
                "doc": "<p><strong>Important</strong>: In order for child items to be correctly sized and\npositioned, typically a layout manager <strong>must</strong> be specified through\nthe <code>layout</code> configuration option.</p>",
                "default": "'fit'"
            },
            {
                "name": "leadingBufferZone",
                "type": "number",
                "doc": "<p>TableViews are buffer rendered in 5.x which means that only the visible subset of data rows\nare rendered into the DOM. These are removed and added as scrolling demands.</p>",
                "default": "20"
            },
            {
                "name": "multiColumnSort",
                "type": "boolean",
                "doc": "<p>Configure as <code>true</code> to have columns remember their sorted state after other columns have been clicked upon to sort.</p>",
                "default": "false"
            },
            {
                "name": "multiSelect",
                "type": "boolean",
                "doc": "<p>True to enable 'MULTI' selection mode on selection model.</p>",
                "default": "false"
            },
            {
                "name": "numFromEdge",
                "type": "number",
                "doc": "<p>This configures the zone which causes new rows to be appended to the view. As soon as the edge\nof the rendered grid is this number of rows from the edge of the viewport, the view is moved.</p>",
                "default": "2"
            },
            {
                "name": "publishes",
                "type": "string/string[]/object",
                "doc": "<p>One or more names of config properties that this component should publish to\nits <code>ViewModel</code>. Some components override this and publish their most useful\nconfigs by default.</p>",
                "default": "['selection']"
            },
            {
                "name": "reserveScrollbar",
                "type": "boolean",
                "doc": "<p>Set this to true to <strong>always</strong> leave a scrollbar sized space at the end of the grid content when\nfitting content into the width of the grid.</p>",
                "default": "false"
            },
            {
                "name": "rowLines",
                "type": "boolean",
                "doc": "<p>Adds row line styling</p>",
                "default": "true"
            },
            {
                "name": "scroll",
                "type": "string/boolean",
                "doc": "<p>Scrollers configuration. Valid values are 'both', 'horizontal' or 'vertical'.\nTrue implies 'both'. False implies 'none'.</p>",
                "default": null
            },
            {
                "name": "sealedColumns",
                "type": "boolean",
                "doc": "<p>True to constrain column dragging so that a column cannot be dragged in or out of it's\ncurrent group. Only relevant while enableColumnMove is enabled.</p>",
                "default": "false"
            },
            {
                "name": "selModel",
                "type": "ext.selection.model/object/string",
                "doc": "<p>A selection model instance or config object, or the selection model class's alias string.</p>",
                "default": "rowmodel"
            },
            {
                "name": "selType",
                "type": "string",
                "doc": "<p>An xtype of selection model to use. This is used to create selection model if just\na config object or nothing at all given in selModel config.</p>",
                "default": null
            },
            {
                "name": "selection",
                "type": "ext.data.model",
                "doc": "<p>The selected model. Typically used with binding.</p>",
                "default": null
            },
            {
                "name": "simpleSelect",
                "type": "boolean",
                "doc": "<p>True to enable 'SIMPLE' selection mode on selection model.</p>",
                "default": "false"
            },
            {
                "name": "sortableColumns",
                "type": "boolean",
                "doc": "<p>False to disable column sorting via clicking the header and via the Sorting menu items.</p>",
                "default": "true"
            },
            {
                "name": "store",
                "type": "ext.data.store",
                "doc": "<p>The Store the grid should use as its data source.</p>",
                "default": null
            },
            {
                "name": "trailingBufferZone",
                "type": "number",
                "doc": "<p>TableViews are buffer rendered in 5.x which means that only the visible subset of data rows\nare rendered into the DOM. These are removed and added as scrolling demands.</p>",
                "default": "10"
            },
            {
                "name": "twoWayBindable",
                "type": "string/string[]/object",
                "doc": "<p>This object holds a map of <code>config</code> properties that will update their binding\nas they are modified. For example, <code>value</code> is a key added by form fields. The\nform of this config is the same as <code>publishes</code>.</p>",
                "default": "['selection']"
            },
            {
                "name": "variableRowHeight",
                "type": "boolean",
                "doc": "\n",
                "default": "false"
            },
            {
                "name": "view",
                "type": "ext.view.table",
                "doc": "<p>The Ext.view.Table used by the grid. Use viewConfig to just supply some config options to\nview (instead of creating an entire View instance).</p>",
                "default": null
            },
            {
                "name": "viewConfig",
                "type": "object",
                "doc": "<p>A config object that will be applied to the grid's UI view. Any of the config options available for\nExt.view.Table can be specified here. This option is ignored if view is specified.</p>",
                "default": null
            },
            {
                "name": "viewType",
                "type": "string",
                "doc": "<p>An xtype of view to use. This is automatically set to 'tableview' by Grid\nand to 'treeview' by Tree.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "beforecellclick",
                "params": "this(Ext.view.Table) td(HTMLElement) cellIndex(Number) record(Ext.data.Model) tr(HTMLElement) rowIndex(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fired before the cell click is processed. Return false to cancel the default action.</p>"
            },
            {
                "name": "beforecellcontextmenu",
                "params": "this(Ext.view.Table) td(HTMLElement) cellIndex(Number) record(Ext.data.Model) tr(HTMLElement) rowIndex(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fired before the cell right click is processed. Return false to cancel the default action.</p>"
            },
            {
                "name": "beforecelldblclick",
                "params": "this(Ext.view.Table) td(HTMLElement) cellIndex(Number) record(Ext.data.Model) tr(HTMLElement) rowIndex(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fired before the cell double click is processed. Return false to cancel the default action.</p>"
            },
            {
                "name": "beforecellkeydown",
                "params": "this(Ext.view.Table) td(HTMLElement) cellIndex(Number) record(Ext.data.Model) tr(HTMLElement) rowIndex(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fired before the cell key down is processed. Return false to cancel the default action.</p>"
            },
            {
                "name": "beforecellmousedown",
                "params": "this(Ext.view.Table) td(HTMLElement) cellIndex(Number) record(Ext.data.Model) tr(HTMLElement) rowIndex(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fired before the cell mouse down is processed. Return false to cancel the default action.</p>"
            },
            {
                "name": "beforecellmouseup",
                "params": "this(Ext.view.Table) td(HTMLElement) cellIndex(Number) record(Ext.data.Model) tr(HTMLElement) rowIndex(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fired before the cell mouse up is processed. Return false to cancel the default action.</p>"
            },
            {
                "name": "beforecontainerclick",
                "params": "this(Ext.view.View) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires before the click event on the container is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforecontainercontextmenu",
                "params": "this(Ext.view.View) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires before the contextmenu event on the container is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforecontainerdblclick",
                "params": "this(Ext.view.View) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires before the dblclick event on the container is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforecontainerkeydown",
                "params": "this(Ext.view.View) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires before the keydown event on the container is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforecontainerkeypress",
                "params": "this(Ext.view.View) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires before the keypress event on the container is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforecontainerkeyup",
                "params": "this(Ext.view.View) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires before the keyup event on the container is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforecontainermousedown",
                "params": "this(Ext.view.View) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires before the mousedown event on the container is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforecontainermouseout",
                "params": "this(Ext.view.View) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires before the mouseout event on the container is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforecontainermouseover",
                "params": "this(Ext.view.View) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires before the mouseover event on the container is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforecontainermouseup",
                "params": "this(Ext.view.View) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires before the mouseup event on the container is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforedeselect",
                "params": "this(Ext.selection.RowModel) record(Ext.data.Model) index(Number) eOpts(Object)",
                "doc": "<p>Fired before a record is deselected. If any listener returns false, the\ndeselection is cancelled.</p>"
            },
            {
                "name": "beforeitemclick",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires before the click event on an item is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforeitemcontextmenu",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires before the contextmenu event on an item is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforeitemdblclick",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires before the dblclick event on an item is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforeitemkeydown",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires before the keydown event on an item is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforeitemkeypress",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires before the keypress event on an item is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforeitemkeyup",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires before the keyup event on an item is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforeitemmousedown",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires before the mousedown event on an item is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforeitemmouseenter",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires before the mouseenter event on an item is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforeitemmouseleave",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires before the mouseleave event on an item is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforeitemmouseup",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires before the mouseup event on an item is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforeselect",
                "params": "this(Ext.selection.RowModel) record(Ext.data.Model) index(Number) eOpts(Object)",
                "doc": "<p>Fired before a record is selected. If any listener returns false, the\nselection is cancelled.</p>"
            },
            {
                "name": "cellclick",
                "params": "this(Ext.view.Table) td(HTMLElement) cellIndex(Number) record(Ext.data.Model) tr(HTMLElement) rowIndex(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fired when table cell is clicked.</p>"
            },
            {
                "name": "cellcontextmenu",
                "params": "this(Ext.view.Table) td(HTMLElement) cellIndex(Number) record(Ext.data.Model) tr(HTMLElement) rowIndex(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fired when table cell is right clicked.</p>"
            },
            {
                "name": "celldblclick",
                "params": "this(Ext.view.Table) td(HTMLElement) cellIndex(Number) record(Ext.data.Model) tr(HTMLElement) rowIndex(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fired when table cell is double clicked.</p>"
            },
            {
                "name": "cellkeydown",
                "params": "this(Ext.view.Table) td(HTMLElement) cellIndex(Number) record(Ext.data.Model) tr(HTMLElement) rowIndex(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fired when the keydown event is captured on the cell.</p>"
            },
            {
                "name": "cellmousedown",
                "params": "this(Ext.view.Table) td(HTMLElement) cellIndex(Number) record(Ext.data.Model) tr(HTMLElement) rowIndex(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fired when the mousedown event is captured on the cell.</p>"
            },
            {
                "name": "cellmouseup",
                "params": "this(Ext.view.Table) td(HTMLElement) cellIndex(Number) record(Ext.data.Model) tr(HTMLElement) rowIndex(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fired when the mouseup event is captured on the cell.</p>"
            },
            {
                "name": "columnhide",
                "params": "ct(Ext.grid.header.Container) column(Ext.grid.column.Column) eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "columnmove",
                "params": "ct(Ext.grid.header.Container) column(Ext.grid.column.Column) fromIdx(Number) toIdx(Number) eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "columnresize",
                "params": "ct(Ext.grid.header.Container) column(Ext.grid.column.Column) width(Number) eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "columnschanged",
                "params": "ct(Ext.grid.header.Container) eOpts(Object)",
                "doc": "<p>Fired after the columns change in any way, when a column has been hidden or shown, or when a column\nis added to or removed from this header container.</p>"
            },
            {
                "name": "columnshow",
                "params": "ct(Ext.grid.header.Container) column(Ext.grid.column.Column) eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "containerclick",
                "params": "this(Ext.view.View) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when the container is clicked.</p>"
            },
            {
                "name": "containercontextmenu",
                "params": "this(Ext.view.View) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when the container is right clicked.</p>"
            },
            {
                "name": "containerdblclick",
                "params": "this(Ext.view.View) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when the container is double clicked.</p>"
            },
            {
                "name": "containerkeydown",
                "params": "this(Ext.view.View) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when a key is pressed down while the container is focused, and no item is currently selected.</p>"
            },
            {
                "name": "containerkeypress",
                "params": "this(Ext.view.View) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when a key is pressed while the container is focused, and no item is currently selected.</p>"
            },
            {
                "name": "containerkeyup",
                "params": "this(Ext.view.View) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when a key is released while the container is focused, and no item is currently selected.</p>"
            },
            {
                "name": "containermousedown",
                "params": "this(Ext.view.View) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when there is a mousedown on the container</p>"
            },
            {
                "name": "containermouseout",
                "params": "this(Ext.view.View) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when you move the mouse out of the container.</p>"
            },
            {
                "name": "containermouseover",
                "params": "this(Ext.view.View) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when you move the mouse over the container.</p>"
            },
            {
                "name": "containermouseup",
                "params": "this(Ext.view.View) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when there is a mouseup on the container</p>"
            },
            {
                "name": "deselect",
                "params": "this(Ext.selection.RowModel) record(Ext.data.Model) index(Number) eOpts(Object)",
                "doc": "<p>Fired after a record is deselected</p>"
            },
            {
                "name": "filterchange",
                "params": "store(Ext.data.Store) filters(Ext.util.Filter[]) eOpts(Object)",
                "doc": "<p>Fired whenever the filter set changes.</p>"
            },
            {
                "name": "groupchange",
                "params": "store(Ext.data.Store) grouper(Ext.util.Grouper) eOpts(Object)",
                "doc": "<p>Fired whenever the grouping in the grid changes.</p>"
            },
            {
                "name": "headerclick",
                "params": "ct(Ext.grid.header.Container) column(Ext.grid.column.Column) e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "headercontextmenu",
                "params": "ct(Ext.grid.header.Container) column(Ext.grid.column.Column) e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "headertriggerclick",
                "params": "ct(Ext.grid.header.Container) column(Ext.grid.column.Column) e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "itemclick",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when an item is clicked.</p>"
            },
            {
                "name": "itemcontextmenu",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when an item is right clicked.</p>"
            },
            {
                "name": "itemdblclick",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when an item is double clicked.</p>"
            },
            {
                "name": "itemkeydown",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when a key is pressed down while an item is currently selected.</p>"
            },
            {
                "name": "itemkeypress",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when a key is pressed while an item is currently selected.</p>"
            },
            {
                "name": "itemkeyup",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when a key is released while an item is currently selected.</p>"
            },
            {
                "name": "itemmousedown",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when there is a mouse down on an item</p>"
            },
            {
                "name": "itemmouseenter",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when the mouse enters an item.</p>"
            },
            {
                "name": "itemmouseleave",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when the mouse leaves an item.</p>"
            },
            {
                "name": "itemmouseup",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when there is a mouse up on an item</p>"
            },
            {
                "name": "rowclick",
                "params": "this(Ext.view.Table) record(Ext.data.Model) tr(HTMLElement) rowIndex(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fired when table cell is clicked.</p>"
            },
            {
                "name": "rowcontextmenu",
                "params": "this(Ext.view.Table) record(Ext.data.Model) tr(HTMLElement) rowIndex(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fired when table cell is right clicked.</p>"
            },
            {
                "name": "rowdblclick",
                "params": "this(Ext.view.Table) record(Ext.data.Model) tr(HTMLElement) rowIndex(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fired when table cell is double clicked.</p>"
            },
            {
                "name": "rowkeydown",
                "params": "this(Ext.view.Table) record(Ext.data.Model) tr(HTMLElement) rowIndex(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fired when the keydown event is captured on the cell.</p>"
            },
            {
                "name": "rowmousedown",
                "params": "this(Ext.view.Table) record(Ext.data.Model) tr(HTMLElement) rowIndex(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fired when the mousedown event is captured on the cell.</p>"
            },
            {
                "name": "rowmouseup",
                "params": "this(Ext.view.Table) record(Ext.data.Model) tr(HTMLElement) rowIndex(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fired when the mouseup event is captured on the cell.</p>"
            },
            {
                "name": "select",
                "params": "this(Ext.selection.RowModel) record(Ext.data.Model) index(Number) eOpts(Object)",
                "doc": "<p>Fired after a record is selected</p>"
            },
            {
                "name": "selectionchange",
                "params": "this(Ext.selection.Model) selected(Ext.data.Model[]) eOpts(Object)",
                "doc": "<p>Fired after a selection change has occurred</p>"
            },
            {
                "name": "sortchange",
                "params": "ct(Ext.grid.header.Container) column(Ext.grid.column.Column) direction(String) eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "viewready",
                "params": "this(Ext.panel.Table) eOpts(Object)",
                "doc": "<p>Fires when the grid view is available (use this for selecting a default row).</p>"
            }
        ]
    },
    "Ext.panel.Title": {
        "type": "Ext.panel.Title",
        "doc": "<p>A basic title component for a Panel Header</p>",
        "configs": [
            {
                "name": "autoEl",
                "type": "string/object",
                "doc": "<p>A tag name or DomHelper spec used to create the Element which will\nencapsulate this Component.</p>",
                "default": "{unselectable: 'on'}"
            },
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to elements within this\ncomponent like Panel's body will get a class <code>x-panel-body</code>. This means that if you create a subclass of Panel, and\nyou want it to get all the Panels styling for the element and the body, you leave the <code>baseCls</code> <code>x-panel</code> and use\n<code>componentCls</code> to add specific styling for this component.</p>",
                "default": "Ext.baseCSSPrefix + 'title'"
            },
            {
                "name": "childEls",
                "type": "object/string[]/object[]",
                "doc": "<p>The canonical form of <code>childEls</code> is an object keyed by child's property name\nwith values that are objects with the following properties.</p>",
                "default": "['textEl', 'iconEl', 'iconWrapEl']"
            },
            {
                "name": "glyph",
                "type": "number/string",
                "doc": "<p>A numeric unicode character code to use as the icon. The\ndefault font-family for glyphs can be set globally using\nExt.setGlyphFontFamily(). Alternatively, this\nconfig option accepts a string with the charCode and font-family separated by the\n<code>@</code> symbol. For example '65@My Font Family'.</p>",
                "default": null
            },
            {
                "name": "icon",
                "type": "string",
                "doc": "<p>Path to image for an icon.</p>",
                "default": null
            },
            {
                "name": "iconAlign",
                "type": "'top'/'right'/'bottom'/'left'",
                "doc": "<p>alignment of the icon</p>",
                "default": "'left'"
            },
            {
                "name": "iconCls",
                "type": "string",
                "doc": "<p>CSS class for an icon.</p>",
                "default": null
            },
            {
                "name": "renderTpl",
                "type": "ext.xtemplate/string/string[]",
                "doc": "<p>An XTemplate used to create the internal structure inside this Component's encapsulating\nElement.</p>",
                "default": "'<tpl if=\"iconMarkup && iconBeforeTitle\">{iconMarkup}</tpl>' + '<div id=\"{id}-textEl\" data-ref=\"textEl\" class=\"{textCls} {textCls}-{ui} {itemCls}{childElCls}\" unselectable=\"on\"' + '<tpl if=\"headerRole\">' + ' role=\"{headerRole}\"' + '</tpl>' + '>{text}</div>' + '<tpl if=\"iconMarkup && !iconBeforeTitle\">{iconMarkup}</tpl>'"
            },
            {
                "name": "rotation",
                "type": "0/1/2",
                "doc": "<p>The rotation of the title's text.  Can be one of the following values:</p>",
                "default": "0"
            },
            {
                "name": "text",
                "type": "string",
                "doc": "<p>The title's text (can contain html tags/entities)</p>",
                "default": null
            },
            {
                "name": "textAlign",
                "type": "'left'/'center'/'right'",
                "doc": "<p>text alignment of the title</p>",
                "default": "'left'"
            }
        ],
        "events": []
    },
    "Ext.panel.Tool": {
        "type": "Ext.panel.Tool",
        "doc": "<p>This class is used to display small visual icons in the header of a panel. There are a set of\n25 icons that can be specified by using the type config. The callback config\ncan be used to provide a function that will respond to any click events. In general, this class\nwill not be instantiated directly, rather it will be created by specifying the Ext.panel.Panel.tools\nconfiguration on the Panel itself.</p>",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to elements within this\ncomponent like Panel's body will get a class <code>x-panel-body</code>. This means that if you create a subclass of Panel, and\nyou want it to get all the Panels styling for the element and the body, you leave the <code>baseCls</code> <code>x-panel</code> and use\n<code>componentCls</code> to add specific styling for this component.</p>",
                "default": "Ext.baseCSSPrefix + 'tool'"
            },
            {
                "name": "callback",
                "type": "function",
                "doc": "<p>A function to execute when the tool is clicked.</p>",
                "default": null
            },
            {
                "name": "childEls",
                "type": "object/string[]/object[]",
                "doc": "<p>The canonical form of <code>childEls</code> is an object keyed by child's property name\nwith values that are objects with the following properties.</p>",
                "default": "['toolEl']"
            },
            {
                "name": "disabledCls",
                "type": "string",
                "doc": "<p>CSS class to add when the Component is disabled.</p>",
                "default": "Ext.baseCSSPrefix + 'tool-disabled'"
            },
            {
                "name": "handler",
                "type": "function",
                "doc": "<p>A function to execute when the tool is clicked. Arguments passed are:</p>",
                "default": null
            },
            {
                "name": "renderTpl",
                "type": "ext.xtemplate/string/string[]",
                "doc": "<p>An XTemplate used to create the internal structure inside this Component's encapsulating\nElement.</p>",
                "default": "['<img id=\"{id}-toolEl\" data-ref=\"toolEl\" src=\"{blank}\" class=\"{baseCls}-img {baseCls}-{type}' + '{childElCls}\" role=\"presentation\"/>']"
            },
            {
                "name": "scope",
                "type": "object",
                "doc": "<p>The scope to execute the callback or handler function. Defaults\nto the tool.</p>",
                "default": null
            },
            {
                "name": "stopEvent",
                "type": "boolean",
                "doc": "<p>Specify as false to allow click event to propagate.</p>",
                "default": "true"
            },
            {
                "name": "toolOverCls",
                "type": "string",
                "doc": "\n",
                "default": "Ext.baseCSSPrefix + 'tool-over'"
            },
            {
                "name": "toolOwner",
                "type": "ext.component",
                "doc": "<p>The owner to report to the <code>callback</code> method. Default is <code>null</code> for the <code>ownerCt</code>.\nThis is automatically set to the owning <code>Ext.panel.Panel</code> when a tool is created as\na member of a panel's <code>tools</code>.</p>",
                "default": null
            },
            {
                "name": "toolPressedCls",
                "type": "string",
                "doc": "\n",
                "default": "Ext.baseCSSPrefix + 'tool-pressed'"
            },
            {
                "name": "tooltip",
                "type": "string/object",
                "doc": "<p>The tooltip for the tool - can be a string to be used as innerHTML (html tags are accepted) or QuickTips config\nobject</p>",
                "default": null
            },
            {
                "name": "tooltipType",
                "type": "string",
                "doc": "<p>The type of tooltip to use. Either 'qtip' (default) for QuickTips or 'title' for title attribute.</p>",
                "default": "'qtip'"
            },
            {
                "name": "type",
                "type": "string",
                "doc": "<p>The type of tool to render. The following types are available:</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "click",
                "params": "this(Ext.panel.Tool) e(Ext.event.Event) owner(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires when the tool is clicked</p>"
            }
        ]
    },
    "Ext.perf.Accumulator": {
        "type": "Ext.perf.Accumulator",
        "configs": [],
        "events": []
    },
    "Ext.perf.Monitor": {
        "type": "Ext.perf.Monitor",
        "configs": [],
        "events": []
    },
    "Ext.picker.Color": {
        "type": "Ext.picker.Color",
        "doc": "<p>Color picker provides a simple color palette for choosing colors. The picker can be rendered to any container. The\navailable default to a standard 40-color palette; this can be customized with the colors config.</p>",
        "configs": [
            {
                "name": "allowReselect",
                "type": "boolean",
                "doc": "<p>If set to true then reselecting a color that is already selected fires the select event</p>",
                "default": "false"
            },
            {
                "name": "clickEvent",
                "type": "string",
                "doc": "<p>The DOM event that will cause a color to be selected. This can be any valid event name (dblclick, contextmenu).</p>",
                "default": "'click'"
            },
            {
                "name": "componentCls",
                "type": "string",
                "doc": "<p>The CSS class to apply to the containing element.</p>",
                "default": "'x-color-picker'"
            },
            {
                "name": "handler",
                "type": "function",
                "doc": "<p>A function that will handle the select event of this picker. The handler is passed the following parameters:</p>",
                "default": null
            },
            {
                "name": "itemCls",
                "type": "string",
                "doc": "<p>The CSS class to apply to the color picker's items</p>",
                "default": "Ext.baseCSSPrefix + 'color-picker-item'"
            },
            {
                "name": "renderTpl",
                "type": "ext.xtemplate/string/string[]",
                "doc": "<p>An XTemplate used to create the internal structure inside this Component's encapsulating\nElement.</p>",
                "default": "['<tpl for=\"colors\">', '<a href=\"#\" role=\"button\" class=\"color-{.} {parent.itemCls}\" hidefocus=\"on\">', '<span class=\"{parent.itemCls}-inner\" style=\"background:#{.}\">&#160;</span>', '</a>', '</tpl>']"
            },
            {
                "name": "scope",
                "type": "object",
                "doc": "<p>The scope (<code>this</code> reference) in which the <code>handler</code> function will be called.</p>",
                "default": null
            },
            {
                "name": "selectedCls",
                "type": "string",
                "doc": "<p>The CSS class to apply to the selected element</p>",
                "default": "'x-color-picker-selected'"
            },
            {
                "name": "value",
                "type": "string",
                "doc": "<p>The initial color to highlight (should be a valid 6-digit color hex code without the # symbol). Note that the hex\ncodes are case-sensitive.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "select",
                "params": "this(Ext.picker.Color) color(String) eOpts(Object)",
                "doc": "<p>Fires when a color is selected</p>"
            }
        ]
    },
    "Ext.picker.Date": {
        "type": "Ext.picker.Date",
        "doc": "<p>A date picker. This class is used by the Ext.form.field.Date field to allow browsing and selection of valid\ndates in a popup next to the field, but may also be used with other components.</p>",
        "configs": [
            {
                "name": "ariaTitle",
                "type": "string",
                "doc": "<p>The text to display for the aria title</p>",
                "default": "'Date Picker: {0}'"
            },
            {
                "name": "ariaTitleDateFormat",
                "type": "string",
                "doc": "<p>The date format to display for the current value in the ariaTitle</p>",
                "default": "'F d'"
            },
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this components element.</p>",
                "default": "'x-datepicker'"
            },
            {
                "name": "border",
                "type": "number/string/boolean",
                "doc": "<p>Specifies the border size for this component. The border can be a single numeric value to apply to all sides or it can\nbe a CSS style specification for each style, for example: '10 5 3 10' (top, right, bottom, left).</p>",
                "default": "true"
            },
            {
                "name": "childEls",
                "type": "object/string[]/object[]",
                "doc": "<p>The canonical form of <code>childEls</code> is an object keyed by child's property name\nwith values that are objects with the following properties.</p>",
                "default": "['innerEl', 'eventEl', 'prevEl', 'nextEl', 'middleBtnEl', 'footerEl']"
            },
            {
                "name": "dayNames",
                "type": "string[]",
                "doc": "<p>An array of textual day names which can be overriden for localization support (defaults to Ext.Date.dayNames)</p>",
                "default": null
            },
            {
                "name": "disableAnim",
                "type": "boolean",
                "doc": "<p>True to disable animations when showing the month picker.</p>",
                "default": "false"
            },
            {
                "name": "disabledCellCls",
                "type": "string",
                "doc": "<p>The class to apply to disabled cells.</p>",
                "default": "'x-datepicker-disabled'"
            },
            {
                "name": "disabledDates",
                "type": "string[]",
                "doc": "<p>An array of 'dates' to disable, as strings. These strings will be used to build a dynamic regular expression so\nthey are very powerful. Some examples:</p>",
                "default": null
            },
            {
                "name": "disabledDatesRE",
                "type": "regexp",
                "doc": "<p>JavaScript regular expression used to disable a pattern of dates. The disabledDates\nconfig will generate this regex internally, but if you specify disabledDatesRE it will take precedence over the\ndisabledDates value.</p>",
                "default": "null"
            },
            {
                "name": "disabledDatesText",
                "type": "string",
                "doc": "<p>The tooltip text to display when the date falls on a disabled date.</p>",
                "default": "'Disabled'"
            },
            {
                "name": "disabledDays",
                "type": "number[]",
                "doc": "<p>An array of days to disable, 0-based. For example, [0, 6] disables Sunday and Saturday.</p>",
                "default": "null"
            },
            {
                "name": "disabledDaysText",
                "type": "string",
                "doc": "<p>The tooltip to display when the date falls on a disabled day.</p>",
                "default": "'Disabled'"
            },
            {
                "name": "format",
                "type": "string",
                "doc": "<p>The default date format string which can be overriden for localization support. The format must be valid\naccording to Ext.Date.parse (defaults to Ext.Date.defaultFormat).</p>",
                "default": null
            },
            {
                "name": "handler",
                "type": "function",
                "doc": "<p>Optional. A function that will handle the select event of this picker. The handler is passed the following\nparameters:</p>",
                "default": null
            },
            {
                "name": "keyNavConfig",
                "type": "object",
                "doc": "<p>Specifies optional custom key event handlers for the Ext.util.KeyNav attached to this date picker. Must\nconform to the config format recognized by the Ext.util.KeyNav constructor. Handlers specified in this\nobject will replace default handlers of the same name.</p>",
                "default": null
            },
            {
                "name": "longDayFormat",
                "type": "string",
                "doc": "<p>The format for displaying a date in a longer format.</p>",
                "default": "'F d, Y'"
            },
            {
                "name": "maxDate",
                "type": "date",
                "doc": "<p>Maximum allowable date (JavaScript date object)</p>",
                "default": "null"
            },
            {
                "name": "maxText",
                "type": "string",
                "doc": "<p>The error text to display if the maxDate validation fails.</p>",
                "default": "'This date is after the maximum date'"
            },
            {
                "name": "minDate",
                "type": "date",
                "doc": "<p>Minimum allowable date (JavaScript date object)</p>",
                "default": "null"
            },
            {
                "name": "minText",
                "type": "string",
                "doc": "<p>The error text to display if the minDate validation fails.</p>",
                "default": "'This date is before the minimum date'"
            },
            {
                "name": "monthNames",
                "type": "string[]",
                "doc": "<p>An array of textual month names which can be overriden for localization support (defaults to Ext.Date.monthNames)</p>",
                "default": null
            },
            {
                "name": "monthYearFormat",
                "type": "string",
                "doc": "<p>The date format for the header month</p>",
                "default": "'F Y'"
            },
            {
                "name": "monthYearText",
                "type": "string",
                "doc": "<p>The header month selector tooltip</p>",
                "default": "'Choose a month (Control+Up/Down to move years)'"
            },
            {
                "name": "nextText",
                "type": "string",
                "doc": "<p>The next month navigation button tooltip</p>",
                "default": "'Next Month (Control+Right)'"
            },
            {
                "name": "prevText",
                "type": "string",
                "doc": "<p>The previous month navigation button tooltip</p>",
                "default": "'Previous Month (Control+Left)'"
            },
            {
                "name": "renderTpl",
                "type": "ext.xtemplate/string/string[]",
                "doc": "<p>An XTemplate used to create the internal structure inside this Component's encapsulating\nElement.</p>",
                "default": null
            },
            {
                "name": "scope",
                "type": "object",
                "doc": "<p>The scope (<code>this</code> reference) in which the <code>handler</code> function will be called.</p>",
                "default": null
            },
            {
                "name": "selectedCls",
                "type": "string",
                "doc": "<p>The class to apply to the selected cell.</p>",
                "default": "'x-datepicker-selected'"
            },
            {
                "name": "showToday",
                "type": "boolean",
                "doc": "<p>False to hide the footer area containing the Today button and disable the keyboard handler for spacebar that\nselects the current date.</p>",
                "default": "true"
            },
            {
                "name": "startDay",
                "type": "number",
                "doc": "<p>Day index at which the week should begin, 0-based.</p>",
                "default": "undefined"
            },
            {
                "name": "todayText",
                "type": "string",
                "doc": "<p>The text to display on the button that selects the current date</p>",
                "default": "'Today'"
            },
            {
                "name": "todayTip",
                "type": "string",
                "doc": "<p>A string used to format the message for displaying in a tooltip over the button that selects the current date.\nThe <code>{0}</code> token in string is replaced by today's date.</p>",
                "default": "'{0} (Spacebar)'"
            }
        ],
        "events": [
            {
                "name": "select",
                "params": "this(Ext.picker.Date) date(Date) eOpts(Object)",
                "doc": "<p>Fires when a date is selected</p>"
            }
        ]
    },
    "Ext.picker.Month": {
        "type": "Ext.picker.Month",
        "doc": "<p>A month picker component. This class is used by the Date picker class\nto allow browsing and selection of year/months combinations.</p>",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to the picker element.</p>",
                "default": "'x-monthpicker'"
            },
            {
                "name": "cancelText",
                "type": "string",
                "doc": "<p>The text to display on the cancel button.</p>",
                "default": "'Cancel'"
            },
            {
                "name": "childEls",
                "type": "object/string[]/object[]",
                "doc": "<p>The canonical form of <code>childEls</code> is an object keyed by child's property name\nwith values that are objects with the following properties.</p>",
                "default": "['bodyEl', 'prevEl', 'nextEl', 'monthEl', 'yearEl']"
            },
            {
                "name": "okText",
                "type": "string",
                "doc": "<p>The text to display on the ok button.</p>",
                "default": "'OK'"
            },
            {
                "name": "renderTpl",
                "type": "ext.xtemplate/string/string[]",
                "doc": "<p>An XTemplate used to create the internal structure inside this Component's encapsulating\nElement.</p>",
                "default": "['<div id=\"{id}-bodyEl\" data-ref=\"bodyEl\" class=\"{baseCls}-body\">', '<div id=\"{id}-monthEl\" data-ref=\"monthEl\" class=\"{baseCls}-months\">', '<tpl for=\"months\">', '<div class=\"{parent.baseCls}-item {parent.baseCls}-month\">', '<a style=\"{parent.monthStyle}\" role=\"button\" hidefocus=\"on\" class=\"{parent.baseCls}-item-inner\">{.}</a>', '</div>', '</tpl>', '</div>', '<div id=\"{id}-yearEl\" data-ref=\"yearEl\" class=\"{baseCls}-years\">', '<div class=\"{baseCls}-yearnav\">', '<div class=\"{baseCls}-yearnav-button-ct\">', '<a id=\"{id}-prevEl\" data-ref=\"prevEl\" class=\"{baseCls}-yearnav-button {baseCls}-yearnav-prev\" hidefocus=\"on\" role=\"button\"></a>', '</div>', '<div class=\"{baseCls}-yearnav-button-ct\">', '<a id=\"{id}-nextEl\" data-ref=\"nextEl\" class=\"{baseCls}-yearnav-button {baseCls}-yearnav-next\" hidefocus=\"on\" role=\"button\"></a>', '</div>', '</div>', '<tpl for=\"years\">', '<div class=\"{parent.baseCls}-item {parent.baseCls}-year\">', '<a hidefocus=\"on\" class=\"{parent.baseCls}-item-inner\" role=\"button\">{.}</a>', '</div>', '</tpl>', '</div>', '<div class=\"' + Ext.baseCSSPrefix + 'clear\"></div>', '<tpl if=\"showButtons\">', '<div class=\"{baseCls}-buttons\">{%', 'var me=values.$comp, okBtn=me.okBtn, cancelBtn=me.cancelBtn;', 'okBtn.ownerLayout = cancelBtn.ownerLayout = me.componentLayout;', 'okBtn.ownerCt = cancelBtn.ownerCt = me;', 'Ext.DomHelper.generateMarkup(okBtn.getRenderTree(), out);', 'Ext.DomHelper.generateMarkup(cancelBtn.getRenderTree(), out);', '%}</div>', '</tpl>', '</div>']"
            },
            {
                "name": "selectedCls",
                "type": "string",
                "doc": "<p>The class to be added to selected items in the picker.</p>",
                "default": "'x-monthpicker-selected'"
            },
            {
                "name": "showButtons",
                "type": "boolean",
                "doc": "<p>True to show ok and cancel buttons below the picker.</p>",
                "default": "true"
            },
            {
                "name": "value",
                "type": "date/number[]",
                "doc": "<p>The default value to set. See setValue</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "cancelclick",
                "params": "this(Ext.picker.Month) eOpts(Object)",
                "doc": "<p>Fires when the cancel button is pressed.</p>"
            },
            {
                "name": "monthclick",
                "params": "this(Ext.picker.Month) value(Array) eOpts(Object)",
                "doc": "<p>Fires when a month is clicked.</p>"
            },
            {
                "name": "monthdblclick",
                "params": "this(Ext.picker.Month) value(Array) eOpts(Object)",
                "doc": "<p>Fires when a month is clicked.</p>"
            },
            {
                "name": "okclick",
                "params": "this(Ext.picker.Month) value(Array) eOpts(Object)",
                "doc": "<p>Fires when the ok button is pressed.</p>"
            },
            {
                "name": "select",
                "params": "this(Ext.picker.Month) value(Array) eOpts(Object)",
                "doc": "<p>Fires when a month/year is selected.</p>"
            },
            {
                "name": "yearclick",
                "params": "this(Ext.picker.Month) value(Array) eOpts(Object)",
                "doc": "<p>Fires when a year is clicked.</p>"
            },
            {
                "name": "yeardblclick",
                "params": "this(Ext.picker.Month) value(Array) eOpts(Object)",
                "doc": "<p>Fires when a year is clicked.</p>"
            }
        ]
    },
    "Ext.picker.Time": {
        "type": "Ext.picker.Time",
        "doc": "<p>A time picker which provides a list of times from which to choose. This is used by the Ext.form.field.Time\nclass to allow browsing and selection of valid times, but could also be used with other components.</p>",
        "configs": [
            {
                "name": "componentCls",
                "type": "string",
                "doc": "<p>CSS Class to be added to a components root level element to give distinction to it via styling.</p>",
                "default": "Ext.baseCSSPrefix + 'timepicker'"
            },
            {
                "name": "format",
                "type": "string",
                "doc": "<p>The default time format string which can be overriden for localization support. The format must be valid\naccording to Ext.Date.parse.</p>",
                "default": "undefined"
            },
            {
                "name": "increment",
                "type": "number",
                "doc": "<p>The number of minutes between each time value in the list.</p>",
                "default": "15"
            },
            {
                "name": "loadMask",
                "type": "boolean",
                "doc": "\n",
                "default": "false"
            },
            {
                "name": "maxValue",
                "type": "date",
                "doc": "<p>The maximum time to be shown in the list of times. This must be a Date object (only the time fields will be\nused); no parsing of String values will be done.</p>",
                "default": null
            },
            {
                "name": "minValue",
                "type": "date",
                "doc": "<p>The minimum time to be shown in the list of times. This must be a Date object (only the time fields will be\nused); no parsing of String values will be done.</p>",
                "default": null
            },
            {
                "name": "store",
                "type": "boolean",
                "doc": "\n",
                "default": "true"
            }
        ],
        "events": []
    },
    "Ext.plugin.Abstract": {
        "type": "Ext.plugin.Abstract",
        "doc": "<p>The AbstractPlugin class is the base class from which user-implemented plugins should inherit.</p>",
        "configs": [
            {
                "name": "pluginId",
                "type": "string",
                "doc": "<p>A name for the plugin that can be set at creation time to then retrieve the plugin\nthrough getPlugin method.  For example:</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.plugin.AbstractClipboard": {
        "type": "Ext.plugin.AbstractClipboard",
        "doc": "<p>This base class manages clipboard data transfer for a component. As an abstract class,\napplications use derived classes such as <code>Ext.grid.plugin.Clipboard</code> instead\nand seldom use this class directly.</p>",
        "configs": [
            {
                "name": "formats",
                "type": "object",
                "doc": "<p>This object is keyed by the names of the data formats supported by this plugin.\nThe property values of this object are objects with <code>get</code> and <code>put</code> properties\nthat name the methods for getting data from (copy) and putting to into (paste)\nthe associated component.</p>",
                "default": "{text: {get: 'getTextData', put: 'putTextData'}}"
            },
            {
                "name": "memory",
                "type": "string/string[]",
                "doc": "<p>The data format(s) to copy to the private, memory clipboard. By default, data\nis not saved to the memory clipboard. Specify <code>true</code> to include all formats\nof data, or a string to copy a single format, or an array of strings to copy\nmultiple formats.</p>",
                "default": null
            },
            {
                "name": "source",
                "type": "string/string[]",
                "doc": "<p>The format or formats in order of preference when pasting data. This list can\nbe any of the valid formats, plus the name \"system\". When a paste occurs, this\nconfig is consulted. The first format specified by this config that has data\navailable in the private memory space is used. If \"system\" is encountered in\nthe list, whatever data is available on the system clipboard is chosen. At\nthat point, no further source formats will be considered.</p>",
                "default": "\"system\""
            },
            {
                "name": "system",
                "type": "string",
                "doc": "<p>The data format to set in the system clipboard. By default, the \"text\"\nformat is used. Based on the type of derived class, other formats may be\npossible.</p>",
                "default": "\"text\""
            }
        ],
        "events": []
    },
    "Ext.plugin.Manager": {
        "type": "Ext.plugin.Manager",
        "doc": "<p>Creates plugin instances.</p>",
        "configs": [],
        "events": []
    },
    "Ext.plugin.Responsive": {
        "type": "Ext.plugin.Responsive",
        "doc": "<p>This plugin can be added to component instances to process a <code>responsiveConfig</code>. For\nexample:</p>",
        "configs": [],
        "events": []
    },
    "Ext.plugin.Viewport": {
        "type": "Ext.plugin.Viewport",
        "doc": "<p>This plugin can be applied to any <code>Component</code> (although almost always to a <code>Container</code>)\nto make it fill the browser viewport. This plugin is used internally by the more familiar\n<code>Ext.container.Viewport</code> class.</p>",
        "configs": [
            {
                "name": "maxUserScale",
                "type": "number",
                "doc": "<p>The maximum zoom scale. Only applicable for touch devices. Set this to 1 to\ndisable zooming.  Setting this to any value other than \"1\" will disable all\nmulti-touch gestures.</p>",
                "default": "1"
            }
        ],
        "events": []
    },
    "Ext.resizer.BorderSplitter": {
        "type": "Ext.resizer.BorderSplitter",
        "doc": "<p>Private utility class for Ext.layout.container.Border.</p>",
        "configs": [
            {
                "name": "collapseTarget",
                "type": "string/ext.panel.panel",
                "doc": "<p>must be configured in by the border layout:</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.resizer.BorderSplitterTracker": {
        "type": "Ext.resizer.BorderSplitterTracker",
        "doc": "<p>Private utility class for Ext.BorderSplitter.</p>",
        "configs": [],
        "events": []
    },
    "Ext.resizer.Handle": {
        "type": "Ext.resizer.Handle",
        "doc": "<p>Provides a handle for 9-point resizing of Elements or Components.</p>",
        "configs": [
            {
                "name": "region",
                "type": "\"north\"/\"south\"/\"east\"/\"west\"/\"center\"",
                "doc": "<p>Ext.resizer.Resizer.prototype.possiblePositions define the regions\nwhich will be passed in as a region configuration.</p>",
                "default": "''"
            }
        ],
        "events": []
    },
    "Ext.resizer.ResizeTracker": {
        "type": "Ext.resizer.ResizeTracker",
        "doc": "<p>Private utility class for Ext.resizer.Resizer.</p>",
        "configs": [
            {
                "name": "constrainTo",
                "type": "ext.util.region/ext.dom.element",
                "doc": "<p>Default to no constraint</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.resizer.Resizer": {
        "type": "Ext.resizer.Resizer",
        "doc": "<p>Applies drag handles to an element or component to make it resizable. The drag handles are inserted into the element\n(or component's element) and positioned absolute.</p>",
        "configs": [
            {
                "name": "constrainTo",
                "type": "ext.dom.element/ext.util.region",
                "doc": "<p>An element, or a Region into which the resize operation must be constrained.</p>",
                "default": null
            },
            {
                "name": "dynamic",
                "type": "boolean",
                "doc": "<p>Specify as true to update the target (Element or Component) dynamically during\ndragging. This is <code>true</code> by default, but the Component class passes <code>false</code> when it is\nconfigured as Ext.Component.resizable.</p>",
                "default": "true"
            },
            {
                "name": "handles",
                "type": "string",
                "doc": "<p>String consisting of the resize handles to display. Defaults to 's e se' for Elements and fixed position\nComponents. Defaults to 8 point resizing for floating Components (such as Windows). Specify either <code>'all'</code> or any\nof <code>'n s e w ne nw se sw'</code>.</p>",
                "default": "'s e se'"
            },
            {
                "name": "height",
                "type": "number",
                "doc": "<p>Optional. The height to set target to in pixels</p>",
                "default": null
            },
            {
                "name": "heightIncrement",
                "type": "number",
                "doc": "<p>The increment to snap the height resize in pixels.</p>",
                "default": "0"
            },
            {
                "name": "maxHeight",
                "type": "number",
                "doc": "<p>The maximum height for the element</p>",
                "default": "10000"
            },
            {
                "name": "maxWidth",
                "type": "number",
                "doc": "<p>The maximum width for the element</p>",
                "default": "10000"
            },
            {
                "name": "minHeight",
                "type": "number",
                "doc": "<p>The minimum height for the element</p>",
                "default": "20"
            },
            {
                "name": "minWidth",
                "type": "number",
                "doc": "<p>The minimum width for the element</p>",
                "default": "20"
            },
            {
                "name": "pinned",
                "type": "boolean",
                "doc": "<p>True to ensure that the resize handles are always visible, false indicates resizing by cursor changes only</p>",
                "default": "false"
            },
            {
                "name": "preserveRatio",
                "type": "boolean",
                "doc": "<p>True to preserve the original ratio between height and width during resize</p>",
                "default": "false"
            },
            {
                "name": "target",
                "type": "ext.dom.element/ext.component",
                "doc": "<p>The Element or Component to resize.</p>",
                "default": null
            },
            {
                "name": "transparent",
                "type": "boolean",
                "doc": "<p>True for transparent handles. This is only applied at config time.</p>",
                "default": "false"
            },
            {
                "name": "width",
                "type": "number",
                "doc": "<p>Optional. The width to set the target to in pixels</p>",
                "default": null
            },
            {
                "name": "widthIncrement",
                "type": "number",
                "doc": "<p>The increment to snap the width resize in pixels.</p>",
                "default": "0"
            }
        ],
        "events": [
            {
                "name": "beforeresize",
                "params": "this(Ext.resizer.Resizer) width(Number) height(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fired before resize is allowed. Return false to cancel resize.</p>"
            },
            {
                "name": "resize",
                "params": "this(Ext.resizer.Resizer) width(Number) height(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fired after a resize.</p>"
            },
            {
                "name": "resizedrag",
                "params": "this(Ext.resizer.Resizer) width(Number) height(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires during resizing.</p>"
            }
        ]
    },
    "Ext.resizer.Splitter": {
        "type": "Ext.resizer.Splitter",
        "doc": "<p>This class functions <strong>between siblings of a VBox or HBox\nlayout</strong> to resize both immediate siblings.</p>",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to elements within this\ncomponent like Panel's body will get a class <code>x-panel-body</code>. This means that if you create a subclass of Panel, and\nyou want it to get all the Panels styling for the element and the body, you leave the <code>baseCls</code> <code>x-panel</code> and use\n<code>componentCls</code> to add specific styling for this component.</p>",
                "default": "Ext.baseCSSPrefix + 'splitter'"
            },
            {
                "name": "childEls",
                "type": "object/string[]/object[]",
                "doc": "<p>The canonical form of <code>childEls</code> is an object keyed by child's property name\nwith values that are objects with the following properties.</p>",
                "default": "['collapseEl']"
            },
            {
                "name": "collapseOnDblClick",
                "type": "boolean",
                "doc": "<p>True to enable dblclick to toggle expand and collapse on the collapseTarget Panel.</p>",
                "default": "true"
            },
            {
                "name": "collapseTarget",
                "type": "string/ext.panel.panel",
                "doc": "<p>A string describing the relative position of the immediate sibling Panel to collapse. May be 'prev' or 'next'.</p>",
                "default": "'next'"
            },
            {
                "name": "collapsedCls",
                "type": "string",
                "doc": "<p>A class to add to the splitter when it is collapsed. See collapsible.</p>",
                "default": null
            },
            {
                "name": "collapsible",
                "type": "boolean",
                "doc": "<p>True to show a mini-collapse tool in the Splitter to toggle expand and collapse on the collapseTarget Panel.\nDefaults to the collapsible setting of the Panel.</p>",
                "default": null
            },
            {
                "name": "defaultSplitMax",
                "type": "number",
                "doc": "<p>Provides a default maximum width or height for the two components\nthat the splitter is between.</p>",
                "default": "1000"
            },
            {
                "name": "defaultSplitMin",
                "type": "number",
                "doc": "<p>Provides a default minimum width or height for the two components\nthat the splitter is between.</p>",
                "default": "40"
            },
            {
                "name": "performCollapse",
                "type": "boolean",
                "doc": "<p>Set to false to prevent this Splitter's mini-collapse tool from managing the collapse\nstate of the collapseTarget.</p>",
                "default": null
            },
            {
                "name": "renderTpl",
                "type": "ext.xtemplate/string/string[]",
                "doc": "<p>An XTemplate used to create the internal structure inside this Component's encapsulating\nElement.</p>",
                "default": "['<tpl if=\"collapsible===true\">', '<div id=\"{id}-collapseEl\" data-ref=\"collapseEl\" role=\"presentation\" class=\"', Ext.baseCSSPrefix, 'collapse-el ', Ext.baseCSSPrefix, 'layout-split-{collapseDir}{childElCls}\">&#160;', '</div>', '</tpl>']"
            },
            {
                "name": "size",
                "type": "number",
                "doc": "<p>The size of the splitter. This becomes the height for vertical splitters and\nwidth for horizontal splitters.</p>",
                "default": "5"
            },
            {
                "name": "tracker",
                "type": "object",
                "doc": "<p>Any configuration options to be passed to the underlying Ext.resizer.SplitterTracker.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.resizer.SplitterTracker": {
        "type": "Ext.resizer.SplitterTracker",
        "doc": "<p>Private utility class for Ext.Splitter.</p>",
        "configs": [],
        "events": []
    },
    "Ext.scroll.DomScroller": {
        "type": "Ext.scroll.DomScroller",
        "configs": [],
        "events": []
    },
    "Ext.scroll.Indicator": {
        "type": "Ext.scroll.Indicator",
        "doc": "<p>Provides a visual indicator of scroll position while scrolling using a TouchScroller.  This class should not be created directly.\nTo configure scroll indicators please use the indicators config of the Scroller.</p>",
        "configs": [
            {
                "name": "axis",
                "type": "string",
                "doc": "<p>('x' or 'y')</p>",
                "default": null
            },
            {
                "name": "hideAnimation",
                "type": "boolean/object",
                "doc": "\n",
                "default": "true"
            },
            {
                "name": "hideDelay",
                "type": "number",
                "doc": "<p>Number of milliseconds to delay hiding Indicators when scrolling ends.</p>",
                "default": "0"
            },
            {
                "name": "minLength",
                "type": "number",
                "doc": "<p>The minimum length for the indicator. Defaults to the\nindicator's \"size\" (the width of vertical or height of horizontal indicators)</p>",
                "default": "24"
            },
            {
                "name": "scroller",
                "type": "ext.scroll.touchscroller",
                "doc": "<p>The scroller instance</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.scroll.Scroller": {
        "type": "Ext.scroll.Scroller",
        "doc": "<p>Ext.scroll.Scroller allows any element to have scrollable content, both on desktop and\ntouch-screen devices, and defines a set of useful methods for manipulating the scroll\nposition and controlling the scrolling behavior.  Ext.scroll.Scroller should not be\ndirectly instantiated.  Always use the static <code>create</code> method to create a\nScroller instance:</p>",
        "configs": [
            {
                "name": "direction",
                "type": "'auto'/'vertical'/'horizontal'/'both'",
                "doc": "\n",
                "default": "'auto'"
            },
            {
                "name": "directionLock",
                "type": "boolean",
                "doc": "<p><code>true</code> to lock the direction of the scroller when the user starts scrolling.\nOnly applicable when interacting with the Scroller via touch-screen.</p>",
                "default": "false"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "doc": "<p><code>true</code> to disable this scroller.\nOnly applicable when using a TouchScroller</p>",
                "default": null
            },
            {
                "name": "element",
                "type": "string/htmlelement/ext.dom.element",
                "doc": "<p>The element to make scrollable.</p>",
                "default": null
            },
            {
                "name": "indicators",
                "type": "boolean/object",
                "doc": "<p><code>false</code> to hide scroll indicators while scrolling, <code>true</code> to show scroll indicators,\nor a config object for Ext.scroll.Indicator to configure the scroll indicators.</p>",
                "default": "true"
            },
            {
                "name": "maxPosition",
                "type": "object",
                "doc": "<p>The max scroll position</p>",
                "default": null
            },
            {
                "name": "maxUserPosition",
                "type": "object",
                "doc": "<p>The max scroll position that can be achieved via user interaction.</p>",
                "default": null
            },
            {
                "name": "minPosition",
                "type": "object",
                "doc": "<p>The min scroll position.</p>",
                "default": "{x: 0, y: 0}"
            },
            {
                "name": "minUserPosition",
                "type": "object",
                "doc": "<p>The min scroll position that can be achieved via user interaction.</p>",
                "default": "{x: 0, y: 0}"
            },
            {
                "name": "momentumEasing",
                "type": "object",
                "doc": "<p>A Ext.fx.easing.BoundMomentum config object for configuring the momentum\nof the Scroller.  Only applicable when interacting with the Scroller via\ntouch-screen.</p>",
                "default": null
            },
            {
                "name": "size",
                "type": "object",
                "doc": "<p>The size of the scrollable content expressed as an object with x and y properties</p>",
                "default": null
            },
            {
                "name": "x",
                "type": "boolean/string",
                "doc": "<ul>\n<li><code>true</code> or <code>'auto'</code> to enable horizontal auto-scrolling. In auto-scrolling mode\nscrolling is only enabled when the element has overflowing content.</li>\n<li><code>false</code> to disable horizontal scrolling</li>\n<li><code>'scroll'</code> to always enable horizontal scrolling regardless of content size.</li>\n</ul>\n\n",
                "default": "true"
            },
            {
                "name": "y",
                "type": "boolean/string",
                "doc": "<ul>\n<li><code>true</code> or <code>'auto'</code> to enable vertical auto-scrolling. In auto-scrolling mode\nscrolling is only enabled when the element has overflowing content.</li>\n<li><code>false</code> to disable vertical scrolling</li>\n<li><code>'scroll'</code> to always enable vertical scrolling regardless of content size.</li>\n</ul>\n\n",
                "default": "true"
            }
        ],
        "events": [
            {
                "name": "refresh",
                "params": "this(Ext.scroll.Scroller) eOpts(Object)",
                "doc": "<p>Fires whenever the Scroller is refreshed.</p>"
            },
            {
                "name": "scroll",
                "params": "this(Ext.scroll.Scroller) x(Number) y(Number) eOpts(Object)",
                "doc": "<p>Fires whenever the Scroller is scrolled.</p>"
            },
            {
                "name": "scrollend",
                "params": "this(Ext.scroll.Scroller) x(Number) y(Number) eOpts(Object)",
                "doc": "<p>Fires whenever the scrolling is ended.</p>"
            },
            {
                "name": "scrollstart",
                "params": "this(Ext.scroll.Scroller) x(Number) y(Number) eOpts(Object)",
                "doc": "<p>Fires whenever the scrolling is started.</p>"
            }
        ]
    },
    "Ext.scroll.TouchScroller": {
        "type": "Ext.scroll.TouchScroller",
        "doc": "<p>Momentum scrolling is one of the most important parts of the user experience on touch-screen\ndevices.  Depending on the device and browser, Ext JS will select one of several different\nscrolling implementations for best performance.</p>",
        "configs": [
            {
                "name": "autoRefresh",
                "type": "boolean",
                "doc": "\n",
                "default": "true"
            },
            {
                "name": "bounceEasing",
                "type": "object",
                "doc": "\n",
                "default": "{duration: 400}"
            },
            {
                "name": "elementSize",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "fps",
                "type": "string",
                "doc": "\n",
                "default": "'auto'"
            },
            {
                "name": "indicators",
                "type": "boolean/object",
                "doc": "<p><code>false</code> to hide scroll indicators while scrolling, <code>true</code> to show scroll indicators,\nor a config object for Ext.scroll.Indicator to configure the scroll indicators.</p>",
                "default": "true"
            },
            {
                "name": "innerElement",
                "type": "ext.dom.element",
                "doc": "<p>The element that wraps the content of element and is translated in\nresponse to user interaction.  If not configured, one will be automatically\ngenerated.</p>",
                "default": null
            },
            {
                "name": "maxAbsoluteVelocity",
                "type": "number",
                "doc": "\n",
                "default": "6"
            },
            {
                "name": "momentumEasing",
                "type": "object",
                "doc": "<p>The default value is:</p>",
                "default": "{momentum: {acceleration: 30, friction: 0.5}, bounce: {acceleration: 30, springTension: 0.3}, minVelocity: 1}"
            },
            {
                "name": "outOfBoundRestrictFactor",
                "type": "number",
                "doc": "\n",
                "default": "0.5"
            },
            {
                "name": "size",
                "type": "object",
                "doc": "<p>The size of the scrollable content expressed as an object with x and y properties</p>",
                "default": null
            },
            {
                "name": "slotSnapEasing",
                "type": "object",
                "doc": "\n",
                "default": "{duration: 150}"
            },
            {
                "name": "slotSnapOffset",
                "type": "object",
                "doc": "\n",
                "default": "{x: 0, y: 0}"
            },
            {
                "name": "slotSnapSize",
                "type": "number/object",
                "doc": "<p>The size of each slot to snap to in 'px', can be either an object with <code>x</code> and <code>y</code> values, i.e:</p>",
                "default": "{x: 0, y: 0}"
            },
            {
                "name": "startMomentumResetTime",
                "type": "number",
                "doc": "\n",
                "default": "300"
            },
            {
                "name": "translatable",
                "type": "object",
                "doc": "\n",
                "default": "{translationMethod: 'auto', useWrapper: false}"
            }
        ],
        "events": []
    },
    "Ext.selection.CellModel": {
        "type": "Ext.selection.CellModel",
        "doc": "<p>A selection model for grid panels which allows selection of a single cell at a time.</p>",
        "configs": [
            {
                "name": "enableKeyNav",
                "type": "boolean",
                "doc": "<p>Turns on/off keyboard navigation within the grid.</p>",
                "default": "true"
            },
            {
                "name": "mode",
                "type": "\"single\"",
                "doc": "<p>Mode of selection.  Valid values are:</p>",
                "default": null
            },
            {
                "name": "preventWrap",
                "type": "boolean",
                "doc": "<p>Set this configuration to true to prevent wrapping around of selection as\na user navigates to the first or last column.</p>",
                "default": "false"
            }
        ],
        "events": [
            {
                "name": "deselect",
                "params": "this(Ext.selection.CellModel) record(Ext.data.Model) row(Number) column(Number) eOpts(Object)",
                "doc": "<p>Fired after a cell is deselected</p>"
            },
            {
                "name": "select",
                "params": "this(Ext.selection.CellModel) record(Ext.data.Model) row(Number) column(Number) eOpts(Object)",
                "doc": "<p>Fired after a cell is selected</p>"
            }
        ]
    },
    "Ext.selection.CheckboxModel": {
        "type": "Ext.selection.CheckboxModel",
        "doc": "<p>A selection model that renders a column of checkboxes that can be toggled to\nselect or deselect rows. The default mode for this selection model is MULTI.</p>",
        "configs": [
            {
                "name": "allowDeselect",
                "type": "boolean",
                "doc": "<p>Allow users to deselect a record in a DataView, List or Grid.\nOnly applicable when the mode is 'SINGLE'.</p>",
                "default": "true"
            },
            {
                "name": "checkOnly",
                "type": "boolean",
                "doc": "<p>True if rows can only be selected by clicking on the checkbox column, not by clicking\non the row itself. Note that this only refers to selection via the UI, programmatic\nselection will still occur regardless.</p>",
                "default": "false"
            },
            {
                "name": "checkSelector",
                "type": "string",
                "doc": "<p>The selector for determining whether the checkbox element is clicked. This may be changed to\nallow for a wider area to be clicked, for example, the whole cell for the selector.</p>",
                "default": "\"x-grid-row-checker\""
            },
            {
                "name": "injectCheckbox",
                "type": "number/string",
                "doc": "<p>The index at which to insert the checkbox column.\nSupported values are a numeric index, and the strings 'first' and 'last'.</p>",
                "default": "0"
            },
            {
                "name": "mode",
                "type": "\"single\"/\"simple\"/\"multi\"",
                "doc": "<p>Modes of selection.\nValid values are <code>\"SINGLE\"</code>, <code>\"SIMPLE\"</code>, and <code>\"MULTI\"</code>.</p>",
                "default": "'MULTI'"
            },
            {
                "name": "showHeaderCheckbox",
                "type": "boolean",
                "doc": "<p>Configure as <code>false</code> to not display the header checkbox at the top of the column.\nWhen the store is a BufferedStore, this configuration will\nnot be available because the buffered data set does not always contain all data.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.selection.DataViewModel": {
        "type": "Ext.selection.DataViewModel",
        "configs": [
            {
                "name": "enableKeyNav",
                "type": "boolean",
                "doc": "\n",
                "default": "true"
            }
        ],
        "events": [
            {
                "name": "beforedeselect",
                "params": "this(Ext.selection.DataViewModel) record(Ext.data.Model) The(Number) eOpts(Object)",
                "doc": "<p>Fired before a record is deselected. If any listener returns false, the\ndeselection is cancelled.</p>"
            },
            {
                "name": "beforeselect",
                "params": "this(Ext.selection.DataViewModel) record(Ext.data.Model) The(Number) eOpts(Object)",
                "doc": "<p>Fired before a record is selected. If any listener returns false, the\nselection is cancelled.</p>"
            },
            {
                "name": "deselect",
                "params": "this(Ext.selection.DataViewModel) record(Ext.data.Model) eOpts(Object)",
                "doc": "<p>Fired after a record is deselected</p>"
            },
            {
                "name": "select",
                "params": "this(Ext.selection.DataViewModel) record(Ext.data.Model) The(Number) eOpts(Object)",
                "doc": "<p>Fired after a record is selected</p>"
            }
        ]
    },
    "Ext.selection.Model": {
        "type": "Ext.selection.Model",
        "doc": "<p>Tracks what records are currently selected in a databound component.</p>",
        "configs": [
            {
                "name": "allowDeselect",
                "type": "boolean",
                "doc": "<p>Allow users to deselect a record in a DataView, List or Grid.\nOnly applicable when the mode is 'SINGLE'.</p>",
                "default": null
            },
            {
                "name": "ignoreRightMouseSelection",
                "type": "boolean",
                "doc": "<p>True to ignore selections that are made when using the right mouse button if there are\nrecords that are already selected. If no records are selected, selection will continue\nas normal</p>",
                "default": "false"
            },
            {
                "name": "mode",
                "type": "\"single\"/\"simple\"/\"multi\"",
                "doc": "<p>Mode of selection.  Valid values are:</p>",
                "default": null
            },
            {
                "name": "pruneRemoved",
                "type": "boolean",
                "doc": "<p>Remove records from the selection when they are removed from the store.</p>",
                "default": "true"
            },
            {
                "name": "selected",
                "type": "object",
                "doc": "<p>The Ext.util.Collection to use as the collection of selected records.</p>",
                "default": "{}"
            },
            {
                "name": "store",
                "type": "object",
                "doc": "<p>The store in which this selection model represents the selected subset.</p>",
                "default": null
            },
            {
                "name": "toggleOnClick",
                "type": "boolean",
                "doc": "<p><code>true</code> to toggle the selection state of an item when clicked.\nOnly applicable when the mode is 'SINGLE'.\nOnly applicable when the allowDeselect is 'true'.</p>",
                "default": "true"
            }
        ],
        "events": [
            {
                "name": "focuschange",
                "params": "this(Ext.selection.Model) oldFocused(Ext.data.Model) newFocused(Ext.data.Model) eOpts(Object)",
                "doc": "<p>Fired when a row is focused</p>"
            },
            {
                "name": "selectionchange",
                "params": "this(Ext.selection.Model) selected(Ext.data.Model[]) eOpts(Object)",
                "doc": "<p>Fired after a selection change has occurred</p>"
            }
        ]
    },
    "Ext.selection.RowModel": {
        "type": "Ext.selection.RowModel",
        "doc": "<p>A selection model for grid panels which allows selection grid rows..</p>",
        "configs": [
            {
                "name": "enableKeyNav",
                "type": "boolean",
                "doc": "<p>Turns on/off keyboard navigation within the grid.</p>",
                "default": "true"
            }
        ],
        "events": [
            {
                "name": "beforedeselect",
                "params": "this(Ext.selection.RowModel) record(Ext.data.Model) index(Number) eOpts(Object)",
                "doc": "<p>Fired before a record is deselected. If any listener returns false, the\ndeselection is cancelled.</p>"
            },
            {
                "name": "beforeselect",
                "params": "this(Ext.selection.RowModel) record(Ext.data.Model) index(Number) eOpts(Object)",
                "doc": "<p>Fired before a record is selected. If any listener returns false, the\nselection is cancelled.</p>"
            },
            {
                "name": "deselect",
                "params": "this(Ext.selection.RowModel) record(Ext.data.Model) index(Number) eOpts(Object)",
                "doc": "<p>Fired after a record is deselected</p>"
            },
            {
                "name": "select",
                "params": "this(Ext.selection.RowModel) record(Ext.data.Model) index(Number) eOpts(Object)",
                "doc": "<p>Fired after a record is selected</p>"
            }
        ]
    },
    "Ext.selection.TreeModel": {
        "type": "Ext.selection.TreeModel",
        "doc": "<p>This selection model is created by default for Ext.tree.Panel.</p>",
        "configs": [
            {
                "name": "selectOnExpanderClick",
                "type": "boolean",
                "doc": "<p><code>true</code> to select the row when clicking on the icon to collapse or expand\na tree node.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.slider.Multi": {
        "type": "Ext.slider.Multi",
        "doc": "<p>Slider which supports vertical or horizontal orientation, keyboard adjustments, configurable snapping, axis clicking\nand animation. Can be added as an item to any container.</p>",
        "configs": [
            {
                "name": "animate",
                "type": "object/boolean",
                "doc": "<p>Turn on or off animation. May be an animation configuration object:</p>",
                "default": "true"
            },
            {
                "name": "clickToChange",
                "type": "boolean",
                "doc": "<p>Determines whether or not clicking on the Slider axis will change the slider.</p>",
                "default": "true"
            },
            {
                "name": "constrainThumbs",
                "type": "boolean",
                "doc": "<p>True to disallow thumbs from overlapping one another.</p>",
                "default": "true"
            },
            {
                "name": "decimalPrecision",
                "type": "number/boolean",
                "doc": "<p>The number of decimal places to which to round the Slider's value.</p>",
                "default": "0"
            },
            {
                "name": "fieldSubTpl",
                "type": "ext.xtemplate",
                "doc": "<p>note: {id} here is really {inputId}, but {cmpId} is available</p>",
                "default": null
            },
            {
                "name": "focusCls",
                "type": "string",
                "doc": "<p>The CSS class to use when the field receives focus</p>",
                "default": "'slider-focus'"
            },
            {
                "name": "increment",
                "type": "number",
                "doc": "<p>How many units to change the slider when adjusting by drag and drop. Use this option to enable 'snapping'.</p>",
                "default": "0"
            },
            {
                "name": "keyIncrement",
                "type": "number",
                "doc": "<p>How many units to change the Slider when adjusting with keyboard navigation. If the increment\nconfig is larger, it will be used instead.</p>",
                "default": "1"
            },
            {
                "name": "maxValue",
                "type": "number",
                "doc": "<p>The maximum value for the Slider.</p>",
                "default": "100"
            },
            {
                "name": "minValue",
                "type": "number",
                "doc": "<p>The minimum value for the Slider.</p>",
                "default": "0"
            },
            {
                "name": "tabIndex",
                "type": "number",
                "doc": "<p>The tabIndex for this field. Note this only applies to fields that are rendered, not those which are built via\napplyTo</p>",
                "default": "0"
            },
            {
                "name": "tipText",
                "type": "function",
                "doc": "<p>A function used to display custom text for the slider tip.</p>",
                "default": "undefined"
            },
            {
                "name": "useTips",
                "type": "object/boolean",
                "doc": "<p>True to use an Ext.slider.Tip to display tips for the value. This option may also\nprovide a configuration object for an Ext.slider.Tip.</p>",
                "default": "true"
            },
            {
                "name": "value",
                "type": "number",
                "doc": "<p>A value with which to initialize the slider. Setting this will only result in the creation\nof a single slider thumb; if you want multiple thumbs then use the values config instead.</p>",
                "default": null
            },
            {
                "name": "values",
                "type": "number[]",
                "doc": "<p>Array of Number values with which to initalize the slider. A separate slider thumb will be created for each value\nin this array. This will take precedence over the single value config.</p>",
                "default": null
            },
            {
                "name": "vertical",
                "type": "boolean",
                "doc": "<p>Orient the Slider vertically rather than horizontally.</p>",
                "default": "false"
            },
            {
                "name": "zeroBasedSnapping",
                "type": "boolean",
                "doc": "<p>Set to <code>true</code> to calculate snap points based on increments from zero as opposed to\nfrom this Slider's minValue.</p>",
                "default": "false"
            }
        ],
        "events": [
            {
                "name": "beforechange",
                "params": "slider(Ext.slider.Multi) newValue(Number) oldValue(Number) eOpts(Object)",
                "doc": "<p>Fires before the slider value is changed. By returning false from an event handler, you can cancel the\nevent and prevent the slider from changing.</p>"
            },
            {
                "name": "change",
                "params": "slider(Ext.slider.Multi) newValue(Number) thumb(Ext.slider.Thumb) eOpts(Object)",
                "doc": "<p>Fires when the slider value is changed.</p>"
            },
            {
                "name": "changecomplete",
                "params": "slider(Ext.slider.Multi) newValue(Number) thumb(Ext.slider.Thumb) eOpts(Object)",
                "doc": "<p>Fires when the slider value is changed by the user and any drag operations have completed.</p>"
            },
            {
                "name": "drag",
                "params": "slider(Ext.slider.Multi) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires continuously during the drag operation while the mouse is moving.</p>"
            },
            {
                "name": "dragend",
                "params": "slider(Ext.slider.Multi) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires after the drag operation has completed.</p>"
            },
            {
                "name": "dragstart",
                "params": "slider(Ext.slider.Multi) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires after a drag operation has started.</p>"
            }
        ]
    },
    "Ext.slider.Single": {
        "type": "Ext.slider.Single",
        "doc": "<p>Slider which supports vertical or horizontal orientation, keyboard adjustments, configurable snapping, axis clicking\nand animation. Can be added as an item to any container.</p>",
        "configs": [
            {
                "name": "publishOnComplete",
                "type": "boolean",
                "doc": "<p>This controls when the value of the slider is published to the <code>ViewModel</code>. By\ndefault this is done only when the thumb is released (the change is complete). To\ncause this to happen on every change of the thumb position, specify <code>false</code>. This\nsetting is <code>true</code> by default for improved performance on slower devices (such as\nolder browsers or tablets).</p>",
                "default": "true"
            }
        ],
        "events": []
    },
    "Ext.slider.Thumb": {
        "type": "Ext.slider.Thumb",
        "doc": "<p>Represents a single thumb element on a Slider. This would not usually be created manually and would instead\nbe created internally by an Multi slider.</p>",
        "configs": [
            {
                "name": "constrain",
                "type": "boolean",
                "doc": "<p>True to constrain the thumb so that it cannot overlap its siblings</p>",
                "default": "false"
            },
            {
                "name": "slider",
                "type": "ext.slider.multislider",
                "doc": "<p>The Slider to render to.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.slider.Tip": {
        "type": "Ext.slider.Tip",
        "doc": "<p>Simple plugin for using an Ext.tip.Tip with a slider to show the slider value. In general this class is not created\ndirectly, instead pass the Ext.slider.Multi.useTips and Ext.slider.Multi.tipText configuration\noptions to the slider directly.</p>",
        "configs": [
            {
                "name": "align",
                "type": "string",
                "doc": "<p>Alignment configuration for the tip to the slider. See Ext.util.Positionable.alignTo. Default\nvalues for alignment are provided by specifying the position config.</p>",
                "default": "null"
            },
            {
                "name": "minWidth",
                "type": "number",
                "doc": "<p>The minimum width of the tip in pixels.</p>",
                "default": "10"
            },
            {
                "name": "offsets",
                "type": "array",
                "doc": "<p>Offsets for aligning the tip to the slider. See Ext.util.Positionable.alignTo. Default values\nfor offsets are provided by specifying the position config.</p>",
                "default": "null"
            },
            {
                "name": "position",
                "type": "string",
                "doc": "<p>Sets the position for where the tip will be displayed related to the thumb. This sets\ndefaults for align and offsets configurations. If align or\noffsets configurations are specified, they will override the defaults defined\nby position.</p>",
                "default": "For horizontal sliders, \"top\", for vertical sliders, \"left\""
            }
        ],
        "events": []
    },
    "Ext.slider.Widget": {
        "type": "Ext.slider.Widget",
        "doc": "<p>A Widget-based implementation of a slider.</p>",
        "configs": [
            {
                "name": "clickToChange",
                "type": "boolean",
                "doc": "<p>Determines whether or not clicking on the Slider axis will change the slider.</p>",
                "default": "true"
            },
            {
                "name": "maxValue",
                "type": "number",
                "doc": "<p>The maximum value for any slider thumb.</p>",
                "default": "100"
            },
            {
                "name": "minValue",
                "type": "number",
                "doc": "<p>The minimum value for any slider thumb.</p>",
                "default": "0"
            },
            {
                "name": "publishOnComplete",
                "type": "boolean",
                "doc": "<p>This controls when the value of the slider is published to the <code>ViewModel</code>. By\ndefault this is done only when the thumb is released (the change is complete). To\ncause this to happen on every change of the thumb position, specify <code>false</code>. This\nsetting is <code>true</code> by default for improved performance on slower devices (such as\nolder browsers or tablets).</p>",
                "default": "true"
            },
            {
                "name": "twoWayBindable",
                "type": "object",
                "doc": "<p>This object is a map of config property names holding a <code>true</code> if changes to\nthat config should written back to its binding. Most commonly this is used to\nindicate that the <code>value</code> config should be monitored and changes written back\nto the bound value.</p>",
                "default": "{value: 1}"
            },
            {
                "name": "ui",
                "type": "string",
                "doc": "\n",
                "default": "'widget'"
            },
            {
                "name": "value",
                "type": "number/number[]",
                "doc": "<p>One more values for the position of the slider's thumb(s).</p>",
                "default": "0"
            },
            {
                "name": "vertical",
                "type": "boolean",
                "doc": "<p>Orients the slider vertically rather than horizontally.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.sparkline.Bar": {
        "type": "Ext.sparkline.Bar",
        "doc": "<p>Plots a bar chart of the values in the passed values array.</p>",
        "configs": [
            {
                "name": "barColor",
                "type": "string",
                "doc": "<p>The bar color for positive values.</p>",
                "default": "#3366cc"
            },
            {
                "name": "barSpacing",
                "type": "number",
                "doc": "<p>The pixel spacing between bars.</p>",
                "default": "1"
            },
            {
                "name": "barWidth",
                "type": "number",
                "doc": "<p>The pixel width of bars.</p>",
                "default": "4"
            },
            {
                "name": "chartRangeClip",
                "type": "boolean",
                "doc": "<p>If true then the y values supplied to plot will be clipped to fall\nbetween chartRangeMin and chartRangeMax - By default chartRangeMin/Max just ensure that the chart\nspans at least that range of values, but does not constrain it.</p>",
                "default": "false"
            },
            {
                "name": "chartRangeMax",
                "type": "number",
                "doc": "<p>The maximum value to use for the range of Y values of the chart - Defaults to the minimum value supplied.</p>",
                "default": null
            },
            {
                "name": "chartRangeMin",
                "type": "number",
                "doc": "<p>The minimum value to use for the range of Y values of the chart - Defaults to the minimum value supplied.</p>",
                "default": null
            },
            {
                "name": "colorMap",
                "doc": "\n",
                "default": null
            },
            {
                "name": "negBarColor",
                "type": "string",
                "doc": "<p>The bar color for negative values.</p>",
                "default": "#f44"
            },
            {
                "name": "nullColor",
                "type": "string",
                "doc": "<p>The bar color for null values. Usually null values are omitted and not plotted. Setting\nthis config causes a very thin bar to be plotted with the special color in the case thath null is a meaningful value in the series.</p>",
                "default": null
            },
            {
                "name": "stackedBarColor",
                "type": "string[]",
                "doc": "<p>An array of colours to use for stacked bar charts.\nThe first series will use the first value in the array, the second series will use the second, etc.</p>",
                "default": "['#3366cc', '#dc3912', '#ff9900', '#109618', '#66aa00', '#dd4477', '#0099c6', '#990099']"
            },
            {
                "name": "tipTpl",
                "type": "string/ext.xtemplate",
                "doc": "<p>An XTemplate used to display the value or values in a tooltip when hovering over a Sparkline.</p>",
                "default": null
            },
            {
                "name": "zeroAxis",
                "type": "boolean",
                "doc": "<p>Centers the Y axis at zero by default.</p>",
                "default": "true"
            },
            {
                "name": "zeroColor",
                "type": "string",
                "doc": "<p>The bar color for zero values.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.sparkline.BarBase": {
        "type": "Ext.sparkline.BarBase",
        "doc": "<p>Base class for bar highlighting</p>",
        "configs": [],
        "events": []
    },
    "Ext.sparkline.Base": {
        "type": "Ext.sparkline.Base",
        "doc": "<p>The base class for ExtJS SparkLines. SparkLines are small, inline graphs used to visually\ndisplay small amounts of data. For large datasets, use the chart package.</p>",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "\n",
                "default": "Ext.baseCSSPrefix + 'sparkline'"
            },
            {
                "name": "defaultPixelsPerValue",
                "type": "number",
                "doc": "\n",
                "default": "3"
            },
            {
                "name": "disableInteraction",
                "type": "boolean",
                "doc": "\n",
                "default": "false"
            },
            {
                "name": "disableTooltips",
                "type": "boolean",
                "doc": "<p>Set to <code>true</code> to disable mouseover tooltips.</p>",
                "default": "false"
            },
            {
                "name": "enableHighlight",
                "type": "boolean",
                "doc": "\n",
                "default": "true"
            },
            {
                "name": "enableTagOptions",
                "type": "boolean",
                "doc": "\n",
                "default": "false"
            },
            {
                "name": "fillColor",
                "type": "string",
                "doc": "<p>The hex value for fill color in graphs which fill areas (Line).</p>",
                "default": "#def"
            },
            {
                "name": "highlightColor",
                "type": "string",
                "doc": "<p>The hex value for the highlight color to use when mouseing over a graph segment.</p>",
                "default": "null"
            },
            {
                "name": "highlightLighten",
                "type": "number",
                "doc": "<p>How much to lighten the highlight color by when mouseing over a graph segment.</p>",
                "default": "1.4"
            },
            {
                "name": "lineColor",
                "type": "string",
                "doc": "<p>The hex value for line colors in graphs which display lines (Box, Discrete and {@link Ext.sparkline.Line Line).</p>",
                "default": "#157fcc"
            },
            {
                "name": "tagValuesAttribute",
                "type": "string",
                "doc": "\n",
                "default": "'values'"
            },
            {
                "name": "tipTpl",
                "type": "string/ext.xtemplate",
                "doc": "<p>An XTemplate used to display the value or values in a tooltip when hovering over a Sparkline.</p>",
                "default": null
            },
            {
                "name": "tooltipPrefix",
                "type": "string",
                "doc": "<p>A string to append to each field displayed in a tooltip.</p>",
                "default": null
            },
            {
                "name": "tooltipSkipNull",
                "type": "boolean",
                "doc": "<p>Null values will not have a tooltip displayed.</p>",
                "default": "true"
            },
            {
                "name": "values",
                "type": "number[]",
                "doc": "<p>An array of numbers which define the chart.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.sparkline.Box": {
        "type": "Ext.sparkline.Box",
        "doc": "<p>Generates a box plot graph from the provided values array.</p>",
        "configs": [
            {
                "name": "boxFillColor",
                "type": "string",
                "doc": "<p>The color of the box fill.</p>",
                "default": "#cdf"
            },
            {
                "name": "boxLineColor",
                "type": "string",
                "doc": "<p>The color of the box outline.</p>",
                "default": "#000"
            },
            {
                "name": "chartRangeMax",
                "type": "number",
                "doc": "<p>The maximum value to use for the range of Y values of the chart - Defaults to the minimum value supplied.</p>",
                "default": null
            },
            {
                "name": "chartRangeMin",
                "type": "number",
                "doc": "<p>The minimum value to use for the range of Y values of the chart - Defaults to the minimum value supplied.</p>",
                "default": null
            },
            {
                "name": "medianColor",
                "type": "string",
                "doc": "<p>The color of the median line.</p>",
                "default": "#f00"
            },
            {
                "name": "outlierFillColor",
                "type": "string",
                "doc": "<p>The fill color of the outlier circles.</p>",
                "default": "#fff"
            },
            {
                "name": "outlierIQR",
                "type": "number",
                "doc": "<p>The inter-quartile range multipler used to calculate values that qualify as an outlier.</p>",
                "default": "1.5"
            },
            {
                "name": "outlierLineColor",
                "type": "string",
                "doc": "<p>The color of the outlier circles' outline.</p>",
                "default": "#333"
            },
            {
                "name": "raw",
                "type": "boolean",
                "doc": "<p>By default the points are calciulated from the input values array. Set this to true to passthe pre-calculated points in the values config.</p>",
                "default": "false"
            },
            {
                "name": "showOutliers",
                "type": "boolean",
                "doc": "<p>Configure as <code>false</code> to not show outlier circles.</p>",
                "default": "true"
            },
            {
                "name": "spotRadius",
                "type": "number",
                "doc": "<p>The radius of the outlier circles.</p>",
                "default": "1.5"
            },
            {
                "name": "target",
                "type": "number",
                "doc": "<p>If set, a crosshair will be drawn at the specified value point.</p>",
                "default": null
            },
            {
                "name": "targetColor",
                "type": "number",
                "doc": "<p>The color of the crosshair drawn at the pointe specified by target.</p>",
                "default": "#4a2"
            },
            {
                "name": "tipTpl",
                "type": "string/ext.xtemplate",
                "doc": "<p>An XTemplate used to display the value or values in a tooltip when hovering over a Sparkline.</p>",
                "default": null
            },
            {
                "name": "tooltipFormatFieldlistKey",
                "type": "string",
                "doc": "\n",
                "default": "'field'"
            },
            {
                "name": "whiskerColor",
                "type": "string",
                "doc": "<p>The color of the whiskers.</p>",
                "default": "#000"
            }
        ],
        "events": []
    },
    "Ext.sparkline.Bullet": {
        "type": "Ext.sparkline.Bullet",
        "doc": "<p>Plots a bullet graph based upon the input values array.</p>",
        "configs": [
            {
                "name": "base",
                "type": "number",
                "doc": "<p>Set this to a number to change the base start number.</p>",
                "default": null
            },
            {
                "name": "performanceColor",
                "type": "string",
                "doc": "<p>The color of the performance measure horizontal bar.</p>",
                "default": "#33f"
            },
            {
                "name": "rangeColors",
                "type": "string[]",
                "doc": "<p>An array of colors to use for each qualitative range background color.</p>",
                "default": "['#d3dafe', '#a8b6ff', '#7f94ff']"
            },
            {
                "name": "targetColor",
                "type": "string",
                "doc": "<p>The colour of the vertical target marker.</p>",
                "default": "#f33"
            },
            {
                "name": "targetWidth",
                "type": "number",
                "doc": "<p>Width of the target bar in pixels.</p>",
                "default": "3"
            },
            {
                "name": "tipTpl",
                "type": "string/ext.xtemplate",
                "doc": "<p>An XTemplate used to display the value or values in a tooltip when hovering over a Sparkline.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.sparkline.CanvasCanvas": {
        "type": "Ext.sparkline.CanvasCanvas",
        "configs": [],
        "events": []
    },
    "Ext.sparkline.Discrete": {
        "type": "Ext.sparkline.Discrete",
        "doc": "<p>Plots a series of thin vertical lines based upon the input values array.</p>",
        "configs": [
            {
                "name": "chartRangeClip",
                "type": "boolean",
                "doc": "<p>If true then the y values supplied to plot will be clipped to fall\nbetween chartRangeMin and chartRangeMax - By default chartRangeMin/Max just ensure that the chart\nspans at least that range of values, but does not constrain it.</p>",
                "default": "false"
            },
            {
                "name": "chartRangeMax",
                "type": "number",
                "doc": "<p>The maximum value to use for the range of Y values of the chart - Defaults to the maximum value supplied.</p>",
                "default": null
            },
            {
                "name": "chartRangeMin",
                "type": "number",
                "doc": "<p>The minimum value to use for the range of Y values of the chart - Defaults to the minimum value supplied.</p>",
                "default": null
            },
            {
                "name": "lineHeight",
                "type": "number",
                "doc": "<p>Height of each line in pixels - Defaults to 30% of the graph height.</p>",
                "default": "'auto'"
            },
            {
                "name": "thresholdColor",
                "type": "string",
                "doc": "<p>Colour to use in combination with thresholdValue</p>",
                "default": null
            },
            {
                "name": "thresholdValue",
                "type": "number",
                "doc": "<p>Values less than this value will be drawn using thresholdColor instead of lineColor</p>",
                "default": "0"
            },
            {
                "name": "tipTpl",
                "type": "string/ext.xtemplate",
                "doc": "<p>An XTemplate used to display the value or values in a tooltip when hovering over a Sparkline.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.sparkline.Line": {
        "type": "Ext.sparkline.Line",
        "doc": "<p>Plots a line graph based upon the input values array.</p>",
        "configs": [
            {
                "name": "chartRangeMax",
                "type": "number",
                "doc": "<p>The maximum value to use for the range of Y values of the chart - Defaults to the minimum value supplied.</p>",
                "default": null
            },
            {
                "name": "chartRangeMaxX",
                "type": "number",
                "doc": "<p>The maximum value to use for the X value of the chart.</p>",
                "default": null
            },
            {
                "name": "chartRangeMin",
                "type": "number",
                "doc": "<p>The minimum value to use for the range of Y values of the chart - Defaults to the minimum value supplied.</p>",
                "default": null
            },
            {
                "name": "chartRangeMinX",
                "type": "number",
                "doc": "<p>The minimum value to use for the X value of the chart.</p>",
                "default": null
            },
            {
                "name": "drawNormalOnTop",
                "type": "boolean",
                "doc": "<p>Configure as <code>true</code> to draw the normal range overlaying the chart.</p>",
                "default": "false"
            },
            {
                "name": "highlightLineColor",
                "type": "string",
                "doc": "<p>The colour of value line shown when the graph is mouseovered.</p>",
                "default": "#f22"
            },
            {
                "name": "highlightSpotColor",
                "type": "string",
                "doc": "<p>The colour of value marker spots when mouseovered.</p>",
                "default": "#5f5"
            },
            {
                "name": "lineWidth",
                "type": "number",
                "doc": "<p>The pixel width of the line plotted.</p>",
                "default": "1"
            },
            {
                "name": "maxSpotColor",
                "type": "string",
                "doc": "<p>The colour of the maximum value marker. Set to false or an empty string to hide it.</p>",
                "default": "#f80"
            },
            {
                "name": "minSpotColor",
                "type": "string",
                "doc": "<p>The colour of the mimimum value marker. Set to false or an empty string to hide it.</p>",
                "default": "#f80"
            },
            {
                "name": "normalRangeColor",
                "type": "string",
                "doc": "<p>See normalRangeMin and normalRangeMax The color of the undererlayed \"normal range bar\".</p>",
                "default": "#ccc"
            },
            {
                "name": "normalRangeMax",
                "type": "number",
                "doc": "<p>See normalRangeMin The maximum value to overlay a \"normal range bar\" over the graph using the normalRangeColor.</p>",
                "default": null
            },
            {
                "name": "normalRangeMin",
                "type": "number",
                "doc": "<p>See normalRangeMax The minimum value to overlay a \"normal range bar\" over the graph using the normalRangeColor.</p>",
                "default": null
            },
            {
                "name": "spotColor",
                "type": "string",
                "doc": "<p>The colour of the final value marker. Set to false or an empty string to hide it.</p>",
                "default": "#f80"
            },
            {
                "name": "spotRadius",
                "type": "number",
                "doc": "<p>The pixel radius of min, max and final value dots.</p>",
                "default": "1.5"
            },
            {
                "name": "tipTpl",
                "type": "string/ext.xtemplate",
                "doc": "<p>An XTemplate used to display the value or values in a tooltip when hovering over a Sparkline.</p>",
                "default": null
            },
            {
                "name": "valueSpots",
                "type": "object",
                "doc": "<p>An object which uses range specifiers as keys to indicate spot color values\nfor range of values. A range specifier is of the form <code>[number]:[number]</code> indicating start and end range.\nOmitting aither means an open ended range. For example to render green spots on all values less than 50\nand red on values higher than 50 use:</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.sparkline.Pie": {
        "type": "Ext.sparkline.Pie",
        "doc": "<p>Plots a pie chart based upon the input {values} array.</p>",
        "configs": [
            {
                "name": "borderColor",
                "type": "string",
                "doc": "<p>Border color of line round slices.</p>",
                "default": "#000"
            },
            {
                "name": "borderWidth",
                "type": "number",
                "doc": "<p>Border width in pixels of line round slices.</p>",
                "default": "0"
            },
            {
                "name": "offset",
                "type": "number",
                "doc": "<p>Angle in degrees to offset the first slice.</p>",
                "default": "0"
            },
            {
                "name": "sliceColors",
                "type": "string[]",
                "doc": "<p>An array of CSS colro values to apply to the chart slices.</p>",
                "default": "['#3366cc', '#dc3912', '#ff9900', '#109618', '#66aa00', '#dd4477', '#0099c6', '#990099']"
            },
            {
                "name": "tipTpl",
                "type": "string/ext.xtemplate",
                "doc": "<p>An XTemplate used to display the value or values in a tooltip when hovering over a Sparkline.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.sparkline.RangeMap": {
        "type": "Ext.sparkline.RangeMap",
        "doc": "<p>Base class for Range Map</p>",
        "configs": [],
        "events": []
    },
    "Ext.sparkline.TriState": {
        "type": "Ext.sparkline.TriState",
        "doc": "<p>Plots bars based upon \"win\"/\"draw\" or \"lose\" status of the input values array. Positive values mean\na win, zero a draw, and negative a lose.</p>",
        "configs": [
            {
                "name": "barSpacing",
                "type": "number",
                "doc": "<p>The pixel spacing between each bar.</p>",
                "default": "1"
            },
            {
                "name": "barWidth",
                "type": "number",
                "doc": "<p>The pixel width of each bar.</p>",
                "default": "4"
            },
            {
                "name": "colorMap",
                "type": "object",
                "doc": "<p>An object which uses range specifiers as keys to indicate bar color values\nfor range of values. A range specifier is of the form <code>[number]:[number]</code> indicating start and end range.\nOmitting aither means an open ended range. For example to render green bars on all values less than -1\nand red on values higher than 1 use:</p>",
                "default": "{}"
            },
            {
                "name": "negBarColor",
                "type": "string",
                "doc": "<p>The color for negative value bars.</p>",
                "default": "#f44"
            },
            {
                "name": "posBarColor",
                "type": "string",
                "doc": "<p>The color for positive value bars.</p>",
                "default": "#6f6"
            },
            {
                "name": "tipTpl",
                "type": "string/ext.xtemplate",
                "doc": "<p>An XTemplate used to display the value or values in a tooltip when hovering over a Sparkline.</p>",
                "default": null
            },
            {
                "name": "zeroBarColor",
                "type": "string",
                "doc": "<p>The color for zero value bars.</p>",
                "default": "#999"
            }
        ],
        "events": []
    },
    "Ext.sparkline.VmlCanvas": {
        "type": "Ext.sparkline.VmlCanvas",
        "configs": [],
        "events": []
    },
    "Ext.state.CookieProvider": {
        "type": "Ext.state.CookieProvider",
        "doc": "<p>A Provider implementation which saves and retrieves state via cookies. The CookieProvider supports the usual cookie\noptions, such as:</p>",
        "configs": [
            {
                "name": "domain",
                "type": "string",
                "doc": "<p>The domain to save the cookie for. Note that you cannot specify a different domain than your page is on, but you can\nspecify a sub-domain, or simply the domain itself like 'sencha.com' to include all sub-domains if you need to access\ncookies across different sub-domains. Defaults to null which uses the same domain the page is running on including\nthe 'www' like 'www.sencha.com'.</p>",
                "default": null
            },
            {
                "name": "expires",
                "type": "date",
                "doc": "<p>The cookie expiration date. Defaults to 7 days from now.</p>",
                "default": null
            },
            {
                "name": "path",
                "type": "string",
                "doc": "<p>The path for which the cookie is active. Defaults to root '/' which makes it active for all pages in the site.</p>",
                "default": null
            },
            {
                "name": "secure",
                "type": "boolean",
                "doc": "<p>True if the site is using SSL</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.state.LocalStorageProvider": {
        "type": "Ext.state.LocalStorageProvider",
        "doc": "<p>A Provider implementation which saves and retrieves state via the HTML5 localStorage API\nor IE <code>userData</code> storage. For details see <code>Ext.util.LocalStorage</code>.</p>",
        "configs": [],
        "events": []
    },
    "Ext.state.Manager": {
        "type": "Ext.state.Manager",
        "doc": "<p>This is the global state manager. By default all components that are \"state aware\" check this class\nfor state information if you don't pass them a custom state provider. In order for this class\nto be useful, it must be initialized with a provider when your application initializes. Example usage:</p>",
        "configs": [],
        "events": []
    },
    "Ext.state.Provider": {
        "type": "Ext.state.Provider",
        "doc": "<p>Abstract base class for state provider implementations. The provider is responsible\nfor setting values  and extracting values to/from the underlying storage source. The \nstorage source can vary and the details should be implemented in a subclass. For example\na provider could use a server side database or the browser localstorage where supported.</p>",
        "configs": [
            {
                "name": "prefix",
                "type": "string",
                "doc": "<p>A string to prefix to items stored in the underlying state store.\nDefaults to <tt>'ext-'</tt></p>",
                "default": "'ext-'"
            }
        ],
        "events": [
            {
                "name": "statechange",
                "params": "this(Ext.state.Provider) key(String) value(String) eOpts(Object)",
                "doc": "<p>Fires when a state change occurs.</p>"
            }
        ]
    },
    "Ext.state.Stateful": {
        "type": "Ext.state.Stateful",
        "doc": "<p>A mixin for being able to save the state of an object to an underlying\nExt.state.Provider.</p>",
        "configs": [
            {
                "name": "saveDelay",
                "type": "number",
                "doc": "<p>A buffer to be applied if many state events are fired within a short period.</p>",
                "default": "100"
            },
            {
                "name": "stateEvents",
                "type": "string[]",
                "doc": "<p>An array of events that, when fired, should trigger this object to\nsave its state. Defaults to none. <code>stateEvents</code> may be any type\nof event supported by this object, including browser or custom events\n(e.g., <code>['click', 'customerchange']</code>).</p>",
                "default": null
            },
            {
                "name": "stateId",
                "type": "string",
                "doc": "<p>The unique id for this object to use for state management purposes.</p>",
                "default": null
            },
            {
                "name": "stateful",
                "type": "boolean",
                "doc": "<p>A flag which causes the object to attempt to restore the state of\ninternal properties from a saved state on startup. The object must have\na stateId for state to be managed.</p>",
                "default": "false"
            }
        ],
        "events": [
            {
                "name": "beforestaterestore",
                "params": "this(Ext.state.Stateful) state(Object) eOpts(Object)",
                "doc": "<p>Fires before the state of the object is restored. Return false from an event handler to stop the restore.</p>"
            },
            {
                "name": "beforestatesave",
                "params": "this(Ext.state.Stateful) state(Object) eOpts(Object)",
                "doc": "<p>Fires before the state of the object is saved to the configured state provider. Return false to stop the save.</p>"
            },
            {
                "name": "staterestore",
                "params": "this(Ext.state.Stateful) state(Object) eOpts(Object)",
                "doc": "<p>Fires after the state of the object is restored.</p>"
            },
            {
                "name": "statesave",
                "params": "this(Ext.state.Stateful) state(Object) eOpts(Object)",
                "doc": "<p>Fires after the state of the object is saved to the configured state provider.</p>"
            }
        ]
    },
    "Ext.supports": {
        "type": "Ext.supports",
        "doc": "<p>Contains information about features supported in the current environment as well\nas bugs detected.</p>",
        "configs": [],
        "events": []
    },
    "Ext.tab.Bar": {
        "type": "Ext.tab.Bar",
        "doc": "<p>TabBar is used internally by a TabPanel and typically should not\nneed to be created manually.</p>",
        "configs": [
            {
                "name": "activateOnFocus",
                "type": "boolean",
                "doc": "<p>NB: This option is named this way for the intent, but in fact activation\nhappens in arrow key handler, not in focus handler. In IE focus events are\nasynchronous, so activation happens before the tab's focus handler is fired.</p>",
                "default": "true"
            },
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to elements within this\ncomponent like Panel's body will get a class <code>x-panel-body</code>. This means that if you create a subclass of Panel, and\nyou want it to get all the Panels styling for the element and the body, you leave the <code>baseCls</code> <code>x-panel</code> and use\n<code>componentCls</code> to add specific styling for this component.</p>",
                "default": "Ext.baseCSSPrefix + 'tab-bar'"
            },
            {
                "name": "childEls",
                "type": "object/string[]/object[]",
                "doc": "<p>The canonical form of <code>childEls</code> is an object keyed by child's property name\nwith values that are objects with the following properties.</p>",
                "default": "['body', 'strip']"
            },
            {
                "name": "componentLayout",
                "type": "string/object",
                "doc": "<p>The sizing and positioning of a Component's internal Elements is the responsibility of the Component's layout\nmanager which sizes a Component's internal structure in response to the Component being sized.</p>",
                "default": "'body'"
            },
            {
                "name": "defaultType",
                "type": "string",
                "doc": "<p>The default xtype of child Components to create in this Container when\na child item is specified as a raw configuration object, rather than as an instantiated Component.</p>",
                "default": "'tab'"
            },
            {
                "name": "maxTabWidth",
                "type": "number",
                "doc": "<p>The maximum width for a tab in this tab Bar. Defaults to the tab Panel's maxTabWidth value.</p>",
                "default": null
            },
            {
                "name": "minTabWidth",
                "type": "number",
                "doc": "<p>The minimum width for a tab in this tab Bar. Defaults to the tab Panel's minTabWidth value.</p>",
                "default": null
            },
            {
                "name": "plain",
                "type": "boolean",
                "doc": "<p>True to not show the full background on the tabbar</p>",
                "default": "false"
            },
            {
                "name": "renderTpl",
                "type": "ext.xtemplate/string/string[]",
                "doc": "<p>An XTemplate used to create the internal structure inside this Component's encapsulating\nElement.</p>",
                "default": "'<div id=\"{id}-body\" data-ref=\"body\" role=\"presentation\" class=\"{baseBodyCls} {baseBodyCls}-{ui} ' + '{bodyCls} {bodyTargetCls}{childElCls}\"<tpl if=\"bodyStyle\"> style=\"{bodyStyle}\"</tpl>>' + '{%this.renderContainer(out,values)%}' + '</div>' + '<div id=\"{id}-strip\" data-ref=\"strip\" role=\"presentation\" class=\"{stripCls} {stripCls}-{ui}{childElCls}\"></div>'"
            },
            {
                "name": "tabRotation",
                "type": "'default'/0/1/2",
                "doc": "<p>The rotation of the tabs.  Can be one of the following values:</p>",
                "default": "'default'"
            },
            {
                "name": "tabStretchMax",
                "type": "boolean",
                "doc": "<p><code>true</code> to stretch all tabs to the height of the tallest tab when the tabBar\nis docked horizontally, or the width of the widest tab when the tabBar is\ndocked vertically.</p>",
                "default": "true"
            }
        ],
        "events": [
            {
                "name": "change",
                "params": "tabBar(Ext.tab.Bar) tab(Ext.tab.Tab) card(Ext.Component) eOpts(Object)",
                "doc": "<p>Fired when the currently-active tab has changed</p>"
            }
        ]
    },
    "Ext.tab.Panel": {
        "type": "Ext.tab.Panel",
        "doc": "<p>A basic tab container. TabPanels can be used exactly like a standard Ext.panel.Panel for\nlayout purposes, but also have special support for containing child Components\n(<code>items</code>) that are managed using a\nCardLayout layout manager, and displayed as separate tabs.</p>",
        "configs": [
            {
                "name": "activeItem",
                "type": "string/number",
                "doc": "<p>Doesn't apply for TabPanel, use activeTab instead.</p>",
                "default": null
            },
            {
                "name": "activeTab",
                "type": "string/number/ext.component",
                "doc": "<p>The tab to activate initially. Either an ID, index or the tab component itself.</p>",
                "default": null
            },
            {
                "name": "deferredRender",
                "type": "boolean",
                "doc": "<p>True by default to defer the rendering of child items to the browsers DOM\nuntil a tab is activated. False will render all contained items as soon as\nthe layout is rendered. If there is a significant amount of content or a lot of\nheavy controls being rendered into panels that are not displayed by default, setting this to true might improve\nperformance.</p>",
                "default": "true"
            },
            {
                "name": "itemCls",
                "type": "string",
                "doc": "<p>The class added to each child item of this TabPanel.</p>",
                "default": "'x-tabpanel-child'"
            },
            {
                "name": "layout",
                "type": "ext.enums.layout/object",
                "doc": "<p>Optional configuration object for the internal card layout.\nIf present, this is passed straight through to the layout's constructor</p>",
                "default": null
            },
            {
                "name": "maxTabWidth",
                "type": "number",
                "doc": "<p>The maximum width for each tab.</p>",
                "default": null
            },
            {
                "name": "minTabWidth",
                "type": "number",
                "doc": "<p>The minimum width for a tab in the tabBar.</p>",
                "default": null
            },
            {
                "name": "plain",
                "type": "boolean",
                "doc": "<p>True to not show the full background on the TabBar.</p>",
                "default": "false"
            },
            {
                "name": "removePanelHeader",
                "type": "boolean",
                "doc": "<p>True to instruct each Panel added to the TabContainer to not render its header element.\nThis is to ensure that the title of the panel does not appear twice.</p>",
                "default": "true"
            },
            {
                "name": "tabBar",
                "type": "object",
                "doc": "<p>Optional configuration object for the internal Ext.tab.Bar.\nIf present, this is passed straight through to the TabBar's constructor</p>",
                "default": null
            },
            {
                "name": "tabBarHeaderPosition",
                "type": "number",
                "doc": "<p>If specified, the tabBar will be rendered as an item of the TabPanel's\nHeader and the specified <code>tabBarHeaderPosition</code> will be used as the Panel header's\nitemPosition.  If not specified, the tabBar will be rendered\nas a docked item at tabPosition</p>",
                "default": null
            },
            {
                "name": "tabPosition",
                "type": "\"top\"/\"bottom\"/\"left\"/\"right\"",
                "doc": "<p>The position where the tab strip should be rendered. Can be <code>top</code>, <code>bottom</code>,\n<code>left</code> or <code>right</code></p>",
                "default": "'top'"
            },
            {
                "name": "tabRotation",
                "type": "'default'/0/1/2",
                "doc": "<p>The rotation of the tabs.  Can be one of the following values:</p>",
                "default": "'default'"
            },
            {
                "name": "tabStretchMax",
                "type": "boolean",
                "doc": "<p><code>true</code> to stretch all tabs to the height of the tallest tab when the tabBar\nis docked horizontally, or the width of the widest tab when the tabBar is\ndocked vertically.</p>",
                "default": "true"
            }
        ],
        "events": [
            {
                "name": "beforetabchange",
                "params": "tabPanel(Ext.tab.Panel) newCard(Ext.Component) oldCard(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires before a tab change (activated by setActiveTab). Return false in any listener to cancel\nthe tabchange</p>"
            },
            {
                "name": "tabchange",
                "params": "tabPanel(Ext.tab.Panel) newCard(Ext.Component) oldCard(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires when a new tab has been activated (activated by setActiveTab).</p>"
            }
        ]
    },
    "Ext.tab.Tab": {
        "type": "Ext.tab.Tab",
        "doc": "<p>Represents a single Tab in a TabPanel. A Tab is simply a slightly customized Button,\nstyled to look like a tab. Tabs are optionally closable, and can also be disabled. 99% of the time you will not\nneed to create Tabs manually as the framework does so automatically when you use a TabPanel</p>",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to add to all buttons.</p>",
                "default": "Ext.baseCSSPrefix + 'tab'"
            },
            {
                "name": "closable",
                "type": "boolean",
                "doc": "<p>True to make the Tab start closable (the close icon will be visible).</p>",
                "default": "true"
            },
            {
                "name": "closeText",
                "type": "string",
                "doc": "<p>The accessible text label for the close button link; only used when closable = true.</p>",
                "default": "'Close Tab'"
            },
            {
                "name": "overCls",
                "type": "string",
                "doc": "<p>An optional extra CSS class that will be added to this component's Element when the mouse moves over the Element,\nand removed when the mouse moves out. This can be useful for adding customized 'active' or 'hover' styles to the\ncomponent or any of its children using standard CSS rules.</p>",
                "default": "Ext.baseCSSPrefix + 'tab-over'"
            },
            {
                "name": "rotation",
                "type": "'default'/0/1/2",
                "doc": "<p>The rotation of the tab.  Can be one of the following values:</p>",
                "default": "'default'"
            },
            {
                "name": "scale",
                "type": "\"small\"/\"medium\"/\"large\"",
                "doc": "<p>The size of the Button. Three values are allowed:</p>",
                "default": "false"
            },
            {
                "name": "tabIndex",
                "type": "number",
                "doc": "<p>Unlike Buttons, Tabs should not be focusable by default</p>",
                "default": null
            },
            {
                "name": "tabPosition",
                "type": "'top'/'right'/'bottom'/'left'",
                "doc": "<p>The tab's position.  Users should not typically need to set this, as it is\nconfigured automatically by the tab bar</p>",
                "default": "'top'"
            }
        ],
        "events": [
            {
                "name": "activate",
                "params": "this(Ext.tab.Tab) eOpts(Object)",
                "doc": "<p>Fired when the tab is activated.</p>"
            },
            {
                "name": "beforeclose",
                "params": "tab(Ext.tab.Tab) eOpts(Object)",
                "doc": "<p>Fires if the user clicks on the Tab's close button, but before the close event is fired. Return\nfalse from any listener to stop the close event being fired</p>"
            },
            {
                "name": "close",
                "params": "tab(Ext.tab.Tab) eOpts(Object)",
                "doc": "<p>Fires to indicate that the tab is to be closed, usually because the user has clicked the close button.</p>"
            },
            {
                "name": "deactivate",
                "params": "this(Ext.tab.Tab) eOpts(Object)",
                "doc": "<p>Fired when the tab is deactivated.</p>"
            }
        ]
    },
    "Ext.tip.QuickTip": {
        "type": "Ext.tip.QuickTip",
        "doc": "<p>A specialized tooltip class for tooltips that can be specified in markup and automatically managed\nby the global Ext.tip.QuickTipManager instance.  See the QuickTipManager documentation for\nadditional usage details and examples.</p>",
        "configs": [
            {
                "name": "interceptTitles",
                "type": "boolean",
                "doc": "<p><code>true</code> to automatically use the element's DOM title value if available.</p>",
                "default": "false"
            },
            {
                "name": "shrinkWrapDock",
                "type": "boolean/number",
                "doc": "<p>Allows for this panel to include the dockedItems when trying to determine the overall\nsize of the panel. This option is only applicable when this panel is also shrink wrapping in the\nsame dimensions. See Ext.Component.shrinkWrap for an explanation of the configuration options.</p>",
                "default": "true"
            },
            {
                "name": "target",
                "type": "string/htmlelement/ext.dom.element",
                "doc": "<p>The target HTMLElement, Ext.dom.Element or id to associate with this Quicktip.</p>",
                "default": null
            },
            {
                "name": "title",
                "type": "string",
                "doc": "<p>Force creation of header Component</p>",
                "default": "'&#160;'"
            }
        ],
        "events": []
    },
    "Ext.tip.QuickTipManager": {
        "type": "Ext.tip.QuickTipManager",
        "doc": "<p>Provides attractive and customizable tooltips for any element. The QuickTips\nsingleton is used to configure and manage tooltips globally for multiple elements\nin a generic manner.  To create individual tooltips with maximum customizability,\nyou should consider either Ext.tip.Tip or Ext.tip.ToolTip.</p>",
        "configs": [],
        "events": []
    },
    "Ext.tip.Tip": {
        "type": "Ext.tip.Tip",
        "doc": "<p>This is the base class for Ext.tip.QuickTip and Ext.tip.ToolTip that provides the basic layout and\npositioning that all tip-based classes require. This class can be used directly for simple, statically-positioned\ntips that are displayed programmatically, or it can be extended to provide custom tip implementations.</p>",
        "configs": [
            {
                "name": "autoRender",
                "type": "boolean/string/htmlelement/ext.dom.element",
                "doc": "<p>private panel overrides</p>",
                "default": "true"
            },
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to elements within this\ncomponent like Panel's body will get a class <code>x-panel-body</code>. This means that if you create a subclass of Panel, and\nyou want it to get all the Panels styling for the element and the body, you leave the <code>baseCls</code> <code>x-panel</code> and use\n<code>componentCls</code> to add specific styling for this component.</p>",
                "default": "Ext.baseCSSPrefix + 'tip'"
            },
            {
                "name": "closable",
                "type": "boolean",
                "doc": "<p>True to render a close tool button into the tooltip header.</p>",
                "default": "false"
            },
            {
                "name": "closeAction",
                "type": "string",
                "doc": "<p>The action to take when the close header tool is clicked:</p>",
                "default": "'hide'"
            },
            {
                "name": "constrainPosition",
                "type": "boolean",
                "doc": "<p>If <code>true</code>, then the tooltip will be automatically constrained to stay within\nthe browser viewport.</p>",
                "default": "true"
            },
            {
                "name": "defaultAlign",
                "type": "string",
                "doc": "<p><strong>Experimental</strong>. The default Ext.util.Positionable.alignTo anchor position value\nfor this tip relative to its element of origin.</p>",
                "default": "\"tl-bl?\""
            },
            {
                "name": "focusOnToFront",
                "type": "boolean",
                "doc": "<p>Specifies whether the floated component should be automatically focused when\nit is brought to the front.</p>",
                "default": "false"
            },
            {
                "name": "frameHeader",
                "type": "boolean",
                "doc": "<p>True to apply a frame to the panel panels header (if 'frame' is true).</p>",
                "default": "false"
            },
            {
                "name": "hidden",
                "type": "boolean",
                "doc": "<p><code>true</code> to hide the component.</p>",
                "default": "true"
            },
            {
                "name": "maxWidth",
                "type": "number",
                "doc": "<p>The maximum width of the tip in pixels.</p>",
                "default": "500"
            },
            {
                "name": "minWidth",
                "type": "number",
                "doc": "<p>The minimum width of the tip in pixels.</p>",
                "default": "40"
            },
            {
                "name": "shadow",
                "type": "boolean/string",
                "doc": "<p><code>true</code> or \"sides\" for the default effect, \"frame\" for 4-way shadow, and \"drop\"\nfor bottom-right shadow.</p>",
                "default": "\"sides\""
            },
            {
                "name": "width",
                "type": "number",
                "doc": "<p>Width in pixels of the tip.  Width will be ignored if it\nexceeds the bounds of minWidth or maxWidth.</p>",
                "default": "'auto'"
            }
        ],
        "events": []
    },
    "Ext.tip.ToolTip": {
        "type": "Ext.tip.ToolTip",
        "doc": "<p>ToolTip is a Ext.tip.Tip implementation that handles the common case of displaying a\ntooltip when hovering over a certain element or elements on the page. It allows fine-grained\ncontrol over the tooltip's alignment relative to the target element or mouse, and the timing\nof when it is automatically shown and hidden.</p>",
        "configs": [
            {
                "name": "anchor",
                "type": "string",
                "doc": "<p>If specified, indicates that the tip should be anchored to a\nparticular side of the target element or mouse pointer (\"top\", \"right\", \"bottom\",\nor \"left\"), with an arrow pointing back at the target or mouse pointer. If\nconstrainPosition is enabled, this will be used as a preferred value\nonly and may be flipped as needed.</p>",
                "default": null
            },
            {
                "name": "anchorOffset",
                "type": "number",
                "doc": "<p>A numeric pixel value used to offset the default position of the anchor arrow.  When the anchor\nposition is on the top or bottom of the tooltip, <code>anchorOffset</code> will be used as a horizontal offset.\nLikewise, when the anchor position is on the left or right side, <code>anchorOffset</code> will be used as\na vertical offset.</p>",
                "default": "0"
            },
            {
                "name": "anchorToTarget",
                "type": "boolean",
                "doc": "<p>True to anchor the tooltip to the target element, false to anchor it relative to the mouse coordinates.\nWhen <code>anchorToTarget</code> is true, use <code>defaultAlign</code> to control tooltip alignment to the\ntarget element.  When <code>anchorToTarget</code> is false, use <code>anchor</code> instead to control alignment.</p>",
                "default": "true"
            },
            {
                "name": "autoHide",
                "type": "boolean",
                "doc": "<p>True to automatically hide the tooltip after the\nmouse exits the target element or after the <code>dismissDelay</code>\nhas expired if set.  If <code>closable = true</code>\na close tool button will be rendered into the tooltip header.</p>",
                "default": "true"
            },
            {
                "name": "delegate",
                "type": "string",
                "doc": "<p>A DomQuery simple selector which allows selection of individual elements within the\n<code>target</code> element to trigger showing and hiding the ToolTip as the mouse moves within the\ntarget. See Ext.dom.Query for information about simple selectors.</p>",
                "default": null
            },
            {
                "name": "dismissDelay",
                "type": "number",
                "doc": "<p>Delay in milliseconds before the tooltip automatically hides. To disable automatic hiding, set\ndismissDelay = 0.</p>",
                "default": "5000"
            },
            {
                "name": "fadeOutDuration",
                "type": "number",
                "doc": "<p>The number of milliseconds for the <code>fadeOut</code> animation. Only valid if <code>hideAction</code>\nis set to <code>fadeOut</code>.</p>",
                "default": "1000"
            },
            {
                "name": "hideAction",
                "type": "string",
                "doc": "<p>The method to use to hide the tooltip. Another useful method for this is <code>fadeOut</code>.</p>",
                "default": "\"hide\""
            },
            {
                "name": "hideDelay",
                "type": "number",
                "doc": "<p>Delay in milliseconds after the mouse exits the target element but before the tooltip actually hides.\nSet to 0 for the tooltip to hide immediately.</p>",
                "default": "200"
            },
            {
                "name": "mouseOffset",
                "type": "number[]",
                "doc": "<p>An XY offset from the mouse position where the tooltip should be shown.</p>",
                "default": "[15,18]"
            },
            {
                "name": "showDelay",
                "type": "number",
                "doc": "<p>Delay in milliseconds before the tooltip displays after the mouse enters the target element.</p>",
                "default": "500"
            },
            {
                "name": "target",
                "type": "htmlelement/ext.dom.element/string",
                "doc": "<p>The target element or string id to monitor for mouseover events to trigger\nshowing this ToolTip.</p>",
                "default": null
            },
            {
                "name": "trackMouse",
                "type": "boolean",
                "doc": "<p>True to have the tooltip follow the mouse as it moves over the target element.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.toolbar.Breadcrumb": {
        "type": "Ext.toolbar.Breadcrumb",
        "doc": "<p>A toolbar that displays hierarchical data from a TreeStore\nas a trail of breadcrumb buttons.  Each button represents a node in the store.  A click\non a button will \"select\" that node in the tree.  Non-leaf nodes will display their\nchild nodes on a dropdown menu of the corresponding button in the breadcrumb trail,\nand a click on an item in the menu will trigger selection of the corresponding child\nnode.</p>",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to elements within this\ncomponent like Panel's body will get a class <code>x-panel-body</code>. This means that if you create a subclass of Panel, and\nyou want it to get all the Panels styling for the element and the body, you leave the <code>baseCls</code> <code>x-panel</code> and use\n<code>componentCls</code> to add specific styling for this component.</p>",
                "default": "Ext.baseCSSPrefix + 'breadcrumb'"
            },
            {
                "name": "buttonUI",
                "type": "string",
                "doc": "<p>Button UI to use for breadcrumb items.  Use extjs-breadcrumb-arrow to\nadd special styling to the breadcrumb arrows</p>",
                "default": "'plain-toolbar'"
            },
            {
                "name": "displayField",
                "type": "string",
                "doc": "<p>The name of the field in the data model to display in the navigation items of\nthis breadcrumb toolbar</p>",
                "default": "'text'"
            },
            {
                "name": "layout",
                "type": "ext.enums.layout/object",
                "doc": "<p><strong>Important</strong>: In order for child items to be correctly sized and\npositioned, typically a layout manager <strong>must</strong> be specified through\nthe <code>layout</code> configuration option.</p>",
                "default": "'hbox'"
            },
            {
                "name": "overflowHandler",
                "type": "string",
                "doc": "<p>The overflowHandler for this Breadcrumb:</p>",
                "default": "null"
            },
            {
                "name": "publishes",
                "type": "string/string[]/object",
                "doc": "<p>One or more names of config properties that this component should publish to\nits <code>ViewModel</code>. Some components override this and publish their most useful\nconfigs by default.</p>",
                "default": "['selection']"
            },
            {
                "name": "selection",
                "type": "ext.data.treemodel/string",
                "doc": "<p>The selected node, or <code>\"root\"</code> to select the root node</p>",
                "default": "'root'"
            },
            {
                "name": "showIcons",
                "type": "boolean",
                "doc": "<p>Controls whether or not icons of tree nodes are displayed in the breadcrumb\nbuttons.  There are 3 possible values for this config:</p>",
                "default": "null"
            },
            {
                "name": "showMenuIcons",
                "type": "boolean",
                "doc": "<p>Controls whether or not icons of tree nodes are displayed in the breadcrumb\nmenu items. There are 3 possible values for this config:</p>",
                "default": "null"
            },
            {
                "name": "store",
                "type": "ext.data.treestore",
                "doc": "<p>The TreeStore that this breadcrumb toolbar should use as its data source</p>",
                "default": null
            },
            {
                "name": "twoWayBindable",
                "type": "string/string[]/object",
                "doc": "<p>This object holds a map of <code>config</code> properties that will update their binding\nas they are modified. For example, <code>value</code> is a key added by form fields. The\nform of this config is the same as <code>publishes</code>.</p>",
                "default": "['selection']"
            },
            {
                "name": "useSplitButtons",
                "type": "boolean",
                "doc": "<p><code>false</code> to use regular Buttons instead of Split Buttons.  When <code>true</code>, a click on the body of a button\nwill navigate to the specified node, and a click on the arrow will show a menu\ncontaining the the child nodes.  When <code>false</code>, the only mode of navigation is\nthe menu, since a click anywhere on the button will show the menu.</p>",
                "default": "true"
            }
        ],
        "events": [
            {
                "name": "selectionchange",
                "params": "this(Ext.toolbar.Breadcrumb) node(Ext.data.TreeModel) eOpts(Object)",
                "doc": "<p>Fires when the selected node changes</p>"
            }
        ]
    },
    "Ext.toolbar.Fill": {
        "type": "Ext.toolbar.Fill",
        "doc": "<p>A non-rendering placeholder item which instructs the Toolbar's Layout to begin using\nthe right-justified button container.</p>",
        "configs": [],
        "events": []
    },
    "Ext.toolbar.Item": {
        "type": "Ext.toolbar.Item",
        "doc": "<p>The base class that other non-interacting Toolbar Item classes should extend in order to\nget some basic common toolbar item functionality.</p>",
        "configs": [
            {
                "name": "overflowText",
                "type": "string",
                "doc": "<p>Text to be used for the menu if the item is overflowed.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.toolbar.Paging": {
        "type": "Ext.toolbar.Paging",
        "doc": "<p>As the number of records increases, the time required for the browser to render them increases. Paging is used to\nreduce the amount of data exchanged with the client. Note: if there are more records/rows than can be viewed in the\navailable screen area, vertical scrollbars will be added.</p>",
        "configs": [
            {
                "name": "afterPageText",
                "type": "string",
                "doc": "<p>Customizable piece of the default paging text. Note that this string is formatted using\n{0} as a token that is replaced by the number of total pages. This token should be preserved when overriding this\nstring if showing the total page count is desired.</p>",
                "default": "'of {0}'"
            },
            {
                "name": "beforePageText",
                "type": "string",
                "doc": "<p>The text displayed before the input item.</p>",
                "default": "'Page'"
            },
            {
                "name": "displayInfo",
                "type": "boolean",
                "doc": "<p>true to display the displayMsg</p>",
                "default": "false"
            },
            {
                "name": "displayMsg",
                "type": "string",
                "doc": "<p>The paging status message to display. Note that this string is\nformatted using the braced numbers {0}-{2} as tokens that are replaced by the values for start, end and total\nrespectively. These tokens should be preserved when overriding this string if showing those values is desired.</p>",
                "default": "'Displaying {0} - {1} of {2}'"
            },
            {
                "name": "emptyMsg",
                "type": "string",
                "doc": "<p>The message to display when no records are found.</p>",
                "default": "'No data to display'"
            },
            {
                "name": "firstText",
                "type": "string",
                "doc": "<p>The quicktip text displayed for the first page button.\n<strong>Note</strong>: quick tips must be initialized for the quicktip to show.</p>",
                "default": "'First Page'"
            },
            {
                "name": "inputItemWidth",
                "type": "number",
                "doc": "<p>The width in pixels of the input field used to display and change the current page number.</p>",
                "default": "30"
            },
            {
                "name": "lastText",
                "type": "string",
                "doc": "<p>The quicktip text displayed for the last page button.\n<strong>Note</strong>: quick tips must be initialized for the quicktip to show.</p>",
                "default": "'Last Page'"
            },
            {
                "name": "nextText",
                "type": "string",
                "doc": "<p>The quicktip text displayed for the next page button.\n<strong>Note</strong>: quick tips must be initialized for the quicktip to show.</p>",
                "default": "'Next Page'"
            },
            {
                "name": "prependButtons",
                "type": "boolean",
                "doc": "<p>true to insert any configured items <em>before</em> the paging buttons.</p>",
                "default": "false"
            },
            {
                "name": "prevText",
                "type": "string",
                "doc": "<p>The quicktip text displayed for the previous page button.\n<strong>Note</strong>: quick tips must be initialized for the quicktip to show.</p>",
                "default": "'Previous Page'"
            },
            {
                "name": "refreshText",
                "type": "string",
                "doc": "<p>The quicktip text displayed for the Refresh button.\n<strong>Note</strong>: quick tips must be initialized for the quicktip to show.</p>",
                "default": "'Refresh'"
            },
            {
                "name": "store",
                "type": "ext.data.store",
                "doc": "<p>The Ext.data.Store the paging toolbar should use as its data source.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "beforechange",
                "params": "this(Ext.toolbar.Paging) page(Number) eOpts(Object)",
                "doc": "<p>Fires just before the active page is changed. Return false to prevent the active page from being changed.</p>"
            },
            {
                "name": "change",
                "params": "this(Ext.toolbar.Paging) pageData(Object) eOpts(Object)",
                "doc": "<p>Fires after the active page has been changed.</p>"
            }
        ]
    },
    "Ext.toolbar.Separator": {
        "type": "Ext.toolbar.Separator",
        "doc": "<p>A simple class that adds a vertical separator bar between toolbar items (css class: 'x-toolbar-separator').</p>",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to elements within this\ncomponent like Panel's body will get a class <code>x-panel-body</code>. This means that if you create a subclass of Panel, and\nyou want it to get all the Panels styling for the element and the body, you leave the <code>baseCls</code> <code>x-panel</code> and use\n<code>componentCls</code> to add specific styling for this component.</p>",
                "default": "Ext.baseCSSPrefix + 'toolbar-separator'"
            }
        ],
        "events": []
    },
    "Ext.toolbar.Spacer": {
        "type": "Ext.toolbar.Spacer",
        "doc": "<p>A simple element that adds extra horizontal space between items in a toolbar.\nBy default a 2px wide space is added via CSS specification:</p>",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to elements within this\ncomponent like Panel's body will get a class <code>x-panel-body</code>. This means that if you create a subclass of Panel, and\nyou want it to get all the Panels styling for the element and the body, you leave the <code>baseCls</code> <code>x-panel</code> and use\n<code>componentCls</code> to add specific styling for this component.</p>",
                "default": "Ext.baseCSSPrefix + 'toolbar-spacer'"
            }
        ],
        "events": []
    },
    "Ext.toolbar.TextItem": {
        "type": "Ext.toolbar.TextItem",
        "doc": "<p>A simple class that renders text directly into a toolbar.</p>",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to elements within this\ncomponent like Panel's body will get a class <code>x-panel-body</code>. This means that if you create a subclass of Panel, and\nyou want it to get all the Panels styling for the element and the body, you leave the <code>baseCls</code> <code>x-panel</code> and use\n<code>componentCls</code> to add specific styling for this component.</p>",
                "default": "Ext.baseCSSPrefix + 'toolbar-text'"
            },
            {
                "name": "text",
                "type": "string",
                "doc": "<p>The text to be used as innerHTML (html tags are accepted).</p>",
                "default": "''"
            }
        ],
        "events": []
    },
    "Ext.toolbar.Toolbar": {
        "type": "Ext.toolbar.Toolbar",
        "doc": "<p>Basic Toolbar class. Although the defaultType for\nToolbar is button, Toolbar elements (child items for the Toolbar container)\nmay be virtually any type of Component. Toolbar elements can be created explicitly via their\nconstructors, or implicitly via their xtypes, and can be added dynamically.</p>",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to elements within this\ncomponent like Panel's body will get a class <code>x-panel-body</code>. This means that if you create a subclass of Panel, and\nyou want it to get all the Panels styling for the element and the body, you leave the <code>baseCls</code> <code>x-panel</code> and use\n<code>componentCls</code> to add specific styling for this component.</p>",
                "default": "Ext.baseCSSPrefix + 'toolbar'"
            },
            {
                "name": "defaultButtonUI",
                "type": "string",
                "doc": "<p>A default ui to use for Button items. This is a quick and simple\nway to change the look of all child Buttons.</p>",
                "default": "'default-toolbar'"
            },
            {
                "name": "defaultFieldUI",
                "type": "string",
                "doc": "<p>Default UI for form field items.</p>",
                "default": "'default'"
            },
            {
                "name": "defaultFooterButtonUI",
                "type": "string",
                "doc": "<p>Default UI for Buttons if the toolbar has a UI of 'footer'</p>",
                "default": "'default'"
            },
            {
                "name": "defaultFooterFieldUI",
                "type": "string",
                "doc": "<p>Default UI for Form Fields if the toolbar has a UI of 'footer'</p>",
                "default": "'default'"
            },
            {
                "name": "defaultType",
                "type": "string",
                "doc": "<p>The default xtype of child Components to create in this Container when\na child item is specified as a raw configuration object, rather than as an instantiated Component.</p>",
                "default": "'button'"
            },
            {
                "name": "enableOverflow",
                "type": "boolean",
                "doc": "<p>Configure true to make the toolbar provide a button which activates a dropdown Menu to show\nitems which overflow the Toolbar's width.  Setting this too true is the equivalent\nof setting <code>overflowHandler:'menu'</code>.</p>",
                "default": "false"
            },
            {
                "name": "layout",
                "type": "ext.enums.layout/object",
                "doc": "<p>This class assigns a default layout (<code>layout: 'hbox'</code> or <code>layout: 'vbox'</code> depending upon orientation).</p>",
                "default": null
            },
            {
                "name": "overflowHandler",
                "type": "string",
                "doc": "<ul>\n<li><code>null</code> - hidden overflow</li>\n<li><code>'scroller'</code> to render left/right scroller buttons on either side of the breadcrumb</li>\n<li><code>'menu'</code> to render the overflowing buttons as items of an overflow menu.</li>\n</ul>\n\n",
                "default": null
            },
            {
                "name": "vertical",
                "type": "boolean",
                "doc": "<p>Set to <code>true</code> to make the toolbar vertical. The layout will become a <code>vbox</code>.</p>",
                "default": "false"
            }
        ],
        "events": [
            {
                "name": "overflowchange",
                "params": "lastHiddenCount(Number) hiddenCount(Number) hiddenItems(Array) eOpts(Object)",
                "doc": "<p>Fires after the overflow state has changed if this toolbar has been configured with\nan <code>overflowHandler</code>.</p>"
            }
        ]
    },
    "Ext.tree.Column": {
        "type": "Ext.tree.Column",
        "doc": "<p>Provides indentation and folder structure markup for a Tree taking into account\ndepth and position within the tree hierarchy.</p>",
        "configs": [
            {
                "name": "draggable",
                "type": "boolean",
                "doc": "<p>False to disable drag-drop reordering of this column.</p>",
                "default": "false"
            },
            {
                "name": "hideable",
                "type": "boolean",
                "doc": "<p>False to prevent the user from hiding this column.</p>",
                "default": "false"
            },
            {
                "name": "lockable",
                "type": "boolean",
                "doc": "<p>If the grid is configured with enableLocking, or has columns which are\nconfigured with a locked value, this option may be used to disable user-driven locking or unlocking\nof this column. This column will remain in the side into which its own locked configuration placed it.</p>",
                "default": "false"
            },
            {
                "name": "tdCls",
                "type": "string",
                "doc": "<p>A CSS class names to apply to the table cells for this column.</p>",
                "default": "Ext.baseCSSPrefix + 'grid-cell-treecolumn'"
            }
        ],
        "events": []
    },
    "Ext.tree.NavigationModel": {
        "type": "Ext.tree.NavigationModel",
        "doc": "<p>This class listens for key events fired from a TreePanel, and moves the currently focused item\nby adding the class focusCls.</p>",
        "configs": [],
        "events": []
    },
    "Ext.tree.Panel": {
        "type": "Ext.tree.Panel",
        "doc": "<p>The TreePanel provides tree-structured UI representation of tree-structured data.\nA TreePanel must be bound to a Ext.data.TreeStore.</p>",
        "configs": [
            {
                "name": "animate",
                "type": "boolean",
                "doc": "<p>True to enable animated expand/collapse. Defaults to the value of Ext.enableFx.</p>",
                "default": null
            },
            {
                "name": "displayField",
                "type": "string",
                "doc": "<p>The field inside the model that will be used as the node's text.</p>",
                "default": "text"
            },
            {
                "name": "folderSort",
                "type": "boolean",
                "doc": "<p>True to automatically prepend a leaf sorter to the store.</p>",
                "default": null
            },
            {
                "name": "hideHeaders",
                "type": "boolean",
                "doc": "<p>True to hide the headers.</p>",
                "default": null
            },
            {
                "name": "lines",
                "type": "boolean",
                "doc": "<p>False to disable tree lines.</p>",
                "default": "true"
            },
            {
                "name": "root",
                "type": "ext.data.model/ext.data.treemodel/object",
                "doc": "<p>Allows you to not specify a store on this TreePanel. This is useful for creating a simple tree with preloaded\ndata without having to specify a TreeStore and Model. A store and model will be created and root will be passed\nto that store. For example:</p>",
                "default": null
            },
            {
                "name": "rootVisible",
                "type": "boolean",
                "doc": "<p>False to hide the root node.</p>",
                "default": "true"
            },
            {
                "name": "rowLines",
                "type": "boolean",
                "doc": "<p>Configure as true to separate rows with visible horizontal lines (depends on theme).</p>",
                "default": "false"
            },
            {
                "name": "singleExpand",
                "type": "boolean",
                "doc": "<p>True if only 1 node per branch may be expanded.</p>",
                "default": "false"
            },
            {
                "name": "store",
                "type": "ext.data.treestore",
                "doc": "<p>The Store the tree should use as its data source.</p>",
                "default": null
            },
            {
                "name": "useArrows",
                "type": "boolean",
                "doc": "<p>True to use Vista-style arrows in the tree.</p>",
                "default": "false"
            },
            {
                "name": "viewType",
                "type": "string",
                "doc": "<p>An xtype of view to use. This is automatically set to 'tableview' by Grid\nand to 'treeview' by Tree.</p>",
                "default": "'treeview'"
            }
        ],
        "events": [
            {
                "name": "afteritemcollapse",
                "params": "node(Ext.data.NodeInterface) index(Number) item(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires after an item has been visually collapsed and is no longer visible in the tree.</p>"
            },
            {
                "name": "afteritemexpand",
                "params": "node(Ext.data.NodeInterface) index(Number) item(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires after an item has been visually expanded and is visible in the tree.</p>"
            },
            {
                "name": "beforeitemappend",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires before a new child is appended, return false to cancel the append.</p>"
            },
            {
                "name": "beforeitemcollapse",
                "params": "this(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires before this node is collapsed.</p>"
            },
            {
                "name": "beforeitemexpand",
                "params": "this(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires before this node is expanded.</p>"
            },
            {
                "name": "beforeiteminsert",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) refNode(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires before a new child is inserted, return false to cancel the insert.</p>"
            },
            {
                "name": "beforeitemmove",
                "params": "this(Ext.data.NodeInterface) oldParent(Ext.data.NodeInterface) newParent(Ext.data.NodeInterface) index(Number) eOpts(Object)",
                "doc": "<p>Fires before this node is moved to a new location in the tree. Return false to cancel the move.</p>"
            },
            {
                "name": "beforeitemremove",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) isMove(Boolean) eOpts(Object)",
                "doc": "<p>Fires before a child is removed, return false to cancel the remove.</p>"
            },
            {
                "name": "beforeload",
                "params": "store(Ext.data.Store) operation(Ext.data.operation.Operation) eOpts(Object)",
                "doc": "<p>Fires before a request is made for a new data object. If the beforeload handler returns false the load\naction will be canceled.</p>"
            },
            {
                "name": "checkchange",
                "params": "node(Ext.data.TreeModel) checked(Boolean) eOpts(Object)",
                "doc": "<p>Fires when a node with a checkbox's checked property changes</p>"
            },
            {
                "name": "itemappend",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) index(Number) eOpts(Object)",
                "doc": "<p>Fires when a new child node is appended</p>"
            },
            {
                "name": "itemcollapse",
                "params": "this(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires when this node is collapsed.</p>"
            },
            {
                "name": "itemexpand",
                "params": "this(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires when this node is expanded.</p>"
            },
            {
                "name": "iteminsert",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) refNode(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires when a new child node is inserted.</p>"
            },
            {
                "name": "itemmove",
                "params": "this(Ext.data.NodeInterface) oldParent(Ext.data.NodeInterface) newParent(Ext.data.NodeInterface) index(Number) eOpts(Object)",
                "doc": "<p>Fires when this node is moved to a new location in the tree</p>"
            },
            {
                "name": "itemremove",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) isMove(Boolean) eOpts(Object)",
                "doc": "<p>Fires when a child node is removed</p>"
            },
            {
                "name": "load",
                "params": "this(Ext.data.TreeStore) records(Ext.data.TreeModel[]) successful(Boolean) operation(Ext.data.Operation) node(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires whenever the store reads data from a remote data source.</p>"
            }
        ]
    },
    "Ext.tree.View": {
        "type": "Ext.tree.View",
        "doc": "<p>Used as a view by TreePanel.</p>",
        "configs": [
            {
                "name": "animate",
                "type": "boolean",
                "doc": "<p>True to enable animated expand/collapse (defaults to the value of Ext.enableFx)</p>",
                "default": null
            },
            {
                "name": "loadMask",
                "type": "boolean/object",
                "doc": "<p>False to disable a load mask from displaying while the view is loading. This can also be a\nExt.LoadMask configuration object.</p>",
                "default": "false"
            },
            {
                "name": "loadingCls",
                "type": "string",
                "doc": "<p>The CSS class to apply to the loading message element. Defaults to Ext.LoadMask.prototype.msgCls \"x-mask-loading\".</p>",
                "default": "Ext.baseCSSPrefix + 'grid-tree-loading'"
            },
            {
                "name": "rootVisible",
                "type": "boolean",
                "doc": "<p>False to hide the root node.</p>",
                "default": "true"
            },
            {
                "name": "selectionModel",
                "type": "object/ext.selection.dataviewmodel",
                "doc": "<p>The selection model [dataviewmodel] config or alias to use.</p>",
                "default": "{type: 'treemodel'}"
            },
            {
                "name": "stripeRows",
                "type": "boolean",
                "doc": "<p>True to stripe the rows.</p>",
                "default": "false"
            }
        ],
        "events": [
            {
                "name": "afteritemcollapse",
                "params": "node(Ext.data.NodeInterface) index(Number) item(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires after an item has been visually collapsed and is no longer visible in the tree.</p>"
            },
            {
                "name": "afteritemexpand",
                "params": "node(Ext.data.NodeInterface) index(Number) item(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires after an item has been visually expanded and is visible in the tree.</p>"
            },
            {
                "name": "nodedragover",
                "params": "targetNode(Ext.data.NodeInterface) position(String) dragData(Object) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when a tree node is being targeted for a drag drop, return false to signal drop not allowed.</p>"
            }
        ]
    },
    "Ext.tree.ViewDragZone": {
        "type": "Ext.tree.ViewDragZone",
        "configs": [],
        "events": []
    },
    "Ext.tree.ViewDropZone": {
        "type": "Ext.tree.ViewDropZone",
        "configs": [
            {
                "name": "allowContainerDrops",
                "type": "boolean",
                "doc": "<p>True if drops on the tree container (outside of a specific tree node) are allowed.</p>",
                "default": "false"
            },
            {
                "name": "allowParentInserts",
                "type": "boolean",
                "doc": "<p>Allow inserting a dragged node between an expanded parent node and its first child that will become a\nsibling of the parent when dropped.</p>",
                "default": "false"
            },
            {
                "name": "appendOnly",
                "type": "boolean",
                "doc": "<p>True if the tree should only allow append drops (use for trees which are sorted).</p>",
                "default": "false"
            },
            {
                "name": "expandDelay",
                "type": "number",
                "doc": "<p>The delay in milliseconds to wait before expanding a target tree node while dragging a droppable node\nover the target.</p>",
                "default": "500"
            }
        ],
        "events": []
    },
    "Ext.tree.plugin.TreeViewDragDrop": {
        "type": "Ext.tree.plugin.TreeViewDragDrop",
        "doc": "<p>This plugin provides drag and/or drop functionality for a TreeView.</p>",
        "configs": [
            {
                "name": "allowContainerDrops",
                "type": "boolean",
                "doc": "<p>True if drops on the tree container (outside of a specific tree node) are allowed.</p>",
                "default": "false"
            },
            {
                "name": "allowParentInserts",
                "type": "boolean",
                "doc": "<p>Allow inserting a dragged node between an expanded parent node and its first child that will become a sibling of\nthe parent when dropped.</p>",
                "default": "false"
            },
            {
                "name": "appendOnly",
                "type": "boolean",
                "doc": "<p>True if the tree should only allow append drops (use for trees which are sorted).</p>",
                "default": "false"
            },
            {
                "name": "containerScroll",
                "type": "object/boolean",
                "doc": "<p>True to register this container with the Scrollmanager for auto scrolling during drag operations.\nA Ext.dd.ScrollManager configuration may also be passed.</p>",
                "default": "false"
            },
            {
                "name": "ddGroup",
                "type": "string",
                "doc": "<p>A named drag drop group to which this object belongs. If a group is specified, then both the DragZones and\nDropZone used by this plugin will only interact with other drag drop objects in the same group.</p>",
                "default": "TreeDD"
            },
            {
                "name": "displayField",
                "type": "string",
                "doc": "<p>The name of the model field that is used to display the text for the nodes</p>",
                "default": "text"
            },
            {
                "name": "dragGroup",
                "type": "string",
                "doc": "<p>The ddGroup to which the DragZone will belong.</p>",
                "default": null
            },
            {
                "name": "dragText",
                "type": "string",
                "doc": "<p>The text to show while dragging.</p>",
                "default": "'{0} selected node{1}'"
            },
            {
                "name": "dragZone",
                "type": "object",
                "doc": "<p>A config object to apply to the creation of the DragZone which handles for drag start gestures.</p>",
                "default": null
            },
            {
                "name": "dropGroup",
                "type": "string",
                "doc": "<p>The ddGroup to which the DropZone will belong.</p>",
                "default": null
            },
            {
                "name": "dropZone",
                "type": "object",
                "doc": "<p>A config object to apply to the creation of the DropZone which handles mouseover and drop gestures.</p>",
                "default": null
            },
            {
                "name": "enableDrag",
                "type": "boolean",
                "doc": "<p>Set to <code>false</code> to disallow dragging items from the View.</p>",
                "default": "true"
            },
            {
                "name": "enableDrop",
                "type": "boolean",
                "doc": "<p>Set to <code>false</code> to disallow the View from accepting drop gestures.</p>",
                "default": "true"
            },
            {
                "name": "expandDelay",
                "type": "number",
                "doc": "<p>The delay in milliseconds to wait before expanding a target tree node while dragging a droppable node over the\ntarget.</p>",
                "default": "1000"
            },
            {
                "name": "nodeHighlightColor",
                "type": "string",
                "doc": "<p>The color to use when visually highlighting the dragged or dropped node (default value is light blue).\nThe color must be a 6 digit hex value, without a preceding '#'. See also nodeHighlightOnDrop and\nnodeHighlightOnRepair.</p>",
                "default": "c3daf9"
            },
            {
                "name": "nodeHighlightOnDrop",
                "type": "boolean",
                "doc": "<p>Whether or not to highlight any nodes after they are\nsuccessfully dropped on their target. Defaults to the value of <code>Ext.enableFx</code>.\nSee also nodeHighlightColor and nodeHighlightOnRepair.</p>",
                "default": null
            },
            {
                "name": "nodeHighlightOnRepair",
                "type": "boolean",
                "doc": "<p>Whether or not to highlight any nodes after they are\nrepaired from an unsuccessful drag/drop. Defaults to the value of <code>Ext.enableFx</code>.\nSee also nodeHighlightColor and nodeHighlightOnDrop.</p>",
                "default": null
            },
            {
                "name": "sortOnDrop",
                "type": "boolean",
                "doc": "<p>Configure as <code>true</code> to sort the target node into the current tree sort order after the dropped node is added.</p>",
                "default": "false"
            }
        ],
        "events": [
            {
                "name": "beforedrop",
                "params": "node(HTMLElement) data(Object) overModel(Ext.data.Model) dropPosition(String) dropHandlers(Object) eOpts(Object)",
                "doc": "<p><strong>This event is fired through the TreeView. Add listeners to the TreeView object</strong></p>"
            },
            {
                "name": "drop",
                "params": "node(HTMLElement) data(Object) overModel(Ext.data.Model) dropPosition(String) eOpts(Object)",
                "doc": "<p><strong>This event is fired through the TreeView. Add listeners to the TreeView object</strong> Fired when a drop operation\nhas been completed and the data has been moved or copied.</p>"
            }
        ]
    },
    "Ext.util.AbstractMixedCollection": {
        "type": "Ext.util.AbstractMixedCollection",
        "configs": [
            {
                "name": "allowFunctions",
                "type": "boolean",
                "doc": "<p>Specify <code>true</code> if the addAll\nfunction should add function references to the collection. Defaults to\n<code>false</code>.</p>",
                "default": "false"
            }
        ],
        "events": [
            {
                "name": "add",
                "params": "index(Number) o(Object) key(String) eOpts(Object)",
                "doc": "<p>Fires when an item is added to the collection.</p>"
            },
            {
                "name": "clear",
                "params": "eOpts(Object)",
                "doc": "<p>Fires when the collection is cleared.</p>"
            },
            {
                "name": "remove",
                "params": "o(Object) key(String) eOpts(Object)",
                "doc": "<p>Fires when an item is removed from the collection.</p>"
            },
            {
                "name": "replace",
                "params": "key(String) old(Object) new(Object) eOpts(Object)",
                "doc": "<p>Fires when an item is replaced in the collection.</p>"
            }
        ]
    },
    "Ext.util.Animate": {
        "type": "Ext.util.Animate",
        "doc": "<p>This animation class is a mixin.</p>",
        "configs": [],
        "events": []
    },
    "Ext.util.Base64": {
        "type": "Ext.util.Base64",
        "doc": "<p>Base64 is a group of similar binary-to-text encoding schemes that represent binary data in an ASCII string format by\ntranslating it into a radix-64 representation.</p>",
        "configs": [],
        "events": []
    },
    "Ext.util.CSS": {
        "type": "Ext.util.CSS",
        "doc": "<p>Utility class for manipulating CSS rules</p>",
        "configs": [],
        "events": []
    },
    "Ext.util.CSV": {
        "type": "Ext.util.CSV",
        "doc": "<p>This class contains utility methods for dealing with CSV (Comma Separated Values) as\nspecified in RFC 4180.</p>",
        "configs": [
            {
                "name": "delimiter",
                "type": "string",
                "doc": "<p>The string used to separate the values in a row. Common values for this config\nare comma (\",\") and tab (\"\\t\"). See <code>Ext.util.CSV</code> and  <code>Ext.util.TSV</code>\nfor pre-configured instances of these formats.</p>",
                "default": "','"
            }
        ],
        "events": []
    },
    "Ext.util.Cache": {
        "type": "Ext.util.Cache",
        "doc": "<p>This class is used to manage simple, LRU caches. It provides an absolutely minimal\ncontainer interface. It is created like this:</p>",
        "configs": [
            {
                "name": "maxSize",
                "type": "number",
                "doc": "<p>The maximum size the cache is allowed to grow to before\nfurther additions cause removal of the least recently used entry.</p>",
                "default": "100"
            }
        ],
        "events": []
    },
    "Ext.util.ClickRepeater": {
        "type": "Ext.util.ClickRepeater",
        "doc": "<p>A wrapper class which can be applied to any element. Fires a \"click\" event while the\nmouse is pressed. The interval between firings may be specified in the config but\ndefaults to 20 milliseconds.</p>",
        "configs": [
            {
                "name": "accelerate",
                "type": "boolean",
                "doc": "<p>True if autorepeating should start slowly and accelerate.\n\"interval\" and \"delay\" are ignored.</p>",
                "default": null
            },
            {
                "name": "delay",
                "type": "number",
                "doc": "<p>The initial delay before the repeating event begins firing.\nSimilar to an autorepeat key delay.</p>",
                "default": "250"
            },
            {
                "name": "el",
                "type": "string/htmlelement/ext.dom.element",
                "doc": "<p>The element to act as a button.</p>",
                "default": null
            },
            {
                "name": "interval",
                "type": "number",
                "doc": "<p>The interval between firings of the \"click\" event (in milliseconds).</p>",
                "default": "20"
            },
            {
                "name": "pressedCls",
                "type": "string",
                "doc": "<p>A CSS class name to be applied to the element while pressed.</p>",
                "default": null
            },
            {
                "name": "preventDefault",
                "type": "boolean",
                "doc": "<p>True to prevent the default click event</p>",
                "default": "true"
            },
            {
                "name": "stopDefault",
                "type": "boolean",
                "doc": "<p>True to stop the default click event</p>",
                "default": "false"
            }
        ],
        "events": [
            {
                "name": "click",
                "params": "this(Ext.util.ClickRepeater) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires on a specified interval during the time the element is pressed.</p>"
            },
            {
                "name": "mousedown",
                "params": "this(Ext.util.ClickRepeater) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when the mouse button is depressed.</p>"
            },
            {
                "name": "mouseup",
                "params": "this(Ext.util.ClickRepeater) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when the mouse key is released.</p>"
            }
        ]
    },
    "Ext.util.Collection": {
        "type": "Ext.util.Collection",
        "doc": "<p>This class manages uniquely keyed objects such as records or\ncomponents.</p>",
        "configs": [
            {
                "name": "autoFilter",
                "type": "boolean",
                "doc": "\n",
                "default": "true"
            },
            {
                "name": "autoSort",
                "type": "boolean",
                "doc": "\n",
                "default": "true"
            },
            {
                "name": "decoder",
                "type": "function",
                "doc": "<p>A function that can convert newly added items to a proper type before being\nadded to this collection.</p>",
                "default": null
            },
            {
                "name": "defaultSortDirection",
                "type": "string",
                "doc": "<p>cfg {String} defaultSortDirection\nThe default sort direction to use if one is not specified.</p>",
                "default": "'ASC'"
            },
            {
                "name": "extraKeys",
                "type": "object",
                "doc": "<p>One or more <code>Ext.util.CollectionKey' configuration objects or key properties.\nEach property of the given object is the name of the</code>CollectionKey<code>instance\nthat is stored on this collection. The value of each property configures the\n</code>CollectionKey` instance.</p>",
                "default": null
            },
            {
                "name": "filters",
                "type": "array/ext.util.filtercollection",
                "doc": "<p>The collection of Filters for this collection. At the\ntime a collection is created <code>filters</code> can be specified as a unit. After that\ntime the normal <code>setFilters</code> method can also be given a set of replacement\nfilters for the collection.</p>",
                "default": null
            },
            {
                "name": "grouper",
                "type": "object",
                "doc": "<p>A configuration object for this collection's grouper.</p>",
                "default": null
            },
            {
                "name": "groups",
                "type": "ext.util.groupcollection",
                "doc": "<p>The collection of to hold each group container. This collection is created and\nremoved dynamically based on <code>grouper</code>. Application code should only need to\ncall <code>getGroups</code> to retrieve the collection and not <code>setGroups</code>.</p>",
                "default": null
            },
            {
                "name": "keyFn",
                "type": "function",
                "doc": "<p>A function to retrieve the key of an item in the collection. If provided,\nthis replaces the default <code>getKey</code> method. The default <code>getKey</code> method handles\nitems that have either an \"id\" or \"_id\" property or failing that a <code>getId</code>\nmethod to call.</p>",
                "default": null
            },
            {
                "name": "multiSortLimit",
                "type": "number",
                "doc": "<p>The maximum number of sorters which may be applied to this Sortable when using\nthe \"multi\" insertion position when adding sorters.</p>",
                "default": "3"
            },
            {
                "name": "rootProperty",
                "type": "string",
                "doc": "<p>The root property to use for aggregation, filtering and sorting. By default\nthis is <code>null</code> but when containing things like records\nthis config would likely be set to \"data\" so that property names are applied\nto the fields of each record.</p>",
                "default": null
            },
            {
                "name": "sorters",
                "type": "array/ext.util.sortercollection",
                "doc": "<p>Array of sorters for this collection. At the time a\ncollection is created the <code>sorters</code> can be specified as a unit. After that time\nthe normal <code>setSorters</code> method can be also be given a set of replacement\nsorters.</p>",
                "default": null
            },
            {
                "name": "source",
                "type": "ext.util.collection",
                "doc": "<p>The base <code>Collection</code>. This collection contains the items to which filters\nare applied to populate this collection. In this configuration, only the\nroot <code>source</code> collection can have items truly added or removed.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "add",
                "params": "collection(Ext.util.Collection) details(Object) eOpts(Object)",
                "doc": "<p>Fires after items have been added to the collection.</p>"
            },
            {
                "name": "beforeitemchange",
                "params": "collection(Ext.util.Collection) details(Object) eOpts(Object)",
                "doc": "<p>This event fires before an item change is reflected in the collection. This event\nis always followed by an <code>itemchange</code> event and, depending on the change, possibly\nan <code>add</code>, <code>remove</code> and/or <code>updatekey</code> event.</p>"
            },
            {
                "name": "beginupdate",
                "params": "collection(Ext.util.Collection) eOpts(Object)",
                "doc": "<p>Fired before changes are made to the collection. This event fires when the\n<code>beginUpdate</code> method is called and the counter it manages transitions from 0 to 1.</p>"
            },
            {
                "name": "endupdate",
                "params": "collection(Ext.util.Collection) eOpts(Object)",
                "doc": "<p>Fired after changes are made to the collection. This event fires when the <code>endUpdate</code>\nmethod is called and the counter it manages transitions from 1 to 0.</p>"
            },
            {
                "name": "itemchange",
                "params": "collection(Ext.util.Collection) details(Object) eOpts(Object)",
                "doc": "<p>This event fires after an item change is reflected in the collection. This event\nalways follows a <code>beforeitemchange</code> event and its corresponding <code>add</code>, <code>remove</code>\nand/or <code>updatekey</code> events.</p>"
            },
            {
                "name": "refresh",
                "params": "collection(Ext.util.Collection) eOpts(Object)",
                "doc": "<p>This event fires when the collection has changed entirely. This event is fired in\ncases where the collection's filter is updated or the items are sorted. While the\nitems previously in the collection may remain the same, the order at a minimum has\nchanged in ways that cannot be simply translated to other events.</p>"
            },
            {
                "name": "remove",
                "params": "collection(Ext.util.Collection) details(Object) eOpts(Object)",
                "doc": "<p>Fires after items have been removed from the collection. Some properties of this\nobject may not be present if calculating them is deemed too expensive. These are\nmarked as \"optional\".</p>"
            },
            {
                "name": "sort",
                "params": "collection(Ext.util.Collection) eOpts(Object)",
                "doc": "<p>This event fires after the contents of the collection have been sorted.</p>"
            },
            {
                "name": "updatekey",
                "params": "collection(Ext.util.Collection) details(Object) eOpts(Object)",
                "doc": "<p>Fires after the key for an item has changed.</p>"
            }
        ]
    },
    "Ext.util.CollectionKey": {
        "type": "Ext.util.CollectionKey",
        "doc": "<p>Maintains an additional key map for an <code>Ext.util.Collection</code>. Instances of this class\nare seldom created manually. Rather they are created by the <code>Ext.util.Collection' when\ngiven an</code>extraKeys` config.</p>",
        "configs": [
            {
                "name": "collection",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "keyFn",
                "type": "function/string",
                "doc": "<p>A function to retrieve the key of an item in the collection. This can be normal\nfunction that takes an item and returns the key or it can be the name of the\nmethod to call on an item to get the key.</p>",
                "default": null
            },
            {
                "name": "property",
                "type": "string",
                "doc": "<p>The name of the property on each item that is its key.</p>",
                "default": null
            },
            {
                "name": "rootProperty",
                "type": "string",
                "doc": "<p>The name of the sub-object property on each item that is its key. This value\noverrides <code>Ext.util.Collection.rootProperty</code>.</p>",
                "default": null
            },
            {
                "name": "unique",
                "type": "boolean",
                "doc": "\n",
                "default": "true"
            }
        ],
        "events": []
    },
    "Ext.util.ComponentDragger": {
        "type": "Ext.util.ComponentDragger",
        "doc": "<p>A subclass of Ext.dd.DragTracker which handles dragging any Component.</p>",
        "configs": [
            {
                "name": "constrain",
                "type": "boolean",
                "doc": "<p>Specify as <code>true</code> to constrain the Component to within the bounds of the constrainTo region.</p>",
                "default": null
            },
            {
                "name": "constrainDelegate",
                "type": "boolean",
                "doc": "<p>Specify as <code>true</code> to constrain the drag handles within the constrainTo region.</p>",
                "default": null
            },
            {
                "name": "delegate",
                "type": "string/ext.dom.element",
                "doc": "<p>A CSS selector which identifies child elements within the Component's encapsulating\nElement which are the drag handles. This limits dragging to only begin when the matching elements are\nmousedowned.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.util.Cookies": {
        "type": "Ext.util.Cookies",
        "doc": "<p>Utility class for setting/reading values from browser cookies.\nValues can be written using the set method.\nValues can be read using the get method.\nA cookie can be invalidated on the client machine using the clear method.</p>",
        "configs": [],
        "events": []
    },
    "Ext.util.DelayedTask": {
        "type": "Ext.util.DelayedTask",
        "doc": "<p>The DelayedTask class provides a convenient way to \"buffer\" the execution of a method,\nperforming setTimeout where a new timeout cancels the old timeout. When called, the\ntask will wait the specified time period before executing. If durng that time period,\nthe task is called again, the original call will be cancelled. This continues so that\nthe function is only called a single time for each iteration.</p>",
        "configs": [],
        "events": []
    },
    "Ext.util.DelimitedValue": {
        "type": "Ext.util.DelimitedValue",
        "doc": "<p>This base class contains utility methods for dealing with formats such as CSV (Comma\nSeparated Values) as specified in RFC 4180.</p>",
        "configs": [
            {
                "name": "dateFormat",
                "type": "string",
                "doc": "<p>The format to use for dates</p>",
                "default": "'C'"
            },
            {
                "name": "delimiter",
                "type": "string",
                "doc": "<p>The string used to separate the values in a row. Common values for this config\nare comma (\",\") and tab (\"\\t\"). See <code>Ext.util.CSV</code> and  <code>Ext.util.TSV</code>\nfor pre-configured instances of these formats.</p>",
                "default": "'\\t'"
            },
            {
                "name": "lineBreak",
                "type": "string",
                "doc": "<p>The string used by <code>encode</code> to separate each row. The <code>decode</code>\nmethod accepts all forms of line break.</p>",
                "default": "'\\n'"
            },
            {
                "name": "quote",
                "type": "string",
                "doc": "<p>The character to use as to quote values that contain the special <code>delimiter</code>\nor <code>lineBreak</code> characters.</p>",
                "default": "'\"'"
            }
        ],
        "events": []
    },
    "Ext.util.ElementContainer": {
        "type": "Ext.util.ElementContainer",
        "doc": "<p>This mixin enables classes to declare relationships to child elements and provides the\nmechanics for acquiring the elements and storing them on an object\ninstance as properties.</p>",
        "configs": [
            {
                "name": "childEls",
                "type": "object/string[]/object[]",
                "doc": "<p>The canonical form of <code>childEls</code> is an object keyed by child's property name\nwith values that are objects with the following properties.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.util.Event": {
        "type": "Ext.util.Event",
        "doc": "<p>Represents single event type that an Observable object listens to.\nAll actual listeners are tracked inside here.  When the event fires,\nit calls all the registered listener functions.</p>",
        "configs": [],
        "events": []
    },
    "Ext.util.Filter": {
        "type": "Ext.util.Filter",
        "doc": "<p>Represents a filter that can be applied to a MixedCollection. Can either simply\nfilter on a property/value pair or pass in a filter function with custom logic. Filters are always used in the\ncontext of MixedCollections, though Stores frequently create them when filtering and searching\non their records. Example usage:</p>",
        "configs": [
            {
                "name": "anyMatch",
                "type": "boolean",
                "doc": "<p>True to allow any match - no regex start/end line anchors will be added.</p>",
                "default": "false"
            },
            {
                "name": "caseSensitive",
                "type": "boolean",
                "doc": "<p>True to make the regex case sensitive (adds 'i' switch to regex).</p>",
                "default": "false"
            },
            {
                "name": "convert",
                "type": "function",
                "doc": "<p>A function to do any conversion on the value before comparison. For example,\nsomething that returns the date only part of a date.</p>",
                "default": null
            },
            {
                "name": "disableOnEmpty",
                "type": "boolean",
                "doc": "<p><code>true</code> to not have this filter participate in the filtering process when the value of\nthis the filter is empty according to Ext.isEmpty.</p>",
                "default": "false"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "doc": "<p>Setting this property to <code>true</code> disables this individual Filter so that it no longer contributes to a Store's filter set</p>",
                "default": "false"
            },
            {
                "name": "exactMatch",
                "type": "boolean",
                "doc": "<p>True to force exact match (^ and $ characters added to the regex). Ignored if anyMatch is true.</p>",
                "default": "false"
            },
            {
                "name": "filterFn",
                "type": "function",
                "doc": "<p>A custom filter function which is passed each item in the Ext.util.MixedCollection in turn. Should return\n<code>true</code> to accept each item or <code>false</code> to reject it.</p>",
                "default": null
            },
            {
                "name": "id",
                "type": "string",
                "doc": "<p>An identifier by which this Filter is indexed in a Store's filters collection</p>",
                "default": null
            },
            {
                "name": "operator",
                "type": "string",
                "doc": "<p>The operator to use to compare the property to this Filter's value</p>",
                "default": null
            },
            {
                "name": "property",
                "type": "string",
                "doc": "<p>The property to filter on. Required unless a filterFn is passed.</p>",
                "default": "null"
            },
            {
                "name": "root",
                "type": "string",
                "doc": "<p>Optional root property. This is mostly useful when filtering a Store, in which case we set the root to 'data' to\nmake the filter pull the property out of the data object of each item</p>",
                "default": "null"
            },
            {
                "name": "scope",
                "type": "object",
                "doc": "<p>The context (<code>this</code> property) in which the filtering function is called. Defaults\nto this Filter object.</p>",
                "default": null
            },
            {
                "name": "serializer",
                "type": "function",
                "doc": "<p>A function to post-process any serialization.</p>",
                "default": null
            },
            {
                "name": "value",
                "type": "regexp/mixed",
                "doc": "<p>The value you want to match against. Required unless a filterFn is passed.</p>",
                "default": "null"
            }
        ],
        "events": []
    },
    "Ext.util.FilterCollection": {
        "type": "Ext.util.FilterCollection",
        "configs": [],
        "events": []
    },
    "Ext.util.Floating": {
        "type": "Ext.util.Floating",
        "doc": "<p>A mixin to add floating capability to a Component.</p>",
        "configs": [
            {
                "name": "activeCounter",
                "type": "number",
                "doc": "<p>An incrementing numeric counter indicating activation index for use by the zIndexManager\nto sort its stack.</p>",
                "default": "0"
            },
            {
                "name": "alwaysOnTop",
                "type": "boolean/number",
                "doc": "<p>A flag indicating that this component should be on the top of the z-index stack for use by the zIndexManager\nto sort its stack.</p>",
                "default": "false"
            },
            {
                "name": "animateShadow",
                "type": "boolean",
                "doc": "<p><code>true</code> to animate the shadow along with the component while the component is animating.\nBy default the shadow is hidden while the component is animating</p>",
                "default": "false"
            },
            {
                "name": "constrain",
                "type": "boolean",
                "doc": "<p>True to constrain this Components within its containing element, false to allow it to fall outside of its containing\nelement. By default this Component will be rendered to <code>document.body</code>. To render and constrain this Component within\nanother element specify renderTo.</p>",
                "default": "false"
            },
            {
                "name": "fixed",
                "type": "boolean",
                "doc": "<p>Configure as <code>true</code> to have this Component fixed at its <code>X, Y</code> coordinates in the browser viewport, immune\nto scrolling the document.</p>",
                "default": "false"
            },
            {
                "name": "focusOnToFront",
                "type": "boolean",
                "doc": "<p>Specifies whether the floated component should be automatically focused when\nit is brought to the front.</p>",
                "default": "true"
            },
            {
                "name": "shadow",
                "type": "string/boolean",
                "doc": "<p>Specifies whether the floating component should be given a shadow. Set to true to automatically create an\nExt.Shadow, or a string indicating the shadow's display Ext.Shadow.mode. Set to false to\ndisable the shadow.</p>",
                "default": "'sides'"
            },
            {
                "name": "shadowOffset",
                "type": "number",
                "doc": "<p>Number of pixels to offset the shadow.</p>",
                "default": null
            },
            {
                "name": "shim",
                "type": "boolean",
                "doc": "<p><code>true</code> to enable an iframe shim for this Component to keep\nwindowed objects from showing through.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.util.Focusable": {
        "type": "Ext.util.Focusable",
        "doc": "<p>A mixin for individually focusable things (Components, Widgets, etc)</p>",
        "configs": [
            {
                "name": "focusCls",
                "type": "string",
                "doc": "<p>CSS class that will be added to focused\nComponent, and removed when Component blurs.</p>",
                "default": "'x-focus'"
            },
            {
                "name": "tabIndex",
                "type": "number",
                "doc": "<p>DOM tabIndex attribute for this Focusable</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "blur",
                "params": "this(Ext.Component) event(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when this Component loses focus.</p>"
            },
            {
                "name": "focus",
                "params": "this(Ext.Component) event(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when this Component receives focus.</p>"
            }
        ]
    },
    "Ext.util.FocusableContainer": {
        "type": "Ext.util.FocusableContainer",
        "doc": "<p>A mixin for groups of Focusable things (Components, Widgets, etc) that\nshould respond to arrow keys to navigate among the peers, but keep only\none of the peers focusable by default (tabIndex=0)</p>",
        "configs": [
            {
                "name": "activeChildTabIndex",
                "type": "number",
                "doc": "<p>DOM tabIndex attribute to set on the\nactive Focusable child of this container when using the \"Roaming tabindex\"\ntechnique. Set this value to > 0 to precisely control the tabbing order\nof the components/containers on the page.</p>",
                "default": "0"
            },
            {
                "name": "enableFocusableContainer",
                "type": "boolean",
                "doc": "<p>Enable or disable\nnavigation with arrow keys for this FocusableContainer. This option may\nbe useful with nested FocusableContainers such as Grid column headers,\nwhen only the root container should handle keyboard events.</p>",
                "default": "true"
            },
            {
                "name": "inactiveChildTabIndex",
                "type": "number",
                "doc": "<p>DOM tabIndex attribute to set on\ninactive Focusable children of this container when using the \"Roaming tabindex\"\ntechnique. This value rarely needs to be changed from its default.</p>",
                "default": "-1"
            }
        ],
        "events": []
    },
    "Ext.util.Format": {
        "type": "Ext.util.Format",
        "doc": "<p>This class is a centralized place for formatting functions. It includes\nfunctions to format various different types of data, such as text, dates and numeric values.</p>",
        "configs": [],
        "events": []
    },
    "Ext.util.Group": {
        "type": "Ext.util.Group",
        "doc": "<p>Encapsulates a grouped collection of records within a Ext.util.Collection</p>",
        "configs": [
            {
                "name": "groupKey",
                "type": "object",
                "doc": "\n",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.util.GroupCollection": {
        "type": "Ext.util.GroupCollection",
        "configs": [
            {
                "name": "grouper",
                "type": "object",
                "doc": "<p>A configuration object for this collection's grouper.</p>",
                "default": null
            },
            {
                "name": "itemRoot",
                "type": "object",
                "doc": "\n",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.util.Grouper": {
        "type": "Ext.util.Grouper",
        "doc": "<p>Represents a grouping of items. The grouper works in a similar fashion as the\n<code>Ext.util.Sorter</code> except that groups must be able to extract a value by which all items\nin the group can be collected. By default this is derived from the <code>property</code> config\nbut can be customized using the <code>groupFn</code> if necessary.</p>",
        "configs": [
            {
                "name": "groupFn",
                "type": "function",
                "doc": "<p>This function is called for each item in the collection\nto determine the group to which it belongs. By default the <code>property</code> value is\nused to group items.</p>",
                "default": null
            },
            {
                "name": "property",
                "type": "string",
                "doc": "<p>The field by which records are grouped. Groups are\nsorted alphabetically by group value as the default. To sort groups by a different\nproperty, use the sortProperty configuration.</p>",
                "default": null
            },
            {
                "name": "sortProperty",
                "type": "string",
                "doc": "<p>You can set this configuration if you want the groups\nto be sorted on something other then the group string returned by the <code>groupFn</code>.\nThis serves the same role as <code>property</code> on a normal <code>Ext.util.Sorter</code>.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.util.HashMap": {
        "type": "Ext.util.HashMap",
        "doc": "<p>Represents a collection of a set of key and value pairs. Each key in the HashMap\nmust be unique, the same key cannot exist twice. Access to items is provided via\nthe key only. Sample usage:</p>",
        "configs": [
            {
                "name": "keyFn",
                "type": "function",
                "doc": "<p>A function that is used to retrieve a default key for a passed object.\nA default is provided that returns the <code>id</code> property on the object. This function is only used\nif the <code>add</code> method is called with a single argument.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "add",
                "params": "this(Ext.util.HashMap) key(String) value(Object) eOpts(Object)",
                "doc": "<p>Fires when a new item is added to the hash.</p>"
            },
            {
                "name": "clear",
                "params": "this(Ext.util.HashMap) eOpts(Object)",
                "doc": "<p>Fires when the hash is cleared.</p>"
            },
            {
                "name": "remove",
                "params": "this(Ext.util.HashMap) key(String) value(Object) eOpts(Object)",
                "doc": "<p>Fires when an item is removed from the hash.</p>"
            },
            {
                "name": "replace",
                "params": "this(Ext.util.HashMap) key(String) value(Object) old(Object) eOpts(Object)",
                "doc": "<p>Fires when an item is replaced in the hash.</p>"
            }
        ]
    },
    "Ext.util.History": {
        "type": "Ext.util.History",
        "doc": "<p>History management component that allows you to register arbitrary tokens that signify application\nhistory state on navigation actions.  You can then handle the history change event in order\nto reset your application UI to the appropriate state when the user navigates forward or backward through\nthe browser history stack.</p>",
        "configs": [],
        "events": [
            {
                "name": "change",
                "params": "token(String) eOpts(Object)",
                "doc": "<p>Fires when navigation back or forwards within the local page's history occurs.</p>"
            },
            {
                "name": "ready",
                "params": "history(Ext.util.History) eOpts(Object)",
                "doc": "<p>Fires when the Ext.util.History singleton has been initialized and is ready for use.</p>"
            }
        ]
    },
    "Ext.util.Inflector": {
        "type": "Ext.util.Inflector",
        "doc": "<p>General purpose inflector class that pluralizes, singularizes and\nordinalizes words. Sample usage:</p>",
        "configs": [],
        "events": []
    },
    "Ext.util.KeyMap": {
        "type": "Ext.util.KeyMap",
        "doc": "<p>Handles mapping key events to handling functions for an element or a Component. One KeyMap can be used for multiple\nactions.</p>",
        "configs": [
            {
                "name": "binding",
                "type": "object/object[][]",
                "doc": "<p>Either a single object describing a handling function for s specified key (or set of keys), or\nan array of such objects.</p>",
                "default": null
            },
            {
                "name": "eventName",
                "type": "string",
                "doc": "<p>The event to listen for to pick up key events.</p>",
                "default": "'keydown'"
            },
            {
                "name": "ignoreInputFields",
                "type": "boolean",
                "doc": "<p>Configure this as <code>true</code> if there are any input fields within the target, and this KeyNav\nshould not process events from input fields, (<code>&amp;lt;input&gt;, &amp;lt;textarea&gt; and elements with</code>contentEditable=\"true\"`)</p>",
                "default": "false"
            },
            {
                "name": "processEvent",
                "type": "function",
                "doc": "<p>An optional event processor function which accepts the argument list provided by the\nconfigured event of the target, and returns a keyEvent for processing by the KeyMap.</p>",
                "default": null
            },
            {
                "name": "processEventScope",
                "type": "object",
                "doc": "<p>The scope (<code>this</code> context) in which the processEvent method is executed.</p>",
                "default": "this"
            },
            {
                "name": "target",
                "type": "ext.component/ext.dom.element/htmlelement/string",
                "doc": "<p>The object on which to listen for the event specified by the eventName config option.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.util.KeyNav": {
        "type": "Ext.util.KeyNav",
        "doc": "<p>Provides a convenient wrapper for normalized keyboard navigation. KeyNav allows you to bind navigation keys to\nfunction calls that will get called when the keys are pressed, providing an easy way to implement custom navigation\nschemes for any UI component.</p>",
        "configs": [
            {
                "name": "defaultEventAction",
                "type": "string",
                "doc": "<p>The method to call on the Ext.event.Event after this KeyNav intercepts a key.\nValid values are Ext.event.Event.stopEvent, Ext.event.Event.preventDefault\nand Ext.event.Event.stopPropagation.</p>",
                "default": "false"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "doc": "<p>True to disable this KeyNav instance.</p>",
                "default": "false"
            },
            {
                "name": "eventName",
                "type": "string",
                "doc": "<p>The event to listen for to pick up key events.</p>",
                "default": "'keypress'"
            },
            {
                "name": "forceKeyDown",
                "type": "boolean",
                "doc": "<p>Handle the keydown event instead of keypress. KeyNav automatically does this for IE since IE does not propagate\nspecial keys on keypress, but setting this to true will force other browsers to also handle keydown instead of\nkeypress.</p>",
                "default": "false"
            },
            {
                "name": "ignoreInputFields",
                "type": "boolean",
                "doc": "<p>Configure this as <code>true</code> if there are any input fields within the target, and this KeyNav\nshould not process events from input fields, (<code>&amp;lt;input&gt;, &amp;lt;textarea&gt; and elements with</code>contentEditable=\"true\"`)</p>",
                "default": "false"
            },
            {
                "name": "keyMap",
                "type": "ext.util.keymap",
                "doc": "<p>An optional pre-existing KeyMap to use to listen for key events. If not specified,\none is created.</p>",
                "default": null
            },
            {
                "name": "processEvent",
                "type": "function",
                "doc": "<p>An optional event processor function which accepts the argument list provided by the configured\nevent of the target, and returns a keyEvent for processing by the KeyMap.</p>",
                "default": null
            },
            {
                "name": "processEventScope",
                "type": "object",
                "doc": "<p>The scope (<code>this</code> context) in which the processEvent method is executed.</p>",
                "default": "this"
            },
            {
                "name": "target",
                "type": "ext.component/ext.dom.element/htmlelement/string",
                "doc": "<p>The object on which to listen for the event specified by the eventName config option.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.util.LocalStorage": {
        "type": "Ext.util.LocalStorage",
        "doc": "<p>This class provides a common API to LocalStorage with backwards compatibility for IE.</p>",
        "configs": [
            {
                "name": "flushDelay",
                "type": "number",
                "doc": "<p>The number of milliseconds to delay writing changes to the underlying store.\nThis applies only to legacy IE mode and helps batch multiple writes into one\nflush to storage.</p>",
                "default": "1"
            },
            {
                "name": "id",
                "type": "string",
                "doc": "<p>The unique identifier for this store. This config is required to scope this storage\ndistinctly from others. Ultimately, this is used to set a prefix on all keys.</p>",
                "default": null
            },
            {
                "name": "lazyKeys",
                "type": "boolean",
                "doc": "<p>Determines if the keys collection is continuously maintained by this object. By\ndefault the keys array is lazily fetched from the underlying store and when keys\nare removed, the array is discarded. This heuristic tends to be safer than doing\nthe linear removal and array rippling to remove keys from the array on each call\nto <code>removeItem</code>. If the cost of scanning <code>localStorage</code> for keys is high enough\nand if the keys are frequently needed, then this flag can be set to <code>false</code> to\ninstruct this class to maintain the keys array once it has been determined.</p>",
                "default": "true"
            },
            {
                "name": "prefix",
                "type": "string",
                "doc": "<p>The prefix to apply to all <code>localStorage</code> keys manages by this instance. This does\nnot apply to the legacy IE mechanism but only to the HTML5 <code>localStorage</code> keys. If\nnot provided, the <code>id</code> property initializes this value with <code>\"id-\"</code>.</p>",
                "default": "''"
            },
            {
                "name": "session",
                "type": "boolean",
                "doc": "<p>Specify this as <code>true</code> to use <code>sessionStorage</code> instead of the default <code>localStoreage</code>.\nThis option is not supported in legacy IE browsers (IE 6 and 7) and is ignored.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.util.LruCache": {
        "type": "Ext.util.LruCache",
        "doc": "<p>A linked HashMap implementation which maintains most recently accessed\nitems at the end of the list, and purges the cache down to the most recently accessed maxSize items\nupon add.</p>",
        "configs": [
            {
                "name": "maxSize",
                "type": "number",
                "doc": "<p>The maximum size the cache is allowed to grow to before further additions cause\nremoval of the least recently used entry.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.util.Memento": {
        "type": "Ext.util.Memento",
        "doc": "<p>This class manages a set of captured properties from an object. These captured properties\ncan later be restored to an object.</p>",
        "configs": [],
        "events": []
    },
    "Ext.util.MixedCollection": {
        "type": "Ext.util.MixedCollection",
        "doc": "<p>Represents a collection of a set of key and value pairs. Each key in the MixedCollection\nmust be unique, the same key cannot exist twice. This collection is ordered, items in the\ncollection can be accessed by index  or via the key. Newly added items are added to\nthe end of the collection. This class is similar to Ext.util.HashMap however it\nis heavier and provides more functionality. Sample usage:</p>",
        "configs": [
            {
                "name": "allowFunctions",
                "type": "boolean",
                "doc": "<p>Configure as <code>true</code> if the addAll function should add function references to the collection.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.util.ObjectTemplate": {
        "type": "Ext.util.ObjectTemplate",
        "doc": "<p>This class accepts an object that serves as a template for creating new objects. Like\nother templates (<code>Ext.XTemplate</code>) this creation step requires a context object to give\nthe template its values.</p>",
        "configs": [],
        "events": []
    },
    "Ext.util.Observable": {
        "type": "Ext.util.Observable",
        "doc": "<p>A Ext.mixin.Observable subclass that is provided for backward compatibility.\nApplications should avoid using this class, and use Ext.mixin.Observable instead.</p>",
        "configs": [],
        "events": []
    },
    "Ext.util.Offset": {
        "type": "Ext.util.Offset",
        "configs": [],
        "events": []
    },
    "Ext.util.Operators": {
        "type": "Ext.util.Operators",
        "doc": "<p>This class defines the operators that are shared by DomQuery and ComponentQuery</p>",
        "configs": [],
        "events": []
    },
    "Ext.util.PaintMonitor": {
        "type": "Ext.util.PaintMonitor",
        "configs": [],
        "events": []
    },
    "Ext.util.Point": {
        "type": "Ext.util.Point",
        "doc": "<p>Represents a 2D point with x and y properties, useful for comparison and instantiation\nfrom an event:</p>",
        "configs": [],
        "events": []
    },
    "Ext.util.Positionable": {
        "type": "Ext.util.Positionable",
        "doc": "<p>This mixin provides a common interface for objects that can be positioned, e.g.\nComponents and Elements</p>",
        "configs": [],
        "events": []
    },
    "Ext.util.ProtoElement": {
        "type": "Ext.util.ProtoElement",
        "doc": "<p>Manages certain element-like data prior to rendering. These values are passed\non to the render process. This is currently used to manage the \"class\" and \"style\" attributes\nof a component's primary el as well as the bodyEl of panels. This allows things like\naddBodyCls in Panel to share logic with addCls in Component.</p>",
        "configs": [],
        "events": []
    },
    "Ext.util.Queue": {
        "type": "Ext.util.Queue",
        "doc": "<p>An internal Queue class.</p>",
        "configs": [],
        "events": []
    },
    "Ext.util.Region": {
        "type": "Ext.util.Region",
        "doc": "<p>This class represents a rectangular region in X,Y space, and performs geometric\ntransformations or tests upon the region.</p>",
        "configs": [],
        "events": []
    },
    "Ext.util.Renderable": {
        "type": "Ext.util.Renderable",
        "doc": "<p>Given a component hierarchy of this:</p>",
        "configs": [],
        "events": []
    },
    "Ext.util.Schedulable": {
        "type": "Ext.util.Schedulable",
        "doc": "<p>This is a base class for objects that can be managed by <code>Ext.util.Scheduler</code>.</p>",
        "configs": [],
        "events": []
    },
    "Ext.util.Scheduler": {
        "type": "Ext.util.Scheduler",
        "doc": "<p>This class is used to bulk schedule a set of <code>Ext.util.Schedulable</code> items. The items\nin the scheduler request time by calling their <code>schedule</code> method and when the time has\narrived its <code>react</code> method is called.</p>",
        "configs": [
            {
                "name": "cycleLimit",
                "type": "number",
                "doc": "<p>The maximum number of iterations to make over the items in one <code>notify</code> call.\nThis is used to prevent run away logic from looping infinitely. If this limit\nis exceeded, an error is thrown (in development builds).</p>",
                "default": "5"
            },
            {
                "name": "preSort",
                "type": "string/function",
                "doc": "<p>If provided the <code>Schedulable</code> items will be pre-sorted by this function or\nproperty value before the dependency sort.</p>",
                "default": null
            },
            {
                "name": "tickDelay",
                "type": "number",
                "doc": "<p>The number of milliseconds to delay notification after the first <code>schedule</code>\nrequest.</p>",
                "default": "5"
            }
        ],
        "events": []
    },
    "Ext.util.SizeMonitor": {
        "type": "Ext.util.SizeMonitor",
        "configs": [],
        "events": []
    },
    "Ext.util.Sortable": {
        "type": "Ext.util.Sortable",
        "doc": "<p>A mixin which allows a data component to be sorted. This is used by e.g. Ext.data.Store and Ext.data.TreeStore.</p>",
        "configs": [
            {
                "name": "defaultSortDirection",
                "type": "string",
                "doc": "<p>The default sort direction to use if one is not specified.</p>",
                "default": "\"ASC\""
            },
            {
                "name": "multiSortLimit",
                "type": "number",
                "doc": "<p>The maximum number of sorters which may be applied to this Sortable when using the \"multi\" insertion position\nwhen adding sorters.</p>",
                "default": "3"
            },
            {
                "name": "sortRoot",
                "type": "string",
                "doc": "<p>The property in each item that contains the data to sort.</p>",
                "default": null
            },
            {
                "name": "sorters",
                "type": "ext.util.sorter[]/object[]",
                "doc": "<p>The initial set of Sorters.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "beforesort",
                "params": "me(Ext.util.Sortable) sorters(Ext.util.Sorter[]) eOpts(Object)",
                "doc": "<p>Fires before a sort occurs.</p>"
            }
        ]
    },
    "Ext.util.Sorter": {
        "type": "Ext.util.Sorter",
        "doc": "<p>Represents a single sorter that can be used as part of the sorters configuration in Ext.mixin.Sortable.</p>",
        "configs": [
            {
                "name": "direction",
                "type": "string",
                "doc": "<p>The direction to sort by. Valid values are \"ASC\", and \"DESC\".</p>",
                "default": "\"ASC\""
            },
            {
                "name": "id",
                "type": "mixed",
                "doc": "<p>An optional id this sorter can be keyed by in Collections. If\nno id is specified it will use the property name used in this Sorter. If no\nproperty is specified, e.g. when adding a custom sorter function we will generate\na random id.</p>",
                "default": null
            },
            {
                "name": "property",
                "type": "string",
                "doc": "<p>The property to sort by. Required unless <code>sorterFn</code> is provided</p>",
                "default": null
            },
            {
                "name": "root",
                "type": "string",
                "doc": "<p>Optional root property. This is mostly useful when sorting a Store, in which case we set the\nroot to 'data' to make the filter pull the property out of the data object of each item</p>",
                "default": null
            },
            {
                "name": "sorterFn",
                "type": "function",
                "doc": "<p>A specific sorter function to execute. Can be passed instead of property.\nThis function should compare the two passed arguments, returning -1, 0 or 1 depending on if item 1 should be\nsorted before, at the same level, or after item 2.</p>",
                "default": null
            },
            {
                "name": "transform",
                "type": "function",
                "doc": "<p>A function that will be run on each value before\nit is compared in the sorter. The function will receive a single argument,\nthe value.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.util.SorterCollection": {
        "type": "Ext.util.SorterCollection",
        "configs": [
            {
                "name": "applySorterOptionsFn",
                "type": "function",
                "doc": "<p>A template method that can be used to apply options to a sorter during creation</p>",
                "default": null
            },
            {
                "name": "applySorterOptionsScope",
                "type": "object",
                "doc": "<p>The scope to execute the applySorterOptionsFn</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.util.StoreHolder": {
        "type": "Ext.util.StoreHolder",
        "doc": "<p>This class is used as a mixin.</p>",
        "configs": [],
        "events": []
    },
    "Ext.util.TSV": {
        "type": "Ext.util.TSV",
        "doc": "<p>This class contains utility methods for dealing with TSV (Tab Separated Values) as\nspecified in RFC 4180.</p>",
        "configs": [
            {
                "name": "delimiter",
                "type": "string",
                "doc": "<p>The string used to separate the values in a row. Common values for this config\nare comma (\",\") and tab (\"\\t\"). See <code>Ext.util.CSV</code> and  <code>Ext.util.TSV</code>\nfor pre-configured instances of these formats.</p>",
                "default": "'\\t'"
            }
        ],
        "events": []
    },
    "Ext.util.TaskManager": {
        "type": "Ext.util.TaskManager",
        "doc": "<p>A static Ext.util.TaskRunner instance that can be used to start and stop\narbitrary tasks. See Ext.util.TaskRunner for supported methods and task\nconfig properties.</p>",
        "configs": [],
        "events": []
    },
    "Ext.util.TaskRunner.Task": {
        "type": "Ext.util.TaskRunner.Task",
        "doc": "<p>Instances of this class are created by Ext.util.TaskRunner.newTask method.</p>",
        "configs": [],
        "events": []
    },
    "Ext.util.TaskRunner": {
        "type": "Ext.util.TaskRunner",
        "doc": "<p>Provides the ability to execute one or more arbitrary tasks in a asynchronous manner.\nGenerally, you can use the singleton Ext.TaskManager instead, but if needed,\nyou can create separate instances of TaskRunner. Any number of separate tasks can be\nstarted at any time and will run independently of each other.</p>",
        "configs": [
            {
                "name": "fireIdleEvent",
                "type": "boolean",
                "doc": "<p>This may be configured <code>false</code> to inhibit firing of the idle event after task invocation.</p>",
                "default": "true"
            },
            {
                "name": "interval",
                "type": "number",
                "doc": "<p>How often to run the task in milliseconds. Defaults to every 10ms.</p>",
                "default": "10"
            }
        ],
        "events": []
    },
    "Ext.util.TextMetrics": {
        "type": "Ext.util.TextMetrics",
        "doc": "<p>Provides precise pixel measurements for blocks of text so that you can determine exactly how high and\nwide, in pixels, a given block of text will be. Note that when measuring text, it should be plain text and\nshould not contain any HTML, otherwise it may not be measured correctly.</p>",
        "configs": [],
        "events": []
    },
    "Ext.util.Translatable": {
        "type": "Ext.util.Translatable",
        "doc": "<p>The utility class to abstract different implementations to have the best performance when applying 2D translation\non any DOM element.</p>",
        "configs": [],
        "events": []
    },
    "Ext.util.XTemplateCompiler": {
        "type": "Ext.util.XTemplateCompiler",
        "doc": "<p>This class compiles the XTemplate syntax into a function object. The function is used\nlike so:</p>",
        "configs": [],
        "events": []
    },
    "Ext.util.XTemplateParser": {
        "type": "Ext.util.XTemplateParser",
        "doc": "<p>This class parses the XTemplate syntax and calls abstract methods to process the parts.</p>",
        "configs": [],
        "events": []
    },
    "Ext.util.paintmonitor.Abstract": {
        "type": "Ext.util.paintmonitor.Abstract",
        "configs": [
            {
                "name": "args",
                "type": "array",
                "doc": "\n",
                "default": "[]"
            },
            {
                "name": "callback",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "element",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "scope",
                "type": "object",
                "doc": "\n",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.util.paintmonitor.CssAnimation": {
        "type": "Ext.util.paintmonitor.CssAnimation",
        "configs": [],
        "events": []
    },
    "Ext.util.paintmonitor.OverflowChange": {
        "type": "Ext.util.paintmonitor.OverflowChange",
        "configs": [],
        "events": []
    },
    "Ext.util.sizemonitor.Abstract": {
        "type": "Ext.util.sizemonitor.Abstract",
        "configs": [
            {
                "name": "args",
                "type": "array",
                "doc": "\n",
                "default": "[]"
            },
            {
                "name": "callback",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "element",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "scope",
                "type": "object",
                "doc": "\n",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.util.sizemonitor.Default": {
        "type": "Ext.util.sizemonitor.Default",
        "configs": [],
        "events": []
    },
    "Ext.util.sizemonitor.OverflowChange": {
        "type": "Ext.util.sizemonitor.OverflowChange",
        "configs": [],
        "events": []
    },
    "Ext.util.sizemonitor.Scroll": {
        "type": "Ext.util.sizemonitor.Scroll",
        "configs": [],
        "events": []
    },
    "Ext.util.translatable.Abstract": {
        "type": "Ext.util.translatable.Abstract",
        "doc": "<p>The abstract class. Sub-classes are expected, at the very least, to implement translation logics inside\nthe 'translate' method</p>",
        "configs": [
            {
                "name": "easing",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "easingX",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "easingY",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "useWrapper",
                "type": "object",
                "doc": "\n",
                "default": null
            }
        ],
        "events": [
            {
                "name": "animationend",
                "params": "this(Ext.util.translatable.Abstract) x(Number) y(Number) eOpts(Object)",
                "doc": "<p>Fires whenever the animation is ended</p>"
            },
            {
                "name": "animationframe",
                "params": "this(Ext.util.translatable.Abstract) x(Number) y(Number) eOpts(Object)",
                "doc": "<p>Fires for each animation frame</p>"
            },
            {
                "name": "animationstart",
                "params": "this(Ext.util.translatable.Abstract) x(Number) y(Number) eOpts(Object)",
                "doc": "<p>Fires whenever the animation is started</p>"
            }
        ]
    },
    "Ext.util.translatable.CssPosition": {
        "type": "Ext.util.translatable.CssPosition",
        "configs": [],
        "events": []
    },
    "Ext.util.translatable.CssTransform": {
        "type": "Ext.util.translatable.CssTransform",
        "doc": "<p>CSS Transform implementation</p>",
        "configs": [],
        "events": []
    },
    "Ext.util.translatable.Dom": {
        "type": "Ext.util.translatable.Dom",
        "configs": [
            {
                "name": "element",
                "type": "object",
                "doc": "\n",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.util.translatable.ScrollParent": {
        "type": "Ext.util.translatable.ScrollParent",
        "doc": "<p>Translates the element by setting the scroll position of its parent node.</p>",
        "configs": [],
        "events": []
    },
    "Ext.util.translatable.ScrollPosition": {
        "type": "Ext.util.translatable.ScrollPosition",
        "doc": "<p>Scroll position implementation</p>",
        "configs": [
            {
                "name": "useWrapper",
                "type": "boolean",
                "doc": "\n",
                "default": "true"
            }
        ],
        "events": []
    },
    "Ext.view.AbstractView": {
        "type": "Ext.view.AbstractView",
        "doc": "<p>This is an abstract superclass and should not be used directly. Please see Ext.view.View.</p>",
        "configs": [
            {
                "name": "blockRefresh",
                "type": "boolean",
                "doc": "<p>Set this to true to ignore refresh events on the bound store. This is useful if\nyou wish to provide custom transition animations via a plugin</p>",
                "default": "false"
            },
            {
                "name": "deferEmptyText",
                "type": "boolean",
                "doc": "<p>True to defer emptyText being applied until the store's first load.</p>",
                "default": "true"
            },
            {
                "name": "deferInitialRefresh",
                "type": "boolean",
                "doc": "<p>Configure as 'true` to defer the initial refresh of the view.</p>",
                "default": "false"
            },
            {
                "name": "disableSelection",
                "type": "boolean",
                "doc": "<p>True to disable selection within the DataView. This configuration will lock the selection model\nthat the DataView uses.</p>",
                "default": "false"
            },
            {
                "name": "emptyText",
                "type": "string",
                "doc": "<p>The text to display in the view when there is no data to display.\nNote that when using local data the emptyText will not be displayed unless you set\nthe deferEmptyText option to false.</p>",
                "default": "\"\""
            },
            {
                "name": "itemCls",
                "type": "string",
                "doc": "<p>Specifies the class to be assigned to each element in the view when used in conjunction with the\nitemTpl configuration.</p>",
                "default": "Ext.baseCSSPrefix + 'dataview-item'"
            },
            {
                "name": "itemSelector",
                "type": "string",
                "doc": "<p><b>This is a required setting</b>. A simple CSS selector (e.g. <code>div.some-class</code> or\n<code>span:first-child</code>) that will be used to determine what nodes this DataView will be\nworking with. The itemSelector is used to map DOM nodes to records. As such, there should\nonly be one root level element that matches the selector for each record. The itemSelector\nwill be automatically configured if the itemTpl config is used.</p>",
                "default": null
            },
            {
                "name": "itemTpl",
                "type": "string/string[]/ext.xtemplate",
                "doc": "<p>The inner portion of the item template to be rendered. Follows an XTemplate\nstructure and will be placed inside of a tpl.</p>",
                "default": null
            },
            {
                "name": "loadMask",
                "type": "boolean/object",
                "doc": "<p>False to disable a load mask from displaying while the view is loading. This can also be a\nExt.LoadMask configuration object.</p>",
                "default": "true"
            },
            {
                "name": "loadingCls",
                "type": "string",
                "doc": "<p>The CSS class to apply to the loading message element. Defaults to Ext.LoadMask.prototype.msgCls \"x-mask-loading\".</p>",
                "default": null
            },
            {
                "name": "loadingHeight",
                "type": "number",
                "doc": "<p>If specified, gives an explicit height for the data view when it is showing the loadingText,\nif that is specified. This is useful to prevent the view's height from collapsing to zero when the\nloading mask is applied and there are no other contents in the data view.</p>",
                "default": null
            },
            {
                "name": "loadingText",
                "type": "string",
                "doc": "<p>A string to display during data load operations.  If specified, this text will be\ndisplayed in a loading div and the view's contents will be cleared while loading, otherwise the view's\ncontents will continue to display normally until the new data is loaded and the contents are replaced.</p>",
                "default": "'Loading...'"
            },
            {
                "name": "loadingUseMsg",
                "type": "boolean",
                "doc": "<p>Whether or not to use the loading message.</p>",
                "default": "true"
            },
            {
                "name": "multiSelect",
                "type": "boolean",
                "doc": "<p>True to allow selection of more than one item at a time, false to allow selection of only a single item\nat a time or no selection at all, depending on the value of singleSelect.</p>",
                "default": "false"
            },
            {
                "name": "navigationModel",
                "type": "object",
                "doc": "<p>The Ext.view.NavigationModel [default] alias to use.</p>",
                "default": "{type: 'default'}"
            },
            {
                "name": "overItemCls",
                "type": "string",
                "doc": "<p>A CSS class to apply to each item in the view on mouseover.\nSetting this will automatically set trackOver to <code>true</code>.</p>",
                "default": null
            },
            {
                "name": "preserveScrollOnRefresh",
                "type": "boolean",
                "doc": "<p>True to preserve scroll position across refresh operations.</p>",
                "default": "false"
            },
            {
                "name": "publishes",
                "type": "string/string[]/object",
                "doc": "<p>One or more names of config properties that this component should publish to\nits <code>ViewModel</code>. Some components override this and publish their most useful\nconfigs by default.</p>",
                "default": "['selection']"
            },
            {
                "name": "selectedItemCls",
                "type": "string",
                "doc": "<p>A CSS class to apply to each selected item in the view.</p>",
                "default": "Ext.baseCSSPrefix + 'item-selected'"
            },
            {
                "name": "selection",
                "type": "ext.data.model",
                "doc": "<p>The selected model. Typically used with binding.</p>",
                "default": null
            },
            {
                "name": "selectionModel",
                "type": "object/ext.selection.dataviewmodel",
                "doc": "<p>The selection model [dataviewmodel] config or alias to use.</p>",
                "default": "{type: 'dataviewmodel'}"
            },
            {
                "name": "simpleSelect",
                "type": "boolean",
                "doc": "<p>True to enable multiselection by clicking on multiple items without requiring the user to hold Shift or Ctrl,\nfalse to force the user to hold Ctrl or Shift to select more than on item.</p>",
                "default": "false"
            },
            {
                "name": "singleSelect",
                "type": "boolean",
                "doc": "<p>Allows selection of exactly one item at a time. As this is the default selection mode anyway, this config\nis completely ignored.</p>",
                "default": null
            },
            {
                "name": "store",
                "type": "ext.data.store",
                "doc": "<p>The Ext.data.Store to bind this DataView to.</p>",
                "default": "'ext-empty-store'"
            },
            {
                "name": "tabIndex",
                "type": "number",
                "doc": "<p>DOM tabIndex attribute for this Focusable</p>",
                "default": "0"
            },
            {
                "name": "throttledUpdate",
                "type": "boolean",
                "doc": "<p>Configure as <code>true</code> to have this view participate in the global throttled update queue which flushes store changes to the UI at a maximum rate\ndetermined by the updateDelay setting.</p>",
                "default": "false"
            },
            {
                "name": "tpl",
                "type": "string/string[]/ext.xtemplate",
                "doc": "<p>The HTML fragment or an array of fragments that will make up the template used by this DataView.  This should\nbe specified in the same format expected by the constructor of Ext.XTemplate. When a <code>tpl</code> is specified,\nthis class assumes that records are rendered in the order they appear in the <code>store</code>. If a custom <code>tpl</code>\ndoes not conform to this assumption, index values will be incorrect which may cause the view to misbehave.</p>",
                "default": null
            },
            {
                "name": "trackOver",
                "type": "boolean",
                "doc": "<p>When <code>true</code> the overItemCls will be applied to rows when hovered over.\nThis in return will also cause highlightitem and\nunhighlightitem events to be fired.</p>",
                "default": "false"
            },
            {
                "name": "twoWayBindable",
                "type": "string/string[]/object",
                "doc": "<p>This object holds a map of <code>config</code> properties that will update their binding\nas they are modified. For example, <code>value</code> is a key added by form fields. The\nform of this config is the same as <code>publishes</code>.</p>",
                "default": "['selection']"
            }
        ],
        "events": [
            {
                "name": "beforerefresh",
                "params": "this(Ext.view.View) eOpts(Object)",
                "doc": "<p>Fires before the view is refreshed</p>"
            },
            {
                "name": "itemadd",
                "params": "records(Ext.data.Model[]) index(Number) node(HTMLElement[]) eOpts(Object)",
                "doc": "<p>Fires when the nodes associated with an recordset have been added to the underlying store</p>"
            },
            {
                "name": "itemremove",
                "params": "record(Ext.data.Model) index(Number) item(HTMLElement) view(Ext.view.View) eOpts(Object)",
                "doc": "<p>Fires when the node associated with an individual record is removed</p>"
            },
            {
                "name": "itemupdate",
                "params": "record(Ext.data.Model) index(Number) node(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when the node associated with an individual record is updated</p>"
            },
            {
                "name": "refresh",
                "params": "this(Ext.view.View) eOpts(Object)",
                "doc": "<p>Fires when the view is refreshed</p>"
            },
            {
                "name": "viewready",
                "params": "this(Ext.view.View) eOpts(Object)",
                "doc": "<p>Fires when the View's item elements representing Store items has been rendered. No items will be available\nfor selection until this event fires.</p>"
            }
        ]
    },
    "Ext.view.BoundList": {
        "type": "Ext.view.BoundList",
        "doc": "<p>An internally used DataView for ComboBox.</p>",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>private overrides</p>",
                "default": "Ext.baseCSSPrefix + 'boundlist'"
            },
            {
                "name": "childEls",
                "type": "object/string[]/object[]",
                "doc": "<p>The canonical form of <code>childEls</code> is an object keyed by child's property name\nwith values that are objects with the following properties.</p>",
                "default": "['listWrap', 'listEl']"
            },
            {
                "name": "componentLayout",
                "type": "string/object",
                "doc": "<p>The sizing and positioning of a Component's internal Elements is the responsibility of the Component's layout\nmanager which sizes a Component's internal structure in response to the Component being sized.</p>",
                "default": "'boundlist'"
            },
            {
                "name": "displayField",
                "type": "string",
                "doc": "<p>The field from the store to show in the view.</p>",
                "default": "\"\""
            },
            {
                "name": "focusOnToFront",
                "type": "boolean",
                "doc": "<p>Override because on non-touch devices, the bound field\nretains focus so that typing may narrow the list.\nOnly when the show is triggered by a touch does the BoundList\nget explicitly focused so that the keyboard does not appear.</p>",
                "default": "false"
            },
            {
                "name": "itemCls",
                "type": "string",
                "doc": "<p>Specifies the class to be assigned to each element in the view when used in conjunction with the\nitemTpl configuration.</p>",
                "default": "Ext.baseCSSPrefix + 'boundlist-item'"
            },
            {
                "name": "navigationModel",
                "type": "object",
                "doc": "<p>The Ext.view.NavigationModel [default] alias to use.</p>",
                "default": "'boundlist'"
            },
            {
                "name": "pageSize",
                "type": "number",
                "doc": "<p>If greater than <code>0</code>, a Ext.toolbar.Paging is displayed at the bottom of the list and store\nqueries will execute with page start and\nlimit parameters.</p>",
                "default": "0"
            },
            {
                "name": "preserveScrollOnRefresh",
                "type": "boolean",
                "doc": "<p>True to preserve scroll position across refresh operations.</p>",
                "default": "true"
            },
            {
                "name": "renderTpl",
                "type": "ext.xtemplate/string/string[]",
                "doc": "<p>An XTemplate used to create the internal structure inside this Component's encapsulating\nElement.</p>",
                "default": null
            },
            {
                "name": "scrollable",
                "type": "boolean/string/object",
                "doc": "<p>Configuration options to make this Component scrollable. Acceptable values are:</p>",
                "default": "true"
            },
            {
                "name": "shadow",
                "type": "string/boolean",
                "doc": "<p>Specifies whether the floating component should be given a shadow. Set to true to automatically create an\nExt.Shadow, or a string indicating the shadow's display Ext.Shadow.mode. Set to false to\ndisable the shadow.</p>",
                "default": "false"
            },
            {
                "name": "tpl",
                "type": "string/ext.xtemplate",
                "doc": "<p>A String or Ext.XTemplate instance to apply to inner template.</p>",
                "default": null
            },
            {
                "name": "trackOver",
                "type": "boolean",
                "doc": "<p>When <code>true</code> the overItemCls will be applied to rows when hovered over.\nThis in return will also cause highlightitem and\nunhighlightitem events to be fired.</p>",
                "default": "true"
            }
        ],
        "events": []
    },
    "Ext.view.BoundListKeyNav": {
        "type": "Ext.view.BoundListKeyNav",
        "doc": "<p>A specialized Ext.util.KeyNav implementation for navigating a Ext.view.BoundList using\nthe keyboard. The up, down, pageup, pagedown, home, and end keys move the active highlight\nthrough the list. The enter key invokes the selection model's select action using the highlighted item.</p>",
        "configs": [
            {
                "name": "boundList",
                "type": "ext.view.boundlist",
                "doc": "<p>The Ext.view.BoundList instance for which key navigation will be managed.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.view.DragZone": {
        "type": "Ext.view.DragZone",
        "configs": [
            {
                "name": "containerScroll",
                "type": "object/boolean",
                "doc": "<p>True to register this container with the Scrollmanager for auto scrolling during drag operations.\nA Ext.dd.ScrollManager configuration may also be passed.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.view.DropZone": {
        "type": "Ext.view.DropZone",
        "configs": [],
        "events": []
    },
    "Ext.view.MultiSelector": {
        "type": "Ext.view.MultiSelector",
        "doc": "<p>This component provides a grid holding selected items from a second store of potential\nmembers. The <code>store</code> of this component represents the selected items. The \"search store\"\nrepresents the potentially selected items.</p>",
        "configs": [
            {
                "name": "addToolText",
                "type": "string",
                "doc": "<p>The tooltip to display when the user hovers over the \"+\" tool in the panel header.</p>",
                "default": "'Search for items to add'"
            },
            {
                "name": "emptyText",
                "type": "string",
                "doc": "<p>Default text (HTML tags are accepted) to display in the\nPanel body when the Store is empty. When specified, and the Store is empty, the\ntext will be rendered inside a DIV with the CSS class \"x-grid-empty\". The emptyText\nwill not display until the first load of the associated store by default. If you\nwant the text to be displayed prior to the first store load use the\ndeferEmptyText config in the viewConfig config.</p>",
                "default": "'Nothing selected'"
            },
            {
                "name": "fieldName",
                "type": "string",
                "doc": "<p>The name of the data field to display in the primary column of the grid.</p>",
                "default": "\"name\""
            },
            {
                "name": "fieldTitle",
                "type": "string",
                "doc": "<p>The text to display in the column header for the primary column of the grid.</p>",
                "default": null
            },
            {
                "name": "removeRowText",
                "type": "string",
                "doc": "<p>The text to display in the \"remove this row\" column. By default this is a Unicode\n\"X\" looking glyph.</p>",
                "default": "'\\u2716'"
            },
            {
                "name": "removeRowTip",
                "type": "string",
                "doc": "<p>The tooltip to display when the user hovers over the remove cell.</p>",
                "default": "'Remove this item'"
            },
            {
                "name": "search",
                "type": "object",
                "doc": "<p>This object configures the search popup component. By default this contains the\n<code>xtype</code> for a <code>Ext.view.MultiSelectorSearch</code> component and specifies <code>autoLoad</code>\nfor its <code>store</code>.</p>",
                "default": "{xtype: 'multiselector-search', width: 200, height: 200, store: {autoLoad: true}}"
            }
        ],
        "events": []
    },
    "Ext.view.MultiSelectorSearch": {
        "type": "Ext.view.MultiSelectorSearch",
        "doc": "<p>This component provides a grid holding selected items from a second store of potential\nmembers. The <code>store</code> of this component represents the selected items. The <code>searchStore</code>\nrepresents the potentially selected items.</p>",
        "configs": [
            {
                "name": "border",
                "type": "boolean",
                "doc": "<p>Specify as <code>false</code> to render the Panel with zero width borders.</p>",
                "default": "true"
            },
            {
                "name": "defaultListenerScope",
                "type": "boolean",
                "doc": "<p>If <code>true</code>, this component will be the default scope (this pointer) for events\nspecified with string names so that the scope can be dynamically resolved. The\ncomponent will automatically become the defaultListenerScope if a\ncontroller is specified.</p>",
                "default": "true"
            },
            {
                "name": "floating",
                "type": "boolean",
                "doc": "<p>Specify as true to float the Component outside of the document flow using CSS absolute positioning.</p>",
                "default": "true"
            },
            {
                "name": "layout",
                "type": "ext.enums.layout/object",
                "doc": "<p><strong>Important</strong>: In order for child items to be correctly sized and\npositioned, typically a layout manager <strong>must</strong> be specified through\nthe <code>layout</code> configuration option.</p>",
                "default": "'fit'"
            },
            {
                "name": "minHeight",
                "type": "number",
                "doc": "<p>The minimum value in pixels which this Component will set its height to.</p>",
                "default": "200"
            },
            {
                "name": "minWidth",
                "type": "number",
                "doc": "<p>The minimum value in pixels which this Component will set its width to.</p>",
                "default": "200"
            },
            {
                "name": "referenceHolder",
                "type": "boolean",
                "doc": "<p>If <code>true</code>, this container will be marked as being a point in the hierarchy where\nreferences to items with a specified <code>reference</code> config will be held. The container\nwill automatically become a referenceHolder if a controller is specified.</p>",
                "default": "true"
            },
            {
                "name": "resizable",
                "type": "boolean/object",
                "doc": "<p>Specify as <code>true</code> to apply a Resizer to this Component after rendering.</p>",
                "default": "true"
            },
            {
                "name": "searchText",
                "type": "string",
                "doc": "<p>This text is displayed as the \"emptyText\" of the search <code>textfield</code>.</p>",
                "default": "'Search...'"
            }
        ],
        "events": []
    },
    "Ext.view.NavigationModel": {
        "type": "Ext.view.NavigationModel",
        "doc": "<p>This class listens for key events fired from a DataView, and moves the currently focused item\nby adding the class focusCls.</p>",
        "configs": [],
        "events": [
            {
                "name": "navigate",
                "params": "event(Object) keyEvent(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fired when a key has been used to navigate around the view.</p>"
            }
        ]
    },
    "Ext.view.NodeCache": {
        "type": "Ext.view.NodeCache",
        "doc": "<p>A cache of View elements keyed using the index of the associated record in the store.</p>",
        "configs": [],
        "events": []
    },
    "Ext.view.Table": {
        "type": "Ext.view.Table",
        "doc": "<p>This class encapsulates the user interface for a tabular data set.\nIt acts as a centralized manager for controlling the various interface\nelements of the view. This includes handling events, such as row and cell\nlevel based DOM events. It also reacts to events from the underlying Ext.selection.Model\nto provide visual feedback to the user.</p>",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to elements within this\ncomponent like Panel's body will get a class <code>x-panel-body</code>. This means that if you create a subclass of Panel, and\nyou want it to get all the Panels styling for the element and the body, you leave the <code>baseCls</code> <code>x-panel</code> and use\n<code>componentCls</code> to add specific styling for this component.</p>",
                "default": "Ext.baseCSSPrefix + 'grid-view'"
            },
            {
                "name": "componentLayout",
                "type": "string/object",
                "doc": "<p>The sizing and positioning of a Component's internal Elements is the responsibility of the Component's layout\nmanager which sizes a Component's internal structure in response to the Component being sized.</p>",
                "default": "'tableview'"
            },
            {
                "name": "enableTextSelection",
                "type": "boolean",
                "doc": "<p>True to enable text selections.</p>",
                "default": null
            },
            {
                "name": "firstCls",
                "type": "string",
                "doc": "<p>A CSS class to add to the <em>first</em> cell in every row to enable special styling for the first column.\nIf no styling is needed on the first column, this may be configured as <code>null</code>.</p>",
                "default": "'x-grid-cell-first'"
            },
            {
                "name": "itemCls",
                "type": "string",
                "doc": "<p>Specifies the class to be assigned to each element in the view when used in conjunction with the\nitemTpl configuration.</p>",
                "default": "Ext.baseCSSPrefix + 'grid-item'"
            },
            {
                "name": "itemSelector",
                "type": "string",
                "doc": "<p>view item. This wraps a data row</p>",
                "default": "'table.' + Ext.baseCSSPrefix + 'grid-item'"
            },
            {
                "name": "lastCls",
                "type": "string",
                "doc": "<p>A CSS class to add to the <em>last</em> cell in every row to enable special styling for the last column.\nIf no styling is needed on the last column, this may be configured as <code>null</code>.</p>",
                "default": "'x-grid-cell-last'"
            },
            {
                "name": "markDirty",
                "type": "boolean",
                "doc": "<p>True to show the dirty cell indicator when a cell has been modified.</p>",
                "default": "true"
            },
            {
                "name": "overItemCls",
                "type": "string",
                "doc": "<p>A CSS class to apply to each item in the view on mouseover.\nSetting this will automatically set trackOver to <code>true</code>.</p>",
                "default": "Ext.baseCSSPrefix + 'grid-item-over'"
            },
            {
                "name": "scrollable",
                "type": "boolean/string/object",
                "doc": "<p>Configuration options to make this Component scrollable. Acceptable values are:</p>",
                "default": "true"
            },
            {
                "name": "selectedItemCls",
                "type": "string",
                "doc": "<p>A CSS class to apply to each selected item in the view.</p>",
                "default": "Ext.baseCSSPrefix + 'grid-item-selected'"
            },
            {
                "name": "selectionModel",
                "type": "object/ext.selection.dataviewmodel",
                "doc": "<p>The selection model [dataviewmodel] config or alias to use.</p>",
                "default": "{type: 'rowmodel'}"
            },
            {
                "name": "stripeRows",
                "type": "boolean",
                "doc": "<p>True to stripe the rows.</p>",
                "default": "true"
            },
            {
                "name": "trackOver",
                "type": "boolean",
                "doc": "<p>cfg docs inherited</p>",
                "default": "true"
            }
        ],
        "events": [
            {
                "name": "beforecellclick",
                "params": "this(Ext.view.Table) td(HTMLElement) cellIndex(Number) record(Ext.data.Model) tr(HTMLElement) rowIndex(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fired before the cell click is processed. Return false to cancel the default action.</p>"
            },
            {
                "name": "beforecellcontextmenu",
                "params": "this(Ext.view.Table) td(HTMLElement) cellIndex(Number) record(Ext.data.Model) tr(HTMLElement) rowIndex(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fired before the cell right click is processed. Return false to cancel the default action.</p>"
            },
            {
                "name": "beforecelldblclick",
                "params": "this(Ext.view.Table) td(HTMLElement) cellIndex(Number) record(Ext.data.Model) tr(HTMLElement) rowIndex(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fired before the cell double click is processed. Return false to cancel the default action.</p>"
            },
            {
                "name": "beforecellkeydown",
                "params": "this(Ext.view.Table) td(HTMLElement) cellIndex(Number) record(Ext.data.Model) tr(HTMLElement) rowIndex(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fired before the cell key down is processed. Return false to cancel the default action.</p>"
            },
            {
                "name": "beforecellmousedown",
                "params": "this(Ext.view.Table) td(HTMLElement) cellIndex(Number) record(Ext.data.Model) tr(HTMLElement) rowIndex(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fired before the cell mouse down is processed. Return false to cancel the default action.</p>"
            },
            {
                "name": "beforecellmouseup",
                "params": "this(Ext.view.Table) td(HTMLElement) cellIndex(Number) record(Ext.data.Model) tr(HTMLElement) rowIndex(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fired before the cell mouse up is processed. Return false to cancel the default action.</p>"
            },
            {
                "name": "cellclick",
                "params": "this(Ext.view.Table) td(HTMLElement) cellIndex(Number) record(Ext.data.Model) tr(HTMLElement) rowIndex(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fired when table cell is clicked.</p>"
            },
            {
                "name": "cellcontextmenu",
                "params": "this(Ext.view.Table) td(HTMLElement) cellIndex(Number) record(Ext.data.Model) tr(HTMLElement) rowIndex(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fired when table cell is right clicked.</p>"
            },
            {
                "name": "celldblclick",
                "params": "this(Ext.view.Table) td(HTMLElement) cellIndex(Number) record(Ext.data.Model) tr(HTMLElement) rowIndex(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fired when table cell is double clicked.</p>"
            },
            {
                "name": "cellkeydown",
                "params": "this(Ext.view.Table) td(HTMLElement) cellIndex(Number) record(Ext.data.Model) tr(HTMLElement) rowIndex(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fired when the keydown event is captured on the cell.</p>"
            },
            {
                "name": "cellmousedown",
                "params": "this(Ext.view.Table) td(HTMLElement) cellIndex(Number) record(Ext.data.Model) tr(HTMLElement) rowIndex(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fired when the mousedown event is captured on the cell.</p>"
            },
            {
                "name": "cellmouseup",
                "params": "this(Ext.view.Table) td(HTMLElement) cellIndex(Number) record(Ext.data.Model) tr(HTMLElement) rowIndex(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fired when the mouseup event is captured on the cell.</p>"
            },
            {
                "name": "rowclick",
                "params": "this(Ext.view.Table) record(Ext.data.Model) tr(HTMLElement) rowIndex(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fired when table cell is clicked.</p>"
            },
            {
                "name": "rowcontextmenu",
                "params": "this(Ext.view.Table) record(Ext.data.Model) tr(HTMLElement) rowIndex(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fired when table cell is right clicked.</p>"
            },
            {
                "name": "rowdblclick",
                "params": "this(Ext.view.Table) record(Ext.data.Model) tr(HTMLElement) rowIndex(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fired when table cell is double clicked.</p>"
            },
            {
                "name": "rowkeydown",
                "params": "this(Ext.view.Table) record(Ext.data.Model) tr(HTMLElement) rowIndex(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fired when the keydown event is captured on the cell.</p>"
            },
            {
                "name": "rowmousedown",
                "params": "this(Ext.view.Table) record(Ext.data.Model) tr(HTMLElement) rowIndex(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fired when the mousedown event is captured on the cell.</p>"
            },
            {
                "name": "rowmouseup",
                "params": "this(Ext.view.Table) record(Ext.data.Model) tr(HTMLElement) rowIndex(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fired when the mouseup event is captured on the cell.</p>"
            }
        ]
    },
    "Ext.view.TableLayout": {
        "type": "Ext.view.TableLayout",
        "doc": "<p>Component layout for Ext.view.Table</p>",
        "configs": [],
        "events": []
    },
    "Ext.view.View": {
        "type": "Ext.view.View",
        "doc": "<p>A mechanism for displaying data using custom layout templates and formatting.</p>",
        "configs": [],
        "events": [
            {
                "name": "beforecontainerclick",
                "params": "this(Ext.view.View) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires before the click event on the container is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforecontainercontextmenu",
                "params": "this(Ext.view.View) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires before the contextmenu event on the container is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforecontainerdblclick",
                "params": "this(Ext.view.View) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires before the dblclick event on the container is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforecontainerkeydown",
                "params": "this(Ext.view.View) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires before the keydown event on the container is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforecontainerkeypress",
                "params": "this(Ext.view.View) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires before the keypress event on the container is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforecontainerkeyup",
                "params": "this(Ext.view.View) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires before the keyup event on the container is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforecontainermousedown",
                "params": "this(Ext.view.View) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires before the mousedown event on the container is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforecontainermouseout",
                "params": "this(Ext.view.View) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires before the mouseout event on the container is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforecontainermouseover",
                "params": "this(Ext.view.View) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires before the mouseover event on the container is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforecontainermouseup",
                "params": "this(Ext.view.View) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires before the mouseup event on the container is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforedeselect",
                "params": "this(Ext.selection.DataViewModel) record(Ext.data.Model) The(Number) eOpts(Object)",
                "doc": "<p>Fired before a record is deselected. If any listener returns false, the\ndeselection is cancelled.</p>"
            },
            {
                "name": "beforeitemclick",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires before the click event on an item is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforeitemcontextmenu",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires before the contextmenu event on an item is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforeitemdblclick",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires before the dblclick event on an item is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforeitemkeydown",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires before the keydown event on an item is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforeitemkeypress",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires before the keypress event on an item is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforeitemkeyup",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires before the keyup event on an item is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforeitemmousedown",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires before the mousedown event on an item is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforeitemmouseenter",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires before the mouseenter event on an item is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforeitemmouseleave",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires before the mouseleave event on an item is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforeitemmouseup",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires before the mouseup event on an item is processed. Returns false to cancel the default action.</p>"
            },
            {
                "name": "beforeselect",
                "params": "this(Ext.selection.DataViewModel) record(Ext.data.Model) The(Number) eOpts(Object)",
                "doc": "<p>Fired before a record is selected. If any listener returns false, the\nselection is cancelled.</p>"
            },
            {
                "name": "containerclick",
                "params": "this(Ext.view.View) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when the container is clicked.</p>"
            },
            {
                "name": "containercontextmenu",
                "params": "this(Ext.view.View) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when the container is right clicked.</p>"
            },
            {
                "name": "containerdblclick",
                "params": "this(Ext.view.View) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when the container is double clicked.</p>"
            },
            {
                "name": "containerkeydown",
                "params": "this(Ext.view.View) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when a key is pressed down while the container is focused, and no item is currently selected.</p>"
            },
            {
                "name": "containerkeypress",
                "params": "this(Ext.view.View) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when a key is pressed while the container is focused, and no item is currently selected.</p>"
            },
            {
                "name": "containerkeyup",
                "params": "this(Ext.view.View) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when a key is released while the container is focused, and no item is currently selected.</p>"
            },
            {
                "name": "containermousedown",
                "params": "this(Ext.view.View) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when there is a mousedown on the container</p>"
            },
            {
                "name": "containermouseout",
                "params": "this(Ext.view.View) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when you move the mouse out of the container.</p>"
            },
            {
                "name": "containermouseover",
                "params": "this(Ext.view.View) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when you move the mouse over the container.</p>"
            },
            {
                "name": "containermouseup",
                "params": "this(Ext.view.View) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when there is a mouseup on the container</p>"
            },
            {
                "name": "deselect",
                "params": "this(Ext.selection.DataViewModel) record(Ext.data.Model) eOpts(Object)",
                "doc": "<p>Fired after a record is deselected</p>"
            },
            {
                "name": "focuschange",
                "params": "this(Ext.selection.Model) oldFocused(Ext.data.Model) newFocused(Ext.data.Model) eOpts(Object)",
                "doc": "<p>Fired when a row is focused</p>"
            },
            {
                "name": "highlightitem",
                "params": "view(Ext.view.View) node(Ext.dom.Element) eOpts(Object)",
                "doc": "<p>Fires when a node is highlighted using keyboard navigation, or mouseover.</p>"
            },
            {
                "name": "itemclick",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when an item is clicked.</p>"
            },
            {
                "name": "itemcontextmenu",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when an item is right clicked.</p>"
            },
            {
                "name": "itemdblclick",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when an item is double clicked.</p>"
            },
            {
                "name": "itemkeydown",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when a key is pressed down while an item is currently selected.</p>"
            },
            {
                "name": "itemkeypress",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when a key is pressed while an item is currently selected.</p>"
            },
            {
                "name": "itemkeyup",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when a key is released while an item is currently selected.</p>"
            },
            {
                "name": "itemmousedown",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when there is a mouse down on an item</p>"
            },
            {
                "name": "itemmouseenter",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when the mouse enters an item.</p>"
            },
            {
                "name": "itemmouseleave",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when the mouse leaves an item.</p>"
            },
            {
                "name": "itemmouseup",
                "params": "this(Ext.view.View) record(Ext.data.Model) item(HTMLElement) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when there is a mouse up on an item</p>"
            },
            {
                "name": "select",
                "params": "this(Ext.selection.DataViewModel) record(Ext.data.Model) The(Number) eOpts(Object)",
                "doc": "<p>Fired after a record is selected</p>"
            },
            {
                "name": "selectionchange",
                "params": "this(Ext.selection.Model) selected(Ext.data.Model[]) eOpts(Object)",
                "doc": "<p>Fired after a selection change has occurred</p>"
            },
            {
                "name": "unhighlightitem",
                "params": "view(Ext.view.View) node(Ext.dom.Element) eOpts(Object)",
                "doc": "<p>Fires when a node is unhighlighted using keyboard navigation, or mouseout.</p>"
            }
        ]
    },
    "Ext.window.MessageBox": {
        "type": "Ext.window.MessageBox",
        "doc": "<p>Utility class for generating different styles of message boxes.  The singleton instance, Ext.MessageBox\nalias <code>Ext.Msg</code> can also be used.</p>",
        "configs": [
            {
                "name": "closeAction",
                "type": "string",
                "doc": "<p>The action to take when the close header tool is clicked:</p>",
                "default": "'hide'"
            },
            {
                "name": "cls",
                "type": "string/string[]",
                "doc": "<p>An optional extra CSS class that will be added to this component's Element.\nThe value can be a string, a list of strings separated by spaces, or an array of strings. This can be useful\nfor adding customized styles to the component or any of its children using standard CSS rules.</p>",
                "default": "[Ext.baseCSSPrefix + 'message-box', Ext.baseCSSPrefix + 'hidden-offsets']"
            },
            {
                "name": "constrain",
                "type": "boolean",
                "doc": "<p>True to constrain the window within its containing element, false to allow it to fall outside of its containing\nelement. By default the window will be rendered to <code>document.body</code>. To render and constrain the window within\nanother element specify renderTo. Optionally the header only can be constrained\nusing constrainHeader.</p>",
                "default": "true"
            },
            {
                "name": "hideMode",
                "type": "string",
                "doc": "<p>hide it by offsets. Windows are hidden on render by default.</p>",
                "default": "'offsets'"
            },
            {
                "name": "layout",
                "type": "ext.enums.layout/object",
                "doc": "<p><strong>Important</strong>: In order for child items to be correctly sized and\npositioned, typically a layout manager <strong>must</strong> be specified through\nthe <code>layout</code> configuration option.</p>",
                "default": "{type: 'vbox', align: 'stretch'}"
            },
            {
                "name": "maxHeight",
                "type": "number",
                "doc": "<p>The maximum value in pixels which this Component will set its height to.</p>",
                "default": null
            },
            {
                "name": "maxWidth",
                "type": "number",
                "doc": "<p>The maximum value in pixels which this Component will set its width to.</p>",
                "default": null
            },
            {
                "name": "minHeight",
                "type": "number",
                "doc": "<p>The minimum value in pixels which this Component will set its height to.</p>",
                "default": null
            },
            {
                "name": "minWidth",
                "type": "number",
                "doc": "<p>Forcibly set these to null on the prototype to override anything set higher in\nthe hierarchy</p>",
                "default": null
            },
            {
                "name": "resizable",
                "type": "boolean/object",
                "doc": "<p>Specify as <code>true</code> to allow user resizing at each edge and corner of the window, false to disable resizing.</p>",
                "default": "false"
            },
            {
                "name": "scrollable",
                "type": "boolean/string/object",
                "doc": "<p>Configuration options to make this Component scrollable. Acceptable values are:</p>",
                "default": "true"
            },
            {
                "name": "shrinkWrapDock",
                "type": "boolean/number",
                "doc": "<p>We want to shrinkWrap around all docked items</p>",
                "default": "true"
            },
            {
                "name": "title",
                "type": "string",
                "doc": "<p>The title text to be used to display in the Panel Header.\nOr a config object for a Panel Title. When a <code>title</code> is\nspecified the Ext.panel.Header will automatically be created and\ndisplayed unless header is set to <code>false</code>.</p>",
                "default": "'&#160;'"
            }
        ],
        "events": []
    },
    "Ext.window.Toast": {
        "type": "Ext.window.Toast",
        "doc": "<p>This class provides for lightweight, auto-dismissing pop-up notifications called \"toasts\".\nAt the base level, you can display a toast message by calling <code>Ext.toast</code> like so:</p>",
        "configs": [
            {
                "name": "align",
                "type": "\"br\"/\"bl\"/\"tr\"/\"tl\"/\"t\"/\"l\"/\"b\"/\"r\"",
                "doc": "<p>Specifies the basic alignment of the toast message with its <code>anchor</code>. This controls\nmany aspects of the toast animation as well. For fine grain control of the final\nplacement of the toast and its <code>anchor</code> you may set <code>anchorAlign</code> <em>as well</em>.</p>",
                "default": "\"br\""
            },
            {
                "name": "anchor",
                "type": "string/ext.component",
                "doc": "<p>The component or the <code>id</code> of the component to which the <code>toast</code> will be anchored.\nThe default behavior is to anchor a <code>toast</code> to the document body (no component).</p>",
                "default": null
            },
            {
                "name": "anchorAlign",
                "type": "string",
                "doc": "<p>This string is a full specification of how to position the toast with respect to\nits <code>anchor</code>. This is set to a reasonable value based on <code>align</code> but the <code>align</code>\nalso sets defaults for various other properties. This config controls only the\nfinal position of the toast.</p>",
                "default": null
            },
            {
                "name": "animate",
                "type": "boolean",
                "doc": "<p>Set this to <code>false</code> to make toasts appear and disappear without animation.\nThis is helpful with applications' unit and integration testing.</p>",
                "default": "true"
            },
            {
                "name": "bodyPadding",
                "type": "number/string",
                "doc": "<p>A shortcut for setting a padding style on the body element. The value can either be\na number to be applied to all sides, or a normal css string describing padding.</p>",
                "default": "10"
            },
            {
                "name": "cls",
                "type": "string/string[]",
                "doc": "<p>An optional extra CSS class that will be added to this component's Element.\nThe value can be a string, a list of strings separated by spaces, or an array of strings. This can be useful\nfor adding customized styles to the component or any of its children using standard CSS rules.</p>",
                "default": "Ext.baseCSSPrefix + 'toast'"
            },
            {
                "name": "draggable",
                "type": "boolean",
                "doc": "<p>True to allow the window to be dragged by the header bar, false to disable dragging. Note that\nby default the window will be centered in the viewport, so if dragging is disabled the window may need to be\npositioned programmatically after render (e.g., <code>myWindow.setPosition(100, 100);</code>).</p>",
                "default": "false"
            },
            {
                "name": "plain",
                "type": "boolean",
                "doc": "<p>True to render the window body with a transparent background so that it will blend into the framing elements,\nfalse to add a lighter background color to visually highlight the body element and separate it more distinctly\nfrom the surrounding frame.</p>",
                "default": "false"
            },
            {
                "name": "resizable",
                "type": "boolean/object",
                "doc": "<p>Specify as <code>true</code> to allow user resizing at each edge and corner of the window, false to disable resizing.</p>",
                "default": "false"
            },
            {
                "name": "shadow",
                "type": "string/boolean",
                "doc": "<p>Specifies whether the floating component should be given a shadow. Set to true to automatically create an\nExt.Shadow, or a string indicating the shadow's display Ext.Shadow.mode. Set to false to\ndisable the shadow.</p>",
                "default": "false"
            },
            {
                "name": "useXAxis",
                "type": "boolean",
                "doc": "<p>Directs the toast message to animate on the x-axis (if <code>true</code>) or y-axis (if <code>false</code>).\nThis value defaults to a value based on the <code>align</code> config.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.window.Window": {
        "type": "Ext.window.Window",
        "doc": "<p>A specialized panel intended for use as an application window. Windows are floated, resizable, and\ndraggable by default. Windows can be maximized to fill the viewport, restored to\ntheir prior size, and can be minimized.</p>",
        "configs": [
            {
                "name": "animateTarget",
                "type": "string/ext.dom.element",
                "doc": "<p>Id or element from which the window should animate while opening.</p>",
                "default": "null"
            },
            {
                "name": "autoRender",
                "type": "boolean/string/htmlelement/ext.dom.element",
                "doc": "<p>Windows render to the body on first show.</p>",
                "default": "true"
            },
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this panel's element.</p>",
                "default": "'x-window'"
            },
            {
                "name": "closable",
                "type": "boolean",
                "doc": "<p>True to display the 'close' tool button and allow the user to close the window, false to hide the button and\ndisallow closing the window.</p>",
                "default": "true"
            },
            {
                "name": "collapsed",
                "type": "boolean",
                "doc": "<p>True to render the window collapsed, false to render it expanded. Note that if expandOnShow\nis true (the default) it will override the <code>collapsed</code> config and the window will always be\nexpanded when shown.</p>",
                "default": "false"
            },
            {
                "name": "collapsible",
                "type": "boolean",
                "doc": "<p>inherited docs, same default</p>",
                "default": "false"
            },
            {
                "name": "constrain",
                "type": "boolean",
                "doc": "<p>True to constrain the window within its containing element, false to allow it to fall outside of its containing\nelement. By default the window will be rendered to <code>document.body</code>. To render and constrain the window within\nanother element specify renderTo. Optionally the header only can be constrained\nusing constrainHeader.</p>",
                "default": "false"
            },
            {
                "name": "constrainHeader",
                "type": "boolean",
                "doc": "<p>True to constrain the window header within its containing element (allowing the window body to fall outside of\nits containing element) or false to allow the header to fall outside its containing element.\nOptionally the entire window can be constrained using constrain.</p>",
                "default": "false"
            },
            {
                "name": "defaultFocus",
                "type": "string/number/ext.component",
                "doc": "<p>Specifies a Component to receive focus when this Window is focused.</p>",
                "default": null
            },
            {
                "name": "draggable",
                "type": "boolean",
                "doc": "<p>True to allow the window to be dragged by the header bar, false to disable dragging. Note that\nby default the window will be centered in the viewport, so if dragging is disabled the window may need to be\npositioned programmatically after render (e.g., <code>myWindow.setPosition(100, 100);</code>).</p>",
                "default": "true"
            },
            {
                "name": "expandOnShow",
                "type": "boolean",
                "doc": "<p>True to always expand the window when it is displayed, false to keep it in its current state (which may be\ncollapsed) when displayed.</p>",
                "default": "true"
            },
            {
                "name": "floating",
                "type": "boolean",
                "doc": "<p>Windows are always floating.</p>",
                "default": "true"
            },
            {
                "name": "ghost",
                "type": "boolean/function",
                "doc": "<p>Set to false to disable the ghost panel during dragging the window.\nDo note that you should not set this to true, by default it is a function.</p>",
                "default": null
            },
            {
                "name": "hidden",
                "type": "boolean",
                "doc": "<p>Render this Window hidden. If <code>true</code>, the hide method will be called internally.</p>",
                "default": "true"
            },
            {
                "name": "hideMode",
                "type": "string",
                "doc": "<p>Windows hide using offsets in order to preserve the scroll positions of their descendants.  You may review\nother configuration options here: Ext.Component.hideMode.</p>",
                "default": "'offsets'"
            },
            {
                "name": "hideShadowOnDeactivate",
                "type": "boolean",
                "doc": "<p>True to hide this Window's shadow when another floating item in the same z-index stack is activated.</p>",
                "default": "false"
            },
            {
                "name": "maximizable",
                "type": "boolean",
                "doc": "<p>True to display the 'maximize' tool button and allow the user to maximize the window, false to hide the button\nand disallow maximizing the window. Note that when a window is maximized, the tool button\nwill automatically change to a 'restore' button with the appropriate behavior already built-in that will restore\nthe window to its previous size.</p>",
                "default": "false"
            },
            {
                "name": "maximized",
                "type": "boolean",
                "doc": "<p>True to initially display the window in a maximized state.</p>",
                "default": "false"
            },
            {
                "name": "minHeight",
                "type": "number",
                "doc": "<p>inherit docs</p>",
                "default": "50"
            },
            {
                "name": "minWidth",
                "type": "number",
                "doc": "<p>inherit docs</p>",
                "default": "50"
            },
            {
                "name": "minimizable",
                "type": "boolean",
                "doc": "<p>True to display the 'minimize' tool button and allow the user to minimize the window, false to hide the button\nand disallow minimizing the window. Note that this button provides no implementation -- the\nbehavior of minimizing a window is implementation-specific, so the minimize event must be handled and a custom\nminimize behavior implemented for this option to be useful.</p>",
                "default": "false"
            },
            {
                "name": "modal",
                "type": "boolean",
                "doc": "<p>True to make the window modal and mask everything behind it when displayed, false to display it without\nrestricting access to other UI elements.</p>",
                "default": "false"
            },
            {
                "name": "monitorResize",
                "type": "boolean",
                "doc": "<p><code>true</code> to listen to the viewport resize event and perform any layout updating if necessary.\nThis is useful if using sizes as percentages for the window.</p>",
                "default": null
            },
            {
                "name": "onEsc",
                "type": "function",
                "doc": "<p>Allows override of the built-in processing for the escape key. Default action is to close the Window (performing\nwhatever action is specified in closeAction. To prevent the Window closing when the escape key is\npressed, specify this as Ext.emptyFn.</p>",
                "default": null
            },
            {
                "name": "overlapHeader",
                "type": "boolean",
                "doc": "<p>True to overlap the header in a panel over the framing of the panel itself. This is needed when frame:true (and\nis done automatically for you). Otherwise it is undefined. If you manually add rounded corners to a panel header\nwhich does not have frame:true, this will need to be set to true.</p>",
                "default": "true"
            },
            {
                "name": "plain",
                "type": "boolean",
                "doc": "<p>True to render the window body with a transparent background so that it will blend into the framing elements,\nfalse to add a lighter background color to visually highlight the body element and separate it more distinctly\nfrom the surrounding frame.</p>",
                "default": "false"
            },
            {
                "name": "resizable",
                "type": "boolean/object",
                "doc": "<p>Specify as <code>true</code> to allow user resizing at each edge and corner of the window, false to disable resizing.</p>",
                "default": "true"
            },
            {
                "name": "x",
                "type": "number",
                "doc": "<p>The X position of the left edge of the window on initial showing. Defaults to centering the Window within the\nwidth of the Window's container Element (The Element that the Window is rendered to).</p>",
                "default": null
            },
            {
                "name": "y",
                "type": "number",
                "doc": "<p>The Y position of the top edge of the window on initial showing. Defaults to centering the Window within the\nheight of the Window's container Element (The Element that the Window is rendered to).</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "activate",
                "params": "this(Ext.window.Window) eOpts(Object)",
                "doc": "<p>Fires after the window has been visually activated via setActive.</p>"
            },
            {
                "name": "deactivate",
                "params": "this(Ext.window.Window) eOpts(Object)",
                "doc": "<p>Fires after the window has been visually deactivated via setActive.</p>"
            },
            {
                "name": "maximize",
                "params": "this(Ext.window.Window) eOpts(Object)",
                "doc": "<p>Fires after the window has been maximized.</p>"
            },
            {
                "name": "minimize",
                "params": "this(Ext.window.Window) eOpts(Object)",
                "doc": "<p>Fires after the window has been minimized.</p>"
            },
            {
                "name": "resize",
                "params": "this(Ext.window.Window) width(Number) height(Number) eOpts(Object)",
                "doc": "<p>Fires after the window has been resized.</p>"
            },
            {
                "name": "restore",
                "params": "this(Ext.window.Window) eOpts(Object)",
                "doc": "<p>Fires after the window has been restored to its original size after being maximized.</p>"
            }
        ]
    }
}