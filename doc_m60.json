{
    "Ext.AbstractComponent": {
        "type": "Ext.AbstractComponent",
        "doc": "<p>For backward compatibility only.  Use Ext.Widget instead</p>",
        "configs": [],
        "events": []
    },
    "Ext.AbstractManager": {
        "type": "Ext.AbstractManager",
        "doc": "<p>Base Manager class</p>",
        "configs": [],
        "events": []
    },
    "Ext.ActionSheet": {
        "type": "Ext.ActionSheet",
        "doc": "<p>ActionSheets are used to display a list of buttons in a popup dialog.</p>",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to\nother elements within this component. To add specific styling for sub-classes, use the cls config.</p>",
                "default": "Ext.baseCSSPrefix + 'sheet-action'"
            },
            {
                "name": "bottom",
                "type": "number/string",
                "doc": "<p>The absolute bottom position of this Component; must be a valid CSS length value, e.g: <code>300</code>, <code>100px</code>, <code>30%</code>, etc.\nExplicitly setting this value will make this Component become 'floating', which means its layout will no\nlonger be affected by the Container that it resides in.</p>",
                "default": "0"
            },
            {
                "name": "defaultType",
                "type": "string",
                "doc": "<p>The default xtype of child Components to create in this Container when a child item\nis specified as a raw configuration object, rather than as an instantiated Component.</p>",
                "default": "'button'"
            },
            {
                "name": "height",
                "type": "number/string",
                "doc": "<p>The height of this Component; must be a valid CSS length value, e.g: <code>300</code>, <code>100px</code>, <code>30%</code>, etc.\nBy default, if this is not explicitly set, this Component's element will simply have its own natural size.\nIf set to <code>auto</code>, it will set the width to <code>null</code> meaning it will have its own natural size.</p>",
                "default": "'auto'"
            },
            {
                "name": "left",
                "type": "number/string",
                "doc": "<p>The absolute left position of this Component; must be a valid CSS length value, e.g: <code>300</code>, <code>100px</code>, <code>30%</code>, etc.\nExplicitly setting this value will make this Component become 'floating', which means its layout will no\nlonger be affected by the Container that it resides in.</p>",
                "default": "0"
            },
            {
                "name": "right",
                "type": "number/string",
                "doc": "<p>The absolute right position of this Component; must be a valid CSS length value, e.g: <code>300</code>, <code>100px</code>, <code>30%</code>, etc.\nExplicitly setting this value will make this Component become 'floating', which means its layout will no\nlonger be affected by the Container that it resides in.</p>",
                "default": "0"
            }
        ],
        "events": []
    },
    "Ext.Ajax": {
        "type": "Ext.Ajax",
        "doc": "<p>A singleton instance of an <code>Ext.data.Connection</code>. This class is used to\ncommunicate with your server side code. It can be used as follows:</p>",
        "configs": [],
        "events": []
    },
    "Ext.Anim": {
        "type": "Ext.Anim",
        "doc": "<p>Ext.Anim is used to execute simple animations defined in Ext.anims. The run method can take any of the\nproperties defined below.</p>",
        "configs": [
            {
                "name": "after",
                "type": "function",
                "doc": "<p>Code to execute after the animation ends.</p>",
                "default": null
            },
            {
                "name": "autoClear",
                "type": "boolean",
                "doc": "<p><code>true</code> to remove all custom CSS defined in the to config when the animation is over.</p>",
                "default": "true"
            },
            {
                "name": "before",
                "type": "function",
                "doc": "<p>Code to execute before starting the animation.</p>",
                "default": null
            },
            {
                "name": "delay",
                "type": "number",
                "doc": "<p>Time to delay before starting the animation.</p>",
                "default": "0"
            },
            {
                "name": "direction",
                "type": "string",
                "doc": "<p>Valid values are: 'left', 'right', 'up', 'down', and <code>null</code>.</p>",
                "default": null
            },
            {
                "name": "disableAnimations",
                "type": "boolean",
                "doc": "<p><code>true</code> to disable animations.</p>",
                "default": "false"
            },
            {
                "name": "duration",
                "type": "number",
                "doc": "<p>Time in milliseconds for the animation to last.</p>",
                "default": "250"
            },
            {
                "name": "easing",
                "type": "string",
                "doc": "<p>Valid values are 'ease', 'linear', ease-in', 'ease-out', 'ease-in-out', or a cubic-bezier curve as defined by CSS.</p>",
                "default": "'ease-in-out'"
            },
            {
                "name": "from",
                "type": "object",
                "doc": "<p>An object of CSS values which the animation begins with. If you define a CSS property here, you must also\ndefine it in the to config.</p>",
                "default": "{}"
            },
            {
                "name": "out",
                "type": "boolean",
                "doc": "<p><code>true</code> if you want the animation to slide out of the screen.</p>",
                "default": "true"
            },
            {
                "name": "reverse",
                "type": "boolean",
                "doc": "<p><code>true</code> to reverse the animation direction. For example, if the animation direction was set to 'left', it would\nthen use 'right'.</p>",
                "default": "false"
            },
            {
                "name": "scope",
                "type": "object",
                "doc": "<p>Scope to run the before function in.</p>",
                "default": null
            },
            {
                "name": "to",
                "type": "object",
                "doc": "<p>An object of CSS values which the animation ends with. If you define a CSS property here, you must also\ndefine it in the from config.</p>",
                "default": "{}"
            }
        ],
        "events": []
    },
    "Ext.AnimationQueue": {
        "type": "Ext.AnimationQueue",
        "configs": [],
        "events": []
    },
    "Ext.anims": {
        "type": "Ext.anims",
        "doc": "<p>Defines different types of animations.</p>",
        "configs": [],
        "events": []
    },
    "Ext.app.Application": {
        "type": "Ext.app.Application",
        "doc": "<p>Represents an Ext JS application, which is typically a single page app using a\nViewport.</p>",
        "configs": [
            {
                "name": "appFolder",
                "type": "string",
                "doc": "<p>The path to the directory which contains all application's classes.\nThis path will be registered via Ext.Loader.setPath for the namespace specified\nin the name config.</p>",
                "default": "\"app\""
            },
            {
                "name": "appProperty",
                "type": "string",
                "doc": "<p>The name of a property to be assigned to the main namespace to gain a reference to\nthis application. Can be set to an empty value to prevent the reference from\nbeing created</p>",
                "default": "'app'"
            },
            {
                "name": "controllers",
                "type": "string/string[]",
                "doc": "<p>Names of controllers that the app uses.  By default,\nthe framework will look for the controllers in the \"controller\" folder within the\nappFolder.  Controller classes should be named using the syntax of\n\"{appName}.controller.{ClassName}\" with additional sub-folders under the\n\"controller\" folder specified within the class name following \"controller.\".</p>",
                "default": null
            },
            {
                "name": "currentProfile",
                "type": "ext.app.profile",
                "doc": "\n",
                "default": null
            },
            {
                "name": "defaultToken",
                "type": "string",
                "doc": "<p>The default token to be used at application launch\nif one is not present. Often this is set to something like <code>'home'</code>.</p>",
                "default": "null"
            },
            {
                "name": "extend",
                "type": "string",
                "doc": "<p>A class name to use with the <code>Ext.application</code> call. The class must also extend Ext.app.Application.</p>",
                "default": null
            },
            {
                "name": "glyphFontFamily",
                "type": "string",
                "doc": "<p>The glyphFontFamily to use for this application.  Used as the default font-family\nfor all components that support a <code>glyph</code> config.</p>",
                "default": null
            },
            {
                "name": "mainView",
                "type": "string/object",
                "doc": "\n",
                "default": "{$value: null, lazy: true}"
            },
            {
                "name": "name",
                "type": "string",
                "doc": "<p>The name of your application. This will also be the namespace for your views, controllers\nmodels and stores. Don't use spaces or special characters in the name. <strong>Application name\nis mandatory</strong>.</p>",
                "default": "''"
            },
            {
                "name": "namespaces",
                "type": "string/string[]",
                "doc": "<p>The list of namespace prefixes used in the application to resolve dependencies\nlike Views and Stores:</p>",
                "default": "[]"
            },
            {
                "name": "paths",
                "type": "object",
                "doc": "<p>Additional load paths to add to Ext.Loader.\nSee Ext.Loader.paths config for more details.</p>",
                "default": null
            },
            {
                "name": "profiles",
                "type": "string/string[]",
                "doc": "<p>Names of the profiles that the app uses.</p>",
                "default": "[]"
            },
            {
                "name": "scope",
                "type": "object",
                "doc": "<p>The scope to execute the launch function in. Defaults to the Application instance.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.app.BaseController": {
        "type": "Ext.app.BaseController",
        "doc": "<p>Base class for Controllers.</p>",
        "configs": [
            {
                "name": "before",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "control",
                "type": "object",
                "doc": "<p>Adds listeners to components selected via Ext.ComponentQuery. Accepts an\nobject containing component paths mapped to a hash of listener functions.<br/>\nThe function value may also be a string matching the name of a method on the\ncontroller.</p>",
                "default": null
            },
            {
                "name": "id",
                "type": "string",
                "doc": "<p>The id of this controller. You can use this id when dispatching.</p>",
                "default": null
            },
            {
                "name": "listen",
                "type": "object",
                "doc": "<p>Adds listeners to different event sources (also called \"event domains\"). The\nprimary event domain is that of components, but there are also other event domains:\nGlobal domain that intercepts events fired from\nExt.GlobalEvents Observable instance,\nController domain can be used to listen to events\nfired by other Controllers, Store domain gives access to\nStore events, and Direct domain can be used with\nExt Direct Providers to listen to their events.</p>",
                "default": null
            },
            {
                "name": "routes",
                "type": "object",
                "doc": "<p>An object of routes to handle hash changes. A route can be defined in a simple way:</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.app.bind.AbstractStub": {
        "type": "Ext.app.bind.AbstractStub",
        "doc": "<p>This class manages bindings for a <code>Session</code> or <code>ViewModel</code>.</p>",
        "configs": [],
        "events": []
    },
    "Ext.app.bind.BaseBinding": {
        "type": "Ext.app.bind.BaseBinding",
        "doc": "<p>This class is the base for <code>Binding</code> and <code>MultiBinding</code>.</p>",
        "configs": [
            {
                "name": "single",
                "type": "boolean",
                "doc": "<p>This option instructs the binding to call its <code>destroy</code> method immediately after\ndelivering the initial value.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.app.bind.Binding": {
        "type": "Ext.app.bind.Binding",
        "doc": "<p>This class is created to manage a direct bind.  <code>Ext.app.ViewModel</code> returns this from\nits bind method.</p>",
        "configs": [
            {
                "name": "deep",
                "type": "boolean",
                "doc": "<p>Normally a binding is only notified of changes to its bound property, but if that\nproperty is an object it is sometimes helpful to be notified of changes to its\nproperties. To receive notifications of changes to all properties of a bound object,\nset this to <code>true</code>.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.app.bind.Formula": {
        "type": "Ext.app.bind.Formula",
        "doc": "<p>This class manages a formula defined for an <code>Ext.app.ViewModel</code>.</p>",
        "configs": [
            {
                "name": "bind",
                "type": "object",
                "doc": "<p>An explicit bind request to produce data to provide the <code>get</code> function. If this is\nspecified, the result of this bind is the first argument to <code>get</code>. If not given,\nthen <code>get</code> receives a getter function that can retrieve bind expressions. For details on what can\nbe specified for this property see <code>Ext.app.ViewModel.bind</code>.</p>",
                "default": null
            },
            {
                "name": "get",
                "type": "function",
                "doc": "<p>The function to call to calculate the formula's value. The <code>get</code> method executes\nwith a <code>this</code> pointer of the <code>ViewModel</code> and receives a getter function or the result of a configured <code>bind</code>.</p>",
                "default": null
            },
            {
                "name": "set",
                "type": "function",
                "doc": "<p>If provided this method allows a formula to be set. This method is typically called\nwhen <code>Ext.app.bind.Binding.setValue</code> is called. The <code>set</code> method executes\nwith a <code>this</code> pointer of the <code>ViewModel</code>. Whatever values need to be updated can\nbe set by calling <code>Ext.app.ViewModel.set</code>.</p>",
                "default": null
            },
            {
                "name": "single",
                "type": "boolean",
                "doc": "<p>This option instructs the binding to call its <code>destroy</code> method immediately after\ndelivering the initial value.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.app.bind.LinkStub": {
        "type": "Ext.app.bind.LinkStub",
        "doc": "<p>This class manages stubs associated with <code>link</code> requests. These bind to some other\ndescriptor and forward changes from there.</p>",
        "configs": [],
        "events": []
    },
    "Ext.app.bind.Multi": {
        "type": "Ext.app.bind.Multi",
        "doc": "<p>This class is created to manage a multi-bind against a <code>ViewModel</code>.</p>",
        "configs": [
            {
                "name": "trackStatics",
                "type": "boolean",
                "doc": "<p>This option tracks for static branches of the root object which can be pruned using\npruneStaticKeys. This can be useful to only get the dynamic parts of a multi bind:</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.app.bind.RootStub": {
        "type": "Ext.app.bind.RootStub",
        "doc": "<p>This class is the root stub for managing a <code>ViewModel</code>.</p>",
        "configs": [],
        "events": []
    },
    "Ext.app.bind.Stub": {
        "type": "Ext.app.bind.Stub",
        "doc": "<p>This class and its derived classes are used to manage access to the properties of an\nobject stored in a <code>Session</code>.</p>",
        "configs": [],
        "events": []
    },
    "Ext.app.bind.Template": {
        "type": "Ext.app.bind.Template",
        "doc": "<p>This class holds the parsed text for a bind template. The syntax is that of a normal\n<code>Ext.Template</code> except that substitution tokens can contain dots to reference property\nnames.</p>",
        "configs": [],
        "events": []
    },
    "Ext.app.bind.TemplateBinding": {
        "type": "Ext.app.bind.TemplateBinding",
        "doc": "<p>This class is created to manage a template against a <code>ViewModel</code>. A binding of this\ntype uses <code>Ext.app.bind.Template</code> to process the template text so see that\nclass for details on template syntax.</p>",
        "configs": [],
        "events": []
    },
    "Ext.app.Controller": {
        "type": "Ext.app.Controller",
        "doc": "<p>Controllers are the glue that binds an application together. That said, their main\npurpose is to listen for events (usually from views) and take some action. Here's how\nwe might create a Controller to manage Users:</p>",
        "configs": [
            {
                "name": "active",
                "type": "boolean",
                "doc": "\n",
                "default": "true"
            },
            {
                "name": "application",
                "type": "ext.app.application",
                "doc": "<p>The Ext.app.Application for this controller accessible via the getApplication method.</p>",
                "default": null
            },
            {
                "name": "models",
                "type": "string/string[]",
                "doc": "<p>Array of models to require from AppName.model namespace. For example:</p>",
                "default": null
            },
            {
                "name": "moduleClassName",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "refs",
                "type": "object/object[]",
                "doc": "<p>The refs config creates a getter method on the controller that internally\nuses Ext.ComponentQuery to fetch the component instance using the configured\nselector.  The following example will add the <code>getList</code> method to\nthe controller and will return the first component in the application\nhierarchy with an xtype of \"grid\".  By default, <em>undefined</em> will be returned\nwhen the query does not locate the target component.</p>",
                "default": null
            },
            {
                "name": "stores",
                "type": "string/string[]",
                "doc": "<p>Array of stores to require from AppName.store namespace and to generate getter methods for.\nFor example:</p>",
                "default": null
            },
            {
                "name": "views",
                "type": "string/string[]",
                "doc": "<p>Array of views to require from AppName.view namespace and to generate getter methods for.\nFor example:</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.app.domain.Component": {
        "type": "Ext.app.domain.Component",
        "doc": "<p>This class implements the component event domain. All classes extending from\nExt.Component are included in this domain. The matching criteria uses\nExt.ComponentQuery.</p>",
        "configs": [],
        "events": []
    },
    "Ext.app.domain.Controller": {
        "type": "Ext.app.domain.Controller",
        "doc": "<p>This class implements the controller event domain. All classes extending from\nExt.app.Controller are included in this domain. The selectors are simply id,\nalias, or the wildcard \"*\" to match any controller.</p>",
        "configs": [],
        "events": []
    },
    "Ext.app.domain.Direct": {
        "type": "Ext.app.domain.Direct",
        "doc": "<p>This class implements the Ext Direct event domain. All classes extending from\nExt.direct.Provider are included in this domain. The selectors are simply provider\nid's or the wildcard \"*\" to match any provider.</p>",
        "configs": [
            {
                "name": "idProperty",
                "type": "string",
                "doc": "<p>Name of the identifier property for this event domain.</p>",
                "default": "'id'"
            }
        ],
        "events": []
    },
    "Ext.app.domain.Global": {
        "type": "Ext.app.domain.Global",
        "doc": "<p>This class implements the global event domain. This domain represents event fired from\nExt.GlobalEvents Observable instance. No selectors are supported for this domain.</p>",
        "configs": [],
        "events": []
    },
    "Ext.app.domain.Store": {
        "type": "Ext.app.domain.Store",
        "doc": "<p>This class implements the data store event domain. All classes extending from\nExt.data.AbstractStore are included in this domain. The selectors are simply\nstore id, alias or the wildcard \"*\" to match any store.</p>",
        "configs": [],
        "events": []
    },
    "Ext.app.domain.View": {
        "type": "Ext.app.domain.View",
        "configs": [],
        "events": []
    },
    "Ext.app.EventBus": {
        "type": "Ext.app.EventBus",
        "doc": "<p>This class manages event dispatching for Controllers. The details of connecting classes\nto this dispatching mechanism is delegated to Ext.app.EventDomain instances.</p>",
        "configs": [],
        "events": []
    },
    "Ext.app.EventDomain": {
        "type": "Ext.app.EventDomain",
        "doc": "<p>This class is a base class for an event domain. In the context of MVC, an \"event domain\"\nis one or more base classes that fire events to which a Controller wants to listen. A\ncontroller listens to events by describing the selectors for events of interest to it.</p>",
        "configs": [
            {
                "name": "idProperty",
                "type": "string",
                "doc": "<p>Name of the identifier property for this event domain.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.app.Profile": {
        "type": "Ext.app.Profile",
        "doc": "<p>A Profile represents a range of devices that fall under a common category. For the vast majority of apps that use\ndevice profiles, the app defines a Phone profile and a Tablet profile. Doing this enables you to easily customize\nthe experience for the different sized screens offered by those device types.</p>",
        "configs": [
            {
                "name": "application",
                "type": "ext.app.application",
                "doc": "<p>The Application instance to which this Profile is\nbound. This is set automatically.</p>",
                "default": null
            },
            {
                "name": "controllers",
                "type": "string[]",
                "doc": "<p>Any additional Controllers to load for this profile.\nNote that each item here will be prepended with the Profile namespace when loaded.</p>",
                "default": "[]"
            },
            {
                "name": "mainView",
                "type": "string",
                "doc": "\n",
                "default": "{$value: null, lazy: true}"
            },
            {
                "name": "models",
                "type": "string[]",
                "doc": "<p>Any additional Models to load for this profile.\nNote that each item here will be prepended with the Profile namespace when loaded.</p>",
                "default": "[]"
            },
            {
                "name": "name",
                "type": "string",
                "doc": "<p>The name of this Profile. Defaults to the last section of the class name (e.g. a profile\ncalled MyApp.profile.Phone will default the name to 'Phone').</p>",
                "default": null
            },
            {
                "name": "namespace",
                "type": "string",
                "doc": "<p>The namespace that this Profile's classes can be found in. Defaults to the lowercase\nProfile name, for example a Profile called MyApp.profile.Phone will by default have a 'phone'\nnamespace, which means that this Profile's additional models, stores, views and controllers will be loaded\nfrom the MyApp.model.phone.<em>, MyApp.store.phone.</em>, MyApp.view.phone.<em> and MyApp.controller.phone.</em> namespaces\nrespectively.</p>",
                "default": null
            },
            {
                "name": "stores",
                "type": "string[]",
                "doc": "<p>Any additional Stores to load for this profile.\nNote that each item here will be prepended with the Profile namespace when loaded.</p>",
                "default": "[]"
            },
            {
                "name": "views",
                "type": "object/string[]",
                "doc": "<p>This config allows the active profile to define a set of <code>xtypes</code> and map them\nto desired classes and default configurations. Normally an <code>xtype</code> is statically\ndeclared by a component in its class definition. This\nmechanism allows the active profile to control a set of these types.</p>",
                "default": "[]"
            }
        ],
        "events": []
    },
    "Ext.app.route.Queue": {
        "type": "Ext.app.route.Queue",
        "doc": "<p>A Queue is a queue of Ext.app.route.Route instances managed by the\nExt.app.route.Router singleton if queueActions is set to <code>true</code>.</p>",
        "configs": [],
        "events": []
    },
    "Ext.app.route.Route": {
        "type": "Ext.app.route.Route",
        "doc": "<p>Represents a mapping between a url and a controller/action pair. May also contain\nadditional params.</p>",
        "configs": [
            {
                "name": "action",
                "type": "string",
                "doc": "<p>The name of the action that will be called on the\ncontroller if this route is matched.</p>",
                "default": null
            },
            {
                "name": "allowInactive",
                "type": "boolean",
                "doc": "<p><code>true</code> to allow this route to be triggered on\na controller that is not active.</p>",
                "default": "false"
            },
            {
                "name": "before",
                "type": "function",
                "doc": "<p>An optional function used to intercept action\nto do perform additional tasks and possibly stop the execution. An example is if the route is\nfor editing a user and you need to verify the current user has permission. You could\nsend an Ext.Ajax request to a server or some arbitrary code.</p>",
                "default": null
            },
            {
                "name": "caseInsensitive",
                "type": "boolean",
                "doc": "<p><code>true</code> to allow the tokens to be matched with\ncase-insensitive. Defaults to <code>false</code> which will force case matching.</p>",
                "default": "false"
            },
            {
                "name": "conditions",
                "type": "object",
                "doc": "<p>Optional set of conditions for each token in the url\nstring. Each key should be one of the tokens, each value should be a regex that the\ntoken should accept. For example, if you have a Route with a url like\n<code>\"files/:fileName\"</code> and you want it to match urls like \"files/someImage.jpg\" then\nyou can set these conditions to allow the :fileName token to accept strings\ncontaining a period (\".\"):</p>",
                "default": null
            },
            {
                "name": "controller",
                "type": "string",
                "doc": "<p>The name of the Controller whose action will be\ncalled if this route is matched.</p>",
                "default": null
            },
            {
                "name": "url",
                "type": "string",
                "doc": "<p>The url regex to match against.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.app.route.Router": {
        "type": "Ext.app.route.Router",
        "doc": "<p>The Router is an ordered set of Ext.app.route.Route definitions that decode a\nurl into a controller function to execute. Each <code>route</code> defines a type of url to match,\nalong with the controller function to call if it is matched. The Router uses the\nExt.util.History singleton to find out when the browser's url has changed.</p>",
        "configs": [],
        "events": []
    },
    "Ext.app.Util": {
        "type": "Ext.app.Util",
        "configs": [],
        "events": []
    },
    "Ext.app.ViewController": {
        "type": "Ext.app.ViewController",
        "doc": "<p>A view controller is a controller that can be attached to a specific view\ninstance so it can manage the view and its child components. Each instance of the view\nwill have a new view controller, so the instances are isolated.</p>",
        "configs": [
            {
                "name": "closeViewAction",
                "type": "string",
                "doc": "\n",
                "default": "'destroy'"
            }
        ],
        "events": []
    },
    "Ext.app.ViewModel": {
        "type": "Ext.app.ViewModel",
        "doc": "<p>This class manages arbitrary data and its relationship to data models. Instances of\n<code>ViewModel</code> are associated with some <code>Component</code> and then used by their child items\nfor the purposes of Data Binding.</p>",
        "configs": [
            {
                "name": "data",
                "type": "object",
                "doc": "<p>This object holds the arbitrary data that populates the <code>ViewModel</code> and is\nthen available for binding.</p>",
                "default": "true"
            },
            {
                "name": "formulas",
                "type": "object",
                "doc": "<p>An object that defines named values whose value is managed by function calls.\nThe names of the properties of this object are assigned as values in the\nViewModel.</p>",
                "default": null
            },
            {
                "name": "links",
                "type": "object",
                "doc": "<p>Links provide a way to assign a simple name to a more complex bind. The primary\nuse for this is to assign names to records in the data model.</p>",
                "default": null
            },
            {
                "name": "parent",
                "type": "ext.app.viewmodel",
                "doc": "<p>The parent <code>ViewModel</code> of this <code>ViewModel</code>. Once set, this cannot be changed.</p>",
                "default": null
            },
            {
                "name": "root",
                "type": "ext.app.bind.rootstub",
                "doc": "<p>A reference to the root \"stub\" (an object that manages bindings).</p>",
                "default": "true"
            },
            {
                "name": "scheduler",
                "type": "ext.util.scheduler",
                "doc": "<p>The scheduler used to schedule and manage the delivery of notifications for\nall connections to this <code>ViewModel</code> and any other attached to it. The normal\nprocess to initialize the <code>scheduler</code> is to get the scheduler used by the\n<code>parent</code> or <code>session</code> and failing either of those, create one.</p>",
                "default": null
            },
            {
                "name": "schema",
                "type": "string/ext.data.schema.schema",
                "doc": "<p>The schema to use for getting information about entities.</p>",
                "default": "'default'"
            },
            {
                "name": "session",
                "type": "ext.data.session",
                "doc": "<p>The session used to manage the data model (records and stores).</p>",
                "default": null
            },
            {
                "name": "stores",
                "type": "object",
                "doc": "<p>A declaration of <code>Ext.data.Store</code> configurations that are first processed as\nbinds to produce an effective store configuration.</p>",
                "default": null
            },
            {
                "name": "view",
                "type": "ext.container.container",
                "doc": "<p>The Container that owns this <code>ViewModel</code> instance.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.Array": {
        "type": "Ext.Array",
        "doc": "<p>A set of useful static methods to deal with arrays; provide missing methods for\nolder browsers.</p>",
        "configs": [],
        "events": []
    },
    "Ext.Assert": {
        "type": "Ext.Assert",
        "doc": "<p>This class provides help value testing methods useful for diagnostics. These are often\nused in <code>debugHooks</code>:</p>",
        "configs": [],
        "events": []
    },
    "Ext.Audio": {
        "type": "Ext.Audio",
        "doc": "<p>Ext.Audio is a simple class which provides a container for the\nHTML5 Audio element.</p>",
        "configs": [
            {
                "name": "cls",
                "type": "string/string[]",
                "doc": "<p>The CSS class to add to this component's element, in\naddition to the baseCls. In many cases, this property will be specified\nby the derived component class. See userCls for adding additional CSS\nclasses to component instances (such as items in a Ext.Container).</p>",
                "default": "Ext.baseCSSPrefix + 'audio'"
            },
            {
                "name": "url",
                "type": "string",
                "doc": "<p>The location of the audio to play.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.Base": {
        "type": "Ext.Base",
        "doc": "<p>The root of all classes created with Ext.define.</p>",
        "configs": [],
        "events": []
    },
    "Ext.behavior.Behavior": {
        "type": "Ext.behavior.Behavior",
        "configs": [],
        "events": []
    },
    "Ext.behavior.Draggable": {
        "type": "Ext.behavior.Draggable",
        "configs": [],
        "events": []
    },
    "Ext.behavior.Translatable": {
        "type": "Ext.behavior.Translatable",
        "configs": [],
        "events": []
    },
    "Ext.BingMap": {
        "type": "Ext.BingMap",
        "configs": [],
        "events": []
    },
    "Ext.browser": {
        "type": "Ext.browser",
        "doc": "<p>Provides useful information about the current browser.</p>",
        "configs": [],
        "events": []
    },
    "Ext.Button": {
        "type": "Ext.Button",
        "doc": "<p>A simple class to display a button.</p>",
        "configs": [
            {
                "name": "autoEvent",
                "type": "string",
                "doc": "<p>Optional event name that will be fired instead of <code>tap</code> when the Button is tapped on.</p>",
                "default": null
            },
            {
                "name": "badgeCls",
                "type": "string",
                "doc": "<p>The CSS class to add to the Button's badge, if it has one.  Badges appear as small numbers, letters, or icons that sit on top of your button.  For instance, a small red number indicating how many updates are available.</p>",
                "default": "Ext.baseCSSPrefix + 'badge'"
            },
            {
                "name": "badgeText",
                "type": "string",
                "doc": "<p>Optional badge text.  Badges appear as small numbers, letters, or icons that sit on top of your button.  For instance, a small red number indicating how many updates are available.</p>",
                "default": null
            },
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to\nother elements within this component. To add specific styling for sub-classes, use the cls config.</p>",
                "default": "Ext.baseCSSPrefix + 'button'"
            },
            {
                "name": "handler",
                "type": "function",
                "doc": "<p>The handler function to run when the Button is tapped on.</p>",
                "default": null
            },
            {
                "name": "hasBadgeCls",
                "type": "string",
                "doc": "<p>The CSS class to add to the Button if it has a badge (note that this goes on the\nButton element itself, not on the badge element).</p>",
                "default": "Ext.baseCSSPrefix + 'hasbadge'"
            },
            {
                "name": "html",
                "type": "string",
                "doc": "<p>The HTML to put in this button.</p>",
                "default": null
            },
            {
                "name": "icon",
                "type": "string",
                "doc": "<p>Url to the icon image to use if you want an icon to appear on your button.</p>",
                "default": "false"
            },
            {
                "name": "iconAlign",
                "type": "string",
                "doc": "<p>The position within the Button to render the icon Options are: <code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code> and <code>center</code> (when you have\nno text set).</p>",
                "default": "'left'"
            },
            {
                "name": "iconCls",
                "type": "string",
                "doc": "<p>One or more space separated CSS classes to be applied to the icon element.<br/>\nThe CSS rule(s) applied should specify a background image to be used as the\nicon.</p>",
                "default": null
            },
            {
                "name": "labelCls",
                "type": "string",
                "doc": "<p>The CSS class to add to the field's label element.</p>",
                "default": "Ext.baseCSSPrefix + 'button-label'"
            },
            {
                "name": "pressedCls",
                "type": "string",
                "doc": "<p>The CSS class to add to the Button when it is pressed.</p>",
                "default": "Ext.baseCSSPrefix + 'button-pressing'"
            },
            {
                "name": "pressedDelay",
                "type": "number/boolean",
                "doc": "<p>The amount of delay between the <code>tapstart</code> and the moment we add the <code>pressedCls</code> (in milliseconds).\nSettings this to <code>true</code> defaults to 100ms.</p>",
                "default": "0"
            },
            {
                "name": "scope",
                "type": "object",
                "doc": "<p>The scope to fire the configured handler in.</p>",
                "default": null
            },
            {
                "name": "text",
                "type": "string",
                "doc": "<p>The Button text.</p>",
                "default": null
            },
            {
                "name": "textAlign",
                "type": "\"left\"/\"right\"/\"center\"",
                "doc": "\n",
                "default": "\"center\""
            },
            {
                "name": "ui",
                "type": "string",
                "doc": "<p>The ui style to render this button with. The valid default options are:</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "release",
                "params": "this(Ext.Button) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires whenever the button is released.</p>"
            },
            {
                "name": "tap",
                "params": "this(Ext.Button) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires whenever a button is tapped.</p>"
            }
        ]
    },
    "Ext.carousel.Carousel": {
        "type": "Ext.carousel.Carousel",
        "doc": "<p>Carousels, like tabs, are a great way to allow the user to swipe through multiple full-screen pages.\nA Carousel shows only one of its pages at a time but allows you to swipe through with your finger.</p>",
        "configs": [
            {
                "name": "animation",
                "type": "object",
                "doc": "\n",
                "default": "{duration: 250, easing: {type: 'ease-out'}}"
            },
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to\nother elements within this component. To add specific styling for sub-classes, use the cls config.</p>",
                "default": "'x-carousel'"
            },
            {
                "name": "bufferSize",
                "type": "number",
                "doc": "\n",
                "default": "1"
            },
            {
                "name": "direction",
                "type": "string",
                "doc": "<p>The direction of the Carousel, either 'horizontal' or 'vertical'.</p>",
                "default": "'horizontal'"
            },
            {
                "name": "directionLock",
                "type": "boolean",
                "doc": "\n",
                "default": "false"
            },
            {
                "name": "indicator",
                "type": "boolean",
                "doc": "<p>Provides an indicator while toggling between child items to let the user\nknow where they are in the card stack.</p>",
                "default": "true"
            },
            {
                "name": "itemConfig",
                "type": "object",
                "doc": "\n",
                "default": "{}"
            },
            {
                "name": "itemLength",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "layout",
                "type": "object",
                "doc": "<p>Hide layout config in Carousel. It only causes confusion.</p>",
                "default": null
            },
            {
                "name": "ui",
                "type": "string",
                "doc": "<p>Style options for Carousel. Default is 'dark'. 'light' is also available.</p>",
                "default": "'dark'"
            }
        ],
        "events": []
    },
    "Ext.carousel.Indicator": {
        "type": "Ext.carousel.Indicator",
        "doc": "<p>A private utility class used by Ext.Carousel to create indicators.</p>",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to\nother elements within this component. To add specific styling for sub-classes, use the cls config.</p>",
                "default": "Ext.baseCSSPrefix + 'carousel-indicator'"
            },
            {
                "name": "direction",
                "type": "string",
                "doc": "\n",
                "default": "'horizontal'"
            }
        ],
        "events": [
            {
                "name": "next",
                "params": "this(Ext.carousel.Indicator) eOpts(Object)",
                "doc": "<p>Fires when this indicator is tapped on the right half</p>"
            },
            {
                "name": "previous",
                "params": "this(Ext.carousel.Indicator) eOpts(Object)",
                "doc": "<p>Fires when this indicator is tapped on the left half</p>"
            }
        ]
    },
    "Ext.carousel.Infinite": {
        "type": "Ext.carousel.Infinite",
        "doc": "<p>The true infinite implementation of Carousel, private for now until it's stable to be public</p>",
        "configs": [
            {
                "name": "indicator",
                "type": "boolean",
                "doc": "<p>Provides an indicator while toggling between child items to let the user\nknow where they are in the card stack.</p>",
                "default": "true"
            },
            {
                "name": "innerItemConfig",
                "type": "object",
                "doc": "\n",
                "default": "{}"
            },
            {
                "name": "maxItemIndex",
                "type": "object",
                "doc": "\n",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.carousel.Item": {
        "type": "Ext.carousel.Item",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to\nother elements within this component. To add specific styling for sub-classes, use the cls config.</p>",
                "default": "Ext.baseCSSPrefix + 'carousel-item'"
            },
            {
                "name": "component",
                "type": "object",
                "doc": "<p>The config object to factory the Component that this Decorator wraps around</p>",
                "default": "{}"
            },
            {
                "name": "translatable",
                "type": "object",
                "doc": "\n",
                "default": "true"
            }
        ],
        "events": []
    },
    "Ext.chart.AbstractChart": {
        "type": "Ext.chart.AbstractChart",
        "doc": "<p>The Ext.chart package provides the capability to visualize data.\nEach chart binds directly to a store enabling automatic updates of the chart.\nA chart configuration object has some overall styling options as well as an array of axes\nand series. A chart instance example could look like this:</p>",
        "configs": [
            {
                "name": "animation",
                "type": "boolean/object",
                "doc": "<p>(optional) <code>true</code> for the default animation (easing: 'ease' and duration: 500)\nor a standard animation config object to be used for default chart animations.</p>",
                "default": null
            },
            {
                "name": "axes",
                "type": "ext.chart.axis.axis/array/object",
                "doc": "<p>Array of Axis instances or config objects. For example:</p>",
                "default": "[]"
            },
            {
                "name": "background",
                "type": "object",
                "doc": "<p>Set the chart background. This can be a gradient object, image, or color.</p>",
                "default": null
            },
            {
                "name": "colors",
                "type": "array",
                "doc": "<p>Array of colors/gradients to override the color of items and legends.</p>",
                "default": null
            },
            {
                "name": "highlightItem",
                "type": "object",
                "doc": "<p>The current highlight item in the chart.\nThe object must be the one that you get from item events.</p>",
                "default": null
            },
            {
                "name": "insetPadding",
                "type": "object|number|string",
                "doc": "<p>The amount of inset padding in pixels for the chart.\nInset padding is the padding from the boundary of the chart to any of its contents.</p>",
                "default": "{top: 10, left: 10, right: 10, bottom: 10}"
            },
            {
                "name": "interactions",
                "type": "array",
                "doc": "<p>Interactions are optional modules that can be plugged in to a chart to allow the user to interact\nwith the chart and its data in special ways. The <code>interactions</code> config takes an Array of Object\nconfigurations, each one corresponding to a particular interaction class identified by a <code>type</code> property:</p>",
                "default": "[]"
            },
            {
                "name": "legend",
                "type": "ext.chart.legend/object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "mainRect",
                "type": "object",
                "doc": "<p>The main area of the chart where grid and series are drawn.</p>",
                "default": null
            },
            {
                "name": "resizeHandler",
                "type": "object",
                "doc": "<p>Override value.</p>",
                "default": null
            },
            {
                "name": "series",
                "type": "ext.chart.series.series/array",
                "doc": "<p>Array of Series instances or config objects. For example:</p>",
                "default": "[]"
            },
            {
                "name": "store",
                "type": "ext.data.store/string/object",
                "doc": "<p>The data source to which the chart is bound. Acceptable values for this property are:</p>",
                "default": "'ext-empty-store'"
            },
            {
                "name": "style",
                "type": "object",
                "doc": "<p>The style for the chart component.</p>",
                "default": null
            },
            {
                "name": "theme",
                "type": "string",
                "doc": "<p>The name of the theme to be used. A theme defines the colors and styles\nused by the series, axes, markers and other chart components.\nPlease see the documentation for the Ext.chart.theme.Base class for more information.\nPossible theme values are:\n  - 'green', 'sky', 'red', 'purple', 'blue', 'yellow'\n  - 'category1' to 'category6'\n  - and the above theme names with the '-gradients' suffix, e.g. 'green-gradients'</p>",
                "default": "\"default\""
            }
        ],
        "events": [
            {
                "name": "beforerefresh",
                "params": "this(Ext.chart.AbstractChart) eOpts(Object)",
                "doc": "<p>Fires before a refresh to the chart data is called.  If the <code>beforerefresh</code> handler returns\n<code>false</code> the refresh action will be canceled.</p>"
            },
            {
                "name": "itemclick",
                "params": "chart(Ext.chart.AbstractChart) item(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when a click event occurs on a series item.\n<em>Note</em>: This event requires the chartitemevents\nplugin be added to the chart.</p>"
            },
            {
                "name": "itemdblclick",
                "params": "chart(Ext.chart.AbstractChart) item(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when a double click event occurs on a series item.\n<em>Note</em>: This event requires the chartitemevents\nplugin be added to the chart.</p>"
            },
            {
                "name": "itemmousedown",
                "params": "chart(Ext.chart.AbstractChart) item(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when a mousedown event occurs on a series item.\n<em>Note</em>: This event requires the chartitemevents\nplugin be added to the chart.</p>"
            },
            {
                "name": "itemmousemove",
                "params": "chart(Ext.chart.AbstractChart) item(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when the mouse is moved on a series item.\n<em>Note</em>: This event requires the chartitemevents\nplugin be added to the chart.</p>"
            },
            {
                "name": "itemmouseout",
                "params": "chart(Ext.chart.AbstractChart) item(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when the mouse exits a series item.\n<em>Note</em>: This event requires the chartitemevents\nplugin be added to the chart.</p>"
            },
            {
                "name": "itemmouseover",
                "params": "chart(Ext.chart.AbstractChart) item(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when the mouse enters a series item.\n<em>Note</em>: This event requires the chartitemevents\nplugin be added to the chart.</p>"
            },
            {
                "name": "itemmouseup",
                "params": "chart(Ext.chart.AbstractChart) item(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when a mouseup event occurs on a series item.\n<em>Note</em>: This event requires the chartitemevents\nplugin be added to the chart.</p>"
            },
            {
                "name": "itemtap",
                "params": "chart(Ext.chart.AbstractChart) item(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when a tap event occurs on a series item.\n<em>Note</em>: This event requires the chartitemevents\nplugin be added to the chart.</p>"
            },
            {
                "name": "redraw",
                "params": "this(Ext.chart.AbstractChart) eOpts(Object)",
                "doc": "<p>Fires after the chart is redrawn.</p>"
            },
            {
                "name": "refresh",
                "params": "this(Ext.chart.AbstractChart) eOpts(Object)",
                "doc": "<p>Fires after the chart data has been refreshed.</p>"
            },
            {
                "name": "storechange",
                "params": "chart(Ext.chart.AbstractChart) newStore(Ext.data.Store) oldStore(Ext.data.Store) eOpts(Object)",
                "doc": "<p>Fires when the store of the chart changes.</p>"
            }
        ]
    },
    "Ext.chart.axis.Axis": {
        "type": "Ext.chart.axis.Axis",
        "doc": "<p>Defines axis for charts.</p>",
        "configs": [
            {
                "name": "adjustByMajorUnit",
                "type": "boolean",
                "doc": "<p>Whether to make the auto-calculated minimum and maximum of the axis\na multiple of the interval between the major ticks of the axis.\nIf majorTickSteps, minimum or maximum\nconfigs have been set, this config will be ignored.\nDefaults to 'true'.</p>",
                "default": "true"
            },
            {
                "name": "background",
                "type": "object",
                "doc": "<p>The background config for the axis surface.</p>",
                "default": null
            },
            {
                "name": "center",
                "type": "array",
                "doc": "<p>Center of the polar axis.\nWARNING: Meant to be set automatically by chart. Do not set it manually.</p>",
                "default": null
            },
            {
                "name": "chart",
                "type": "ext.chart.abstractchart",
                "doc": "<p>The Chart that the Axis is bound.</p>",
                "default": null
            },
            {
                "name": "fields",
                "type": "array",
                "doc": "<p>An array containing the names of the record fields which should be mapped along the axis.\nThis is optional if the binding between series and fields is clear.</p>",
                "default": "[]"
            },
            {
                "name": "floating",
                "type": "number|object",
                "doc": "<p>If <code>floating</code> is a number, then it's a percentage displacement of the axis from its initial position\nin the direction opposite to the axis' direction. For instance, '{position:\"left\", floating:75}' displays a vertical\naxis at 3/4 of the chart, starting from the left. It is equivalent to '{position:\"right\", floating:25}'.\nIf <code>floating</code> is an object, then <code>floating.value</code> is the position of this axis along another axis,\ndefined by <code>floating.alongAxis</code>, where <code>alongAxis</code> is an ID, an Ext.chart.AbstractChart.axes config index,\nor the other axis itself. <code>alongAxis</code> must have an opposite alignment.\nFor example:</p>",
                "default": null
            },
            {
                "name": "grid",
                "type": "object",
                "doc": "<p>The grid configuration object for the Axis style. Can contain <code>stroke</code> or <code>fill</code> attributes.\nAlso may contain an <code>odd</code> or <code>even</code> property in which you only style things on odd or even rows.\nFor example:</p>",
                "default": "false"
            },
            {
                "name": "hidden",
                "type": "boolean",
                "doc": "<p>Indicate whether to hide the axis.\nIf the axis is hidden, one of the axis line, ticks, labels or the title will be shown and\nno margin will be taken.\nThe coordination mechanism works fine no matter if the axis is hidden.</p>",
                "default": "false"
            },
            {
                "name": "increment",
                "type": "number",
                "doc": "<p>Given a minimum and maximum bound for the series to be rendered (that can be obtained\nautomatically or by manually setting <code>minimum</code> and <code>maximum</code>) tick marks will be added\non each <code>increment</code> from the minimum value to the maximum one.</p>",
                "default": "0.5"
            },
            {
                "name": "label",
                "type": "object",
                "doc": "<p>The label configuration object for the Axis. This object may include style attributes\nlike <code>spacing</code>, <code>padding</code>, <code>font</code> that receives a string or number and\nreturns a new string with the modified values.</p>",
                "default": null
            },
            {
                "name": "labelInSpan",
                "type": "boolean",
                "doc": "<p>Draws the labels in the middle of the spans.</p>",
                "default": null
            },
            {
                "name": "layout",
                "type": "object|ext.chart.axis.layout.layout",
                "doc": "<p>The axis layout config. See Ext.chart.axis.layout.Layout</p>",
                "default": "'continuous'"
            },
            {
                "name": "length",
                "type": "number",
                "doc": "<p>Length of the axis position. Equals to the size of inner rect on the docking side of this axis.\nWARNING: Meant to be set automatically by chart. Do not set it manually.</p>",
                "default": "0"
            },
            {
                "name": "limits",
                "type": "array|object",
                "doc": "<p>The limit lines configuration for the axis.\nFor example:</p>",
                "default": null
            },
            {
                "name": "linkedTo",
                "type": "ext.chart.axis.axis|string|number",
                "doc": "<p>Axis (itself, its ID or index) that this axis is linked to.\nWhen an axis is linked to a master axis, it will use the same data as the master axis.\nIt can be used to show additional info, or to ease reading the chart by duplicating the scales.</p>",
                "default": null
            },
            {
                "name": "majorTickSteps",
                "type": "number",
                "doc": "<p>Forces the number of major ticks to the specified value.</p>",
                "default": "0"
            },
            {
                "name": "margin",
                "type": "number",
                "doc": "<p>The margin of the axis. Used to control the spacing between axes in charts with multiple axes.\nUnlike CSS where the margin is added on all 4 sides of an element, the <code>margin</code> is the total space\nthat is added horizontally for a vertical axis, vertically for a horizontal axis,\nand radially for an angular axis.</p>",
                "default": "0"
            },
            {
                "name": "maxZoom",
                "type": "number",
                "doc": "<p>The maximum zooming level for axis.</p>",
                "default": "10000"
            },
            {
                "name": "maximum",
                "type": "number",
                "doc": "<p>The maximum value drawn by the axis. If not set explicitly, the axis\nmaximum will be calculated automatically.</p>",
                "default": null
            },
            {
                "name": "minZoom",
                "type": "number",
                "doc": "<p>The minimum zooming level for axis.</p>",
                "default": "1"
            },
            {
                "name": "minimum",
                "type": "number",
                "doc": "<p>The minimum value drawn by the axis. If not set explicitly, the axis\nminimum will be calculated automatically.</p>",
                "default": null
            },
            {
                "name": "minorTickSteps",
                "type": "number",
                "doc": "<p>The number of small ticks between two major ticks.</p>",
                "default": "0"
            },
            {
                "name": "needHighPrecision",
                "type": "boolean",
                "doc": "<p>Indicates that the axis needs high precision surface implementation.\nSee Ext.draw.engine.Canvas.highPrecision</p>",
                "default": "false"
            },
            {
                "name": "position",
                "type": "string",
                "doc": "<p>Where to set the axis. Available options are <code>left</code>, <code>bottom</code>, <code>right</code>, <code>top</code>, <code>radial</code> and <code>angular</code>.</p>",
                "default": "'bottom'"
            },
            {
                "name": "radius",
                "type": "number",
                "doc": "<p>Radius of the polar axis.\nWARNING: Meant to be set automatically by chart. Do not set it manually.</p>",
                "default": null
            },
            {
                "name": "reconcileRange",
                "type": "boolean",
                "doc": "<p>If 'true' the range of the axis will be a union of ranges\nof all the axes with the same direction. Defaults to 'false'.</p>",
                "default": "false"
            },
            {
                "name": "renderer",
                "type": "function",
                "doc": "<p>Allows to change the text shown next to the tick.</p>",
                "default": null
            },
            {
                "name": "rotation",
                "type": "number",
                "doc": "<p>Rotation of the polar axis.\nWARNING: Meant to be set automatically by chart. Do not set it manually.</p>",
                "default": null
            },
            {
                "name": "segmenter",
                "type": "object|ext.chart.axis.segmenter.segmenter",
                "doc": "<p>The segmenter config. See Ext.chart.axis.segmenter.Segmenter</p>",
                "default": "'numeric'"
            },
            {
                "name": "style",
                "type": "object",
                "doc": "<p>The style for the axis line and ticks.\nRefer to the Ext.chart.axis.sprite.Axis</p>",
                "default": null
            },
            {
                "name": "title",
                "type": "string|object",
                "doc": "<p>The title for the Axis.\nIf given a String, the 'text' attribute of the title sprite will be set,\notherwise the style will be set.</p>",
                "default": null
            },
            {
                "name": "titleMargin",
                "type": "number",
                "doc": "<p>The margin around the axis title. Unlike CSS where the margin is added on all 4\nsides of an element, the <code>titleMargin</code> is the total space that is added horizontally\nfor a vertical title and vertically for an horizontal title, with half the <code>titleMargin</code>\nbeing added on either side.</p>",
                "default": "4"
            },
            {
                "name": "totalAngle",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "visibleRange",
                "type": "array",
                "doc": "<p>Specify the proportion of the axis to be rendered. The series bound to\nthis axis will be synchronized and transformed accordingly.</p>",
                "default": "[0, 1]"
            }
        ],
        "events": [
            {
                "name": "rangechange",
                "params": "axis(Ext.chart.axis.Axis) range(Array) eOpts(Object)",
                "doc": "<p>Fires when the range of the axis  changes.</p>"
            },
            {
                "name": "visiblerangechange",
                "params": "axis(Ext.chart.axis.Axis) visibleRange(Array) eOpts(Object)",
                "doc": "<p>Fires when the visibleRange of the axis changes.</p>"
            }
        ]
    },
    "Ext.chart.axis.Axis3D": {
        "type": "Ext.chart.axis.Axis3D",
        "doc": "<p>Defines a 3D axis for charts.</p>",
        "configs": [
            {
                "name": "depth",
                "type": "number",
                "doc": "<p>The depth of the axis. Determined automatically.</p>",
                "default": "0"
            },
            {
                "name": "position",
                "type": "string",
                "doc": "<p>Where to set the axis. Available options are <code>left</code> and <code>bottom</code>.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.chart.axis.Category": {
        "type": "Ext.chart.axis.Category",
        "doc": "<p>A type of axis that displays items in categories. This axis is generally used to\ndisplay categorical information like names of items, month names, quarters, etc.\nbut no quantitative values. For that other type of information Numeric\naxis are more suitable.</p>",
        "configs": [
            {
                "name": "layout",
                "type": "object|ext.chart.axis.layout.layout",
                "doc": "<p>The axis layout config. See Ext.chart.axis.layout.Layout</p>",
                "default": "'combineDuplicate'"
            },
            {
                "name": "segmenter",
                "type": "object|ext.chart.axis.segmenter.segmenter",
                "doc": "<p>The segmenter config. See Ext.chart.axis.segmenter.Segmenter</p>",
                "default": "'names'"
            }
        ],
        "events": []
    },
    "Ext.chart.axis.Category3D": {
        "type": "Ext.chart.axis.Category3D",
        "doc": "<p>Category 3D Axis</p>",
        "configs": [
            {
                "name": "layout",
                "type": "object|ext.chart.axis.layout.layout",
                "doc": "<p>The axis layout config. See Ext.chart.axis.layout.Layout</p>",
                "default": "'combineDuplicate'"
            },
            {
                "name": "segmenter",
                "type": "object|ext.chart.axis.segmenter.segmenter",
                "doc": "<p>The segmenter config. See Ext.chart.axis.segmenter.Segmenter</p>",
                "default": "'names'"
            }
        ],
        "events": []
    },
    "Ext.chart.axis.layout.CombineDuplicate": {
        "type": "Ext.chart.axis.layout.CombineDuplicate",
        "doc": "<p>Discrete processor that combines duplicate data points.</p>",
        "configs": [],
        "events": []
    },
    "Ext.chart.axis.layout.Continuous": {
        "type": "Ext.chart.axis.layout.Continuous",
        "doc": "<p>Processor for axis data that can be interpolated.</p>",
        "configs": [
            {
                "name": "adjustMaximumByMajorUnit",
                "type": "boolean",
                "doc": "\n",
                "default": "false"
            },
            {
                "name": "adjustMinimumByMajorUnit",
                "type": "boolean",
                "doc": "\n",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.chart.axis.layout.Discrete": {
        "type": "Ext.chart.axis.layout.Discrete",
        "doc": "<p>Simple processor for data that cannot be interpolated.</p>",
        "configs": [],
        "events": []
    },
    "Ext.chart.axis.layout.Layout": {
        "type": "Ext.chart.axis.layout.Layout",
        "doc": "<p>Interface used by Axis to process its data into a meaningful layout.</p>",
        "configs": [
            {
                "name": "axis",
                "type": "ext.chart.axis.axis",
                "doc": "<p>The axis that the Layout is bound.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.chart.axis.Numeric": {
        "type": "Ext.chart.axis.Numeric",
        "doc": "<p>An axis to handle numeric values. This axis is used for quantitative data as\nopposed to the category axis. You can set minimum and maximum values to the\naxis so that the values are bound to that. If no values are set, then the\nscale will auto-adjust to the values.</p>",
        "configs": [
            {
                "name": "aggregator",
                "type": "string",
                "doc": "\n",
                "default": "'double'"
            },
            {
                "name": "layout",
                "type": "object|ext.chart.axis.layout.layout",
                "doc": "<p>The axis layout config. See Ext.chart.axis.layout.Layout</p>",
                "default": "'continuous'"
            },
            {
                "name": "segmenter",
                "type": "object|ext.chart.axis.segmenter.segmenter",
                "doc": "<p>The segmenter config. See Ext.chart.axis.segmenter.Segmenter</p>",
                "default": "'numeric'"
            }
        ],
        "events": []
    },
    "Ext.chart.axis.Numeric3D": {
        "type": "Ext.chart.axis.Numeric3D",
        "configs": [
            {
                "name": "aggregator",
                "type": "string",
                "doc": "\n",
                "default": "'double'"
            },
            {
                "name": "layout",
                "type": "object|ext.chart.axis.layout.layout",
                "doc": "<p>The axis layout config. See Ext.chart.axis.layout.Layout</p>",
                "default": "'continuous'"
            },
            {
                "name": "segmenter",
                "type": "object|ext.chart.axis.segmenter.segmenter",
                "doc": "<p>The segmenter config. See Ext.chart.axis.segmenter.Segmenter</p>",
                "default": "'numeric'"
            }
        ],
        "events": []
    },
    "Ext.chart.axis.segmenter.Names": {
        "type": "Ext.chart.axis.segmenter.Names",
        "doc": "<p>Names data type. Names will be calculated as their indices in the methods in this class.\nThe <code>preferredStep</code> always return <code>{ unit: 1, step: 1 }</code> to indicate \"show every item\".</p>",
        "configs": [],
        "events": []
    },
    "Ext.chart.axis.segmenter.Numeric": {
        "type": "Ext.chart.axis.segmenter.Numeric",
        "doc": "<p>Numeric data type.</p>",
        "configs": [],
        "events": []
    },
    "Ext.chart.axis.segmenter.Segmenter": {
        "type": "Ext.chart.axis.segmenter.Segmenter",
        "doc": "<p>Interface for a segmenter in an Axis. A segmenter defines the operations you can do to a specific\ndata type.</p>",
        "configs": [
            {
                "name": "axis",
                "type": "ext.chart.axis.axis",
                "doc": "<p>The axis that the Segmenter is bound.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.chart.axis.segmenter.Time": {
        "type": "Ext.chart.axis.segmenter.Time",
        "doc": "<p>Time data type.</p>",
        "configs": [
            {
                "name": "step",
                "type": "object",
                "doc": "<p>If specified, the will override the result of preferredStep.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.chart.axis.sprite.Axis": {
        "type": "Ext.chart.axis.sprite.Axis",
        "doc": "<p>The axis sprite. Currently all types of the axis will be rendered with this sprite.</p>",
        "configs": [
            {
                "name": "axis",
                "type": "ext.chart.axis.axis",
                "doc": "<p>The axis represented by this sprite.</p>",
                "default": null
            },
            {
                "name": "axisLine",
                "type": "boolean",
                "doc": "<p>'true' if the main line of the axis is drawn.</p>",
                "default": "'bool'"
            },
            {
                "name": "baseRotation",
                "type": "number",
                "doc": "<p>The starting rotation of the angular axis.</p>",
                "default": "'number'"
            },
            {
                "name": "centerX",
                "type": "number",
                "doc": "<p>The central point of the angular axis on the x-axis.</p>",
                "default": "'number'"
            },
            {
                "name": "centerY",
                "type": "number",
                "doc": "<p>The central point of the angular axis on the y-axis.</p>",
                "default": "'number'"
            },
            {
                "name": "dataMax",
                "type": "number",
                "doc": "<p>The maximum value of the axis data.</p>",
                "default": "'number'"
            },
            {
                "name": "dataMin",
                "type": "number",
                "doc": "<p>The minimum value of the axis data.</p>",
                "default": "'number'"
            },
            {
                "name": "endGap",
                "type": "number",
                "doc": "<p>Axis end determined by the chart inset padding.</p>",
                "default": "'number'"
            },
            {
                "name": "enlargeEstStepSizeByText",
                "type": "boolean",
                "doc": "<p>'true' if the estimated step size is adjusted by text size.</p>",
                "default": "'bool'"
            },
            {
                "name": "estStepSize",
                "type": "number",
                "doc": "<p>The estimated step size between ticks.</p>",
                "default": "'number'"
            },
            {
                "name": "grid",
                "type": "boolean",
                "doc": "<p>'true' if the axis has a grid.</p>",
                "default": "'bool'"
            },
            {
                "name": "label",
                "type": "object",
                "doc": "<p>The label configuration object for the Axis. This object may include style attributes\nlike <code>spacing</code>, <code>padding</code>, <code>font</code> that receives a string or number and\nreturns a new string with the modified values.</p>",
                "default": null
            },
            {
                "name": "layout",
                "type": "object|ext.chart.axis.layout.layout",
                "doc": "<p>The layout configuration used by the axis.</p>",
                "default": null
            },
            {
                "name": "layoutContext",
                "type": "object",
                "doc": "<p>Stores the context after calculating layout.</p>",
                "default": null
            },
            {
                "name": "length",
                "type": "number",
                "doc": "<p>The total length of the axis.</p>",
                "default": "'number'"
            },
            {
                "name": "majorTickSize",
                "type": "number",
                "doc": "<p>The length of the major ticks.</p>",
                "default": "'number'"
            },
            {
                "name": "majorTicks",
                "type": "boolean",
                "doc": "<p>'true' if the axis has major ticks.</p>",
                "default": "'bool'"
            },
            {
                "name": "max",
                "type": "number",
                "doc": "<p>The maximum value of the axis.</p>",
                "default": "'number'"
            },
            {
                "name": "min",
                "type": "number",
                "doc": "<p>The minimum value of the axis.</p>",
                "default": "'number'"
            },
            {
                "name": "minStepSize",
                "type": "number",
                "doc": "<p>The minimum step size between ticks.</p>",
                "default": "'number'"
            },
            {
                "name": "minorTickSize",
                "type": "number",
                "doc": "<p>The length of the minor ticks.</p>",
                "default": "'number'"
            },
            {
                "name": "minorTricks",
                "type": "boolean",
                "doc": "<p>'true' if the axis has sub ticks.</p>",
                "default": null
            },
            {
                "name": "position",
                "type": "string",
                "doc": "<p>The position of the axis on the chart.</p>",
                "default": "'enums(left,right,top,bottom,angular,radial,gauge)'"
            },
            {
                "name": "radius",
                "type": "number",
                "doc": "<p>Unused.</p>",
                "default": "'number'"
            },
            {
                "name": "renderer",
                "type": "function",
                "doc": "<p>Allows direct customisation of rendered axis sprites.</p>",
                "default": null
            },
            {
                "name": "segmenter",
                "type": "object|ext.chart.axis.segmenter.segmenter",
                "doc": "<p>The method of segmenter used by the axis.</p>",
                "default": null
            },
            {
                "name": "startGap",
                "type": "number",
                "doc": "<p>Axis start determined by the chart inset padding.</p>",
                "default": "'number'"
            },
            {
                "name": "textPadding",
                "type": "number",
                "doc": "<p>The padding around axis labels to determine collision.\nThe default is 0 for all axes except horizontal axes of cartesian charts,\nwhere the default is 5 to prevent axis labels from blending one into another.\nThis default is defined in the axis config\nof the Base theme.\nYou may want to change this default to a smaller number or 0, if you have\nhorizontal axis labels rotated, which allows for more text to fit in.</p>",
                "default": "0"
            },
            {
                "name": "visibleMax",
                "type": "number",
                "doc": "<p>The maximum value that is displayed.</p>",
                "default": "'number'"
            },
            {
                "name": "visibleMin",
                "type": "number",
                "doc": "<p>The minimum value that is displayed.</p>",
                "default": "'number'"
            }
        ],
        "events": []
    },
    "Ext.chart.axis.sprite.Axis3D": {
        "type": "Ext.chart.axis.sprite.Axis3D",
        "doc": "<p>The 3D axis sprite.\nOnly 3D cartesian axes are rendered with this sprite.</p>",
        "configs": [
            {
                "name": "fx",
                "type": "object",
                "doc": "\n",
                "default": "{customDurations: {depth: 0}}"
            }
        ],
        "events": []
    },
    "Ext.chart.axis.Time": {
        "type": "Ext.chart.axis.Time",
        "doc": "<p>A type of axis whose units are measured in time values. Use this axis\nfor listing dates that you will want to group or dynamically change.\nIf you just want to display dates as categories then use the\nCategory class for axis instead.</p>",
        "configs": [
            {
                "name": "aggregator",
                "type": "string",
                "doc": "\n",
                "default": "'time'"
            },
            {
                "name": "calculateByLabelSize",
                "type": "boolean",
                "doc": "<p>The minimum value drawn by the axis. If not set explicitly, the axis\nminimum will be calculated automatically.</p>",
                "default": "true"
            },
            {
                "name": "dateFormat",
                "type": "string/boolean",
                "doc": "<p>Indicates the format the date will be rendered on.\nFor example: 'M d' will render the dates as 'Jan 30', etc.</p>",
                "default": null
            },
            {
                "name": "fromDate",
                "type": "date",
                "doc": "<p>The starting date for the time axis.</p>",
                "default": null
            },
            {
                "name": "layout",
                "type": "object|ext.chart.axis.layout.layout",
                "doc": "<p>The axis layout config. See Ext.chart.axis.layout.Layout</p>",
                "default": "'continuous'"
            },
            {
                "name": "segmenter",
                "type": "object|ext.chart.axis.segmenter.segmenter",
                "doc": "<p>The segmenter config. See Ext.chart.axis.segmenter.Segmenter</p>",
                "default": "'time'"
            },
            {
                "name": "step",
                "type": "array",
                "doc": "<p>An array with two components:</p>",
                "default": "[Ext.Date.DAY, 1]"
            },
            {
                "name": "toDate",
                "type": "date",
                "doc": "<p>The ending date for the time axis.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.chart.axis.Time3D": {
        "type": "Ext.chart.axis.Time3D",
        "configs": [
            {
                "name": "aggregator",
                "type": "string",
                "doc": "\n",
                "default": "'time'"
            },
            {
                "name": "calculateByLabelSize",
                "type": "boolean",
                "doc": "<p>The minimum value drawn by the axis. If not set explicitly, the axis\nminimum will be calculated automatically.</p>",
                "default": "true"
            },
            {
                "name": "dateFormat",
                "type": "string/boolean",
                "doc": "<p>Indicates the format the date will be rendered on.\nFor example: 'M d' will render the dates as 'Jan 30', etc.</p>",
                "default": null
            },
            {
                "name": "fromDate",
                "type": "date",
                "doc": "<p>The starting date for the time axis.</p>",
                "default": null
            },
            {
                "name": "layout",
                "type": "object|ext.chart.axis.layout.layout",
                "doc": "<p>The axis layout config. See Ext.chart.axis.layout.Layout</p>",
                "default": "'continuous'"
            },
            {
                "name": "segmenter",
                "type": "object|ext.chart.axis.segmenter.segmenter",
                "doc": "<p>The segmenter config. See Ext.chart.axis.segmenter.Segmenter</p>",
                "default": "'time'"
            },
            {
                "name": "step",
                "type": "array",
                "doc": "<p>An array with two components:</p>",
                "default": "[Ext.Date.DAY, 1]"
            },
            {
                "name": "toDate",
                "type": "date",
                "doc": "<p>The ending date for the time axis.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.chart.CartesianChart": {
        "type": "Ext.chart.CartesianChart",
        "doc": "<p>Represents a chart that uses cartesian coordinates.\nA cartesian chart has two directions, X direction and Y direction.\nThe series and axes are coordinated along these directions.\nBy default the x direction is horizontal and y direction is vertical,\nYou can swap the direction by setting the flipXY config to <code>true</code>.</p>",
        "configs": [
            {
                "name": "flipXY",
                "type": "boolean",
                "doc": "<p>Flip the direction of X and Y axis.\nIf flipXY is <code>true</code>, the X axes will be vertical and Y axes will be horizontal.\nNote that positions of chart axes have\nto be updated accordingly: axes positioned to the <code>top</code> and <code>bottom</code> should\nbe positioned to the <code>left</code> or <code>right</code> and vice versa.</p>",
                "default": "false"
            },
            {
                "name": "innerPadding",
                "type": "object",
                "doc": "<p>The amount of inner padding in pixels.\nInner padding is the padding from the innermost axes to the series.</p>",
                "default": "{top: 0, left: 0, right: 0, bottom: 0}"
            },
            {
                "name": "innerRect",
                "type": "array",
                "doc": "<p>While it may seem tedious to change the position config of all axes every time\nwhen the value of the flipXY config is changed, it's hard to predict the\nexpectaction of the user here, as illustrated below.</p>",
                "default": "[0, 0, 1, 1]"
            }
        ],
        "events": []
    },
    "Ext.chart.grid.CircularGrid": {
        "type": "Ext.chart.grid.CircularGrid",
        "doc": "<p>Circular Grid sprite. Used by Radar chart to render a series of concentric circles.</p>",
        "configs": [],
        "events": []
    },
    "Ext.chart.grid.HorizontalGrid": {
        "type": "Ext.chart.grid.HorizontalGrid",
        "doc": "<p>Horizontal Grid sprite. Used in Cartesian Charts.</p>",
        "configs": [],
        "events": []
    },
    "Ext.chart.grid.HorizontalGrid3D": {
        "type": "Ext.chart.grid.HorizontalGrid3D",
        "doc": "<p>Horizontal 3D Grid sprite. Used in 3D Cartesian Charts.</p>",
        "configs": [],
        "events": []
    },
    "Ext.chart.grid.RadialGrid": {
        "type": "Ext.chart.grid.RadialGrid",
        "doc": "<p>Radial Grid sprite. Used by Radar chart to render a series of radial lines.\nRepresents the scale of the radar chart on the yField.</p>",
        "configs": [],
        "events": []
    },
    "Ext.chart.grid.VerticalGrid": {
        "type": "Ext.chart.grid.VerticalGrid",
        "doc": "<p>Vertical Grid sprite. Used in Cartesian Charts.</p>",
        "configs": [],
        "events": []
    },
    "Ext.chart.grid.VerticalGrid3D": {
        "type": "Ext.chart.grid.VerticalGrid3D",
        "doc": "<p>Vertical 3D Grid sprite. Used in 3D Cartesian Charts.</p>",
        "configs": [],
        "events": []
    },
    "Ext.chart.interactions.Abstract": {
        "type": "Ext.chart.interactions.Abstract",
        "doc": "<p>Defines a common abstract parent class for all interactions.</p>",
        "configs": [
            {
                "name": "chart",
                "type": "ext.chart.abstractchart",
                "doc": "<p>The chart that the interaction is bound.</p>",
                "default": null
            },
            {
                "name": "enabled",
                "type": "boolean",
                "doc": "<p>'true' if the interaction is enabled.</p>",
                "default": "true"
            },
            {
                "name": "gesture",
                "type": "object",
                "doc": "<p>Maps gestures that should be used for starting/maintaining/ending the interaction\nto corresponding class methods.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.chart.interactions.Crosshair": {
        "type": "Ext.chart.interactions.Crosshair",
        "doc": "<p>The Crosshair interaction allows the user to get precise values for a specific point on the chart.\nThe values are obtained by single-touch dragging on the chart.</p>",
        "configs": [
            {
                "name": "axes",
                "type": "object",
                "doc": "<p>Specifies label text and label rect configs on per axis basis or as a single config for all axes.</p>",
                "default": "{top: {label: {}, rect: {}}, right: {label: {}, rect: {}}, bottom: {label: {}, rect: {}}, left: {label: {}, rect: {}}}"
            },
            {
                "name": "gesture",
                "type": "string",
                "doc": "<p>Specifies which gesture should be used for starting/maintaining/ending the interaction.</p>",
                "default": "'drag'"
            },
            {
                "name": "lines",
                "type": "object",
                "doc": "<p>Specifies attributes of horizontal and vertical lines that make up the crosshair.\nIf this config is missing, black dashed lines will be used.</p>",
                "default": "{horizontal: {strokeStyle: 'black', lineDash: [5, 5]}, vertical: {strokeStyle: 'black', lineDash: [5, 5]}}"
            }
        ],
        "events": []
    },
    "Ext.chart.interactions.CrossZoom": {
        "type": "Ext.chart.interactions.CrossZoom",
        "doc": "<p>The CrossZoom interaction allows the user to zoom in on a selected area of the chart.</p>",
        "configs": [
            {
                "name": "axes",
                "type": "object/array",
                "doc": "<p>Specifies which axes should be made navigable. The config value can take the following formats:</p>",
                "default": "true"
            },
            {
                "name": "gestures",
                "type": "object",
                "doc": "\n",
                "default": "{dragstart: 'onGestureStart', drag: 'onGesture', dragend: 'onGestureEnd', dblclick: 'onDoubleTap'}"
            },
            {
                "name": "undoButton",
                "type": "object",
                "doc": "\n",
                "default": "{}"
            }
        ],
        "events": []
    },
    "Ext.chart.interactions.ItemEdit": {
        "type": "Ext.chart.interactions.ItemEdit",
        "doc": "<p>The 'itemedit' interaction allows the user to edit store data\nby dragging series items in the chart.</p>",
        "configs": [
            {
                "name": "cursors",
                "type": "object",
                "doc": "\n",
                "default": "{ewResize: 'ew-resize', nsResize: 'ns-resize', move: 'move'}"
            },
            {
                "name": "gestures",
                "type": "object",
                "doc": "\n",
                "default": "{dragstart: 'onDragStart', drag: 'onDrag', dragend: 'onDragEnd'}"
            },
            {
                "name": "renderer",
                "type": "function/string",
                "doc": "<p>A function that returns style attributes for the item that's being dragged.\nThis is useful if you want to give a visual feedback to the user when\nthey dragged to a certain point.</p>",
                "default": "null"
            },
            {
                "name": "sticky",
                "type": "boolean",
                "doc": "\n",
                "default": "false"
            },
            {
                "name": "style",
                "type": "object",
                "doc": "<p>The style that will be applied to the series item on dragging.\nBy default, series item will have no fill,\nand will have a dashed stroke of the same color.</p>",
                "default": "null"
            },
            {
                "name": "tooltip",
                "type": "object/boolean",
                "doc": "\n",
                "default": "true"
            }
        ],
        "events": [
            {
                "name": "beginitemedit",
                "params": "chart(Ext.chart.AbstractChart) interaction(Ext.chart.interactions.ItemEdit) item(Object) eOpts(Object)",
                "doc": "<p>Fires when item edit operation (dragging) begins.</p>"
            },
            {
                "name": "enditemedit",
                "params": "chart(Ext.chart.AbstractChart) interaction(Ext.chart.interactions.ItemEdit) item(Object) target(Object) eOpts(Object)",
                "doc": "<p>Fires when item edit operation (dragging) ends.</p>"
            }
        ]
    },
    "Ext.chart.interactions.ItemHighlight": {
        "type": "Ext.chart.interactions.ItemHighlight",
        "doc": "<p>The 'itemhighlight' interaction allows the user to highlight series items in the chart.</p>",
        "configs": [
            {
                "name": "gestures",
                "type": "object",
                "doc": "\n",
                "default": "{tap: 'onTapGesture', mousemove: 'onMouseMoveGesture', mousedown: 'onMouseDownGesture', mouseup: 'onMouseUpGesture', mouseleave: 'onMouseUpGesture'}"
            },
            {
                "name": "sticky",
                "type": "boolean",
                "doc": "<p>Disables mouse tracking.\nSeries items will only be highlighted/unhighlighted on mouse click.\nThis config has no effect on touch devices.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.chart.interactions.ItemInfo": {
        "type": "Ext.chart.interactions.ItemInfo",
        "doc": "<p>The ItemInfo interaction allows displaying detailed information about a series data\npoint in a popup panel.</p>",
        "configs": [
            {
                "name": "gestures",
                "type": "object",
                "doc": "<p>Defines the gestures that should trigger the item info panel to be displayed.</p>",
                "default": "{tap: 'onInfoGesture'}"
            },
            {
                "name": "panel",
                "type": "object",
                "doc": "<p>An optional set of configuration overrides for the Ext.Panel that gets\ndisplayed. This object will be merged with the default panel configuration.</p>",
                "default": "{modal: true, centered: true, width: 300, height: 200, styleHtmlContent: true, scrollable: 'vertical', hideOnMaskTap: true, fullscreen: false, hidden: false, zIndex: 30}"
            }
        ],
        "events": [
            {
                "name": "show",
                "params": "this(Ext.chart.interactions.ItemInfo) item(Object) panel(Ext.Panel) eOpts(Object)",
                "doc": "<p>Fires when the info panel is shown.</p>"
            }
        ]
    },
    "Ext.chart.interactions.PanZoom": {
        "type": "Ext.chart.interactions.PanZoom",
        "doc": "<p>The PanZoom interaction allows the user to navigate the data for one or more chart\naxes by panning and/or zooming. Navigation can be limited to particular axes. Zooming is\nperformed by pinching on the chart or axis area; panning is performed by single-touch dragging.</p>",
        "configs": [
            {
                "name": "axes",
                "type": "object/array",
                "doc": "<p>Specifies which axes should be made navigable. The config value can take the following formats:</p>",
                "default": "{top: {}, right: {}, bottom: {}, left: {}}"
            },
            {
                "name": "hideLabelInGesture",
                "type": "boolean",
                "doc": "\n",
                "default": "false"
            },
            {
                "name": "maxZoom",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "minZoom",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "modeToggleButton",
                "type": "object",
                "doc": "\n",
                "default": "{xtype: 'segmentedbutton', width: 200, defaults: {ui: 'default-toolbar'}, cls: Ext.baseCSSPrefix + 'panzoom-toggle', items: [{text: 'Pan'}, {text: 'Zoom'}]}"
            },
            {
                "name": "overflowArrowOptions",
                "type": "object",
                "doc": "<p>A set of optional overrides for the overflow arrow sprites' options. Only relevant when\nshowOverflowArrows is <code>true</code>.</p>",
                "default": null
            },
            {
                "name": "panGesture",
                "type": "string",
                "doc": "<p>Defines the gesture that initiates panning.</p>",
                "default": "'drag'"
            },
            {
                "name": "showOverflowArrows",
                "type": "boolean",
                "doc": "<p>If <code>true</code>, arrows will be conditionally shown at either end of each axis to indicate that the\naxis is overflowing and can therefore be panned in that direction. Set this to <code>false</code> to\nprevent the arrows from being displayed.</p>",
                "default": "true"
            },
            {
                "name": "zoomGesture",
                "type": "string",
                "doc": "<p>Defines the gesture that initiates zooming.</p>",
                "default": "'pinch'"
            },
            {
                "name": "zoomOnPanGesture",
                "type": "boolean",
                "doc": "<p>If <code>true</code>, the pan gesture will zoom the chart. Ignored on touch devices.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.chart.interactions.Rotate": {
        "type": "Ext.chart.interactions.Rotate",
        "doc": "<p>The Rotate interaction allows the user to rotate a polar chart about its central point.</p>",
        "configs": [
            {
                "name": "gesture",
                "type": "string",
                "doc": "<p>Defines the gesture type that will be used to rotate the chart. Currently only\nsupports <code>pinch</code> for two-finger rotation and <code>drag</code> for single-finger rotation.</p>",
                "default": "'rotate'"
            },
            {
                "name": "gestures",
                "type": "object",
                "doc": "\n",
                "default": "{rotate: 'onRotate', rotateend: 'onRotate', dragstart: 'onGestureStart', drag: 'onGesture', dragend: 'onGestureEnd'}"
            },
            {
                "name": "rotation",
                "type": "number",
                "doc": "<p>Saves the current rotation of the series. Accepts negative values and values > 360 ( / 180 * Math.PI)</p>",
                "default": "0"
            }
        ],
        "events": [
            {
                "name": "rotate",
                "params": "this(Ext.chart.interactions.Rotate) angle(Number) eOpts(Object)",
                "doc": "<p>Fires on every tick of the rotation</p>"
            },
            {
                "name": "rotationEnd",
                "params": "this(Ext.chart.interactions.Rotate) angle(Number) eOpts(Object)",
                "doc": "<p>Fires after a user finishes the rotation</p>"
            }
        ]
    },
    "Ext.chart.interactions.RotatePie3D": {
        "type": "Ext.chart.interactions.RotatePie3D",
        "doc": "<p>A special version of the Rotate interaction used by Pie3D Chart.</p>",
        "configs": [],
        "events": []
    },
    "Ext.chart.label.Callout": {
        "type": "Ext.chart.label.Callout",
        "doc": "<p>This is a modifier to place labels and callouts by additional attributes.</p>",
        "configs": [],
        "events": []
    },
    "Ext.chart.label.Label": {
        "type": "Ext.chart.label.Label",
        "doc": "<p>Sprite used to represent labels in series.</p>",
        "configs": [
            {
                "name": "calloutLine",
                "type": "boolean|object",
                "doc": "<p>True to draw a line between the label and the chart with the default settings,\nor an Object that defines the 'color', 'width' and 'length' properties of the line.\nThis config is only applicable when the label is displayed outside the chart.</p>",
                "default": "true"
            },
            {
                "name": "field",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "fx",
                "type": "object",
                "doc": "<p>Animation configuration.</p>",
                "default": "{customDurations: {callout: 200}}"
            }
        ],
        "events": []
    },
    "Ext.chart.Legend": {
        "type": "Ext.chart.Legend",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "\n",
                "default": "Ext.baseCSSPrefix + 'legend'"
            },
            {
                "name": "disableSelection",
                "type": "boolean",
                "doc": "<p>TODO: not used.</p>",
                "default": "true"
            },
            {
                "name": "padding",
                "type": "number",
                "doc": "<p>TODO: not used.</p>",
                "default": "5"
            },
            {
                "name": "rect",
                "type": "array",
                "doc": "<p>The rect of the legend related to its container.</p>",
                "default": null
            },
            {
                "name": "toggleable",
                "type": "boolean",
                "doc": "<p><code>true</code> to allow series items to have their visibility\ntoggled by interaction with the legend items.</p>",
                "default": "true"
            }
        ],
        "events": []
    },
    "Ext.chart.MarkerHolder": {
        "type": "Ext.chart.MarkerHolder",
        "doc": "<p>Mixin that provides the functionality to place markers.</p>",
        "configs": [],
        "events": []
    },
    "Ext.chart.Markers": {
        "type": "Ext.chart.Markers",
        "doc": "<p>Marker sprite. A specialized version of instancing sprite that groups instances.\nPutting a marker is grouped by its category id. Clearing removes that category.</p>",
        "configs": [],
        "events": []
    },
    "Ext.chart.plugin.ItemEvents": {
        "type": "Ext.chart.plugin.ItemEvents",
        "doc": "<p>A chart plugin that adds ability to listen to chart series\nitems events. Item event listeners are passed two parameters: the target item and the\nevent itself. The item object has the following properties:</p>",
        "configs": [
            {
                "name": "moveEvents",
                "type": "boolean",
                "doc": "<p>If <code>itemmousemove</code>, <code>itemmouseover</code> or <code>itemmouseout</code> event listeners are attached\nto the chart, the plugin will detect those and will hit test series items on\nevery move. However, if the above item events are attached on the series level\nonly, this config has to be set to true, as the plugin won't perform a similar\ndetection on every series.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.chart.PolarChart": {
        "type": "Ext.chart.PolarChart",
        "doc": "<p>Represent a chart that uses polar coordinates.\nA polar chart has two axes: an angular axis (which is a circle) and\na radial axis (a straight line from the center to the edge of the circle).\nThe angular axis is usually a Category axis while the radial axis is\ntypically numerical.</p>",
        "configs": [
            {
                "name": "center",
                "type": "array",
                "doc": "<p>Determines the center of the polar chart.\nUpdated when the chart performs layout.</p>",
                "default": "[0, 0]"
            },
            {
                "name": "innerPadding",
                "type": "number",
                "doc": "<p>The amount of inner padding in pixels.\nInner padding is the padding from the outermost angular axis to the series.</p>",
                "default": "0"
            },
            {
                "name": "radius",
                "type": "number",
                "doc": "<p>Determines the radius of the polar chart.\nUpdated when the chart performs layout.</p>",
                "default": "0"
            }
        ],
        "events": []
    },
    "Ext.chart.series.Area": {
        "type": "Ext.chart.series.Area",
        "doc": "<p>Creates an Area Chart.</p>",
        "configs": [
            {
                "name": "splitStacks",
                "type": "boolean",
                "doc": "<p><code>true</code> to stack negative/positive values in respective y-axis directions.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.chart.series.Bar": {
        "type": "Ext.chart.series.Bar",
        "doc": "<p>Creates a Bar or Column Chart (depending on the value of the\nflipXY config).</p>",
        "configs": [
            {
                "name": "itemInstancing",
                "type": "object",
                "doc": "<p>Sprite template used for series.</p>",
                "default": "{type: 'rect', fx: {customDurations: {x: 0, y: 0, width: 0, height: 0, radius: 0}}}"
            }
        ],
        "events": []
    },
    "Ext.chart.series.Bar3D": {
        "type": "Ext.chart.series.Bar3D",
        "doc": "<p>Creates a 3D Bar or 3D Column Chart (depending on the value of the\nflipXY config).</p>",
        "configs": [
            {
                "name": "highlightCfg",
                "type": "object",
                "doc": "<p>The default style for the highlighted item.\nUsed when highlight config was simply set to 'true' instead of specifying a style.</p>",
                "default": "{opacity: 0.8}"
            },
            {
                "name": "itemInstancing",
                "type": "object",
                "doc": "<p>Sprite template used for series.</p>",
                "default": "{type: 'box', fx: {customDurations: {x: 0, y: 0, width: 0, height: 0, depth: 0}}}"
            }
        ],
        "events": []
    },
    "Ext.chart.series.CandleStick": {
        "type": "Ext.chart.series.CandleStick",
        "doc": "<p>Creates a candlestick or OHLC Chart.</p>",
        "configs": [
            {
                "name": "closeField",
                "type": "string",
                "doc": "<p>The store record field name that represents the closing value of the given period.</p>",
                "default": null
            },
            {
                "name": "highField",
                "type": "string",
                "doc": "<p>The store record field name that represents the highest value of the time interval represented.</p>",
                "default": null
            },
            {
                "name": "lowField",
                "type": "string",
                "doc": "<p>The store record field name that represents the lowest value of the time interval represented.</p>",
                "default": null
            },
            {
                "name": "openField",
                "type": "string",
                "doc": "<p>The store record field name that represents the opening value of the given period.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.chart.series.Cartesian": {
        "type": "Ext.chart.series.Cartesian",
        "doc": "<p>Common base class for series implementations that plot values using cartesian coordinates.</p>",
        "configs": [
            {
                "name": "xAxis",
                "type": "ext.chart.axis.axis|number|string",
                "doc": "<p>xAxis The chart axis the series is bound to in the 'X' direction.\nNormally, this would be set automatically by the series.\nFor charts with multiple x-axes, this defines which x-axis is used by the series.\nIt refers to either axis' ID or the (zero-based) index of the axis\nin the chart's axes config.</p>",
                "default": null
            },
            {
                "name": "xField",
                "type": "string",
                "doc": "<p>The field used to access the x axis value from the items from the data source.</p>",
                "default": null
            },
            {
                "name": "yAxis",
                "type": "ext.chart.axis.axis|number|string",
                "doc": "<p>yAxis The chart axis the series is bound to in the 'Y' direction.\nNormally, this would be set automatically by the series.\nFor charts with multiple y-axes, this defines which y-axis is used by the series.\nIt refers to either axis' ID or the (zero-based) index of the axis\nin the chart's axes config.</p>",
                "default": null
            },
            {
                "name": "yField",
                "type": "string|string[]",
                "doc": "<p>The field(s) used to access the y-axis value(s) of the items from the data source.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.chart.series.Gauge": {
        "type": "Ext.chart.series.Gauge",
        "doc": "<p>Creates a Gauge Chart.</p>",
        "configs": [
            {
                "name": "angleField",
                "type": "string",
                "doc": "<p>The store record field name to be used for the gauge value.\nThe values bound to this field name must be positive real numbers.</p>",
                "default": null
            },
            {
                "name": "center",
                "type": "array",
                "doc": "\n",
                "default": "[0.5, 0.75]"
            },
            {
                "name": "colors",
                "type": "array",
                "doc": "<p>An array of color values which is used for the needle and the <code>sectors</code>.</p>",
                "default": null
            },
            {
                "name": "donut",
                "type": "number",
                "doc": "<p>Percentage of the radius of the donut hole compared to the entire disk.</p>",
                "default": "30"
            },
            {
                "name": "maximum",
                "type": "number",
                "doc": "<p>The maximum value of the gauge.</p>",
                "default": "100"
            },
            {
                "name": "minimum",
                "type": "number",
                "doc": "<p>The minimum value of the gauge.</p>",
                "default": "0"
            },
            {
                "name": "needle",
                "type": "boolean",
                "doc": "<p>If true, display the gauge as a needle, otherwise as a sector.</p>",
                "default": "false"
            },
            {
                "name": "needleLength",
                "type": "number",
                "doc": "<p>Percentage of the length of needle compared to the radius of the entire disk.</p>",
                "default": "90"
            },
            {
                "name": "needleWidth",
                "type": "number",
                "doc": "<p>Width of the needle in pixels.</p>",
                "default": "4"
            },
            {
                "name": "radius",
                "type": "number",
                "doc": "\n",
                "default": "0.5"
            },
            {
                "name": "rect",
                "type": "array",
                "doc": "\n",
                "default": "[0, 0, 1, 1]"
            },
            {
                "name": "rotation",
                "type": "number",
                "doc": "\n",
                "default": "0"
            },
            {
                "name": "sectors",
                "type": "array",
                "doc": "<p>Allows to paint sectors of different colors in the background of the gauge,\nwith optional labels.</p>",
                "default": null
            },
            {
                "name": "showInLegend",
                "type": "boolean",
                "doc": "<p>Whether to add the gauge chart elements as legend items.</p>",
                "default": "false"
            },
            {
                "name": "totalAngle",
                "type": "number",
                "doc": "<p>The size of the sector that the series will occupy.</p>",
                "default": null
            },
            {
                "name": "value",
                "type": "number",
                "doc": "<p>Directly sets the displayed value of the gauge.\nIt is ignored if angleField is provided.</p>",
                "default": null
            },
            {
                "name": "wholeDisk",
                "type": "boolean",
                "doc": "<p>Indicates whether to show the whole disk or only the marked part.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.chart.series.Line": {
        "type": "Ext.chart.series.Line",
        "doc": "<p>Creates a Line Chart. A Line Chart is a useful visualization technique to display quantitative information for different\ncategories or other real values (as opposed to the bar chart), that can show some progression (or regression) in the dataset.\nAs with all other series, the Line Series must be appended in the <em>series</em> Chart array configuration. See the Chart\ndocumentation for more information. A typical configuration object for the line series could be:</p>",
        "configs": [
            {
                "name": "aggregator",
                "type": "object",
                "doc": "\n",
                "default": "{strategy: 'double'}"
            },
            {
                "name": "fill",
                "type": "boolean",
                "doc": "<p>If set to <code>true</code>, the area underneath the line is filled with the color defined as follows, listed by priority:\n- The color that is configured for this series (Ext.chart.series.Series.colors).\n- The color that is configured for this chart (Ext.chart.AbstractChart.colors).\n- The fill color that is set in the style config.\n- The stroke color that is set in the style config, or the same color as the line.</p>",
                "default": null
            },
            {
                "name": "selectionTolerance",
                "type": "number",
                "doc": "<p>The offset distance from the cursor position to the line series to trigger events (then used for highlighting series, etc).</p>",
                "default": "20"
            },
            {
                "name": "smooth",
                "type": "boolean/number",
                "doc": "<p>If set to <code>true</code> or a non-zero number, the line will be smoothed/rounded around its points; otherwise\nstraight line segments will be drawn.</p>",
                "default": "false"
            },
            {
                "name": "step",
                "type": "boolean",
                "doc": "<p>If set to <code>true</code>, the line uses steps instead of straight lines to connect the dots.\nIt is ignored if <code>smooth</code> is true.</p>",
                "default": "false"
            },
            {
                "name": "style",
                "type": "object",
                "doc": "<p>An object containing styles for the visualization lines. These styles will override the theme styles.\nSome options contained within the style object will are described next.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.chart.series.Pie": {
        "type": "Ext.chart.series.Pie",
        "doc": "<p>Creates a Pie Chart. A Pie Chart is a useful visualization technique to display\nquantitative information for different categories that also have a meaning as a whole.\nAs with all other series, the Pie Series must be appended in the <em>series</em> Chart array\nconfiguration. See the Chart documentation for more information. A typical configuration\nobject for the pie series could be:</p>",
        "configs": [
            {
                "name": "clockwise",
                "type": "boolean",
                "doc": "<p>Whether the pie slices are displayed clockwise. Default's true.</p>",
                "default": "true"
            },
            {
                "name": "donut",
                "type": "number",
                "doc": "<p>Specifies the radius of the donut hole, as a percentage of the chart's radius.\nDefaults to 0 (no donut hole).</p>",
                "default": "0"
            },
            {
                "name": "hidden",
                "type": "array",
                "doc": "<p>Determines which pie slices are hidden.</p>",
                "default": "[]"
            },
            {
                "name": "highlightCfg",
                "type": "ext.chart.series.sprite.pieslice/object",
                "doc": "<p>Default highlight config for the pie series.\nSlides highlighted pie sector outward by default.</p>",
                "default": "{margin: 20}"
            },
            {
                "name": "radiusFactor",
                "type": "number",
                "doc": "<p>Allows adjustment of the radius by a specific percentage.</p>",
                "default": "100"
            },
            {
                "name": "radiusField",
                "type": "string",
                "doc": "<p>The store record field name to be used for the pie slice lengths.\nThe values bound to this field name must be positive real numbers.</p>",
                "default": null
            },
            {
                "name": "rotation",
                "type": "number",
                "doc": "<p>The starting angle of the pie slices.</p>",
                "default": "0"
            },
            {
                "name": "style",
                "type": "object",
                "doc": "<p>Custom style configuration for the sprite used in the series.\nIt overrides the style that is provided by the current theme.</p>",
                "default": "{}"
            },
            {
                "name": "totalAngle",
                "type": "number",
                "doc": "<p>The total angle of the pie series.</p>",
                "default": "2*Math.PI"
            }
        ],
        "events": []
    },
    "Ext.chart.series.Pie3D": {
        "type": "Ext.chart.series.Pie3D",
        "doc": "<p>Creates a 3D Pie Chart.</p>",
        "configs": [
            {
                "name": "angleField",
                "type": "string",
                "doc": "<p>The store record field name to be used for the pie angles.\nThe values bound to this field name must be positive real numbers.</p>",
                "default": null
            },
            {
                "name": "distortion",
                "type": "number",
                "doc": "\n",
                "default": "0.5"
            },
            {
                "name": "donut",
                "type": "boolean/number",
                "doc": "<p>Whether to set the pie chart as donut chart.\nCan be set to a particular percentage to set the radius\nof the donut chart.</p>",
                "default": "false"
            },
            {
                "name": "hidden",
                "type": "array",
                "doc": "<p>Determines which pie slices are hidden.</p>",
                "default": "[]"
            },
            {
                "name": "highlightCfg",
                "type": "object",
                "doc": "<p>Default highlight config for the 3D pie series.\nSlides highlighted pie sector outward.</p>",
                "default": "{margin: 20}"
            },
            {
                "name": "radiusField",
                "type": "string",
                "doc": "<p>Not supported.</p>",
                "default": null
            },
            {
                "name": "rect",
                "type": "array",
                "doc": "\n",
                "default": "[0, 0, 0, 0]"
            },
            {
                "name": "rotation",
                "type": "number",
                "doc": "<p>The starting angle of the pie slices.</p>",
                "default": "0"
            },
            {
                "name": "shadow",
                "type": "boolean/object",
                "doc": "\n",
                "default": "false"
            },
            {
                "name": "thickness",
                "type": "number",
                "doc": "\n",
                "default": "35"
            }
        ],
        "events": []
    },
    "Ext.chart.series.Polar": {
        "type": "Ext.chart.series.Polar",
        "doc": "<p>Common base class for series implementations that plot values using polar coordinates.</p>",
        "configs": [
            {
                "name": "angleField",
                "type": "string",
                "doc": "<p>The store record field name for the angular axes in radar charts,\nor the size of the slices in pie charts.</p>",
                "default": null
            },
            {
                "name": "center",
                "type": "array",
                "doc": "<p>for the polar series.</p>",
                "default": "[0, 0]"
            },
            {
                "name": "offsetX",
                "type": "number",
                "doc": "<p>The x-offset of center of the polar series related to the center of the boundary.</p>",
                "default": "0"
            },
            {
                "name": "offsetY",
                "type": "number",
                "doc": "<p>The y-offset of center of the polar series related to the center of the boundary.</p>",
                "default": "0"
            },
            {
                "name": "radius",
                "type": "number",
                "doc": "<p>The radius of the polar series. Set to <code>null</code> will fit the polar series to the boundary.</p>",
                "default": null
            },
            {
                "name": "radiusField",
                "type": "string",
                "doc": "<p>The store record field name for the radial axes in radar charts,\nor the radius of the slices in pie charts.</p>",
                "default": null
            },
            {
                "name": "rotation",
                "type": "number",
                "doc": "<p>The angle in degrees at which the first polar series item should start.</p>",
                "default": "0"
            },
            {
                "name": "showInLegend",
                "type": "boolean",
                "doc": "<p>Whether to add the series elements as legend items.</p>",
                "default": "true"
            },
            {
                "name": "xAxis",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "xField",
                "type": "string",
                "doc": "\n",
                "default": null
            },
            {
                "name": "yAxis",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "yField",
                "type": "string",
                "doc": "\n",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.chart.series.Radar": {
        "type": "Ext.chart.series.Radar",
        "doc": "<p>Creates a Radar Chart. A Radar Chart is a useful visualization technique for comparing different quantitative values for\na constrained number of categories.\nAs with all other series, the Radar series must be appended in the <em>series</em> Chart array configuration. See the Chart\ndocumentation for more information. A typical configuration object for the radar series could be:</p>",
        "configs": [],
        "events": []
    },
    "Ext.chart.series.Scatter": {
        "type": "Ext.chart.series.Scatter",
        "doc": "<p>Creates a Scatter Chart. The scatter plot is useful when trying to display more than two variables in the same visualization.\nThese variables can be mapped into x, y coordinates and also to an element's radius/size, color, etc.\nAs with all other series, the Scatter Series must be appended in the <em>series</em> Chart array configuration. See the Chart\ndocumentation for more information on creating charts. A typical configuration object for the scatter could be:</p>",
        "configs": [
            {
                "name": "itemInstancing",
                "type": "object",
                "doc": "<p>The sprite template used to create sprite instances in the series.</p>",
                "default": "{fx: {customDurations: {translationX: 0, translationY: 0}}}"
            }
        ],
        "events": []
    },
    "Ext.chart.series.Series": {
        "type": "Ext.chart.series.Series",
        "doc": "<p>Series is the abstract class containing the common logic to all chart series. Series includes\nmethods from Labels, Highlights, and Callouts mixins. This class implements the logic of\nanimating, hiding, showing all elements and returning the color of the series to be used as a legend item.</p>",
        "configs": [
            {
                "name": "animation",
                "type": "object",
                "doc": "<p>The series animation configuration.</p>",
                "default": null
            },
            {
                "name": "background",
                "type": "object",
                "doc": "<p>Sets the background of the surface the series is attached.</p>",
                "default": null
            },
            {
                "name": "chart",
                "type": "object",
                "doc": "<p>The chart that the series is bound.</p>",
                "default": null
            },
            {
                "name": "colors",
                "type": "array",
                "doc": "<p>An array of color values which is used, in order of appearance, by the series. Each series\ncan request one or more colors from the array. Radar, Scatter or Line charts require just\none color each. Candlestick and OHLC require two (1 for drops + 1 for rises). Pie charts\nand Stacked charts (like Column or Pie charts) require one color for each data category\nthey represent, so one color for each slice of a Pie chart or each segment of a Column chart.\nIt overrides the colors that are provided by the current theme.</p>",
                "default": null
            },
            {
                "name": "hidden",
                "type": "boolean|array",
                "doc": "\n",
                "default": "false"
            },
            {
                "name": "highlight",
                "type": "boolean/object",
                "doc": "<p>The sprite attributes that will be applied to the highlighted items in the series.\nIf set to 'true', the default highlight style from highlightCfg will be used.\nIf the value of this config is an object, it will be merged with the highlightCfg.\nIn case merging of 'highlight' and 'highlightCfg' configs in not the desired behavior,\nprovide the 'highlightCfg' instead.</p>",
                "default": "false"
            },
            {
                "name": "highlightCfg",
                "type": "object",
                "doc": "<p>The default style for the highlighted item.\nUsed when highlight config was simply set to 'true' instead of specifying a style.</p>",
                "default": null
            },
            {
                "name": "highlightItem",
                "type": "object",
                "doc": "<p>The item currently highlighted in the series.</p>",
                "default": null
            },
            {
                "name": "itemInstancing",
                "type": "object",
                "doc": "<p>The sprite template used to create sprite instances in the series.</p>",
                "default": null
            },
            {
                "name": "label",
                "type": "object",
                "doc": "<p>Object with the following properties:</p>",
                "default": "{}"
            },
            {
                "name": "labelOverflowPadding",
                "type": "number",
                "doc": "<p>Extra distance value for which the labelOverflow listener is triggered.</p>",
                "default": null
            },
            {
                "name": "marker",
                "type": "object|boolean",
                "doc": "<p>The sprite template used by marker instances on the series.\nIf the value of the marker config is set to <code>true</code> or the type\nof the sprite instance is not specified, the Ext.draw.sprite.Circle\nsprite will be used.</p>",
                "default": null
            },
            {
                "name": "markerSubStyle",
                "type": "object",
                "doc": "<p>This is cyclic used if series have multiple marker sprites.</p>",
                "default": null
            },
            {
                "name": "overlaySurface",
                "type": "object",
                "doc": "<p>The surface used to render series labels.</p>",
                "default": null
            },
            {
                "name": "renderer",
                "type": "function",
                "doc": "<p>A function that can be provided to set custom styling properties to each rendered element.\nIt receives <code>(sprite, config, rendererData, index)</code> as parameters.</p>",
                "default": null
            },
            {
                "name": "showInLegend",
                "type": "boolean",
                "doc": "<p>Whether to show this series in the legend.</p>",
                "default": "true"
            },
            {
                "name": "showMarkers",
                "type": "boolean",
                "doc": "<p>Whether markers should be displayed at the data points along the line. If true,\nthen the marker config item will determine the markers' styling.</p>",
                "default": "true"
            },
            {
                "name": "store",
                "type": "object",
                "doc": "<p>The store of values used in the series.</p>",
                "default": null
            },
            {
                "name": "style",
                "type": "object",
                "doc": "<p>Custom style configuration for the sprite used in the series.\nIt overrides the style that is provided by the current theme.</p>",
                "default": "{}"
            },
            {
                "name": "subStyle",
                "type": "object",
                "doc": "<p>This is the cyclic used if the series has multiple sprites.</p>",
                "default": "{}"
            },
            {
                "name": "surface",
                "type": "object",
                "doc": "<p>The surface that the series is attached.</p>",
                "default": null
            },
            {
                "name": "themeStyle",
                "type": "object",
                "doc": "<p>Style configuration that is provided by the current theme.\nIt is composed of five objects:</p>",
                "default": "{}"
            },
            {
                "name": "title",
                "type": "string|string[]",
                "doc": "<p>The human-readable name of the series (displayed in the legend).</p>",
                "default": null
            },
            {
                "name": "tooltip",
                "type": "object",
                "doc": "<p>Add tooltips to the visualization's markers. The config options for the\ntooltip are the same configuration used with Ext.tip.ToolTip plus a\n<code>renderer</code> config option and a <code>scope</code> for the renderer. For example:</p>",
                "default": null
            },
            {
                "name": "triggerAfterDraw",
                "type": "boolean",
                "doc": "<p>Trigger drawlistener flag</p>",
                "default": "false"
            },
            {
                "name": "useDarkerStrokeColor",
                "type": "boolean|number",
                "doc": "<p>Colors for the series can be set directly through the 'colors' config, or indirectly\nwith the current theme or the 'colors' config that is set onto the chart. These colors\nare used as \"fill color\". Set this config to true, if you want a darker color for the\nstrokes. Set it to false if you want to use the same color as the fill color.\nAlternatively, you can set it to a number between 0 and 1 to control how much darker\nthe strokes should be.\nNote: this should be initial config and cannot be changed later on.</p>",
                "default": "true"
            }
        ],
        "events": [
            {
                "name": "chartattached",
                "params": "chart(Ext.chart.AbstractChart) series(Ext.chart.series.Series) eOpts(Object)",
                "doc": "<p>Fires when the Ext.chart.AbstractChart has been attached to this series.</p>"
            },
            {
                "name": "chartdetached",
                "params": "chart(Ext.chart.AbstractChart) series(Ext.chart.series.Series) eOpts(Object)",
                "doc": "<p>Fires when the Ext.chart.AbstractChart has been detached from this series.</p>"
            },
            {
                "name": "itemclick",
                "params": "series(Ext.chart.series.Series) item(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when a click event occurs on a series item.\n<em>Note</em>: This event requires the chartitemevents\nplugin be added to the chart.</p>"
            },
            {
                "name": "itemdblclick",
                "params": "series(Ext.chart.series.Series) item(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when a double click event occurs on a series item.\n<em>Note</em>: This event requires the chartitemevents\nplugin be added to the chart.</p>"
            },
            {
                "name": "itemmousedown",
                "params": "series(Ext.chart.series.Series) item(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when a mousedown event occurs on a series item.\n<em>Note</em>: This event requires the chartitemevents\nplugin be added to the chart.</p>"
            },
            {
                "name": "itemmousemove",
                "params": "series(Ext.chart.series.Series) item(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when the mouse is moved on a series item.\n<em>Note</em>: This event requires the chartitemevents\nplugin be added to the chart.</p>"
            },
            {
                "name": "itemmouseout",
                "params": "series(Ext.chart.series.Series) item(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when the mouse exits a series item.\n<em>Note</em>: This event requires the chartitemevents\nplugin be added to the chart.</p>"
            },
            {
                "name": "itemmouseover",
                "params": "series(Ext.chart.series.Series) item(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when the mouse enters a series item.\n<em>Note</em>: This event requires the chartitemevents\nplugin be added to the chart.</p>"
            },
            {
                "name": "itemmouseup",
                "params": "series(Ext.chart.series.Series) item(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when a mouseup event occurs on a series item.\n<em>Note</em>: This event requires the chartitemevents\nplugin be added to the chart.</p>"
            },
            {
                "name": "itemtap",
                "params": "series(Ext.chart.series.Series) item(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when a tap event occurs on a series item.\n<em>Note</em>: This event requires the chartitemevents\nplugin be added to the chart.</p>"
            },
            {
                "name": "storechange",
                "params": "series(Ext.chart.series.Series) newStore(Ext.data.Store) oldStore(Ext.data.Store) eOpts(Object)",
                "doc": "<p>Fires when the store of the series changes.</p>"
            }
        ]
    },
    "Ext.chart.series.sprite.Aggregative": {
        "type": "Ext.chart.series.sprite.Aggregative",
        "configs": [
            {
                "name": "aggregator",
                "type": "object",
                "doc": "\n",
                "default": "{}"
            },
            {
                "name": "dataClose",
                "type": "object",
                "doc": "<p>Data items representing the closing values of the aggregated data.</p>",
                "default": "null"
            },
            {
                "name": "dataHigh",
                "type": "object",
                "doc": "<p>Data items representing the high values of the aggregated data.</p>",
                "default": "null"
            },
            {
                "name": "dataLow",
                "type": "object",
                "doc": "<p>Data items representing the low values of the aggregated data.</p>",
                "default": "null"
            },
            {
                "name": "dataOpen",
                "type": "object",
                "doc": "<p>Data items representing the opening values of the aggregated data.</p>",
                "default": "null"
            }
        ],
        "events": []
    },
    "Ext.chart.series.sprite.Area": {
        "type": "Ext.chart.series.sprite.Area",
        "doc": "<p>Area series sprite.</p>",
        "configs": [
            {
                "name": "step",
                "type": "boolean",
                "doc": "<p>'true' if the area is represented with steps instead of lines.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.chart.series.sprite.Bar": {
        "type": "Ext.chart.series.sprite.Bar",
        "doc": "<p>Draws a sprite used in the bar series.</p>",
        "configs": [
            {
                "name": "inGroupGapWidth",
                "type": "number",
                "doc": "<p>The gap between grouped bars.</p>",
                "default": "3"
            },
            {
                "name": "maxBarWidth",
                "type": "number",
                "doc": "<p>The maximum bar width.</p>",
                "default": "100"
            },
            {
                "name": "minBarWidth",
                "type": "number",
                "doc": "<p>The minimum bar width.</p>",
                "default": "2"
            },
            {
                "name": "minGapWidth",
                "type": "number",
                "doc": "<p>The minimum gap between bars.</p>",
                "default": "5"
            },
            {
                "name": "radius",
                "type": "number",
                "doc": "<p>The degree of rounding for rounded bars.</p>",
                "default": "0"
            }
        ],
        "events": []
    },
    "Ext.chart.series.sprite.Bar3D": {
        "type": "Ext.chart.series.sprite.Bar3D",
        "doc": "<p>Draws a sprite used in Ext.chart.series.Bar3D series.</p>",
        "configs": [
            {
                "name": "brightnessFactor",
                "type": "number",
                "doc": "<p>The factor applied to the brightness of the bars.</p>",
                "default": "1"
            },
            {
                "name": "colorSpread",
                "type": "number",
                "doc": "<p>An attribute used to control how flat the bar gradient looks.\nA value of 0 essentially means no gradient (flat color).</p>",
                "default": "1"
            },
            {
                "name": "saturationFactor",
                "type": "number",
                "doc": "<p>The factor applied to the saturation of the bars.</p>",
                "default": "1"
            },
            {
                "name": "showStroke",
                "type": "boolean",
                "doc": "\n",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.chart.series.sprite.Box": {
        "type": "Ext.chart.series.sprite.Box",
        "doc": "<p>A sprite that represents a 3D bar or column.\nUsed as an item template by the Ext.chart.series.sprite.Bar3D marker holder.</p>",
        "configs": [
            {
                "name": "brightnessFactor",
                "type": "number",
                "doc": "<p>The factor applied to the brightness of the box.</p>",
                "default": "1"
            },
            {
                "name": "colorSpread",
                "type": "number",
                "doc": "<p>An attribute used to control how flat the bar gradient looks.\nA value of 0 essentially means no gradient (flat color).</p>",
                "default": "1"
            },
            {
                "name": "depth",
                "type": "number",
                "doc": "<p>The depth of the box.</p>",
                "default": "8"
            },
            {
                "name": "height",
                "type": "number",
                "doc": "<p>The height of the box.</p>",
                "default": "8"
            },
            {
                "name": "orientation",
                "type": "string",
                "doc": "<p>The orientation of the box.</p>",
                "default": "'vertical'"
            },
            {
                "name": "saturationFactor",
                "type": "number",
                "doc": "<p>The factor applied to the saturation of the box.</p>",
                "default": "1"
            },
            {
                "name": "showStroke",
                "type": "boolean",
                "doc": "<p>Whether to render the stroke or not.</p>",
                "default": "false"
            },
            {
                "name": "width",
                "type": "number",
                "doc": "<p>The width of the box.</p>",
                "default": "8"
            },
            {
                "name": "x",
                "type": "number",
                "doc": "<p>The position of the sprite on the x-axis.\nCorresponds to the center of the front face of the box.</p>",
                "default": "0"
            },
            {
                "name": "y",
                "type": "number",
                "doc": "<p>The position of the sprite on the y-axis.\nCorresponds to the top of the front face of the box.</p>",
                "default": "0"
            }
        ],
        "events": []
    },
    "Ext.chart.series.sprite.CandleStick": {
        "type": "Ext.chart.series.sprite.CandleStick",
        "doc": "<p>CandleStick series sprite.</p>",
        "configs": [
            {
                "name": "barWidth",
                "type": "number",
                "doc": "<p>The bar width of the candles.</p>",
                "default": "15"
            },
            {
                "name": "ohlcType",
                "type": "string",
                "doc": "<p>Determines whether candlestick or ohlc is used.</p>",
                "default": "'candlestick'"
            },
            {
                "name": "padding",
                "type": "number",
                "doc": "<p>The amount of padding between candles.</p>",
                "default": "3"
            }
        ],
        "events": []
    },
    "Ext.chart.series.sprite.Cartesian": {
        "type": "Ext.chart.series.sprite.Cartesian",
        "doc": "<p>Cartesian sprite.</p>",
        "configs": [
            {
                "name": "flipXY",
                "type": "boolean",
                "doc": "<p>If flipXY is 'true', the series is flipped.</p>",
                "default": "'bool'"
            },
            {
                "name": "labelOverflowPadding",
                "type": "number",
                "doc": "<p>Padding around labels to determine overlap.</p>",
                "default": "10"
            },
            {
                "name": "labels",
                "type": "object",
                "doc": "<p>Labels used in the series.</p>",
                "default": "null"
            },
            {
                "name": "selectionTolerance",
                "type": "number",
                "doc": "<p>The distance from the event position to the sprite's data points to trigger interactions (used for 'iteminfo', etc).</p>",
                "default": "20"
            }
        ],
        "events": []
    },
    "Ext.chart.series.sprite.Line": {
        "type": "Ext.chart.series.sprite.Line",
        "doc": "<p>Line series sprite.</p>",
        "configs": [
            {
                "name": "fillArea",
                "type": "boolean",
                "doc": "<p><code>true</code> if the sprite paints the area underneath the line.</p>",
                "default": "false"
            },
            {
                "name": "preciseStroke",
                "type": "boolean",
                "doc": "<p><code>true</code> if the line uses precise stroke.</p>",
                "default": "true"
            },
            {
                "name": "smooth",
                "type": "boolean",
                "doc": "<p><code>true</code> if the sprite uses line smoothing.\nDon't enable this if your data has gaps: NaN, undefined, etc.</p>",
                "default": "false"
            },
            {
                "name": "step",
                "type": "boolean",
                "doc": "<p><code>true</code> if the line uses steps instead of straight lines to connect the dots.\nIt is ignored if <code>smooth</code> is <code>true</code>.</p>",
                "default": "false"
            },
            {
                "name": "yCap",
                "type": "number",
                "doc": "<p>Absolute maximum y-value.\nLarger values will be capped to avoid rendering issues.</p>",
                "default": "Math.pow(2, 20)"
            }
        ],
        "events": []
    },
    "Ext.chart.series.sprite.Pie3DPart": {
        "type": "Ext.chart.series.sprite.Pie3DPart",
        "doc": "<p>Pie3D series sprite.</p>",
        "configs": [
            {
                "name": "baseColor",
                "type": "object",
                "doc": "<p>The color of the 3D pie part before adding the 3D effect.</p>",
                "default": "'white'"
            },
            {
                "name": "baseRotation",
                "type": "number",
                "doc": "<p>The starting rotation of the polar series.</p>",
                "default": "0"
            },
            {
                "name": "bevelWidth",
                "type": "number",
                "doc": "<p>The size of the 3D pie bevel.</p>",
                "default": "5"
            },
            {
                "name": "centerX",
                "type": "number",
                "doc": "<p>The central point of the series on the x-axis.</p>",
                "default": "0"
            },
            {
                "name": "centerY",
                "type": "number",
                "doc": "<p>The central point of the series on the x-axis.</p>",
                "default": "0"
            },
            {
                "name": "colorSpread",
                "type": "number",
                "doc": "<p>An attribute used to control how flat the gradient of the sprite looks.\nA value of 0 essentially means no gradient (flat color).</p>",
                "default": "1"
            },
            {
                "name": "distortion",
                "type": "number",
                "doc": "<p>The distortion of the 3D pie part.</p>",
                "default": "0"
            },
            {
                "name": "endAngle",
                "type": "number",
                "doc": "<p>The ending angle of the polar series.</p>",
                "default": "Math.PI"
            },
            {
                "name": "endRho",
                "type": "number",
                "doc": "<p>The ending radius of the polar series.</p>",
                "default": "150"
            },
            {
                "name": "label",
                "type": "string",
                "doc": "<p>The label associated with the 'top' part of the sprite.</p>",
                "default": "''"
            },
            {
                "name": "margin",
                "type": "number",
                "doc": "<p>Margin from the center of the pie. Used for donut.</p>",
                "default": "0"
            },
            {
                "name": "part",
                "type": "string",
                "doc": "<p>The part of the 3D Pie represented by the sprite.</p>",
                "default": "'top'"
            },
            {
                "name": "startAngle",
                "type": "number",
                "doc": "<p>The starting angle of the polar series.</p>",
                "default": "0"
            },
            {
                "name": "startRho",
                "type": "number",
                "doc": "<p>The starting radius of the polar series.</p>",
                "default": "0"
            },
            {
                "name": "thickness",
                "type": "number",
                "doc": "<p>The thickness of the 3D pie part.</p>",
                "default": "0"
            }
        ],
        "events": []
    },
    "Ext.chart.series.sprite.PieSlice": {
        "type": "Ext.chart.series.sprite.PieSlice",
        "doc": "<p>Pie slice sprite.</p>",
        "configs": [
            {
                "name": "doCallout",
                "type": "boolean",
                "doc": "<p>'true' if the pie series uses label callouts.</p>",
                "default": "true"
            },
            {
                "name": "label",
                "type": "string",
                "doc": "<p>Label associated with the Pie sprite.</p>",
                "default": "''"
            },
            {
                "name": "labelOverflowPadding",
                "type": "number",
                "doc": "<p>Padding around labels to determine overlap.\nAny negative number allows the labels to overlap.</p>",
                "default": "10"
            },
            {
                "name": "rendererData",
                "type": "object",
                "doc": "<p>The object that is passed to the renderer.</p>",
                "default": null
            },
            {
                "name": "rendererIndex",
                "type": "number",
                "doc": "\n",
                "default": "0"
            },
            {
                "name": "series",
                "type": "object",
                "doc": "\n",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.chart.series.sprite.Polar": {
        "type": "Ext.chart.series.sprite.Polar",
        "doc": "<p>Polar sprite.</p>",
        "configs": [
            {
                "name": "baseRotation",
                "type": "number",
                "doc": "<p>The starting rotation of the polar series.</p>",
                "default": "0"
            },
            {
                "name": "centerX",
                "type": "number",
                "doc": "<p>The central point of the series on the x-axis.</p>",
                "default": "0"
            },
            {
                "name": "centerY",
                "type": "number",
                "doc": "<p>The central point of the series on the y-axis.</p>",
                "default": "0"
            },
            {
                "name": "endAngle",
                "type": "number",
                "doc": "<p>The ending angle of the polar series.</p>",
                "default": "Math.PI"
            },
            {
                "name": "endRho",
                "type": "number",
                "doc": "<p>The ending radius of the polar series.</p>",
                "default": "150"
            },
            {
                "name": "labelOverflowPadding",
                "type": "number",
                "doc": "<p>Padding around labels to determine overlap.</p>",
                "default": "10"
            },
            {
                "name": "labels",
                "type": "object",
                "doc": "<p>Labels used in the series.</p>",
                "default": "null"
            },
            {
                "name": "startAngle",
                "type": "number",
                "doc": "<p>The starting angle of the polar series.</p>",
                "default": "0"
            },
            {
                "name": "startRho",
                "type": "number",
                "doc": "<p>The starting radius of the polar series.</p>",
                "default": "0"
            }
        ],
        "events": []
    },
    "Ext.chart.series.sprite.Radar": {
        "type": "Ext.chart.series.sprite.Radar",
        "doc": "<p>Radar series sprite.</p>",
        "configs": [],
        "events": []
    },
    "Ext.chart.series.sprite.Scatter": {
        "type": "Ext.chart.series.sprite.Scatter",
        "doc": "<p>Scatter series sprite.</p>",
        "configs": [],
        "events": []
    },
    "Ext.chart.series.sprite.Series": {
        "type": "Ext.chart.series.sprite.Series",
        "doc": "<p>Base class for all series sprites.\nDefines attributes common to all series sprites, like data in x/y directions and its min/max values,\nand configs, like the Ext.chart.series.Series instance that manages the sprite.</p>",
        "configs": [
            {
                "name": "dataMaxX",
                "type": "number",
                "doc": "<p>Data maximum on the x-axis.</p>",
                "default": "1"
            },
            {
                "name": "dataMaxY",
                "type": "number",
                "doc": "<p>Data maximum on the y-axis.</p>",
                "default": "1"
            },
            {
                "name": "dataMinX",
                "type": "number",
                "doc": "<p>Data minimum on the x-axis.</p>",
                "default": "0"
            },
            {
                "name": "dataMinY",
                "type": "number",
                "doc": "<p>Data minimum on the y-axis.</p>",
                "default": "0"
            },
            {
                "name": "dataX",
                "type": "object",
                "doc": "<p>Data items on the x-axis.</p>",
                "default": "null"
            },
            {
                "name": "dataY",
                "type": "object",
                "doc": "<p>Data items on the y-axis.</p>",
                "default": "null"
            },
            {
                "name": "field",
                "type": "string",
                "doc": "<p>The store field used by the series.</p>",
                "default": null
            },
            {
                "name": "rangeX",
                "type": "array",
                "doc": "<p>Data range derived from all the series bound to the x-axis.</p>",
                "default": "null"
            },
            {
                "name": "rangeY",
                "type": "array",
                "doc": "<p>Data range derived from all the series bound to the y-axis.</p>",
                "default": "null"
            },
            {
                "name": "series",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "store",
                "type": "object",
                "doc": "<p>The store that is passed to the renderer.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.chart.series.sprite.StackedCartesian": {
        "type": "Ext.chart.series.sprite.StackedCartesian",
        "doc": "<p>Stacked cartesian sprite.</p>",
        "configs": [
            {
                "name": "dataStartY",
                "type": "object",
                "doc": "<p>The starting point of the data used in the series.</p>",
                "default": "null"
            },
            {
                "name": "groupCount",
                "type": "number",
                "doc": "<p>The number of items (e.g. bars) in a group.</p>",
                "default": "1"
            },
            {
                "name": "groupOffset",
                "type": "number",
                "doc": "<p>The group index of the series sprite.</p>",
                "default": "0"
            }
        ],
        "events": []
    },
    "Ext.chart.series.StackedCartesian": {
        "type": "Ext.chart.series.StackedCartesian",
        "doc": "<p>Abstract class for all the stacked cartesian series including area series\nand bar series.</p>",
        "configs": [
            {
                "name": "fullStack",
                "type": "boolean",
                "doc": "<p>If <code>true</code>, the height of a stacked bar is always the full height of the chart,\nwith individual components viewed as shares of the whole determined by the\nfullStackTotal config.</p>",
                "default": "false"
            },
            {
                "name": "fullStackTotal",
                "type": "boolean",
                "doc": "<p>If the fullStack config is set to <code>true</code>, this will determine\nthe absolute total value of each stack.</p>",
                "default": "100"
            },
            {
                "name": "hidden",
                "type": "array",
                "doc": "\n",
                "default": "[]"
            },
            {
                "name": "splitStacks",
                "type": "boolean",
                "doc": "<p><code>true</code> to stack negative/positive values in respective y-axis directions.</p>",
                "default": "true"
            },
            {
                "name": "stacked",
                "type": "boolean",
                "doc": "<p><code>true</code> to display the series in its stacked configuration.</p>",
                "default": "true"
            }
        ],
        "events": []
    },
    "Ext.chart.SpaceFillingChart": {
        "type": "Ext.chart.SpaceFillingChart",
        "doc": "<p>Creates a chart that fills the entire area of the chart.\ne.g. Gauge Charts</p>",
        "configs": [],
        "events": []
    },
    "Ext.chart.theme.Base": {
        "type": "Ext.chart.theme.Base",
        "doc": "<p>Abstract class that provides default styles for non-specified things.\nShould be sub-classed when creating new themes.\nFor example:</p>",
        "configs": [
            {
                "name": "axis",
                "type": "object",
                "doc": "<p>Theme defaults for the axes.\nCan apply to all axes or only axes with a specific position.\nFor example:</p>",
                "default": "{defaults: {label: {x: 0, y: 0, textBaseline: 'middle', textAlign: 'center', fontSize: 'default', fontFamily: 'default', fontWeight: 'default', fillStyle: 'black'}, title: {fillStyle: 'black', fontSize: 'default*1.23', fontFamily: 'default', fontWeight: 'default'}, style: {strokeStyle: 'black'}, grid: {strokeStyle: 'rgb(221, 221, 221)'}}, top: {style: {textPadding: 5}}, bottom: {style: {textPadding: 5}}}"
            },
            {
                "name": "background",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "baseColor",
                "type": "string/ext.draw.color",
                "doc": "<p>The base color used to generate the Ext.chart.AbstractChart.colors of the theme.</p>",
                "default": null
            },
            {
                "name": "chart",
                "type": "object",
                "doc": "<p>Theme defaults for the chart.\nCan apply to all charts or just a specific type of chart.\nFor example:</p>",
                "default": "{defaults: {background: 'white'}}"
            },
            {
                "name": "colors",
                "type": "array",
                "doc": "<p>Array of colors/gradients to be used by the theme.\nDefaults to colorDefaults.</p>",
                "default": null
            },
            {
                "name": "gradients",
                "type": "object",
                "doc": "<p>The gradient config to be used by series' sprites. E.g.:</p>",
                "default": null
            },
            {
                "name": "markerThemes",
                "type": "object",
                "doc": "\n",
                "default": "{type: ['circle', 'cross', 'plus', 'square', 'triangle', 'diamond']}"
            },
            {
                "name": "series",
                "type": "object",
                "doc": "<p>Theme defaults for the series.\nCan apply to all series or just a specific type of series.\nFor example:</p>",
                "default": "{defaults: {label: {fillStyle: 'black', strokeStyle: 'none', fontFamily: 'default', fontWeight: 'default', fontSize: 'default*1.077', textBaseline: 'middle', textAlign: 'center'}, labelOverflowPadding: 5}}"
            },
            {
                "name": "seriesThemes",
                "type": "object",
                "doc": "<p>An object with the following structure:\n{\n  fillStyle: [color, color, ...],\n  strokeStyle: [color, color, ...],\n  ...\n}\nIf missing, generated from the other configs: 'baseColor, 'gradients', 'colors'.</p>",
                "default": null
            },
            {
                "name": "sprites",
                "type": "object",
                "doc": "<p>Default style for the custom chart sprites by type.\nFor example:</p>",
                "default": "{text: {fontSize: 'default', fontWeight: 'default', fontFamily: 'default', fillStyle: 'black'}}"
            },
            {
                "name": "useGradients",
                "type": "boolean",
                "doc": "\n",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.chart.theme.Default": {
        "type": "Ext.chart.theme.Default",
        "configs": [],
        "events": []
    },
    "Ext.Class": {
        "type": "Ext.Class",
        "doc": "<p>This is a low level factory that is used by Ext.define and should not be used\ndirectly in application code.</p>",
        "configs": [
            {
                "name": "alias",
                "type": "string/string[]",
                "doc": "<p>List of short aliases for class names. An alias consists of a namespace and a name\nconcatenated by a period as &#60;namespace&#62;.&#60;name&#62;</p>",
                "default": null
            },
            {
                "name": "alternateClassName",
                "type": "string/string[]",
                "doc": "<p>Defines alternate names for this class.  For example:</p>",
                "default": null
            },
            {
                "name": "cachedConfig",
                "type": "object",
                "doc": "<p>This configuration works in a very similar manner to the config option.\nThe difference is that the configurations are only ever processed when the first instance\nof that class is created. The processed value is then stored on the class prototype and\nwill not be processed on subsequent instances of the class. Getters/setters will be generated\nin exactly the same way as config.</p>",
                "default": null
            },
            {
                "name": "config",
                "type": "object",
                "doc": "<p>List of configuration options with their default values.</p>",
                "default": null
            },
            {
                "name": "extend",
                "type": "string",
                "doc": "<p>The parent class that this class extends. For example:</p>",
                "default": null
            },
            {
                "name": "inheritableStatics",
                "type": "object",
                "doc": "<p>List of inheritable static methods for this class.\nOtherwise just like statics but subclasses inherit these methods.</p>",
                "default": null
            },
            {
                "name": "mixins",
                "type": "string[]/object",
                "doc": "<p>List of classes to mix into this class. For example:</p>",
                "default": null
            },
            {
                "name": "override",
                "type": "string",
                "doc": "<p>Overrides members of the specified <code>target</code> class.</p>",
                "default": null
            },
            {
                "name": "platformConfig",
                "type": "object",
                "doc": "<p>Allows setting config values for a class based on specific platforms. The value\nof this config is an object whose properties are \"rules\" and whose values are\nobjects containing config values.</p>",
                "default": null
            },
            {
                "name": "privates",
                "type": "object",
                "doc": "<p>The <code>privates</code> config is a list of methods intended to be used internally by the\nframework.  Methods are placed in a <code>privates</code> block to prevent developers from\naccidentally overriding framework methods in custom classes.</p>",
                "default": null
            },
            {
                "name": "requires",
                "type": "string[]",
                "doc": "<p>List of classes that have to be loaded before instantiating this class.\nFor example:</p>",
                "default": null
            },
            {
                "name": "singleton",
                "type": "boolean",
                "doc": "<p>When set to true, the class will be instantiated as singleton.  For example:</p>",
                "default": null
            },
            {
                "name": "statics",
                "type": "object",
                "doc": "<p>List of static methods for this class. For example:</p>",
                "default": null
            },
            {
                "name": "uses",
                "type": "string[]",
                "doc": "<p>List of optional classes to load together with this class. These aren't neccessarily loaded before\nthis class is created, but are guaranteed to be available before Ext.onReady listeners are\ninvoked. For example:</p>",
                "default": null
            },
            {
                "name": "xtype",
                "type": "string",
                "doc": "<p>The <code>xtype</code> configuration option can be used to optimize Component creation and rendering. It serves as a\nshortcut to the full component name. For example, the component <code>Ext.button.Button</code> has an xtype of <code>button</code>.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.ClassManager": {
        "type": "Ext.ClassManager",
        "doc": "<p>Ext.ClassManager manages all classes and handles mapping from string class name to\nactual class objects throughout the whole framework. It is not generally accessed directly, rather through\nthese convenient shorthands:</p>",
        "configs": [
            {
                "name": "debugHooks",
                "type": "object",
                "doc": "<p>A collection of diagnostic methods to decorate the real methods of the class. These\nmethods are applied as an <code>override</code> if this class has debug enabled as defined by\n<code>Ext.isDebugEnabled</code>.</p>",
                "default": null
            },
            {
                "name": "deprecated",
                "type": "object",
                "doc": "<p>The object given has properties that describe the versions at which the deprecations\napply.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.Component": {
        "type": "Ext.Component",
        "doc": "<p>Most of the visual classes you interact with are Components. Every Component is a\nsubclass of Ext.Component, which means they can all:</p>",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to\nother elements within this component. To add specific styling for sub-classes, use the cls config.</p>",
                "default": null
            },
            {
                "name": "border",
                "type": "boolean",
                "doc": "<p>Enables or disables bordering on this component.\nThe following values are accepted:</p>",
                "default": null
            },
            {
                "name": "bottom",
                "type": "number/string",
                "doc": "<p>The absolute bottom position of this Component; must be a valid CSS length value, e.g: <code>300</code>, <code>100px</code>, <code>30%</code>, etc.\nExplicitly setting this value will make this Component become 'floating', which means its layout will no\nlonger be affected by the Container that it resides in.</p>",
                "default": null
            },
            {
                "name": "centered",
                "type": "boolean",
                "doc": "<p>Whether or not this Component is absolutely centered inside its Container</p>",
                "default": null
            },
            {
                "name": "cls",
                "type": "string/string[]",
                "doc": "<p>The CSS class to add to this component's element, in\naddition to the baseCls. In many cases, this property will be specified\nby the derived component class. See userCls for adding additional CSS\nclasses to component instances (such as items in a Ext.Container).</p>",
                "default": null
            },
            {
                "name": "contentEl",
                "type": "ext.element/htmlelement/string",
                "doc": "<p>The configured element will automatically be\nadded as the content of this component. When you pass a string, we expect it to be an element id.\nIf the content element is hidden, we will automatically show it.</p>",
                "default": null
            },
            {
                "name": "data",
                "type": "object",
                "doc": "<p>The initial set of data to apply to the <code>tpl</code> to\nupdate the content area of the Component.</p>",
                "default": null
            },
            {
                "name": "disabled",
                "type": "boolean",
                "doc": "<p>Whether or not this component is disabled</p>",
                "default": null
            },
            {
                "name": "disabledCls",
                "type": "string",
                "doc": "<p>The CSS class to add to the component when it is disabled</p>",
                "default": "\"x-item-disabled\""
            },
            {
                "name": "docked",
                "type": "string",
                "doc": "<p>The dock position of this component in its container. Can be <code>left</code>, <code>top</code>, <code>right</code> or <code>bottom</code>.</p>",
                "default": null
            },
            {
                "name": "draggable",
                "type": "object",
                "doc": "<p>Configuration options to make this Component draggable</p>",
                "default": null
            },
            {
                "name": "enterAnimation",
                "type": "string/mixed",
                "doc": "<p>Animation effect to apply when the Component is being shown.  Typically you want to use an\ninbound animation type such as 'fadeIn' or 'slideIn'.</p>",
                "default": null
            },
            {
                "name": "exitAnimation",
                "type": "string/mixed",
                "doc": "<p>Animation effect to apply when the Component is being hidden.</p>",
                "default": null
            },
            {
                "name": "floatingCls",
                "type": "string",
                "doc": "<p>The CSS class to add to this component when it is floatable.</p>",
                "default": "\"x-floating\""
            },
            {
                "name": "fullscreen",
                "type": "boolean",
                "doc": "<p>Force the component to take up 100% width and height available, by adding it\nto Ext.Viewport.</p>",
                "default": null
            },
            {
                "name": "hidden",
                "type": "boolean",
                "doc": "<p>Whether or not this Component is hidden (its CSS <code>display</code> property is set to <code>none</code>)</p>",
                "default": null
            },
            {
                "name": "hiddenCls",
                "type": "string",
                "doc": "<p>The CSS class to add to the component when it is hidden</p>",
                "default": "\"x-item-hidden\""
            },
            {
                "name": "hideAnimation",
                "type": "string/mixed",
                "doc": "<p>Animation effect to apply when the Component is being hidden.  Typically you want to use an\noutbound animation type such as 'fadeOut' or 'slideOut'. For more animations, check the Ext.fx.Animation.type config.</p>",
                "default": null
            },
            {
                "name": "html",
                "type": "string/ext.element/htmlelement",
                "doc": "<p>Optional HTML content to render inside this Component, or a reference\nto an existing element on the page.</p>",
                "default": null
            },
            {
                "name": "left",
                "type": "number/string",
                "doc": "<p>The absolute left position of this Component; must be a valid CSS length value, e.g: <code>300</code>, <code>100px</code>, <code>30%</code>, etc.\nExplicitly setting this value will make this Component become 'floating', which means its layout will no\nlonger be affected by the Container that it resides in.</p>",
                "default": null
            },
            {
                "name": "margin",
                "type": "number/string",
                "doc": "<p>The margin to use on this Component. Can be specified as a number (in which case\nall edges get the same margin) or a CSS string like '5 10 10 10'</p>",
                "default": null
            },
            {
                "name": "maxHeight",
                "type": "number/string",
                "doc": "<p>The maximum height of this Component; must be a valid CSS length value, e.g: <code>300</code>, <code>100px</code>, <code>30%</code>, etc.\nIf set to <code>auto</code>, it will set the width to <code>null</code> meaning it will have its own natural size.\nNote that this config will not apply if the Component is 'floating' (absolutely positioned or centered)</p>",
                "default": null
            },
            {
                "name": "maxWidth",
                "type": "number/string",
                "doc": "<p>The maximum width of this Component; must be a valid CSS length value, e.g: <code>300</code>, <code>100px</code>, <code>30%</code>, etc.\nIf set to <code>auto</code>, it will set the width to <code>null</code> meaning it will have its own natural size.\nNote that this config will not apply if the Component is 'floating' (absolutely positioned or centered)</p>",
                "default": null
            },
            {
                "name": "minHeight",
                "type": "number/string",
                "doc": "<p>The minimum height of this Component; must be a valid CSS length value, e.g: <code>300</code>, <code>100px</code>, <code>30%</code>, etc.\nIf set to <code>auto</code>, it will set the width to <code>null</code> meaning it will have its own natural size.</p>",
                "default": null
            },
            {
                "name": "minWidth",
                "type": "number/string",
                "doc": "<p>The minimum width of this Component; must be a valid CSS length value, e.g: <code>300</code>, <code>100px</code>, <code>30%</code>, etc.\nIf set to <code>auto</code>, it will set the width to <code>null</code> meaning it will have its own natural size.</p>",
                "default": null
            },
            {
                "name": "padding",
                "type": "number/string",
                "doc": "<p>The padding to use on this Component. Can be specified as a number (in which\ncase all edges get the same padding) or a CSS string like '5 10 10 10'</p>",
                "default": null
            },
            {
                "name": "plugins",
                "type": "object/array",
                "doc": "<p>An object or array of objects that will provide custom functionality for this component.  The only\nrequirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component.</p>",
                "default": null
            },
            {
                "name": "record",
                "type": "ext.data.model",
                "doc": "<p>A model instance which updates the Component's html based on it's tpl. Similar to the data\nconfiguration, but tied to to a record to make allow dynamic updates.  This must be a model\ninstance and not a configuration of one.</p>",
                "default": null
            },
            {
                "name": "renderTo",
                "type": "ext.element",
                "doc": "<p>Optional element to render this Component to. Usually this is not needed because\na Component is normally full screen or automatically rendered inside another Container</p>",
                "default": null
            },
            {
                "name": "right",
                "type": "number/string",
                "doc": "<p>The absolute right position of this Component; must be a valid CSS length value, e.g: <code>300</code>, <code>100px</code>, <code>30%</code>, etc.\nExplicitly setting this value will make this Component become 'floating', which means its layout will no\nlonger be affected by the Container that it resides in.</p>",
                "default": null
            },
            {
                "name": "scrollable",
                "type": "boolean/string/object",
                "doc": "<p>Configuration options to make this Component scrollable. Acceptable values are:</p>",
                "default": null
            },
            {
                "name": "showAnimation",
                "type": "string/mixed",
                "doc": "<p>Animation effect to apply when the Component is being shown.  Typically you want to use an\ninbound animation type such as 'fadeIn' or 'slideIn'. For more animations, check the Ext.fx.Animation.type config.</p>",
                "default": null
            },
            {
                "name": "styleHtmlCls",
                "type": "string",
                "doc": "<p>The class that is added to the content target when you set <code>styleHtmlContent</code> to <code>true</code>.</p>",
                "default": "\"x-html\""
            },
            {
                "name": "styleHtmlContent",
                "type": "boolean",
                "doc": "<p><code>true</code> to automatically style the HTML inside the content target of this component (body for panels).</p>",
                "default": "false"
            },
            {
                "name": "top",
                "type": "number/string",
                "doc": "<p>The absolute top position of this Component; must be a valid CSS length value, e.g: <code>300</code>, <code>100px</code>, <code>30%</code>, etc.\nExplicitly setting this value will make this Component become 'floating', which means its layout will no\nlonger be affected by the Container that it resides in.</p>",
                "default": null
            },
            {
                "name": "tpl",
                "type": "string/string[]/ext.template/ext.xtemplate[]",
                "doc": "<p>A String, Ext.Template, Ext.XTemplate or an Array of strings to form an Ext.XTemplate.\nUsed in conjunction with the data and tplWriteMode configurations.</p>",
                "default": null
            },
            {
                "name": "tplWriteMode",
                "type": "string",
                "doc": "<p>The Ext.(X)Template method to use when\nupdating the content area of the Component.\nValid modes are:</p>",
                "default": "'overwrite'"
            },
            {
                "name": "translatable",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "ui",
                "type": "string",
                "doc": "<p>The ui to be used on this Component</p>",
                "default": null
            },
            {
                "name": "useBodyElement",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "xtype",
                "type": "string",
                "doc": "<p>The <code>xtype</code> configuration option can be used to optimize Component creation and rendering. It serves as a\nshortcut to the full component name. For example, the component <code>Ext.button.Button</code> has an xtype of <code>button</code>.</p>",
                "default": "'component'"
            },
            {
                "name": "zIndex",
                "type": "number",
                "doc": "<p>The z-index to give this Component when it is rendered</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "added",
                "params": "this(Ext.Component) container(Ext.Container) index(Number) eOpts(Object)",
                "doc": "<p>Fires after a Component had been added to a Container.</p>"
            },
            {
                "name": "beforeorientationchange",
                "params": "eOpts(Object)",
                "doc": "<p>Fires before orientation changes.</p>"
            },
            {
                "name": "bottomchange",
                "params": "this(Ext.Component) value(Number/String) oldValue(Number/String) eOpts(Object)",
                "doc": "<p>Fires when the bottom configuration is changed by setBottom.</p>"
            },
            {
                "name": "centeredchange",
                "params": "this(Ext.Component) value(Boolean) oldValue(Boolean) eOpts(Object)",
                "doc": "<p>Fires when the centered configuration is changed by setCentered.</p>"
            },
            {
                "name": "destroy",
                "params": "eOpts(Object)",
                "doc": "<p>Fires when the component is destroyed</p>"
            },
            {
                "name": "disabledchange",
                "params": "this(Ext.Component) value(Boolean) oldValue(Boolean) eOpts(Object)",
                "doc": "<p>Fires when the disabled configuration is changed by setDisabled.</p>"
            },
            {
                "name": "dockedchange",
                "params": "this(Ext.Component) value(String) oldValue(String) eOpts(Object)",
                "doc": "<p>Fires when the docked configuration is changed by setDocked.</p>"
            },
            {
                "name": "erased",
                "params": "this(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires when the component is no longer displayed in the DOM.  Listening to this event will\ndegrade performance not recommend for general use.</p>"
            },
            {
                "name": "floatingchange",
                "params": "this(Ext.Component) floating(Boolean) eOpts(Object)",
                "doc": "<p>Fires whenever there is a change in the floating status of a component</p>"
            },
            {
                "name": "fullscreen",
                "params": "this(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires whenever a Component with the fullscreen config is instantiated</p>"
            },
            {
                "name": "hiddenchange",
                "params": "this(Ext.Component) value(Boolean) oldValue(Boolean) eOpts(Object)",
                "doc": "<p>Fires when the hidden configuration is changed by setHidden.</p>"
            },
            {
                "name": "hide",
                "params": "this(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires whenever the Component is hidden</p>"
            },
            {
                "name": "initialize",
                "params": "this(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires when the component has been initialized</p>"
            },
            {
                "name": "leftchange",
                "params": "this(Ext.Component) value(Number/String) oldValue(Number/String) eOpts(Object)",
                "doc": "<p>Fires when the left configuration is changed by setLeft.</p>"
            },
            {
                "name": "maxheightchange",
                "params": "this(Ext.Component) value(Number/String) oldValue(Number/String) eOpts(Object)",
                "doc": "<p>Fires when the maxHeight configuration is changed by setMaxHeight.</p>"
            },
            {
                "name": "maxwidthchange",
                "params": "this(Ext.Component) value(Number/String) oldValue(Number/String) eOpts(Object)",
                "doc": "<p>Fires when the maxWidth configuration is changed by setMaxWidth.</p>"
            },
            {
                "name": "minheightchange",
                "params": "this(Ext.Component) value(Number/String) oldValue(Number/String) eOpts(Object)",
                "doc": "<p>Fires when the minHeight configuration is changed by setMinHeight.</p>"
            },
            {
                "name": "minwidthchange",
                "params": "this(Ext.Component) value(Number/String) oldValue(Number/String) eOpts(Object)",
                "doc": "<p>Fires when the minWidth configuration is changed by setMinWidth.</p>"
            },
            {
                "name": "moved",
                "params": "this(Ext.Component) container(Ext.Container) toIndex(Number) fromIndex(Number) eOpts(Object)",
                "doc": "<p>Fires when a component si moved within its Container.</p>"
            },
            {
                "name": "orientationchange",
                "params": "eOpts(Object)",
                "doc": "<p>Fires when orientation changes.</p>"
            },
            {
                "name": "painted",
                "params": "element(Ext.Element) eOpts(Object)",
                "doc": "<p>Fires whenever this Element actually becomes visible (painted) on the screen. This is useful when you need to\nperform 'read' operations on the DOM element, i.e: calculating natural sizes and positioning.</p>"
            },
            {
                "name": "removed",
                "params": "this(Ext.Component) container(Ext.Container) index(Number) eOpts(Object)",
                "doc": "<p>Fires when a component is removed from a Container</p>"
            },
            {
                "name": "resize",
                "params": "element(Ext.Element) eOpts(Object)",
                "doc": "<p>Important note: For the best performance on mobile devices, use this only when you absolutely need to monitor\na Element's size.</p>"
            },
            {
                "name": "rightchange",
                "params": "this(Ext.Component) value(Number/String) oldValue(Number/String) eOpts(Object)",
                "doc": "<p>Fires when the right configuration is changed by setRight.</p>"
            },
            {
                "name": "scrollablechange",
                "params": "this(Ext.Component) value(Boolean/String/Object) oldValue(Boolean/String/Object) eOpts(Object)",
                "doc": "<p>Fires when the scrollable configuration is changed by setScrollable.</p>"
            },
            {
                "name": "show",
                "params": "this(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires whenever the Component is shown</p>"
            },
            {
                "name": "topchange",
                "params": "this(Ext.Component) value(Number/String) oldValue(Number/String) eOpts(Object)",
                "doc": "<p>Fires when the top configuration is changed by setTop.</p>"
            },
            {
                "name": "updatedata",
                "params": "this(Ext.Component) newData(Object) eOpts(Object)",
                "doc": "<p>Fires whenever the data of the component is updated</p>"
            }
        ]
    },
    "Ext.ComponentManager": {
        "type": "Ext.ComponentManager",
        "doc": "<p>Provides a registry of all Components (instances of Ext.Component or any subclass\nthereof) on a page so that they can be easily accessed by component\nid (see get, or the convenience method\nExt.getCmp).</p>",
        "configs": [],
        "events": []
    },
    "Ext.ComponentQuery": {
        "type": "Ext.ComponentQuery",
        "doc": "<p>Provides searching of Components within Ext.ComponentManager (globally) or a specific\nExt.container.Container on the document with a similar syntax to a CSS selector.\nReturns Array of matching Components, or empty Array.</p>",
        "configs": [],
        "events": []
    },
    "Ext.Config": {
        "type": "Ext.Config",
        "doc": "<p>This class manages a config property. Instances of this type are created and cached as\nclasses declare their config properties. One instance of this class is created per\nconfig property name.</p>",
        "configs": [
            {
                "name": "cached",
                "type": "boolean",
                "doc": "<p>When set as <code>true</code> the config property will be stored on the class prototype once\nthe first instance has had a chance to process the default value.</p>",
                "default": "false"
            },
            {
                "name": "evented",
                "type": "boolean",
                "doc": "<p>When set as <code>true</code> the config property will be treated as a Evented Config.</p>",
                "default": "false"
            },
            {
                "name": "lazy",
                "type": "boolean",
                "doc": "<p>When set as <code>true</code> the config property will not be immediately initialized during\nthe <code>initConfig</code> call.</p>",
                "default": "false"
            },
            {
                "name": "merge",
                "type": "function",
                "doc": "<p>This function if supplied will be called as classes or instances provide values\nthat need to be combined with inherited values. The function should return the\nvalue that will be the config value. Further calls may receive such returned\nvalues as <code>oldValue</code>.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.Configurator": {
        "type": "Ext.Configurator",
        "doc": "<p>This class manages the config properties for a class.</p>",
        "configs": [],
        "events": []
    },
    "Ext.Container": {
        "type": "Ext.Container",
        "doc": "<p>A Container has all of the abilities of Component, but lets you nest other Components inside\nit. Applications are made up of lots of components, usually nested inside one another. Containers allow you to\nrender and arrange child Components inside them. Most apps have a single top-level Container called a Viewport,\nwhich takes up the entire screen. Inside of this are child components, for example in a mail app the Viewport\nContainer's two children might be a message List and an email preview pane.</p>",
        "configs": [
            {
                "name": "activeItem",
                "type": "object/string/number",
                "doc": "<p>The item from the items collection that will be active first. This is\nusually only meaningful in a card layout, where only one item can be active at a\ntime. If passes a string, it will be assumed to be a Ext.ComponentQuery selector.</p>",
                "default": "0"
            },
            {
                "name": "autoDestroy",
                "type": "boolean",
                "doc": "<p>If <code>true</code>, child items will be destroyed as soon as they are removed\nfrom this container.</p>",
                "default": "true"
            },
            {
                "name": "cardSwitchAnimation",
                "type": "string/object/boolean",
                "doc": "<p>Animation to be used during transitions of cards.</p>",
                "default": null
            },
            {
                "name": "control",
                "type": "object",
                "doc": "<p>Enables you to easily control Components inside this Container by listening to their\nevents and taking some action. For example, if we had a container with a nested Disable button, and we\nwanted to hide the Container when the Disable button is tapped, we could do this:</p>",
                "default": "{}"
            },
            {
                "name": "defaultType",
                "type": "string",
                "doc": "<p>The default xtype of child Components to create in this Container when a child item\nis specified as a raw configuration object, rather than as an instantiated Component.</p>",
                "default": null
            },
            {
                "name": "defaults",
                "type": "object",
                "doc": "<p>A set of default configurations to apply to all child Components in this Container.\nIt's often useful to specify defaults when creating more than one items with similar configurations. For\nexample here we can specify that each child is a panel and avoid repeating the xtype declaration for each\none:</p>",
                "default": null
            },
            {
                "name": "hideOnMaskTap",
                "type": "boolean",
                "doc": "<p>When using a modal Component, setting this to <code>true</code> will hide the modal\nmask and the Container when the mask is tapped on.</p>",
                "default": null
            },
            {
                "name": "items",
                "type": "array/object",
                "doc": "<p>The child items to add to this Container. This is usually an array of Component\nconfigurations or instances, for example:</p>",
                "default": null
            },
            {
                "name": "layout",
                "type": "object/string",
                "doc": "<p>Configuration for this Container's layout. Example:</p>",
                "default": "'default'"
            },
            {
                "name": "manageBorders",
                "type": "boolean",
                "doc": "<p><code>true</code> to enable border management of docked items.  When enabled, borders of docked\nitems will collapse where they meet to avoid duplicated borders.</p>",
                "default": "false"
            },
            {
                "name": "masked",
                "type": "boolean/object/ext.mask/ext.loadmask",
                "doc": "<p>A configuration to allow you to mask this container.\nYou can optionally pass an object block with and xtype of <code>loadmask</code>, and an optional <code>message</code> value to\ndisplay a loading mask. Please refer to the Ext.LoadMask component to see other configurations.</p>",
                "default": null
            },
            {
                "name": "modal",
                "type": "boolean",
                "doc": "<p><code>true</code> to make this Container modal. This will create a mask underneath the Container\nthat covers its parent and does not allow the user to interact with any other Components until this\nContainer is dismissed.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "activate",
                "params": "newActiveItem(Object) this(Ext.Container) oldActiveItem(Object) eOpts(Object)",
                "doc": "<p>Fires whenever item within the Container is activated.</p>"
            },
            {
                "name": "activeitemchange",
                "params": "this(Ext.Container) value(Object/String/Number) oldValue(Object/String/Number) eOpts(Object)",
                "doc": "<p>Fires when the activeItem configuration is changed by setActiveItem.</p>"
            },
            {
                "name": "add",
                "params": "this(Ext.Container) item(Object) index(Number) eOpts(Object)",
                "doc": "<p>Fires whenever item added to the Container.</p>"
            },
            {
                "name": "deactivate",
                "params": "oldActiveItem(Object) this(Ext.Container) newActiveItem(Object) eOpts(Object)",
                "doc": "<p>Fires whenever item within the Container is deactivated.</p>"
            },
            {
                "name": "move",
                "params": "this(Ext.Container) item(Object) toIndex(Number) fromIndex(Number) eOpts(Object)",
                "doc": "<p>Fires whenever item moved within the Container.</p>"
            },
            {
                "name": "remove",
                "params": "this(Ext.Container) item(Object) index(Number) eOpts(Object)",
                "doc": "<p>Fires whenever item removed from the Container.</p>"
            },
            {
                "name": "renderedchange",
                "params": "this(Ext.Container) item(Object) rendered(Boolean) eOpts(Object)",
                "doc": "<p>Fires whenever an item is rendered into a container or derendered\nfrom a Container.</p>"
            }
        ]
    },
    "Ext.data.AbstractStore": {
        "type": "Ext.data.AbstractStore",
        "doc": "<p>AbstractStore is a superclass of Ext.data.ProxyStore and Ext.data.ChainedStore. It's never used directly,\nbut offers a set of methods used by both of those subclasses.</p>",
        "configs": [
            {
                "name": "autoDestroy",
                "type": "boolean",
                "doc": "<p>When a Store is used by only one DataView, and should only exist for the lifetime of that view, then\nconfigure the autoDestroy flag as <code>true</code>. This causes the destruction of the view to trigger the destruction of its Store.</p>",
                "default": null
            },
            {
                "name": "filters",
                "type": "object[]/function[]",
                "doc": "<p>Array of Filters for this store. Can also be passed array of\nfunctions which will be used as the filterFn config\nfor filters:</p>",
                "default": null
            },
            {
                "name": "groupDir",
                "type": "string",
                "doc": "<p>The direction in which sorting should be applied when grouping. Supported values are \"ASC\" and \"DESC\".</p>",
                "default": "'ASC'"
            },
            {
                "name": "groupField",
                "type": "string",
                "doc": "<p>The field by which to group data in the store. Internally, grouping is very similar to sorting - the\ngroupField and groupDir are injected as the first sorter (see sort). Stores support a single\nlevel of grouping, and groups can be fetched via the getGroups method.</p>",
                "default": null
            },
            {
                "name": "grouper",
                "type": "object/ext.util.grouper",
                "doc": "<p>The grouper by which to group the data store. May also be specified by the groupField config, however\nthey should not be used together.</p>",
                "default": null
            },
            {
                "name": "pageSize",
                "type": "number",
                "doc": "<p>The number of records considered to form a 'page'. This is used to power the built-in\npaging using the nextPage and previousPage functions when the grid is paged using a\nPagingToolbar Defaults to 25.</p>",
                "default": "25"
            },
            {
                "name": "remoteFilter",
                "type": "boolean",
                "doc": "<p><code>true</code> to defer any filtering operation to the server. If <code>false</code>, filtering is done locally on the client.</p>",
                "default": "false"
            },
            {
                "name": "remoteSort",
                "type": "boolean",
                "doc": "<p><code>true</code> if the sorting should be performed on the server side, false if it is local only.</p>",
                "default": "false"
            },
            {
                "name": "sorters",
                "type": "ext.util.sorter[]/object[]",
                "doc": "<p>The initial set of Sorters</p>",
                "default": null
            },
            {
                "name": "statefulFilters",
                "type": "boolean",
                "doc": "<p>Configure as <code>true</code> to have the filters saved when a client grid saves its state.</p>",
                "default": "false"
            },
            {
                "name": "storeId",
                "type": "string",
                "doc": "<p>Unique identifier for this store. If present, this Store will be registered with the Ext.data.StoreManager,\nmaking it easy to reuse elsewhere.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "add",
                "params": "store(Ext.data.Store) records(Ext.data.Model[]) index(Number) eOpts(Object)",
                "doc": "<p>Fired when a Model instance has been added to this Store.</p>"
            },
            {
                "name": "beforesort",
                "params": "store(Ext.data.Store) sorters(Ext.util.Sorter[]) eOpts(Object)",
                "doc": "<p>Fires before a store is sorted.</p>"
            },
            {
                "name": "beginupdate",
                "params": "eOpts(Object)",
                "doc": "<p>Fires when the beginUpdate method is called. Automatic synchronization as configured\nby the autoSync flag is deferred until the endUpdate method is called, so multiple\nmutations can be coalesced into one synchronization operation.</p>"
            },
            {
                "name": "clear",
                "params": "this(Ext.data.Store) eOpts(Object)",
                "doc": "<p>Fired after the removeAll method is called.</p>"
            },
            {
                "name": "datachanged",
                "params": "this(Ext.data.Store) eOpts(Object)",
                "doc": "<p>Fires whenever records are added to or removed from the Store.</p>"
            },
            {
                "name": "endupdate",
                "params": "eOpts(Object)",
                "doc": "<p>Fires when the endUpdate method is called. Automatic synchronization as configured\nby the autoSync flag is deferred until the endUpdate method is called, so multiple\nmutations can be coalesced into one synchronization operation.</p>"
            },
            {
                "name": "refresh",
                "params": "this(Ext.data.Store) eOpts(Object)",
                "doc": "<p>Fires when the data cache has changed in a bulk manner (e.g., it has been sorted, filtered, etc.) and a\nwidget that is using this Store as a Record cache should refresh its view.</p>"
            },
            {
                "name": "remove",
                "params": "store(Ext.data.Store) records(Ext.data.Model[]) index(Number) isMove(Boolean) eOpts(Object)",
                "doc": "<p>Fired when one or more records have been removed from this Store.</p>"
            },
            {
                "name": "sort",
                "params": "store(Ext.data.Store) eOpts(Object)",
                "doc": "<p>Fires after a store is sorted.</p>"
            },
            {
                "name": "update",
                "params": "this(Ext.data.Store) record(Ext.data.Model) operation(String) modifiedFieldNames(String[]) details(Object) eOpts(Object)",
                "doc": "<p>Fires when a Model instance has been updated.</p>"
            }
        ]
    },
    "Ext.data.ArrayStore": {
        "type": "Ext.data.ArrayStore",
        "doc": "<p>Small helper class to make creating Ext.data.Stores from Array data easier. An ArrayStore will be\nautomatically configured with a Ext.data.reader.Array.</p>",
        "configs": [
            {
                "name": "proxy",
                "type": "string/ext.data.proxy.proxy/object",
                "doc": "<p>The Proxy to use for this Store. This can be either a string, a config object or a Proxy instance -\nsee setProxy for details.</p>",
                "default": "{type: 'memory', reader: 'array'}"
            }
        ],
        "events": []
    },
    "Ext.data.Batch": {
        "type": "Ext.data.Batch",
        "doc": "<p>Provides a mechanism to run one or more operations\nin a given order. Fires the <code>operationcomplete</code> event after the completion of each\nOperation, and the <code>complete</code> event when all Operations have been successfully executed.\nFires an <code>exception</code> event if any of the Operations encounter an exception.</p>",
        "configs": [
            {
                "name": "pauseOnException",
                "type": "boolean",
                "doc": "<p>True to pause the execution of the batch if any operation encounters an exception\n(defaults to false). If you set this to true you are responsible for implementing the appropriate\nhandling logic and restarting or discarding the batch as needed. There are different ways you could\ndo this, e.g. by handling the batch's exception event directly, or perhaps by overriding\nonBatchException at the store level. If you do pause\nand attempt to handle the exception you can call retry to process the same operation again.</p>",
                "default": "false"
            }
        ],
        "events": [
            {
                "name": "complete",
                "params": "batch(Ext.data.Batch) operation(Object) eOpts(Object)",
                "doc": "<p>Fired when all operations of this batch have been completed</p>"
            },
            {
                "name": "exception",
                "params": "batch(Ext.data.Batch) operation(Object) eOpts(Object)",
                "doc": "<p>Fired when a operation encountered an exception</p>"
            },
            {
                "name": "operationcomplete",
                "params": "batch(Ext.data.Batch) operation(Object) eOpts(Object)",
                "doc": "<p>Fired when each operation of the batch completes</p>"
            }
        ]
    },
    "Ext.data.BufferedStore": {
        "type": "Ext.data.BufferedStore",
        "doc": "<p>A BufferedStore maintains a sparsely populated map of pages corresponding to an extremely large server-side dataset.</p>",
        "configs": [
            {
                "name": "data",
                "type": "number",
                "doc": "\n",
                "default": "0"
            },
            {
                "name": "defaultViewSize",
                "type": "number",
                "doc": "<p>The default view size to use until the viewSize has been configured.</p>",
                "default": "100"
            },
            {
                "name": "leadingBufferZone",
                "type": "number",
                "doc": "<p>The number of extra rows to keep cached on the leading side of scrolling buffer\nas scrolling proceeds. A larger number means fewer replenishments from the server.</p>",
                "default": "200"
            },
            {
                "name": "pageSize",
                "type": "number",
                "doc": "<p>The number of records considered to form a 'page'. This is used to power the built-in\npaging using the nextPage and previousPage functions when the grid is paged using a\nPagingToolbar Defaults to 25.</p>",
                "default": "25"
            },
            {
                "name": "purgePageCount",
                "type": "number",
                "doc": "<p>The number of pages <em>in addition to twice the required buffered range</em> to keep in the prefetch cache before purging least recently used records.</p>",
                "default": "5"
            },
            {
                "name": "remoteFilter",
                "type": "boolean",
                "doc": "<p><code>true</code> to defer any filtering operation to the server. If <code>false</code>, filtering is done locally on the client.</p>",
                "default": "true"
            },
            {
                "name": "remoteSort",
                "type": "boolean",
                "doc": "<p><code>true</code> if the sorting should be performed on the server side, false if it is local only.</p>",
                "default": "true"
            },
            {
                "name": "sortOnLoad",
                "type": "boolean",
                "doc": "<p>If true, any sorters attached to this Store will be run after loading data, before the datachanged event is fired.\nDefaults to true, ignored if remoteSort is true</p>",
                "default": "false"
            },
            {
                "name": "trackRemoved",
                "type": "boolean",
                "doc": "<p>This config controls whether removed records are remembered by this store for\nlater saving to the server.</p>",
                "default": "false"
            },
            {
                "name": "trailingBufferZone",
                "type": "number",
                "doc": "<p>The number of extra records to keep cached on the trailing side of scrolling buffer\nas scrolling proceeds. A larger number means fewer replenishments from the server.</p>",
                "default": "25"
            },
            {
                "name": "viewSize",
                "type": "number",
                "doc": "<p>The view size needed to fill the current view. Defaults to the defaultViewSize.\nThis will typically be set by the underlying view.</p>",
                "default": "0"
            }
        ],
        "events": []
    },
    "Ext.data.ChainedStore": {
        "type": "Ext.data.ChainedStore",
        "doc": "<p>A chained store is a store that is a \"view\" of an existing store. The data comes from the\nsource, however this view of the store may be sorted &amp; filtered independently without\nhaving any impact on the source store.</p>",
        "configs": [
            {
                "name": "remoteFilter",
                "type": "boolean",
                "doc": "<p><code>true</code> to defer any filtering operation to the server. If <code>false</code>, filtering is done locally on the client.</p>",
                "default": "false"
            },
            {
                "name": "remoteSort",
                "type": "boolean",
                "doc": "<p><code>true</code> if the sorting should be performed on the server side, false if it is local only.</p>",
                "default": "false"
            },
            {
                "name": "source",
                "type": "ext.data.store/string",
                "doc": "<p>The backing data source for this chained store. Either a store instance\nor the id of an existing store.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.Connection": {
        "type": "Ext.data.Connection",
        "doc": "<p>The Connection class encapsulates a connection to the page's originating domain, allowing requests to be made either\nto a configured URL, or to a URL specified at request time.</p>",
        "configs": [
            {
                "name": "async",
                "type": "boolean",
                "doc": "<p><code>true</code> if this request should run asynchronously. Setting this to <code>false</code> should generally\nbe avoided, since it will cause the UI to be blocked, the user won't be able to interact\nwith the browser until the request completes.</p>",
                "default": "true"
            },
            {
                "name": "autoAbort",
                "type": "boolean",
                "doc": "<p>Whether this request should abort any pending requests.</p>",
                "default": "false"
            },
            {
                "name": "binary",
                "type": "boolean",
                "doc": "<p>True if the response should be treated as binary data.  If true, the binary\ndata will be accessible as a \"responseBytes\" property on the response object.</p>",
                "default": "false"
            },
            {
                "name": "cors",
                "type": "boolean",
                "doc": "<p>True to enable CORS support on the XHR object. Currently the only effect of this option\nis to use the XDomainRequest object instead of XMLHttpRequest if the browser is IE8 or above.</p>",
                "default": "false"
            },
            {
                "name": "defaultHeaders",
                "type": "object",
                "doc": "<p>An object containing request headers which are added to each request made by this object.</p>",
                "default": null
            },
            {
                "name": "defaultPostHeader",
                "type": "string",
                "doc": "<p>The default header to be sent out with any post request.</p>",
                "default": "'application/x-www-form-urlencoded; charset=UTF-8'"
            },
            {
                "name": "defaultXdrContentType",
                "type": "string",
                "doc": "\n",
                "default": "'text/plain'"
            },
            {
                "name": "defaultXhrHeader",
                "type": "string",
                "doc": "<p>The header to send with Ajax requests. Also see useDefaultXhrHeader.</p>",
                "default": "'XMLHttpRequest'"
            },
            {
                "name": "disableCaching",
                "type": "boolean",
                "doc": "<p>True to add a unique cache-buster param to GET requests.</p>",
                "default": "true"
            },
            {
                "name": "disableCachingParam",
                "type": "string",
                "doc": "<p>Change the parameter which is sent went disabling caching through a cache buster.</p>",
                "default": "'_dc'"
            },
            {
                "name": "extraParams",
                "type": "object",
                "doc": "<p>Any parameters to be appended to the request.</p>",
                "default": null
            },
            {
                "name": "isXdr",
                "type": "boolean",
                "doc": "\n",
                "default": "false"
            },
            {
                "name": "method",
                "type": "string",
                "doc": "<p>The default HTTP method to be used for requests.</p>",
                "default": null
            },
            {
                "name": "password",
                "type": "string",
                "doc": "<p>The password to pass when using withCredentials.</p>",
                "default": "''"
            },
            {
                "name": "timeout",
                "type": "number",
                "doc": "<p>The timeout in milliseconds to be used for\nrequests.<br/>\nDefaults to 30000 milliseconds (30 seconds).</p>",
                "default": "30000"
            },
            {
                "name": "url",
                "type": "string",
                "doc": "<p>The URL for this connection.</p>",
                "default": null
            },
            {
                "name": "useDefaultXhrHeader",
                "type": "boolean",
                "doc": "<p><code>true</code> to send the defaultXhrHeader along with any request.</p>",
                "default": "true"
            },
            {
                "name": "username",
                "type": "string",
                "doc": "<p>The username to pass when using withCredentials.</p>",
                "default": "''"
            },
            {
                "name": "withCredentials",
                "type": "boolean",
                "doc": "<p>True to set <code>withCredentials = true</code> on the XHR object</p>",
                "default": "false"
            }
        ],
        "events": [
            {
                "name": "beforerequest",
                "params": "conn(Ext.data.Connection) options(Object) eOpts(Object)",
                "doc": "<p>Fires before a network request is made to retrieve a data object.</p>"
            },
            {
                "name": "requestcomplete",
                "params": "conn(Ext.data.Connection) response(Object) options(Object) eOpts(Object)",
                "doc": "<p>Fires if the request was successfully completed.</p>"
            },
            {
                "name": "requestexception",
                "params": "conn(Ext.data.Connection) response(Object) options(Object) eOpts(Object)",
                "doc": "<p>Fires if an error HTTP status was returned from the server. This event may also\nbe listened to in the event that a request has timed out or has been aborted.\nSee HTTP Status Code Definitions\nfor details of HTTP status codes.</p>"
            }
        ]
    },
    "Ext.data.DirectStore": {
        "type": "Ext.data.DirectStore",
        "doc": "<p>Small helper class to create an Ext.data.Store configured with an Ext.data.proxy.Direct\nand Ext.data.reader.Json to make interacting with an Ext.direct.Manager server-side\nProvider easier. To create a different proxy/reader combination create a basic\nExt.data.Store configured as needed.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.Error": {
        "type": "Ext.data.Error",
        "doc": "<p>This class hols the results of a validator for an <code>Ext.data.Model</code>. These objects are\nplaced in an <code>Ext.data.ErrorCollection</code> and returned by <code>Ext.data.Model.validate</code>.</p>",
        "configs": [
            {
                "name": "field",
                "type": "string",
                "doc": "<p>The name of the field this error belongs to.</p>",
                "default": null
            },
            {
                "name": "message",
                "type": "string",
                "doc": "<p>The message containing the description of the error.</p>",
                "default": "''"
            }
        ],
        "events": []
    },
    "Ext.data.ErrorCollection": {
        "type": "Ext.data.ErrorCollection",
        "doc": "<p>Wraps a collection of validation error responses and provides convenient functions for\naccessing and errors for specific fields.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.field.Boolean": {
        "type": "Ext.data.field.Boolean",
        "configs": [],
        "events": []
    },
    "Ext.data.field.Date": {
        "type": "Ext.data.field.Date",
        "doc": "<p>This class provides Date specific processing for fields.</p>",
        "configs": [
            {
                "name": "dateFormat",
                "type": "string",
                "doc": "<p>Serves as a default for the dateReadFormat and dateWriteFormat config options. This\nwill be used in place of those other configurations if not specified.</p>",
                "default": null
            },
            {
                "name": "dateReadFormat",
                "type": "string",
                "doc": "<p>Used when converting received data into a Date when the type is specified as <code>\"date\"</code>.\nThis configuration takes precedence over dateFormat.\nSee dateFormat for more information.</p>",
                "default": null
            },
            {
                "name": "dateWriteFormat",
                "type": "string",
                "doc": "<p>Provides a custom format when serializing dates with a Ext.data.writer.Writer.\nIf this is not specified, the dateFormat will be used. If no <code>dateFormat</code>\nis specified, 'timestamp' format is used.</p>",
                "default": null
            },
            {
                "name": "sortType",
                "type": "function/string",
                "doc": "<p>A function which converts a Field's value to a comparable value in order to ensure\ncorrect sort ordering.</p>",
                "default": "'asDate'"
            }
        ],
        "events": []
    },
    "Ext.data.field.Field": {
        "type": "Ext.data.field.Field",
        "doc": "<p>Fields are used to define the members of a Model. They aren't instantiated directly;\ninstead, when we create a class that extends Ext.data.Model, it automatically\ncreates Field instances for each field configured in a Model.\nFor example, we might set up a model like this:</p>",
        "configs": [
            {
                "name": "allowBlank",
                "type": "boolean",
                "doc": "<p>Used for validating a model. Defaults to true. An empty value here will cause\nExt.data.Model.isValid to evaluate to false.</p>",
                "default": "true"
            },
            {
                "name": "allowNull",
                "type": "boolean",
                "doc": "<p>Use when converting received data into a &lt;code&gt;int&lt;/code&gt;,\n&lt;code&gt;float&lt;/code&gt;, &lt;code&gt;bool&lt;/code&gt;\nor &lt;code&gt;string&lt;/code&gt; type. If the value cannot be\nparsed, <code>null</code> will be used if allowNull is true, otherwise a default value for that type will be used:</p>",
                "default": "false"
            },
            {
                "name": "calculate",
                "type": "function",
                "doc": "<p>This config defines a simple field calculation function. A calculate method only\nhas access to the record data and should return the value of the calculated field.\nWhen provided in this way, the <code>depends</code> config is automatically determined by\nparsing the <code>calculate</code> function. For example:</p>",
                "default": null
            },
            {
                "name": "convert",
                "type": "function",
                "doc": "<p>If specified this config overrides the <code>convert</code> method. See\nalso <code>calculate</code> for simple field calculations.</p>",
                "default": null
            },
            {
                "name": "critical",
                "type": "boolean",
                "doc": "<p>A critical field is a field that must always be sent to the server even if it has\nnot changed. The most common example of such a field is the \"id\" of a record (see\n<code>Ext.data.Model.idProperty</code> but the <code>Ext.data.Model.versionProperty</code>\nis similarly a <code>critical</code> field.</p>",
                "default": "false"
            },
            {
                "name": "defaultValue",
                "type": "object",
                "doc": "<p>The default value used when the creating an instance from a raw data object,\nand the property referenced by the <code>mapping</code>\ndoes not exist in that data object.</p>",
                "default": "undefined"
            },
            {
                "name": "depends",
                "type": "string/string[]",
                "doc": "<p>The field name or names within the Model on which the value\nof this field depends, and from which a new value may be calculated. These values\nare the values used by the <code>convert</code> method. If you do not have a <code>convert</code> method\nthen this config should not be specified.</p>",
                "default": null
            },
            {
                "name": "mapping",
                "type": "string/number/function",
                "doc": "<p>(Optional) A path expression for use by the Ext.data.reader.Reader implementation that is creating the\nModel to extract the Field value from the data object. If the path expression is the same\nas the field name, the mapping may be omitted. A function may be passed to do complex data extraction. The examples\nbelow are simple just to demonstrate the capability, typically, a function would not be used to extract such\nsimple data.</p>",
                "default": null
            },
            {
                "name": "name",
                "type": "string",
                "doc": "<p>The name by which the field is referenced within the Model. This is referenced by,\nfor example, the <code>dataIndex</code> property in column definition objects passed to\nExt.grid.property.HeaderContainer.</p>",
                "default": null
            },
            {
                "name": "persist",
                "type": "boolean",
                "doc": "<p>False to exclude this field from the Ext.data.Model.modified fields in a\nrecord. This will also exclude the field from being written using a\nExt.data.writer.Writer. This option is useful when fields are used to keep\nstate on the client but do not need to be persisted to the server.</p>",
                "default": null
            },
            {
                "name": "reference",
                "type": "string/object",
                "doc": "<p>The name of the entity referenced by this field.\nIn most databases, this relationship is represented by a \"foreign key\". That is, a\nvalue for such a field matches the value of the id\nfor an entity of this type.</p>",
                "default": null
            },
            {
                "name": "serialize",
                "type": "function",
                "doc": "<p>A function which converts the Model's value for this Field into a form which can be used by whatever Writer\nis being used to sync data with the server.</p>",
                "default": null
            },
            {
                "name": "sortType",
                "type": "function/string",
                "doc": "<p>A function which converts a Field's value to a comparable value in order to ensure\ncorrect sort ordering.</p>",
                "default": null
            },
            {
                "name": "unique",
                "type": "boolean",
                "doc": "<p><code>true</code> if the value of this field is unique amongst all instances. When used with a\n<code>reference</code> this describes a \"one-to-one\" relationship. It is almost always the case\nthat a <code>unique</code> field cannot also be nullable.</p>",
                "default": "false"
            },
            {
                "name": "validators",
                "type": "object[]",
                "doc": "<p>An array of validators for this field. These\n<code>validators</code> will only be passed a field value to validate.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.field.Integer": {
        "type": "Ext.data.field.Integer",
        "configs": [],
        "events": []
    },
    "Ext.data.field.Number": {
        "type": "Ext.data.field.Number",
        "configs": [],
        "events": []
    },
    "Ext.data.field.String": {
        "type": "Ext.data.field.String",
        "configs": [
            {
                "name": "sortType",
                "type": "function/string",
                "doc": "<p>A function which converts a Field's value to a comparable value in order to ensure\ncorrect sort ordering.</p>",
                "default": "'asUCString'"
            }
        ],
        "events": []
    },
    "Ext.data.flash.BinaryXhr": {
        "type": "Ext.data.flash.BinaryXhr",
        "doc": "<p>Simulates an XMLHttpRequest object's methods and properties as returned\nform the flash polyfill plugin. Used in submitting binary data in browsers that do\nnot support doing so from JavaScript.\nNOTE: By default this will look for the flash object in the ext directory. When packaging and deploying the app, copy the <tt>ext/plugins</tt> directory and its contents to your root directory. For custom deployments where just the <tt>FlashPlugin.swf</tt> file gets copied (e.g. to <tt>/resources/FlashPlugin.swf</tt>), make sure to notify the framework of the location of the plugin before making the first attempt to post binary data, e.g. in the <tt>launch</tt> method of your app do:</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.identifier.Generator": {
        "type": "Ext.data.identifier.Generator",
        "doc": "<p>This class is a base for all id generators. It also provides lookup of id generators by\ntheir id.</p>",
        "configs": [
            {
                "name": "id",
                "type": "string",
                "doc": "<p>The id for this generator.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.identifier.Negative": {
        "type": "Ext.data.identifier.Negative",
        "doc": "<p>This class id generator produces successive negative numbers for id's. That is, -1, -2,\netc..</p>",
        "configs": [
            {
                "name": "increment",
                "type": "number",
                "doc": "<p>The number by which to adjust the <code>seed</code> after for the next sequential id.</p>",
                "default": "1"
            },
            {
                "name": "seed",
                "type": "number",
                "doc": "<p>The number at which to start generating sequential id's.</p>",
                "default": "1"
            }
        ],
        "events": []
    },
    "Ext.data.identifier.Sequential": {
        "type": "Ext.data.identifier.Sequential",
        "doc": "<p>This class is a sequential id generator. A simple use of this class would be like so:</p>",
        "configs": [
            {
                "name": "increment",
                "type": "number",
                "doc": "<p>The number by which to adjust the <code>seed</code> after for the next sequential id.</p>",
                "default": "1"
            },
            {
                "name": "prefix",
                "type": "string",
                "doc": "<p>The string to place in front of the sequential number for each generated id.</p>",
                "default": null
            },
            {
                "name": "seed",
                "type": "number",
                "doc": "<p>The number at which to start generating sequential id's.</p>",
                "default": "1"
            }
        ],
        "events": []
    },
    "Ext.data.identifier.Uuid": {
        "type": "Ext.data.identifier.Uuid",
        "doc": "<p>This class generates UUID's according to RFC 4122. This class has a default id property.\nThis means that a single instance is shared unless the id property is overridden. Thus,\ntwo Ext.data.Model instances configured like the following share one generator:</p>",
        "configs": [
            {
                "name": "clockSeq",
                "type": "number",
                "doc": "<p>A clock value to help avoid duplicates.</p>",
                "default": null
            },
            {
                "name": "id",
                "type": "object",
                "doc": "<p>The id for this generator instance. By default all model instances share the same\nUUID generator instance. By specifying an id other then 'uuid', a unique generator instance\nwill be created for the Model.</p>",
                "default": null
            },
            {
                "name": "salt",
                "type": "number/object",
                "doc": "<p>This value is a 48-bit number. This can be a number or an object with <code>hi</code> and <code>lo</code>\nproperties where <code>lo</code> is the low 32-bits and <code>hi</code> is the upper 16 bits.</p>",
                "default": null
            },
            {
                "name": "timestamp",
                "type": "number/object",
                "doc": "<p>When created, this value is a 60-bit number. This can be a number or an object with\n<code>hi</code> and <code>lo</code> properties where <code>lo</code> is the low 32-bits and <code>hi</code> is the upper 28 bits.</p>",
                "default": null
            },
            {
                "name": "version",
                "type": "number",
                "doc": "<p>The Version of UUID. Supported values are:</p>",
                "default": "4"
            }
        ],
        "events": []
    },
    "Ext.data.JsonP": {
        "type": "Ext.data.JsonP",
        "doc": "<p>This class is used to create JSONP requests. JSONP is a mechanism that allows for making\nrequests for data cross domain. JSONP is basically a <code>&lt;script&gt;</code> node with the source of the url executing\na function that was created by Ext.data.JsonP. Once the resource has loaded, the <code>&lt;script&gt;</code> node will be destroyed.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.JsonPStore": {
        "type": "Ext.data.JsonPStore",
        "doc": "<p>Small helper class to make creating Ext.data.Stores from different domain JSON data easier.\nA JsonPStore will be automatically configured with a Ext.data.reader.Json and a JsonPProxy.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.JsonStore": {
        "type": "Ext.data.JsonStore",
        "doc": "<p>Small helper class to make creating Ext.data.Stores from JSON data easier.\nA JsonStore will be automatically configured with a Ext.data.reader.Json.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.LocalStore": {
        "type": "Ext.data.LocalStore",
        "doc": "<p>A mixin that provides common store methods for Ext.data.Store &amp; Ext.data.ChainedStore.</p>",
        "configs": [
            {
                "name": "extraKeys",
                "type": "object",
                "doc": "\n",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.matrix.Matrix": {
        "type": "Ext.data.matrix.Matrix",
        "doc": "<p>This class manages a many-to-many matrix for a <code>Session</code>.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.matrix.Side": {
        "type": "Ext.data.matrix.Side",
        "doc": "<p>This class manages one side of a <code>Matrix</code>.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.matrix.Slice": {
        "type": "Ext.data.matrix.Slice",
        "doc": "<p>This class manages one side of a <code>Matrix</code>.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.Model": {
        "type": "Ext.data.Model",
        "doc": "<p>A Model or Entity represents some object that your application manages. For example, one\nmight define a Model for Users, Products, Cars, or other real-world object that we want\nto model in the system. Models are used by stores, which are in\nturn used by many of the data-bound components in Ext.</p>",
        "configs": [
            {
                "name": "associations",
                "type": "object[]",
                "doc": "<p>An array of associations for this model.</p>",
                "default": null
            },
            {
                "name": "belongsTo",
                "type": "string/object/string[]/object[]",
                "doc": "<p>One or more BelongsTo associations for this model.</p>",
                "default": null
            },
            {
                "name": "clientIdProperty",
                "type": "string",
                "doc": "<p>The name of the property a server will use to send back a client-generated id in a\n<code>create</code> or <code>update</code> <code>operation</code>.</p>",
                "default": null
            },
            {
                "name": "convertOnSet",
                "type": "boolean",
                "doc": "<p>Set to <code>false</code> to prevent any converters from being called on fields specified in\na set operation.</p>",
                "default": "true"
            },
            {
                "name": "fields",
                "type": "object[]/string[]",
                "doc": "<p>An Array of <code>Ext.data.field.Field</code> config objects, simply the field\nname, or a mix of config objects and strings.\nIf just a name is given, the field type defaults to <code>auto</code>.</p>",
                "default": null
            },
            {
                "name": "hasMany",
                "type": "string/object/string[]/object[]",
                "doc": "<p>One or more HasMany associations for this model.</p>",
                "default": null
            },
            {
                "name": "idProperty",
                "type": "string",
                "doc": "<p>The name of the field treated as this Model's unique id.</p>",
                "default": "'id'"
            },
            {
                "name": "identifier",
                "type": "string/object",
                "doc": "<p>The id generator to use for this model. The <code>identifier</code> generates values for the\nidProperty when no value is given. Records with client-side generated\nvalues for idProperty are called phantom records since they are\nnot yet known to the server.</p>",
                "default": null
            },
            {
                "name": "manyToMany",
                "type": "object",
                "doc": "<p>A config object for a ManyToMany association.\nSee the class description for ManyToMany for\nconfiguration examples.</p>",
                "default": null
            },
            {
                "name": "proxy",
                "type": "string/object/ext.data.proxy.proxy",
                "doc": "<p>The proxy to use for this class.</p>",
                "default": null
            },
            {
                "name": "schema",
                "type": "string/object",
                "doc": "<p>The name of the schema to which this entity and its\nassociations belong. For details on custom schemas see <code>Ext.data.schema.Schema</code>.</p>",
                "default": "'default'"
            },
            {
                "name": "validationSeparator",
                "type": "string",
                "doc": "<p>If specified this property is used to concatenate multiple errors for each field\nas reported by the <code>validators</code>.</p>",
                "default": "null"
            },
            {
                "name": "validators",
                "type": "object[]",
                "doc": "<p>An array of validators for this model.</p>",
                "default": null
            },
            {
                "name": "versionProperty",
                "type": "string",
                "doc": "<p>If specified, this is the name of the property that contains the entity \"version\".\nThe version property is used to manage a long-running transaction and allows the\ndetection of simultaneous modification.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.ModelManager": {
        "type": "Ext.data.ModelManager",
        "doc": "<p>This class has been deprecated. Use <code>Ext.data.schema.Schema</code> instead.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.NodeInterface": {
        "type": "Ext.data.NodeInterface",
        "doc": "<p>This class is used as a set of methods that are applied to the prototype of a\nModel to decorate it with a Node API. This means that models\nused in conjunction with a tree will have all of the tree related methods available\non the model. In general, this class will not be used directly by the developer.</p>",
        "configs": [
            {
                "name": "allowDrag",
                "type": "boolean",
                "doc": "<p>Set to false to deny dragging of this node.</p>",
                "default": "true"
            },
            {
                "name": "allowDrop",
                "type": "boolean",
                "doc": "<p>Set to false to deny dropping on this node.</p>",
                "default": "true"
            },
            {
                "name": "checked",
                "type": "boolean",
                "doc": "<p>Set to true or false to show a checkbox alongside this node.</p>",
                "default": "null"
            },
            {
                "name": "children",
                "type": "ext.data.nodeinterface[]",
                "doc": "<p>Array of child nodes.</p>",
                "default": null
            },
            {
                "name": "cls",
                "type": "string",
                "doc": "<p>CSS class to apply to this node.</p>",
                "default": null
            },
            {
                "name": "depth",
                "type": "number",
                "doc": "<p>The number of parents this node has. A root node has depth 0, a child of it depth 1, and so on...</p>",
                "default": null
            },
            {
                "name": "expandable",
                "type": "boolean",
                "doc": "<p>False to prevent expanding/collapsing of this node.</p>",
                "default": "true"
            },
            {
                "name": "expanded",
                "type": "boolean",
                "doc": "<p>True if the node is expanded.</p>",
                "default": "false"
            },
            {
                "name": "href",
                "type": "string",
                "doc": "<p>A URL for a link that's created when this config is specified.</p>",
                "default": null
            },
            {
                "name": "hrefTarget",
                "type": "string",
                "doc": "<p>Target for link. Only applicable when href is also specified.</p>",
                "default": null
            },
            {
                "name": "icon",
                "type": "string",
                "doc": "<p>Path to an image to use as an icon.</p>",
                "default": null
            },
            {
                "name": "iconCls",
                "type": "string",
                "doc": "<p>One or more space separated CSS classes to be applied to the icon element.\nThe CSS rule(s) applied should specify a background image to be used as the\nicon.</p>",
                "default": null
            },
            {
                "name": "index",
                "type": "number",
                "doc": "<p>The position of the node inside its parent. When parent has 4 children and the node is third amongst them,\nindex will be 2.</p>",
                "default": null
            },
            {
                "name": "isFirst",
                "type": "boolean",
                "doc": "<p>True if this is the first node.</p>",
                "default": null
            },
            {
                "name": "isLast",
                "type": "boolean",
                "doc": "<p>True if this is the last node.</p>",
                "default": null
            },
            {
                "name": "leaf",
                "type": "boolean",
                "doc": "<p>Set to true to indicate that this child can have no children. The expand icon/arrow will then not be\nrendered for this node.</p>",
                "default": "false"
            },
            {
                "name": "loaded",
                "type": "boolean",
                "doc": "<p>True if the node has finished loading.</p>",
                "default": "false"
            },
            {
                "name": "loading",
                "type": "boolean",
                "doc": "<p>True if the node is currently loading.</p>",
                "default": "false"
            },
            {
                "name": "parentId",
                "type": "string",
                "doc": "<p>ID of parent node.</p>",
                "default": null
            },
            {
                "name": "qshowDelay",
                "type": "number",
                "doc": "<p>Tooltip showDelay.</p>",
                "default": null
            },
            {
                "name": "qtip",
                "type": "string",
                "doc": "<p>Tooltip text to show on this node.</p>",
                "default": null
            },
            {
                "name": "qtitle",
                "type": "string",
                "doc": "<p>Tooltip title.</p>",
                "default": null
            },
            {
                "name": "root",
                "type": "boolean",
                "doc": "<p>True if this is the root node.</p>",
                "default": null
            },
            {
                "name": "text",
                "type": "string",
                "doc": "<p>The text to show on node label (<em>html tags are accepted</em>).\nThe default text for the root node is <code>ROOT</code>.  All other nodes default to ''.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "append",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) index(Number) eOpts(Object)",
                "doc": "<p>Fires when a new child node is appended</p>"
            },
            {
                "name": "beforeappend",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires before a new child is appended, return false to cancel the append.</p>"
            },
            {
                "name": "beforecollapse",
                "params": "this(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires before this node is collapsed.</p>"
            },
            {
                "name": "beforeexpand",
                "params": "this(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires before this node is expanded.</p>"
            },
            {
                "name": "beforeinsert",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) refNode(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires before a new child is inserted, return false to cancel the insert.</p>"
            },
            {
                "name": "beforemove",
                "params": "this(Ext.data.NodeInterface) oldParent(Ext.data.NodeInterface) newParent(Ext.data.NodeInterface) index(Number) eOpts(Object)",
                "doc": "<p>Fires before this node is moved to a new location in the tree. Return false to cancel the move.</p>"
            },
            {
                "name": "beforeremove",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) isMove(Boolean) eOpts(Object)",
                "doc": "<p>Fires before a child is removed, return false to cancel the remove.</p>"
            },
            {
                "name": "collapse",
                "params": "this(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires when this node is collapsed.</p>"
            },
            {
                "name": "expand",
                "params": "this(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires when this node is expanded.</p>"
            },
            {
                "name": "insert",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) refNode(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires when a new child node is inserted.</p>"
            },
            {
                "name": "move",
                "params": "this(Ext.data.NodeInterface) oldParent(Ext.data.NodeInterface) newParent(Ext.data.NodeInterface) index(Number) eOpts(Object)",
                "doc": "<p>Fires when this node is moved to a new location in the tree</p>"
            },
            {
                "name": "remove",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) isMove(Boolean) context(Object) eOpts(Object)",
                "doc": "<p>Fires when a child node is removed</p>"
            },
            {
                "name": "sort",
                "params": "this(Ext.data.NodeInterface) childNodes(Ext.data.NodeInterface[]) eOpts(Object)",
                "doc": "<p>Fires when this node's childNodes are sorted.</p>"
            }
        ]
    },
    "Ext.data.NodeStore": {
        "type": "Ext.data.NodeStore",
        "doc": "<p>Node Store</p>",
        "configs": [
            {
                "name": "folderSort",
                "type": "boolean",
                "doc": "<p>Set to <code>true</code> to automatically prepend a leaf sorter.</p>",
                "default": "false"
            },
            {
                "name": "node",
                "type": "ext.data.model",
                "doc": "<p>The Record you want to bind this Store to. Note that\nthis record will be decorated with the Ext.data.NodeInterface if this is not the\ncase yet.</p>",
                "default": null
            },
            {
                "name": "recursive",
                "type": "boolean",
                "doc": "<p>Set this to <code>true</code> if you want this NodeStore to represent\nall the descendants of the node in its flat data collection. This is useful for\nrendering a tree structure to a DataView and is being used internally by\nthe TreeView. Any records that are moved, removed, inserted or appended to the\nnode at any depth below the node this store is bound to will be automatically\nupdated in this Store's internal flat data structure.</p>",
                "default": "false"
            },
            {
                "name": "rootVisible",
                "type": "boolean",
                "doc": "<p><code>false</code> to not include the root node in this Stores collection.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.data.operation.Create": {
        "type": "Ext.data.operation.Create",
        "doc": "<p>Enacpsulates a create operation as performed by a proxy.</p>",
        "configs": [
            {
                "name": "recordCreator",
                "type": "function",
                "doc": "<p>Passed to the reader, see Ext.data.reader.Reader.read</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.operation.Destroy": {
        "type": "Ext.data.operation.Destroy",
        "doc": "<p>Enacapsulates a destroy operation as performed by a proxy.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.operation.Operation": {
        "type": "Ext.data.operation.Operation",
        "doc": "<p>Represents a read or write operation performed by a Proxy.\nOperation objects are used to enable communication between Stores and Proxies.\nApplication developers should rarely need to interact with Operation objects directly.</p>",
        "configs": [
            {
                "name": "batch",
                "type": "ext.data.batch",
                "doc": "<p>The batch for this operation, if applicable</p>",
                "default": null
            },
            {
                "name": "callback",
                "type": "function",
                "doc": "<p>Function to execute when operation completed.</p>",
                "default": null
            },
            {
                "name": "id",
                "type": "object",
                "doc": "<p>The id of the operation.</p>",
                "default": null
            },
            {
                "name": "internalCallback",
                "type": "function",
                "doc": "<p>A callback to run before the callback.</p>",
                "default": null
            },
            {
                "name": "internalScope",
                "type": "object",
                "doc": "<p>Scope to run the internalCallback</p>",
                "default": null
            },
            {
                "name": "params",
                "type": "object",
                "doc": "<p>Parameters to pass along with the request when performing the operation.</p>",
                "default": null
            },
            {
                "name": "proxy",
                "type": "ext.data.proxy.proxy",
                "doc": "<p>The proxy for this operation</p>",
                "default": null
            },
            {
                "name": "recordCreator",
                "type": "function",
                "doc": "<p>Passed to the reader, see Ext.data.reader.Reader.read</p>",
                "default": null
            },
            {
                "name": "records",
                "type": "ext.data.model[]",
                "doc": "<p>The records associated with this operation. If this is a <code>read</code> operation, this will be\n<code>null</code> until data is returned from the Ext.data.proxy.Proxy.</p>",
                "default": null
            },
            {
                "name": "request",
                "type": "ext.data.request",
                "doc": "<p>The request for this operation.</p>",
                "default": null
            },
            {
                "name": "response",
                "type": "object",
                "doc": "<p>The response for this operation.</p>",
                "default": null
            },
            {
                "name": "resultSet",
                "type": "ext.data.resultset",
                "doc": "<p>The ResultSet for this operation.</p>",
                "default": null
            },
            {
                "name": "scope",
                "type": "object",
                "doc": "<p>Scope for the callback function.</p>",
                "default": null
            },
            {
                "name": "synchronous",
                "type": "boolean",
                "doc": "<p>True if this Operation is to be executed synchronously. This property is inspected by a\nBatch to see if a series of Operations can be executed in parallel or not.</p>",
                "default": "false"
            },
            {
                "name": "url",
                "type": "string",
                "doc": "<p>The url for this operation. Typically this will be provided by a proxy and not configured here.</p>",
                "default": "''"
            }
        ],
        "events": []
    },
    "Ext.data.operation.Read": {
        "type": "Ext.data.operation.Read",
        "doc": "<p>Enacpsulates a read operation as performed by a proxy.</p>",
        "configs": [
            {
                "name": "addRecords",
                "type": "boolean",
                "doc": "<p>Passed internally to loadRecords when the load completes</p>",
                "default": "false"
            },
            {
                "name": "filters",
                "type": "ext.util.filter[]",
                "doc": "<p>Optional array of filter objects. Only applies to 'read' actions.</p>",
                "default": null
            },
            {
                "name": "grouper",
                "type": "ext.util.grouper",
                "doc": "<p>Optional grouping configuration. Only applies to 'read' actions where grouping is desired.</p>",
                "default": null
            },
            {
                "name": "limit",
                "type": "number",
                "doc": "<p>The number of records to load. Used on 'read' actions when paging is being used.</p>",
                "default": null
            },
            {
                "name": "page",
                "type": "number",
                "doc": "<p>The page for this operation.</p>",
                "default": null
            },
            {
                "name": "sorters",
                "type": "ext.util.sorter[]",
                "doc": "<p>Optional array of sorter objects. Only applies to 'read' actions.</p>",
                "default": null
            },
            {
                "name": "start",
                "type": "number",
                "doc": "<p>The start index (offset), used in paging when running a 'read' action.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.operation.Update": {
        "type": "Ext.data.operation.Update",
        "doc": "<p>Enacpsulates a update operation as performed by a proxy.</p>",
        "configs": [
            {
                "name": "recordCreator",
                "type": "function",
                "doc": "<p>Passed to the reader, see Ext.data.reader.Reader.read</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.PageMap": {
        "type": "Ext.data.PageMap",
        "doc": "<p>Private class for use by only Store when configured <code>buffered: true</code>.</p>",
        "configs": [
            {
                "name": "pageSize",
                "type": "number",
                "doc": "<p>The size of pages in this map.</p>",
                "default": "0"
            },
            {
                "name": "rootProperty",
                "type": "string",
                "doc": "<p>The root property to use for aggregation, filtering and sorting. By default\nthis is <code>null</code> but when containing things like records\nthis config would likely be set to \"data\" so that property names are applied\nto the fields of each record.</p>",
                "default": "''"
            },
            {
                "name": "store",
                "type": "object",
                "doc": "\n",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.proxy.Ajax": {
        "type": "Ext.data.proxy.Ajax",
        "doc": "<p>AjaxProxy is one of the most widely-used ways of getting data into your application. It uses AJAX requests to load\ndata from the server, usually to be placed into a Store. Let's take a look at a typical setup.\nHere we're going to set up a Store that has an AjaxProxy. To prepare, we'll also set up a Model:</p>",
        "configs": [
            {
                "name": "actionMethods",
                "type": "object",
                "doc": "<p>Mapping of action name to HTTP request method. In the basic AjaxProxy these are set to 'GET' for 'read' actions\nand 'POST' for 'create', 'update' and 'destroy' actions. The Ext.data.proxy.Rest maps these to the\ncorrect RESTful methods.</p>",
                "default": "{create: 'POST', read: 'GET', update: 'POST', destroy: 'POST'}"
            },
            {
                "name": "binary",
                "type": "boolean",
                "doc": "<p>True to request binary data from the server.  This feature requires\nthe use of a binary reader such as AMF Reader</p>",
                "default": "false"
            },
            {
                "name": "headers",
                "type": "object",
                "doc": "<p>Any headers to add to the Ajax request.</p>",
                "default": null
            },
            {
                "name": "paramsAsJson",
                "type": "boolean",
                "doc": "<p><code>true</code> to have any request parameters sent as jsonData\nwhere they can be parsed from the raw request. By default, parameters are sent via the\nparams property. <strong>Note</strong>: This setting does not apply when the\nrequest is sent as a 'GET' request. See actionMethods for controlling the HTTP verb\nthat is used when sending requests.</p>",
                "default": "false"
            },
            {
                "name": "password",
                "type": "string",
                "doc": "<p>Most oData feeds require basic HTTP authentication. This configuration allows\nyou to specify the password.</p>",
                "default": null
            },
            {
                "name": "useDefaultXhrHeader",
                "type": "boolean",
                "doc": "<p>Set this to false to not send the default Xhr header (X-Requested-With) with every request.\nThis should be set to false when making CORS (cross-domain) requests.</p>",
                "default": "true"
            },
            {
                "name": "username",
                "type": "string",
                "doc": "<p>Most oData feeds require basic HTTP authentication. This configuration allows\nyou to specify the username.</p>",
                "default": null
            },
            {
                "name": "withCredentials",
                "type": "boolean",
                "doc": "<p>This configuration is sometimes necessary when using cross-origin resource sharing.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.data.proxy.Client": {
        "type": "Ext.data.proxy.Client",
        "doc": "<p>Base class for any client-side storage. Used as a superclass for Memory and\nWeb Storage proxies. Do not use directly, use one of the subclasses instead.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.proxy.Direct": {
        "type": "Ext.data.proxy.Direct",
        "doc": "<p>This class is used to send requests to the server using Ext Direct. When a\nrequest is made, the transport mechanism is handed off to the appropriate\nProvider to complete the call.</p>",
        "configs": [
            {
                "name": "api",
                "type": "object",
                "doc": "<p>The same as Ext.data.proxy.Server.api, however instead of providing urls, you should provide a direct\nfunction call. See directFn.</p>",
                "default": null
            },
            {
                "name": "directFn",
                "type": "function/string",
                "doc": "<p>Function to call when executing a request. directFn is a simple alternative to defining the api configuration-parameter\nfor Store's which will not implement a full CRUD api. The directFn may also be a string reference to the fully qualified\nname of the function, for example: 'MyApp.company.GetProfile'. This can be useful when using dynamic loading. The string\nwill be looked up when the proxy is created.</p>",
                "default": null
            },
            {
                "name": "metadata",
                "type": "object/array",
                "doc": "<p>Optional set of fixed parameters to send with every Proxy request, similar to\nextraParams but available with all CRUD requests. Also unlike\nextraParams, metadata is not mixed with the ordinary data but sent\nseparately in the data packet.\nYou may need to update your server side Ext Direct stack to use this feature.</p>",
                "default": null
            },
            {
                "name": "paramOrder",
                "type": "string/string[]",
                "doc": "<p>Defaults to undefined. A list of params to be executed server side.  Specify the params in the order in\nwhich they must be executed on the server-side as either (1) an Array of String values, or (2) a String\nof params delimited by either whitespace, comma, or pipe. For example, any of the following would be\nacceptable:</p>",
                "default": null
            },
            {
                "name": "paramsAsHash",
                "type": "boolean",
                "doc": "<p>Send parameters as a collection of named arguments.\nProviding a paramOrder nullifies this configuration.</p>",
                "default": "true"
            }
        ],
        "events": []
    },
    "Ext.data.proxy.JsonP": {
        "type": "Ext.data.proxy.JsonP",
        "doc": "<p>The JsonP proxy is useful when you need to load data from a domain other than the one your application is running on. If\nyour application is running on http://domainA.com it cannot use Ajax to load its data\nfrom http://domainB.com because cross-domain ajax requests are prohibited by the browser.</p>",
        "configs": [
            {
                "name": "autoAppendParams",
                "type": "boolean",
                "doc": "<p>True to automatically append the request's params to the generated url. Defaults to true</p>",
                "default": "true"
            },
            {
                "name": "callbackKey",
                "type": "string",
                "doc": "<p>See Ext.data.JsonP.callbackKey.</p>",
                "default": "'callback'"
            },
            {
                "name": "recordParam",
                "type": "string",
                "doc": "<p>The HTTP parameter name to use when passing records to the server and the Json writer is not configured\nto encode records into a parameter.</p>",
                "default": "'records'"
            }
        ],
        "events": []
    },
    "Ext.data.proxy.LocalStorage": {
        "type": "Ext.data.proxy.LocalStorage",
        "doc": "<p>The LocalStorageProxy uses the new HTML5 localStorage API to save Model data locally on the\nclient browser. HTML5 localStorage is a key-value store (e.g. cannot save complex objects like JSON), so\nLocalStorageProxy automatically serializes and deserializes data when saving and retrieving it.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.proxy.Memory": {
        "type": "Ext.data.proxy.Memory",
        "doc": "<p>In-memory proxy. This proxy simply uses a local variable for data storage/retrieval, so its contents are lost on\nevery page refresh.</p>",
        "configs": [
            {
                "name": "data",
                "type": "object",
                "doc": "<p>Optional data to pass to configured Reader.</p>",
                "default": null
            },
            {
                "name": "enablePaging",
                "type": "boolean",
                "doc": "<p>Configure as <code>true</code> to enable this MemoryProxy to honour a read operation's <code>start</code> and <code>limit</code> options.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.data.proxy.Proxy": {
        "type": "Ext.data.proxy.Proxy",
        "doc": "<p>Proxies are used by Stores to handle the loading and saving of Model\ndata. Usually developers will not need to create or interact with proxies directly.</p>",
        "configs": [
            {
                "name": "batchActions",
                "type": "boolean",
                "doc": "<p>True to batch actions of a particular type when synchronizing the store. Defaults to true.</p>",
                "default": "true"
            },
            {
                "name": "batchOrder",
                "type": "string",
                "doc": "<p>Comma-separated ordering 'create', 'update' and 'destroy' actions when batching. Override this to set a different\norder for the batched CRUD actions to be executed in. Defaults to 'create,update,destroy'.</p>",
                "default": "'create,update,destroy'"
            },
            {
                "name": "model",
                "type": "string/ext.data.model",
                "doc": "<p>The name of the Model to tie to this Proxy. Can be either the string name of the Model, or a reference to the\nModel constructor. Required.</p>",
                "default": null
            },
            {
                "name": "reader",
                "type": "object/string/ext.data.reader.reader",
                "doc": "<p>The Ext.data.reader.Reader to use to decode the server's response or data read\nfrom client. This can either be a Reader instance, a config object or just a\nvalid Reader type name (e.g. 'json', 'xml').</p>",
                "default": "{type: 'json'}"
            },
            {
                "name": "writer",
                "type": "object/string/ext.data.writer.writer",
                "doc": "<p>The Ext.data.writer.Writer to use to encode any request sent to the server or\nsaved to client. This can either be a Writer instance, a config object or just\na valid Writer type name (e.g. 'json', 'xml').</p>",
                "default": "{type: 'json'}"
            }
        ],
        "events": [
            {
                "name": "metachange",
                "params": "this(Ext.data.proxy.Proxy) meta(Object) eOpts(Object)",
                "doc": "<p>Fires when this proxy's reader provides new metadata. Metadata usually consists\nof new field definitions, but can include any configuration data required by an\napplication, and can be processed as needed in the event handler.\nThis event is currently only fired for JsonReaders. Note that this event is also\npropagated by Ext.data.Store, which is typically where it would be handled.</p>"
            }
        ]
    },
    "Ext.data.proxy.Rest": {
        "type": "Ext.data.proxy.Rest",
        "doc": "<p>The Rest proxy is a specialization of the AjaxProxy which simply maps the four actions\n(create, read, update and destroy) to RESTful HTTP verbs. For example, let's set up a Model\nwith an inline Rest proxy</p>",
        "configs": [
            {
                "name": "actionMethods",
                "type": "object",
                "doc": "<p>Mapping of action name to HTTP request method. In the basic AjaxProxy these are set to 'GET' for 'read' actions\nand 'POST' for 'create', 'update' and 'destroy' actions. The Ext.data.proxy.Rest maps these to the\ncorrect RESTful methods.</p>",
                "default": "{create: 'POST', read: 'GET', update: 'PUT', destroy: 'DELETE'}"
            },
            {
                "name": "appendId",
                "type": "boolean",
                "doc": "<p>True to automatically append the ID of a Model instance when performing a request based on that single instance.\nSee Rest proxy intro docs for more details. Defaults to true.</p>",
                "default": "true"
            },
            {
                "name": "batchActions",
                "type": "boolean",
                "doc": "<p>True to batch actions of a particular type when synchronizing the store. Defaults to false.</p>",
                "default": "false"
            },
            {
                "name": "format",
                "type": "string",
                "doc": "<p>Optional data format to send to the server when making any request (e.g. 'json'). See the Rest proxy intro docs\nfor full details. Defaults to undefined.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.proxy.Server": {
        "type": "Ext.data.proxy.Server",
        "doc": "<p>ServerProxy is a superclass of JsonPProxy and AjaxProxy, and\nwould not usually be used directly.</p>",
        "configs": [
            {
                "name": "api",
                "type": "object",
                "doc": "<p>Specific urls to call on CRUD action methods \"create\", \"read\", \"update\" and \"destroy\". Defaults to:</p>",
                "default": null
            },
            {
                "name": "cacheString",
                "type": "string",
                "doc": "<p>The name of the cache param added to the url when using noCache. Defaults to \"_dc\".</p>",
                "default": "\"_dc\""
            },
            {
                "name": "directionParam",
                "type": "string",
                "doc": "<p>The name of the direction parameter to send in a request. <strong>This is only used when simpleSortMode is set to\ntrue.</strong></p>",
                "default": "\"dir\""
            },
            {
                "name": "extraParams",
                "type": "object",
                "doc": "<p>Extra parameters that will be included on every request. Individual requests with params of the same name\nwill override these params when they are in conflict.</p>",
                "default": "{}"
            },
            {
                "name": "filterParam",
                "type": "string",
                "doc": "<p>The name of the 'filter' parameter to send in a request. Defaults to 'filter'. Set this to <code>''</code> if you don't\nwant to send a filter parameter.</p>",
                "default": "\"filter\""
            },
            {
                "name": "groupDirectionParam",
                "type": "string",
                "doc": "<p>The name of the direction parameter to send in a request. <strong>This is only used when simpleGroupMode is set to\ntrue.</strong></p>",
                "default": "\"groupDir\""
            },
            {
                "name": "groupParam",
                "type": "string",
                "doc": "<p>The name of the 'group' parameter to send in a request. Defaults to 'group'. Set this to <code>''</code> if you don't\nwant to send a group parameter.</p>",
                "default": "\"group\""
            },
            {
                "name": "idParam",
                "type": "string",
                "doc": "<p>The name of the parameter which carries the id of the entity being operated upon.</p>",
                "default": "\"id\""
            },
            {
                "name": "limitParam",
                "type": "string",
                "doc": "<p>The name of the 'limit' parameter to send in a request. Defaults to 'limit'. Set this to <code>''</code> if you don't\nwant to send a limit parameter.</p>",
                "default": "\"limit\""
            },
            {
                "name": "noCache",
                "type": "boolean",
                "doc": "<p>Disable caching by adding a unique parameter name to the request. Set to false to allow caching. Defaults to true.</p>",
                "default": "true"
            },
            {
                "name": "pageParam",
                "type": "string",
                "doc": "<p>The name of the 'page' parameter to send in a request. Defaults to 'page'. Set this to <code>''</code> if you don't\nwant to send a page parameter.</p>",
                "default": "\"page\""
            },
            {
                "name": "simpleGroupMode",
                "type": "boolean",
                "doc": "<p>Enabling simpleGroupMode in conjunction with remoteGroup will only send one group property and a direction when a\nremote group is requested. The groupDirectionParam and groupParam will be sent with the property name and either 'ASC'\nor 'DESC'.</p>",
                "default": "false"
            },
            {
                "name": "simpleSortMode",
                "type": "boolean",
                "doc": "<p>Enabling simpleSortMode in conjunction with remoteSort will only send one sort property and a direction when a\nremote sort is requested. The directionParam and sortParam will be sent with the property name\nand either 'ASC' or 'DESC'.</p>",
                "default": "false"
            },
            {
                "name": "sortParam",
                "type": "string",
                "doc": "<p>The name of the 'sort' parameter to send in a request. Defaults to 'sort'. Set this to <code>''</code> if you don't\nwant to send a sort parameter.</p>",
                "default": "\"sort\""
            },
            {
                "name": "startParam",
                "type": "string",
                "doc": "<p>The name of the 'start' parameter to send in a request. Defaults to 'start'. Set this to <code>''</code> if you don't\nwant to send a start parameter.</p>",
                "default": "\"start\""
            },
            {
                "name": "timeout",
                "type": "number",
                "doc": "<p>The number of milliseconds to wait for a response. Defaults to 30000 milliseconds (30 seconds).</p>",
                "default": "30000"
            },
            {
                "name": "url",
                "type": "string",
                "doc": "<p>The URL from which to request the data object.</p>",
                "default": "''"
            }
        ],
        "events": [
            {
                "name": "exception",
                "params": "this(Ext.data.proxy.Proxy) request(Ext.data.Request) operation(Ext.data.operation.Operation) eOpts(Object)",
                "doc": "<p>Fires when the server returns an exception. This event may also be listened\nto in the event that a request has timed out or has been aborted.</p>"
            }
        ]
    },
    "Ext.data.proxy.SessionStorage": {
        "type": "Ext.data.proxy.SessionStorage",
        "doc": "<p>Proxy which uses HTML5 session storage as its data storage/retrieval mechanism. If this proxy is used in a browser\nwhere session storage is not supported, the constructor will throw an error. A session storage proxy requires a\nunique ID which is used as a key in which all record data are stored in the session storage object.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.proxy.WebStorage": {
        "type": "Ext.data.proxy.WebStorage",
        "doc": "<p>WebStorageProxy is simply a superclass for the LocalStorage and SessionStorage proxies. It uses the new HTML5 key/value client-side storage objects to\nsave model instances for offline use.</p>",
        "configs": [
            {
                "name": "id",
                "type": "string",
                "doc": "<p>The unique ID used as the key in which all record data are stored in the local storage object.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.ProxyStore": {
        "type": "Ext.data.ProxyStore",
        "doc": "<p>ProxyStore is a superclass of Ext.data.Store and Ext.data.BufferedStore. It's never used directly,\nbut offers a set of methods used by both of those subclasses.</p>",
        "configs": [
            {
                "name": "asynchronousLoad",
                "type": "boolean",
                "doc": "<p>This defaults to <code>true</code> when this store's proxy is asynchronous, such as an\nAjax proxy.</p>",
                "default": null
            },
            {
                "name": "autoLoad",
                "type": "boolean/object",
                "doc": "<p>If data is not specified, and if autoLoad is true or an Object, this store's load method is automatically called\nafter creation. If the value of autoLoad is an Object, this Object will be passed to the store's load method.</p>",
                "default": null
            },
            {
                "name": "autoSync",
                "type": "boolean",
                "doc": "<p>True to automatically sync the Store with its Proxy after every edit to one of its Records. Defaults to false.</p>",
                "default": "false"
            },
            {
                "name": "batchUpdateMode",
                "type": "string",
                "doc": "<p>Sets the updating behavior based on batch synchronization. 'operation' (the default) will update the Store's\ninternal representation of the data after each operation of the batch has completed, 'complete' will wait until\nthe entire batch has been completed before updating the Store's data. 'complete' is a good choice for local\nstorage proxies, 'operation' is better for remote proxies, where there is a comparatively high latency.</p>",
                "default": "'operation'"
            },
            {
                "name": "fields",
                "type": "object[]/string[]",
                "doc": "<p>An Array of <code>Ext.data.field.Field</code> config objects, simply the field\nname, or a mix of config objects and strings.\nIf just a name is given, the field type defaults to <code>auto</code>.</p>",
                "default": null
            },
            {
                "name": "model",
                "type": "string/ext.data.model",
                "doc": "<p>Name of the Model associated with this store. See\nExt.data.Model.entityName.</p>",
                "default": null
            },
            {
                "name": "proxy",
                "type": "string/ext.data.proxy.proxy/object",
                "doc": "<p>The Proxy to use for this Store. This can be either a string, a config object or a Proxy instance -\nsee setProxy for details.</p>",
                "default": null
            },
            {
                "name": "sortOnLoad",
                "type": "boolean",
                "doc": "<p>If true, any sorters attached to this Store will be run after loading data, before the datachanged event is fired.\nDefaults to true, ignored if remoteSort is true</p>",
                "default": "true"
            },
            {
                "name": "trackRemoved",
                "type": "boolean",
                "doc": "<p>This config controls whether removed records are remembered by this store for\nlater saving to the server.</p>",
                "default": "true"
            }
        ],
        "events": [
            {
                "name": "beforeload",
                "params": "store(Ext.data.Store) operation(Ext.data.operation.Operation) eOpts(Object)",
                "doc": "<p>Fires before a request is made for a new data object. If the beforeload handler returns false the load\naction will be canceled.</p>"
            },
            {
                "name": "beforesync",
                "params": "options(Object) eOpts(Object)",
                "doc": "<p>Fired before a call to sync is executed. Return false from any listener to cancel the sync</p>"
            },
            {
                "name": "load",
                "params": "this(Ext.data.Store) records(Ext.data.Model[]) successful(Boolean) operation(Ext.data.operation.Read) eOpts(Object)",
                "doc": "<p>Fires whenever the store reads data from a remote data source.</p>"
            },
            {
                "name": "metachange",
                "params": "this(Ext.data.Store) meta(Object) eOpts(Object)",
                "doc": "<p>Fires when this store's underlying reader (available via the proxy) provides new metadata.\nMetadata usually consists of new field definitions, but can include any configuration data\nrequired by an application, and can be processed as needed in the event handler.\nThis event is currently only fired for JsonReaders.</p>"
            },
            {
                "name": "write",
                "params": "store(Ext.data.Store) operation(Ext.data.operation.Operation) eOpts(Object)",
                "doc": "<p>Fires whenever a successful write has been made via the configured Proxy</p>"
            }
        ]
    },
    "Ext.data.reader.Array": {
        "type": "Ext.data.reader.Array",
        "doc": "<p>Data reader class to create an Array of Ext.data.Model objects from an Array.\nEach element of that Array represents a row of data fields. The\nfields are pulled into a Record object using as a subscript, the <code>mapping</code> property\nof the field definition if it exists, or the field's ordinal position in the definition.</p>",
        "configs": [
            {
                "name": "successProperty",
                "type": "string",
                "doc": "<p>Name of the property from which to retrieve the <code>success</code> attribute, the value of which indicates\nwhether a given request succeeded or failed (typically a boolean or 'true'|'false'). See\nExt.data.proxy.Server.exception for additional information.</p>",
                "default": null
            },
            {
                "name": "totalProperty",
                "type": "string",
                "doc": "<p>Name of the property from which to retrieve the total number of records in the dataset. This is only needed if\nthe whole dataset is not passed in one go, but is being paged from the remote server.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.reader.Json": {
        "type": "Ext.data.reader.Json",
        "doc": "<p>The JSON Reader is used by a Proxy to read a server response that is sent back in JSON format. This usually\nhappens as a result of loading a Store - for example we might create something like this:</p>",
        "configs": [
            {
                "name": "metaProperty",
                "type": "string",
                "doc": "<p>Name of the property from which to retrieve the <code>metaData</code> attribute. See metaData.</p>",
                "default": "'metaData'"
            },
            {
                "name": "preserveRawData",
                "type": "boolean",
                "doc": "<p>The reader will keep a copy of the most recent request in the rawData property. For performance reasons,\nthe data object for each record is used directly as the model data. This means that these objects may be modified and\nthus modify the raw data. To ensure the objects are copied, set this option to <code>true</code>. NB: This only applies to items\nthat are read as part of the data array, any other metadata will not be modified:</p>",
                "default": "false"
            },
            {
                "name": "record",
                "type": "string",
                "doc": "<p>The optional location within the JSON response that the record data itself can be found at.\nSee the JsonReader intro docs for more details. This is not often needed.</p>",
                "default": null
            },
            {
                "name": "useSimpleAccessors",
                "type": "boolean",
                "doc": "<p>True to ensure that field names/mappings are treated as literals when\nreading values.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.data.reader.Reader": {
        "type": "Ext.data.reader.Reader",
        "doc": "<p>Readers are used to interpret data to be loaded into a Model instance or a Store - often in response to an AJAX request. In general there is usually no need to create\na Reader instance directly, since a Reader is almost always used together with a Proxy,\nand is configured using the Proxy's reader configuration property:</p>",
        "configs": [
            {
                "name": "implicitIncludes",
                "type": "boolean",
                "doc": "<p>True to automatically parse models nested within other models in a response object. See the\nExt.data.reader.Reader intro docs for full explanation.</p>",
                "default": "true"
            },
            {
                "name": "keepRawData",
                "type": "boolean",
                "doc": "<p>Determines if the Reader will keep raw data\nreceived from the server in the rawData property.</p>",
                "default": null
            },
            {
                "name": "messageProperty",
                "type": "string",
                "doc": "<p>The name of the property which contains a response message for exception handling. If you want to return a false success\nresponse from the server, maybe due to some server-side validation, the messageProperty can hold the error message. For\nexample:</p>",
                "default": "''"
            },
            {
                "name": "model",
                "type": "string/ext.data.model",
                "doc": "<p>The model to use for this reader. This config is only required if the reader is being used\nwithout a proxy, otherwise the proxy will automatically set the model.</p>",
                "default": null
            },
            {
                "name": "proxy",
                "type": "ext.data.proxy.proxy",
                "doc": "<p>The proxy attached to this reader. Typically only needed onMetaChange so that\nwe can set the new model on the proxy.</p>",
                "default": null
            },
            {
                "name": "readRecordsOnFailure",
                "type": "boolean",
                "doc": "<p>True to extract the records from a data packet even if the successProperty returns false.</p>",
                "default": "true"
            },
            {
                "name": "rootProperty",
                "type": "string/function",
                "doc": "<p>The property that contains data items corresponding to the\nModel(s) of the configured Reader. <code>rootProperty</code> varies by Reader type.</p>",
                "default": "''"
            },
            {
                "name": "successProperty",
                "type": "string",
                "doc": "<p>Name of the property from which to retrieve the <code>success</code> attribute, the value of which indicates\nwhether a given request succeeded or failed (typically a boolean or 'true'|'false'). See\nExt.data.proxy.Server.exception for additional information.</p>",
                "default": "'success'"
            },
            {
                "name": "totalProperty",
                "type": "string",
                "doc": "<p>Name of the property from which to retrieve the total number of records in the dataset. This is only needed if\nthe whole dataset is not passed in one go, but is being paged from the remote server.</p>",
                "default": "'total'"
            },
            {
                "name": "transform",
                "type": "function|string|object",
                "doc": "<p>If a transform function is set, it will be invoked just before readRecords executes.\nIt is passed the raw (deserialized) data object. The transform function returns a data object, which can be\na modified version of the original data object, or a completely new data object. The transform can\nbe a function, or a method name on the Reader instance, or an object with a 'fn' key\nand an optional 'scope' key.</p>",
                "default": null
            },
            {
                "name": "typeProperty",
                "type": "string",
                "doc": "<p>The name of the property in a node raw data block which indicates the type of the model to be created from that raw data. Useful for heterogeneous trees.</p>",
                "default": "''"
            }
        ],
        "events": [
            {
                "name": "exception",
                "params": "reader(Ext.data.reader.Reader) response(XMLHttpRequest) error(Ext.data.ResultSet) eOpts(Object)",
                "doc": "<p>Fires when the reader receives improperly encoded data from the server</p>"
            }
        ]
    },
    "Ext.data.reader.Xml": {
        "type": "Ext.data.reader.Xml",
        "doc": "<p>The XML Reader is used by a Proxy to read a server response that is sent back in XML format. This usually happens as\na result of loading a Store - for example we might create something like this:</p>",
        "configs": [
            {
                "name": "namespace",
                "type": "string",
                "doc": "<p>A namespace prefix that will be prepended to the field name when reading a\nfield from an XML node.  Take, for example, the following Model:</p>",
                "default": "''"
            },
            {
                "name": "record",
                "type": "string",
                "doc": "<p>The DomQuery path to the repeated element which contains record information.</p>",
                "default": "''"
            }
        ],
        "events": []
    },
    "Ext.data.request.Ajax": {
        "type": "Ext.data.request.Ajax",
        "doc": "<p>This class manages a pending Ajax request. Instances of this type are created by the\n<code>Ext.data.Connection.request</code> method.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.request.Base": {
        "type": "Ext.data.request.Base",
        "doc": "<p>This class manages a pending Ajax request. Instances of this type are created by the\n<code>Ext.data.Connection.request</code> method.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.request.Form": {
        "type": "Ext.data.request.Form",
        "doc": "<p>This class manages a pending form submit. Instances of this type are created by the\n<code>Ext.data.Connection.request</code> method.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.Request": {
        "type": "Ext.data.Request",
        "doc": "<p>Simple class that represents a Request that will be made by any Ext.data.proxy.Server subclass.\nAll this class does is standardize the representation of a Request as used by any ServerProxy subclass,\nit does not contain any actual logic or perform the request itself.</p>",
        "configs": [
            {
                "name": "action",
                "type": "string",
                "doc": "<p>The name of the action this Request represents. Usually one of 'create', 'read', 'update' or 'destroy'.</p>",
                "default": null
            },
            {
                "name": "args",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "binary",
                "type": "boolean",
                "doc": "<p>True to request binary data from the server.  This feature requires\nthe use of a binary reader such as AMF Reader</p>",
                "default": "false"
            },
            {
                "name": "callback",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "callbackKey",
                "type": "string",
                "doc": "<p>Some requests (like JsonP) want to send an additional key that contains\nthe name of the callback function.</p>",
                "default": null
            },
            {
                "name": "directFn",
                "type": "object",
                "doc": "<p>The following two configurations are only used by Ext.data.proxy.Direct and are just\nfor being able to retrieve them after the request comes back from the server.</p>",
                "default": null
            },
            {
                "name": "disableCaching",
                "type": "boolean",
                "doc": "<p>Whether or not to disable caching for this request.</p>",
                "default": "false"
            },
            {
                "name": "headers",
                "type": "object",
                "doc": "<p>Some requests (like XMLHttpRequests) want to send additional server headers.\nThis configuration can be set for those types of requests.</p>",
                "default": "{}"
            },
            {
                "name": "jsonData",
                "type": "object",
                "doc": "<p>This is used by some write actions to attach data to the request without encoding it\nas a parameter.</p>",
                "default": null
            },
            {
                "name": "method",
                "type": "string",
                "doc": "<p>The HTTP method to use on this Request. Should be one of 'GET', 'POST', 'PUT' or 'DELETE'.</p>",
                "default": "'GET'"
            },
            {
                "name": "operation",
                "type": "ext.data.operation.operation",
                "doc": "<p>The operation this request belongs to.</p>",
                "default": null
            },
            {
                "name": "params",
                "type": "object",
                "doc": "<p>HTTP request params. The Proxy and its Writer have access to and can modify this object.</p>",
                "default": null
            },
            {
                "name": "password",
                "type": "string",
                "doc": "<p>Most oData feeds require basic HTTP authentication. This configuration allows\nyou to specify the password.</p>",
                "default": null
            },
            {
                "name": "proxy",
                "type": "ext.data.proxy.proxy",
                "doc": "<p>The proxy this request belongs to.</p>",
                "default": null
            },
            {
                "name": "rawRequest",
                "type": "ext.data.jsonp",
                "doc": "<p>Set the raw request object (Ajax/JsonP/Other)</p>",
                "default": null
            },
            {
                "name": "records",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "scope",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "timeout",
                "type": "number",
                "doc": "\n",
                "default": "30000"
            },
            {
                "name": "url",
                "type": "string",
                "doc": "<p>The url to access on this Request.</p>",
                "default": null
            },
            {
                "name": "useDefaultXhrHeader",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "username",
                "type": "string",
                "doc": "<p>Most oData feeds require basic HTTP authentication. This configuration allows\nyou to specify the username.</p>",
                "default": null
            },
            {
                "name": "withCredentials",
                "type": "boolean",
                "doc": "<p>This field is necessary when using cross-origin resource sharing.</p>",
                "default": "false"
            },
            {
                "name": "xmlData",
                "type": "object",
                "doc": "<p>This is used by some write actions to attach data to the request without encoding it\nas a parameter, but instead sending it as XML.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.ResultSet": {
        "type": "Ext.data.ResultSet",
        "doc": "<p>Simple wrapper class that represents a set of records returned by a Proxy.</p>",
        "configs": [
            {
                "name": "count",
                "type": "number",
                "doc": "<p>The number of records in this ResultSet. Note that total may differ from this number.</p>",
                "default": null
            },
            {
                "name": "loaded",
                "type": "boolean",
                "doc": "<p>True if the records have already been loaded. This is only meaningful when dealing with\nSQL-backed proxies.</p>",
                "default": "true"
            },
            {
                "name": "message",
                "type": "string",
                "doc": "<p>The message that was read in from the data</p>",
                "default": null
            },
            {
                "name": "records",
                "type": "ext.data.model[]/object[]",
                "doc": "<p>The array of record instances or record config objects.</p>",
                "default": null
            },
            {
                "name": "success",
                "type": "boolean",
                "doc": "<p>True if the ResultSet loaded successfully, false if any errors were encountered.</p>",
                "default": "false"
            },
            {
                "name": "total",
                "type": "number",
                "doc": "<p>The total number of records reported by the data source. This ResultSet may form a subset of\nthose records (see count).</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.schema.Association": {
        "type": "Ext.data.schema.Association",
        "doc": "<p>This class and its derivatives describe how two entities are related to each other.\nAssociations have the following forms:</p>",
        "configs": [
            {
                "name": "name",
                "type": "string",
                "doc": "<p>The name of this association.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.schema.ManyToMany": {
        "type": "Ext.data.schema.ManyToMany",
        "doc": "<p>This relationship describes the case where any one entity of one type may relate to any\nnumber of entities of another type, and also in the reverse.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.schema.ManyToOne": {
        "type": "Ext.data.schema.ManyToOne",
        "doc": "<p>This type of association describes the case where one entity is referenced by zero or\nmore other entities typically using a \"foreign key\" field.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.schema.Namer": {
        "type": "Ext.data.schema.Namer",
        "doc": "<p>This class provides name derivation methods for use by a <code>Schema</code>.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.schema.OneToOne": {
        "type": "Ext.data.schema.OneToOne",
        "doc": "<p>This type of association is similar to many-to-one,\nexcept that the reference field also has set\nunique to <code>true</code>.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.schema.Role": {
        "type": "Ext.data.schema.Role",
        "configs": [],
        "events": []
    },
    "Ext.data.schema.Schema": {
        "type": "Ext.data.schema.Schema",
        "doc": "<p>A Schema is a collection of related entities and their respective\nassociations.</p>",
        "configs": [
            {
                "name": "defaultIdentifier",
                "type": "object",
                "doc": "<p>This config is used to initialize the <code>Ext.data.Model.identifier</code> config\nfor classes that do not define one.</p>",
                "default": null
            },
            {
                "name": "keyCheckDelay",
                "type": "number",
                "doc": "<p>The time to wait (in ms) before checking for null foreign keys on records that\nwill cause them to be dropped. This is useful for allowing records to be moved to a different\nsource.</p>",
                "default": "10"
            },
            {
                "name": "namer",
                "type": "string/object/ext.data.schema.namer",
                "doc": "<p>Specifies or configures the name generator for the schema.</p>",
                "default": "'default'"
            },
            {
                "name": "namespace",
                "type": "string",
                "doc": "<p>The namespace for entity classes in this schema.</p>",
                "default": null
            },
            {
                "name": "proxy",
                "type": "object/ext.util.objecttemplate",
                "doc": "<p>This is a template used to produce <code>Ext.data.proxy.Proxy</code> configurations for\nModels that do not define an explicit <code>proxy</code>.</p>",
                "default": "{type: 'ajax', url: '{prefix}/{entityName}'}"
            },
            {
                "name": "urlPrefix",
                "type": "string",
                "doc": "<p>This is the URL prefix used for all requests to the server. It could be something\nlike \"/~api\". This value is included in the <code>proxy</code> template data as \"prefix\".</p>",
                "default": "\"\""
            }
        ],
        "events": []
    },
    "Ext.data.session.BatchVisitor": {
        "type": "Ext.data.session.BatchVisitor",
        "doc": "<p>This class is used internally by <code>Ext.data.Session.getSaveBatch</code> and is\nnot intended for direct use. It can be studied as an example of implementing a visitor\nto pass to <code>Ext.data.Session.visitData</code>.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.session.ChangesVisitor": {
        "type": "Ext.data.session.ChangesVisitor",
        "doc": "<p>This class is used internally by <code>Ext.data.Session.getChanges</code> to build\nup an object describing changes in the session. It is not intended for public use but\ncan be used as an example of the visitor <code>Ext.data.Session.visitData</code>\nrequires.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.session.ChildChangesVisitor": {
        "type": "Ext.data.session.ChildChangesVisitor",
        "doc": "<p>This visitor class adds extra capability to consider changes as\nthey would be considered for a parent session.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.Session": {
        "type": "Ext.data.Session",
        "doc": "<p>This class manages models and their associations. Instances of <code>Session</code> are typically\nassociated with some <code>Component</code> (perhaps the Viewport or a Window) and then used by\ntheir <code>view models</code> to enable data binding.</p>",
        "configs": [
            {
                "name": "autoDestroy",
                "type": "boolean",
                "doc": "<p><code>true</code> to automatically destroy this session when a component it is attached\nto is destroyed. This should be set to false if the session is intended to be\nused across multiple root level components.</p>",
                "default": "true"
            },
            {
                "name": "crudProperties",
                "type": "object",
                "doc": "\n",
                "default": "{create: 'C', read: 'R', update: 'U', drop: 'D'}"
            },
            {
                "name": "parent",
                "type": "ext.data.session",
                "doc": "<p>The parent session for this session.</p>",
                "default": null
            },
            {
                "name": "schema",
                "type": "string/ext.data.schema.schema",
                "doc": "\n",
                "default": "'default'"
            }
        ],
        "events": []
    },
    "Ext.data.SortTypes": {
        "type": "Ext.data.SortTypes",
        "doc": "<p>This class defines a series of static methods that are used on a\nExt.data.Field for performing sorting. The methods cast the\nunderlying values into a data type that is appropriate for sorting on\nthat particular field.  If a Ext.data.Field.type is specified,\nthe sortType will be set to a sane default if the sortType is not\nexplicitly defined on the field. The sortType will make any necessary\nmodifications to the value and return it.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.Store": {
        "type": "Ext.data.Store",
        "doc": "<p>The Store class encapsulates a client side cache of Model objects. Stores load data via a\nProxy, and also provide functions for sorting, filtering\nand querying the model instances contained within it.</p>",
        "configs": [
            {
                "name": "associatedEntity",
                "type": "ext.data.model",
                "doc": "<p>The owner of this store if the store is used as part of an association.</p>",
                "default": null
            },
            {
                "name": "clearOnPageLoad",
                "type": "boolean",
                "doc": "<p>True to empty the store when loading another page via loadPage,\nnextPage or previousPage. Setting to false keeps existing records, allowing\nlarge data sets to be loaded one page at a time but rendered all together.</p>",
                "default": "true"
            },
            {
                "name": "clearRemovedOnLoad",
                "type": "boolean",
                "doc": "<p><code>true</code> to clear anything in the removed record collection when the store loads.</p>",
                "default": "true"
            },
            {
                "name": "data",
                "type": "object[]/ext.data.model[]",
                "doc": "<p>Array of Model instances or data objects to load locally. See \"Inline data\"\nabove for details.</p>",
                "default": "0"
            },
            {
                "name": "role",
                "type": "ext.data.schema.role",
                "doc": "<p>The role for the associatedEntity.</p>",
                "default": null
            },
            {
                "name": "session",
                "type": "ext.data.session",
                "doc": "<p>The session for this store. By specifying a session, it ensures any records that are\nadded to this store are also included in the session. This store does not become a member\nof the session itself.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "beforeprefetch",
                "params": "this(Ext.data.Store) operation(Ext.data.operation.Operation) eOpts(Object)",
                "doc": "<p>Fires before a prefetch occurs. Return <code>false</code> to cancel.</p>"
            },
            {
                "name": "filterchange",
                "params": "store(Ext.data.Store) filters(Ext.util.Filter[]) eOpts(Object)",
                "doc": "<p>Fired whenever the filter set changes.</p>"
            },
            {
                "name": "groupchange",
                "params": "store(Ext.data.Store) grouper(Ext.util.Grouper) eOpts(Object)",
                "doc": "<p>Fired whenever the grouping in the grid changes.</p>"
            },
            {
                "name": "prefetch",
                "params": "this(Ext.data.Store) records(Ext.data.Model[]) successful(Boolean) operation(Ext.data.operation.Operation) eOpts(Object)",
                "doc": "<p>Fires whenever records have been prefetched.</p>"
            }
        ]
    },
    "Ext.data.StoreManager": {
        "type": "Ext.data.StoreManager",
        "doc": "<p>Contains a collection of all stores that are created that have an identifier. An identifier can be assigned by\nsetting the storeId property. When a store is in the StoreManager, it can be\nreferred to via it's identifier:</p>",
        "configs": [
            {
                "name": "listeners",
                "type": "object",
                "doc": "\n",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.TreeModel": {
        "type": "Ext.data.TreeModel",
        "doc": "<p>This class is used as a base class from which to derive Models used in Trees.</p>",
        "configs": [
            {
                "name": "childType",
                "type": "string",
                "doc": "<p>The class name of child nodes to create when reading child nodes from\nraw data. By default the type configured into the TreeStore is used.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.TreeStore": {
        "type": "Ext.data.TreeStore",
        "doc": "<p>The TreeStore is a store implementation that owns the root node of\na tree, and provides methods to load either local or remote data as child nodes of the root\nand any descendant non-leaf node.</p>",
        "configs": [
            {
                "name": "clearOnLoad",
                "type": "boolean",
                "doc": "<p>Remove previously existing child nodes before loading.</p>",
                "default": "true"
            },
            {
                "name": "clearRemovedOnLoad",
                "type": "boolean",
                "doc": "<p>If <code>true</code>, when a node is reloaded, any records in the removed record collection that were previously descendants of the node being reloaded will be cleared from the removed collection.\nOnly applicable if clearOnLoad is <code>true</code>.</p>",
                "default": "true"
            },
            {
                "name": "defaultRootId",
                "type": "string",
                "doc": "<p>The default root id.</p>",
                "default": "\"root\""
            },
            {
                "name": "defaultRootProperty",
                "type": "string",
                "doc": "\n",
                "default": "\"children\""
            },
            {
                "name": "defaultRootText",
                "type": "string",
                "doc": "<p>The default root text (if not specified)/</p>",
                "default": "\"Root\""
            },
            {
                "name": "fields",
                "type": "object[]/string[]",
                "doc": "<p>An Array of <code>Ext.data.field.Field</code> config objects, simply the field\nname, or a mix of config objects and strings.\nIf just a name is given, the field type defaults to <code>auto</code>.</p>",
                "default": null
            },
            {
                "name": "folderSort",
                "type": "boolean",
                "doc": "<p>Set to true to automatically prepend a leaf sorter.</p>",
                "default": "false"
            },
            {
                "name": "lazyFill",
                "type": "boolean",
                "doc": "<p>Set to true to prevent child nodes from being loaded until the the node is\nexpanded or loaded explicitly.</p>",
                "default": "false"
            },
            {
                "name": "nodeParam",
                "type": "string",
                "doc": "<p>The name of the parameter sent to the server which contains the identifier of the node.</p>",
                "default": "\"node\""
            },
            {
                "name": "parentIdProperty",
                "type": "string",
                "doc": "<p>This config allows node data to be returned from the server in linear format without having to structure it into <code>children</code>\narrays.</p>",
                "default": null
            },
            {
                "name": "root",
                "type": "ext.data.treemodel/ext.data.nodeinterface/object",
                "doc": "<p>The root node for this store. For example:</p>",
                "default": null
            },
            {
                "name": "rootVisible",
                "type": "boolean",
                "doc": "<p><code>false</code> to not include the root node in this Stores collection.</p>",
                "default": "false"
            }
        ],
        "events": [
            {
                "name": "load",
                "params": "this(Ext.data.TreeStore) records(Ext.data.TreeModel[]) successful(Boolean) operation(Ext.data.Operation) node(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires whenever the store reads data from a remote data source.</p>"
            },
            {
                "name": "nodeappend",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) index(Number) eOpts(Object)",
                "doc": "<p>Fires when a new child node is appended</p>"
            },
            {
                "name": "nodebeforeappend",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires before a new child is appended, return false to cancel the append.</p>"
            },
            {
                "name": "nodebeforecollapse",
                "params": "this(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires before this node is collapsed.</p>"
            },
            {
                "name": "nodebeforeexpand",
                "params": "this(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires before this node is expanded.</p>"
            },
            {
                "name": "nodebeforeinsert",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) refNode(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires before a new child is inserted, return false to cancel the insert.</p>"
            },
            {
                "name": "nodebeforemove",
                "params": "this(Ext.data.NodeInterface) oldParent(Ext.data.NodeInterface) newParent(Ext.data.NodeInterface) index(Number) eOpts(Object)",
                "doc": "<p>Fires before this node is moved to a new location in the tree. Return false to cancel the move.</p>"
            },
            {
                "name": "nodebeforeremove",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) isMove(Boolean) eOpts(Object)",
                "doc": "<p>Fires before a child is removed, return false to cancel the remove.</p>"
            },
            {
                "name": "nodecollapse",
                "params": "this(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires when this node is collapsed.</p>"
            },
            {
                "name": "nodeexpand",
                "params": "this(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires when this node is expanded.</p>"
            },
            {
                "name": "nodeinsert",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) refNode(Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires when a new child node is inserted.</p>"
            },
            {
                "name": "nodemove",
                "params": "this(Ext.data.NodeInterface) oldParent(Ext.data.NodeInterface) newParent(Ext.data.NodeInterface) index(Number) eOpts(Object)",
                "doc": "<p>Fires when this node is moved to a new location in the tree</p>"
            },
            {
                "name": "noderemove",
                "params": "this(Ext.data.NodeInterface) node(Ext.data.NodeInterface) isMove(Boolean) context(Object) eOpts(Object)",
                "doc": "<p>Fires when a child node is removed</p>"
            },
            {
                "name": "nodesort",
                "params": "this(Ext.data.NodeInterface) childNodes(Ext.data.NodeInterface[]) eOpts(Object)",
                "doc": "<p>Fires when this node's childNodes are sorted.</p>"
            },
            {
                "name": "rootchange",
                "params": "newRoot(Ext.data.TreeModel/Ext.data.NodeInterface) oldRoot(Ext.data.TreeModel/Ext.data.NodeInterface) eOpts(Object)",
                "doc": "<p>Fires any time the tree's root node changes.</p>"
            }
        ]
    },
    "Ext.data.Types": {
        "type": "Ext.data.Types",
        "configs": [],
        "events": []
    },
    "Ext.data.Validation": {
        "type": "Ext.data.Validation",
        "doc": "<p>This class is used to hold validation errors for a record. The results of the record's\n<code>validators</code> are stored as the field values of this\nrecord. The first failed validation is all that is stored per field unless the Model\nclass has defined a <code>validationSeparator</code> config.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.validator.Bound": {
        "type": "Ext.data.validator.Bound",
        "doc": "<p>A superclass for a validator that checks if a value is within a certain range.</p>",
        "configs": [
            {
                "name": "bothMessage",
                "type": "string",
                "doc": "<p>The error message to return when the value is not in the specified range\nand both the minimum and maximum are specified.</p>",
                "default": null
            },
            {
                "name": "emptyMessage",
                "type": "string",
                "doc": "<p>The error message to return when the value is empty.</p>",
                "default": "'Must be present'"
            },
            {
                "name": "max",
                "type": "number",
                "doc": "<p>The maximum length value.</p>",
                "default": null
            },
            {
                "name": "maxOnlyMessage",
                "type": "string",
                "doc": "<p>The error message to return when the value is more than the maximum\nand only a maximum is specified.</p>",
                "default": null
            },
            {
                "name": "min",
                "type": "number",
                "doc": "<p>The minimum length value.</p>",
                "default": null
            },
            {
                "name": "minOnlyMessage",
                "type": "string",
                "doc": "<p>The error message to return when the value is less than the minimum\nand only a minimum is specified.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.validator.Email": {
        "type": "Ext.data.validator.Email",
        "doc": "<p>Validates that the value is a valid email.</p>",
        "configs": [
            {
                "name": "matcher",
                "type": "regexp",
                "doc": "<p>A matcher to check for simple emails. This may be overridden.</p>",
                "default": "/^(\")?(?:[^\\.\"])(?:(?:[\\.])?(?:[\\w\\-!#$%&'*+\\/=?\\^_`{|}~]))*\\1@(\\w[\\-\\w]*\\.){1,5}([A-Za-z]){2,6}$/"
            },
            {
                "name": "message",
                "type": "string",
                "doc": "<p>The error message to return when the value is not a valid email</p>",
                "default": "'Is not a valid email address'"
            }
        ],
        "events": []
    },
    "Ext.data.validator.Exclusion": {
        "type": "Ext.data.validator.Exclusion",
        "doc": "<p>Validates that the value does not exist in a list of values.</p>",
        "configs": [
            {
                "name": "message",
                "type": "string",
                "doc": "<p>The error message to return when the passed value exists in the\nspecified list.</p>",
                "default": "'Is a value that has been excluded'"
            }
        ],
        "events": []
    },
    "Ext.data.validator.Format": {
        "type": "Ext.data.validator.Format",
        "doc": "<p>Validates that the passed value matches a specific format specified by a regex.\nThe format is provided by the matcher config.</p>",
        "configs": [
            {
                "name": "matcher",
                "type": "regexp",
                "doc": "<p>The matcher regex to test against the value.</p>",
                "default": null
            },
            {
                "name": "message",
                "type": "string",
                "doc": "<p>The error message to return when the value does not match the format.</p>",
                "default": "'Is in the wrong format'"
            }
        ],
        "events": []
    },
    "Ext.data.validator.Inclusion": {
        "type": "Ext.data.validator.Inclusion",
        "doc": "<p>Validates that the value exists in a list of values.</p>",
        "configs": [
            {
                "name": "message",
                "type": "string",
                "doc": "<p>The error message to return when the passed value does not exist\nin the specified list.</p>",
                "default": "'Is not in the list of acceptable values'"
            }
        ],
        "events": []
    },
    "Ext.data.validator.Length": {
        "type": "Ext.data.validator.Length",
        "doc": "<p>Validates that the length of the value is between a min and max.</p>",
        "configs": [
            {
                "name": "bothMessage",
                "type": "string",
                "doc": "<p>The error message to return when the value length is not in the specified\nrange and both the minimum and maximum are specified.</p>",
                "default": "'Length must be between {0} and {1}'"
            },
            {
                "name": "max",
                "type": "number",
                "doc": "<p>The maximum length value.</p>",
                "default": null
            },
            {
                "name": "maxOnlyMessage",
                "type": "string",
                "doc": "<p>The error message to return when the value is more than the maximum\nlength and only a maximum is specified.</p>",
                "default": "'Length must be no more than {0}'"
            },
            {
                "name": "min",
                "type": "number",
                "doc": "<p>The minimum length value.</p>",
                "default": null
            },
            {
                "name": "minOnlyMessage",
                "type": "string",
                "doc": "<p>The error message to return when the value is less than the minimum\nlength and only a minimum is specified.</p>",
                "default": "'Length must be at least {0}'"
            }
        ],
        "events": []
    },
    "Ext.data.validator.List": {
        "type": "Ext.data.validator.List",
        "doc": "<p>A superclass for inclusion/exclusion validators.</p>",
        "configs": [
            {
                "name": "list",
                "type": "array",
                "doc": "<p>The list to check the passed value against.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.validator.Presence": {
        "type": "Ext.data.validator.Presence",
        "doc": "<p>Validates that the passed value is not <code>null</code> or <code>undefined</code> or <code>''</code>.</p>",
        "configs": [
            {
                "name": "allowEmpty",
                "type": "boolean",
                "doc": "<p><code>true</code> to allow <code>''</code> as a valid value.</p>",
                "default": "false"
            },
            {
                "name": "message",
                "type": "string",
                "doc": "<p>The error message to return when the value is not specified.</p>",
                "default": "'Must be present'"
            }
        ],
        "events": []
    },
    "Ext.data.validator.Range": {
        "type": "Ext.data.validator.Range",
        "doc": "<p>Validates that the the value is between a min and max.</p>",
        "configs": [
            {
                "name": "bothMessage",
                "type": "string",
                "doc": "<p>The error message to return when the value is not in the specified range\nand both the minimum and maximum are specified.</p>",
                "default": "'Must be between {0} and {1}'"
            },
            {
                "name": "max",
                "type": "number",
                "doc": "<p>The maximum value.</p>",
                "default": null
            },
            {
                "name": "maxOnlyMessage",
                "type": "string",
                "doc": "<p>The error message to return when the value is more than the maximum\nand only a maximum is specified.</p>",
                "default": "'Must be no more than than {0}'"
            },
            {
                "name": "min",
                "type": "number",
                "doc": "<p>The minimum value.</p>",
                "default": null
            },
            {
                "name": "minOnlyMessage",
                "type": "string",
                "doc": "<p>The error message to return when the value is less than the minimum\nand only a minimum is specified.</p>",
                "default": "'Must be must be at least {0}'"
            },
            {
                "name": "nanMessage",
                "type": "string",
                "doc": "<p>The error message to return when the value is not numeric.</p>",
                "default": "'Must be numeric'"
            }
        ],
        "events": []
    },
    "Ext.data.validator.Validator": {
        "type": "Ext.data.validator.Validator",
        "doc": "<p>The base class for validators to be used to validate fields in\na model.</p>",
        "configs": [],
        "events": []
    },
    "Ext.data.writer.Json": {
        "type": "Ext.data.writer.Json",
        "doc": "<p>This class is used to write Ext.data.Model data to the server in a JSON format.\nThe allowSingle configuration can be set to false to force the records to always\nbe encoded in an array, even if there is only a single record being sent.</p>",
        "configs": [
            {
                "name": "allowSingle",
                "type": "boolean",
                "doc": "<p>Configure with <code>false</code> to ensure that records are always wrapped in an array, even if there is only\none record being sent. When there is more than one record, they will always be encoded into an array.</p>",
                "default": "true"
            },
            {
                "name": "encode",
                "type": "boolean",
                "doc": "<p>Configure <code>true</code> to send record data (all record fields if writeAllFields is <code>true</code>)\nas a JSON encoded HTTP parameter named by the rootProperty configuration.</p>",
                "default": "false"
            },
            {
                "name": "expandData",
                "type": "boolean",
                "doc": "<p>By default, when dot-delimited field mappings are\nused (e.g. <code>name: 'myProperty', mapping: 'my.nested.property'</code>) the writer will simply output a flat data\nobject containing the mapping string literal as the property name (e.g. <code>{ 'my.nested.property': 'foo' }</code>).</p>",
                "default": "false"
            },
            {
                "name": "rootProperty",
                "type": "string",
                "doc": "<p>The HTTP parameter name by which JSON encoded records will be passed to the server if the\nencode option is <code>true</code>.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.data.writer.Writer": {
        "type": "Ext.data.writer.Writer",
        "doc": "<p>Base Writer class used by most subclasses of Ext.data.proxy.Server. This class\nis responsible for taking a set of Ext.data.operation.Operation objects and a\nExt.data.Request object and modifying that request based on the Operations.</p>",
        "configs": [
            {
                "name": "allDataOptions",
                "type": "object",
                "doc": "<p>This object contains the options passed to <code>Ext.data.Model.getData</code> when\nwriting <code>Ext.data.Model.phantom</code> records or when <code>writeAllFields</code> is set\nto <code>true</code>.</p>",
                "default": "{persist: true}"
            },
            {
                "name": "clientIdProperty",
                "type": "string",
                "doc": "<p>When specified this property causes the <code>Ext.data.Model.idProperty</code> of\nnewly created records to be sent to the server as this name instead of the\nvalue of the <code>idProperty</code>.</p>",
                "default": null
            },
            {
                "name": "dateFormat",
                "type": "string",
                "doc": "<p>This is used for each field of type date in the model to format the value before\nit is sent to the server.</p>",
                "default": null
            },
            {
                "name": "nameProperty",
                "type": "string",
                "doc": "<p>This property is used to read the key for each value that will be sent to the\nserver.</p>",
                "default": "'name'"
            },
            {
                "name": "partialDataOptions",
                "type": "object",
                "doc": "<p>This object contains the options passed to <code>Ext.data.Model.getData</code> when\nwriting non <code>Ext.data.Model.phantom</code> records or when <code>writeAllFields</code> is\nset to <code>false</code>.</p>",
                "default": "{changes: true, critical: true}"
            },
            {
                "name": "transform",
                "type": "function|object",
                "doc": "<p>If a transform function is set, it will be invoked just before writeRecords\nexecutes. It is passed the unserialized data object and the request\nobject. The transform function returns a data object, which can be a modified version of the original\ndata object, or a completely new data object. The transform can be a function, or an object\nwith a 'fn' key and an optional 'scope' key. Example usage:</p>",
                "default": null
            },
            {
                "name": "writeAllFields",
                "type": "boolean",
                "doc": "<p><code>true</code> to write all fields from the record to the\nserver. If set to <code>false</code> it will only send the fields that were modified. Note\nthat any fields that have <code>Ext.data.field.Field.persist</code> set to <code>false</code>\nwill still be ignored while those with <code>Ext.data.field.Field.critical</code>\nset to <code>true</code> will be included.</p>",
                "default": "false"
            },
            {
                "name": "writeRecordId",
                "type": "boolean",
                "doc": "<p>By default, each record's id is always included in the output for non-phantom\nrecords since in most cases the id will be required on the server to process\nthe record action. This is helpful since the id will normally not be modified,\nand so would not be sent to the server unless writeAllFields was\nexplicitly enabled.</p>",
                "default": "true"
            }
        ],
        "events": []
    },
    "Ext.data.writer.Xml": {
        "type": "Ext.data.writer.Xml",
        "doc": "<p>This class is used to write Ext.data.Model data to the server in an XML format.\nThe documentRoot property is used to specify the root element in the XML document.\nThe record option is used to specify the element name for each record that will make up the XML document.</p>",
        "configs": [
            {
                "name": "defaultDocumentRoot",
                "type": "string",
                "doc": "<p>The root to be used if documentRoot is empty and a root is required\nto form a valid XML document.</p>",
                "default": "'xmlData'"
            },
            {
                "name": "documentRoot",
                "type": "string",
                "doc": "<p>The name of the root element of the document. Defaults to <tt>'xmlData'</tt>.\nIf there is more than 1 record and the root is not specified, the default document root will still be used\nto ensure a valid XML document is created.</p>",
                "default": "'xmlData'"
            },
            {
                "name": "header",
                "type": "string",
                "doc": "<p>A header to use in the XML document (such as setting the encoding or version).\nDefaults to <tt>''</tt>.</p>",
                "default": "''"
            },
            {
                "name": "record",
                "type": "string",
                "doc": "<p>The name of the node to use for each record. Defaults to\nthe owning Proxy's Reader's\nExt.data.reader.Xml.record setting, or <code>'record'</code>.</p>",
                "default": "'record'"
            }
        ],
        "events": []
    },
    "Ext.data.XmlStore": {
        "type": "Ext.data.XmlStore",
        "doc": "<p>Small helper class to make creating Ext.data.Stores from XML data easier.\nA XmlStore will be automatically configured with a Ext.data.reader.Xml.</p>",
        "configs": [],
        "events": []
    },
    "Ext.dataview.component.Container": {
        "type": "Ext.dataview.component.Container",
        "configs": [],
        "events": [
            {
                "name": "itemdoubletap",
                "params": "this(Ext.dataview.component.Container) item(Ext.dataview.component.DataItem) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires whenever an item is doubletapped</p>"
            },
            {
                "name": "itemsingletap",
                "params": "this(Ext.dataview.component.Container) item(Ext.dataview.component.DataItem) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires whenever an item is doubletapped</p>"
            },
            {
                "name": "itemswipe",
                "params": "this(Ext.dataview.component.Container) item(Ext.dataview.component.DataItem) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires whenever an item is swiped</p>"
            },
            {
                "name": "itemtap",
                "params": "this(Ext.dataview.component.Container) item(Ext.dataview.component.DataItem) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires whenever an item is tapped</p>"
            },
            {
                "name": "itemtaphold",
                "params": "this(Ext.dataview.component.Container) item(Ext.dataview.component.DataItem) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires whenever an item is tapped</p>"
            },
            {
                "name": "itemtouchend",
                "params": "this(Ext.dataview.component.Container) item(Ext.dataview.component.DataItem) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires whenever an item is touched</p>"
            },
            {
                "name": "itemtouchmove",
                "params": "this(Ext.dataview.component.Container) item(Ext.dataview.component.DataItem) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires whenever an item is moved</p>"
            },
            {
                "name": "itemtouchstart",
                "params": "this(Ext.dataview.component.Container) item(Ext.dataview.component.DataItem) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires whenever an item is touched</p>"
            }
        ]
    },
    "Ext.dataview.component.DataItem": {
        "type": "Ext.dataview.component.DataItem",
        "doc": "<p>A DataItem is a container for records inside of Ext.dataview.DataView with useComponents: true.\nIt ties together records to its contained Components. Consider the following example:</p>",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to\nother elements within this component. To add specific styling for sub-classes, use the cls config.</p>",
                "default": "Ext.baseCSSPrefix + 'data-item'"
            },
            {
                "name": "dataMap",
                "type": "object",
                "doc": "<p>The dataMap allows you to map record fields to specific configurations in this component.</p>",
                "default": "{}"
            },
            {
                "name": "dataview",
                "type": "object",
                "doc": "<p>dataview</p>",
                "default": null
            },
            {
                "name": "defaultType",
                "type": "string",
                "doc": "<p>The default xtype of child Components to create in this Container when a child item\nis specified as a raw configuration object, rather than as an instantiated Component.</p>",
                "default": "'component'"
            },
            {
                "name": "itemCls",
                "type": "string",
                "doc": "<p>An additional CSS class to apply to items within the DataView.</p>",
                "default": null
            },
            {
                "name": "items",
                "type": "array/object",
                "doc": "<p>The child items to add to this Container. This is usually an array of Component\nconfigurations or instances, for example:</p>",
                "default": "[{xtype: 'component'}]"
            },
            {
                "name": "record",
                "type": "ext.data.model",
                "doc": "<p>The model instance of this DataItem. It is controlled by the Component DataView.</p>",
                "default": null
            },
            {
                "name": "width",
                "type": "number/string",
                "doc": "<p>The width of this Component; must be a valid CSS length value, e.g: <code>300</code>, <code>100px</code>, <code>30%</code>, etc.\nBy default, if this is not explicitly set, this Component's element will simply have its own natural size.\nIf set to <code>auto</code>, it will set the width to <code>null</code> meaning it will have its own natural size.</p>",
                "default": "'100%'"
            }
        ],
        "events": [
            {
                "name": "updatedata",
                "params": "this(Ext.dataview.component.DataItem) newData(Object) eOpts(Object)",
                "doc": "<p>Fires whenever the data of the DataItem is updated.</p>"
            }
        ]
    },
    "Ext.dataview.component.ListItem": {
        "type": "Ext.dataview.component.ListItem",
        "doc": "<p>A ListItem is a container for Ext.dataview.List with\nuseSimpleItems: false.</p>",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to\nother elements within this component. To add specific styling for sub-classes, use the cls config.</p>",
                "default": "Ext.baseCSSPrefix + 'list-item'"
            },
            {
                "name": "body",
                "type": "object",
                "doc": "\n",
                "default": "{xtype: 'component', cls: 'x-list-item-body'}"
            },
            {
                "name": "dataMap",
                "type": "object",
                "doc": "<p>The dataMap allows you to map record fields to specific configurations in this component.</p>",
                "default": "{}"
            },
            {
                "name": "disclosure",
                "type": "object",
                "doc": "\n",
                "default": "{xtype: 'component', cls: 'x-list-disclosure', hidden: true, docked: 'right'}"
            },
            {
                "name": "header",
                "type": "object",
                "doc": "\n",
                "default": "{xtype: 'component', cls: 'x-list-header', html: ' '}"
            },
            {
                "name": "items",
                "type": "array/object",
                "doc": "<p>The child items to add to this Container. This is usually an array of Component\nconfigurations or instances, for example:</p>",
                "default": "[{xtype: 'component'}]"
            },
            {
                "name": "tpl",
                "type": "string/string[]/ext.template/ext.xtemplate[]",
                "doc": "<p>A String, Ext.Template, Ext.XTemplate or an Array of strings to form an Ext.XTemplate.\nUsed in conjunction with the data and tplWriteMode configurations.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "updatedata",
                "params": "this(Ext.dataview.component.DataItem) newData(Object) eOpts(Object)",
                "doc": "<p>Fires whenever the data of the DataItem is updated.</p>"
            }
        ]
    },
    "Ext.dataview.component.SimpleListItem": {
        "type": "Ext.dataview.component.SimpleListItem",
        "doc": "<p>A SimpleListItem is a simplified list item that is used by Ext.dataview.List when\nuseSimpleItems is set to true.  It supports disclosure icons and headers and generates the\nslimmest markup possible to achieve this. It doesn't support container functionality like adding\nor docking items. If you require those features you should have your list use\nExt.dataview.component.ListItem instances.</p>",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to\nother elements within this component. To add specific styling for sub-classes, use the cls config.</p>",
                "default": "Ext.baseCSSPrefix + 'list-item'"
            },
            {
                "name": "dataview",
                "type": "object",
                "doc": "<p>dataview</p>",
                "default": null
            },
            {
                "name": "disclosure",
                "type": "object",
                "doc": "\n",
                "default": "{xtype: 'component', cls: 'x-list-disclosure', hidden: true}"
            },
            {
                "name": "header",
                "type": "object",
                "doc": "\n",
                "default": "{xtype: 'component', cls: 'x-list-header', html: ' '}"
            },
            {
                "name": "record",
                "type": "ext.data.model",
                "doc": "<p>The model instance of this ListTplItem. It is controlled by the List.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.dataview.DataView": {
        "type": "Ext.dataview.DataView",
        "doc": "<p>DataView makes it easy to create lots of components dynamically, usually based off a Store.\nIt's great for rendering lots of data from your server backend or any other data source and is what powers\ncomponents like Ext.List.</p>",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to\nother elements within this component. To add specific styling for sub-classes, use the cls config.</p>",
                "default": "Ext.baseCSSPrefix + 'dataview'"
            },
            {
                "name": "data",
                "type": "object[]",
                "doc": "<p>The initial set of data to apply to the <code>tpl</code> to\nupdate the content area of the Component.</p>",
                "default": null
            },
            {
                "name": "defaultType",
                "type": "string",
                "doc": "<p>The xtype used for the component based DataView.</p>",
                "default": "'dataitem'"
            },
            {
                "name": "deferEmptyText",
                "type": "boolean",
                "doc": "<p><code>true</code> to defer <code>emptyText</code> being applied until the store's first load.</p>",
                "default": "true"
            },
            {
                "name": "deselectOnContainerClick",
                "type": "boolean",
                "doc": "<p>When set to true, tapping on the DataView's background (i.e. not on\nan item in the DataView) will deselect any currently selected items.</p>",
                "default": "true"
            },
            {
                "name": "emptyText",
                "type": "string",
                "doc": "<p>The text to display in the view when there is no data to display</p>",
                "default": null
            },
            {
                "name": "inline",
                "type": "boolean/object",
                "doc": "<p>When set to <code>true</code> the items within the DataView will have their display set to inline-block\nand be arranged horizontally. By default the items will wrap to the width of the DataView.\nPassing an object with <code>{ wrap: false }</code> will turn off this wrapping behavior and overflowed\nitems will need to be scrolled to horizontally.</p>",
                "default": null
            },
            {
                "name": "itemCls",
                "type": "string",
                "doc": "<p>An additional CSS class to apply to items within the DataView.</p>",
                "default": null
            },
            {
                "name": "itemConfig",
                "type": "object",
                "doc": "<p>A configuration object that is passed to every item created by a component based DataView. Because each\nitem that a DataView renders is a Component, we can pass configuration options to each component to\neasily customize how each child component behaves.</p>",
                "default": "{}"
            },
            {
                "name": "itemTpl",
                "type": "string/string[]/ext.xtemplate",
                "doc": "<p>The <code>tpl</code> to use for each of the items displayed in this DataView.</p>",
                "default": "'<div>{text}</div>'"
            },
            {
                "name": "layout",
                "type": "object",
                "doc": "<p>Hide layout config in DataView. It only causes confusion.</p>",
                "default": null
            },
            {
                "name": "loadingText",
                "type": "string/boolean",
                "doc": "<p>A string to display during data load operations.  If specified, this text will be\ndisplayed in a loading div and the view's contents will be cleared while loading, otherwise the view's\ncontents will continue to display normally until the new data is loaded and the contents are replaced.</p>",
                "default": "'Loading...'"
            },
            {
                "name": "maxItemCache",
                "type": "number",
                "doc": "<p>Maintains a cache of reusable components when using a component based DataView.  Improving performance at\nthe cost of memory.</p>",
                "default": "20"
            },
            {
                "name": "pressedCls",
                "type": "string",
                "doc": "<p>The CSS class to apply to an item on the view while it is being pressed.</p>",
                "default": "'x-item-pressed'"
            },
            {
                "name": "pressedDelay",
                "type": "number",
                "doc": "<p>The amount of delay between the <code>tapstart</code> and the moment we add the <code>pressedCls</code>.</p>",
                "default": "100"
            },
            {
                "name": "scrollToTopOnRefresh",
                "type": "boolean",
                "doc": "<p>Scroll the DataView to the top when the DataView is refreshed.</p>",
                "default": "true"
            },
            {
                "name": "scrollable",
                "type": "boolean/string/object",
                "doc": "<p>Configuration options to make this Component scrollable. Acceptable values are:</p>",
                "default": "true"
            },
            {
                "name": "selectedCls",
                "type": "string",
                "doc": "<p>The CSS class to apply to an item on the view while it is selected.</p>",
                "default": "'x-item-selected'"
            },
            {
                "name": "store",
                "type": "ext.data.store/object",
                "doc": "<p>Can be either a Store instance or a configuration object that will be turned into a Store. The Store is used\nto populate the set of items that will be rendered in the DataView. See the DataView intro documentation for\nmore information about the relationship between Store and DataView.</p>",
                "default": null
            },
            {
                "name": "triggerCtEvent",
                "type": "string",
                "doc": "<p>Determines what type of touch event is recognized as a touch on the container.\nValid options are 'tap' and 'singletap'.</p>",
                "default": "'tap'"
            },
            {
                "name": "triggerEvent",
                "type": "string",
                "doc": "<p>Determines what type of touch event causes an item to be selected.\nValid options are: 'itemtap', 'itemsingletap', 'itemdoubletap', 'itemswipe', 'itemtaphold'.</p>",
                "default": "'itemtap'"
            },
            {
                "name": "useComponents",
                "type": "boolean",
                "doc": "<p>Flag the use a component based DataView implementation.  This allows the full use of components in the\nDataView at the cost of some performance.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "containertap",
                "params": "eOpts(Object)",
                "doc": "<p>Fires when a tap occurs and it is not on a template node.</p>"
            },
            {
                "name": "deselect",
                "params": "this(Ext.dataview.DataView) record(Ext.data.Model) supressed(Boolean) eOpts(Object)",
                "doc": "<p>Fires whenever an item is deselected</p>"
            },
            {
                "name": "itemdoubletap",
                "params": "this(Ext.dataview.DataView) index(Number) target(Ext.Element/Ext.dataview.component.DataItem) record(Ext.data.Model) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires whenever an item is doubletapped</p>"
            },
            {
                "name": "itemsingletap",
                "params": "this(Ext.dataview.DataView) index(Number) target(Ext.Element/Ext.dataview.component.DataItem) record(Ext.data.Model) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires whenever an item is singletapped</p>"
            },
            {
                "name": "itemswipe",
                "params": "this(Ext.dataview.DataView) index(Number) target(Ext.Element/Ext.dataview.component.DataItem) record(Ext.data.Model) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires whenever an item is swiped</p>"
            },
            {
                "name": "itemtap",
                "params": "this(Ext.dataview.DataView) index(Number) target(Ext.Element/Ext.dataview.component.DataItem) record(Ext.data.Model) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires whenever an item is tapped</p>"
            },
            {
                "name": "itemtaphold",
                "params": "this(Ext.dataview.DataView) index(Number) target(Ext.Element/Ext.dataview.component.DataItem) record(Ext.data.Model) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires whenever an item's taphold event fires</p>"
            },
            {
                "name": "itemtouchend",
                "params": "this(Ext.dataview.DataView) index(Number) target(Ext.Element/Ext.dataview.component.DataItem) record(Ext.data.Model) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires whenever an item is touched</p>"
            },
            {
                "name": "itemtouchmove",
                "params": "this(Ext.dataview.DataView) index(Number) target(Ext.Element/Ext.dataview.component.DataItem) record(Ext.data.Model) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires whenever an item is moved</p>"
            },
            {
                "name": "itemtouchstart",
                "params": "this(Ext.dataview.DataView) index(Number) target(Ext.Element/Ext.dataview.component.DataItem) record(Ext.data.Model) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires whenever an item is touched</p>"
            },
            {
                "name": "refresh",
                "params": "this(Ext.dataview.DataView) eOpts(Object)",
                "doc": "<p>Fires whenever the DataView is refreshed</p>"
            },
            {
                "name": "select",
                "params": "this(Ext.dataview.DataView) record(Ext.data.Model) eOpts(Object)",
                "doc": "<p>Fires whenever an item is selected</p>"
            }
        ]
    },
    "Ext.dataview.element.Container": {
        "type": "Ext.dataview.element.Container",
        "configs": [],
        "events": [
            {
                "name": "itemdoubletap",
                "params": "this(Ext.dataview.element.Container) item(Ext.dom.Element) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires whenever an item is doubletapped</p>"
            },
            {
                "name": "itemsingletap",
                "params": "this(Ext.dataview.element.Container) item(Ext.dom.Element) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires whenever an item is singletapped</p>"
            },
            {
                "name": "itemswipe",
                "params": "this(Ext.dataview.element.Container) item(Ext.dom.Element) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires whenever an item is swiped</p>"
            },
            {
                "name": "itemtap",
                "params": "this(Ext.dataview.element.Container) item(Ext.dom.Element) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires whenever an item is tapped</p>"
            },
            {
                "name": "itemtaphold",
                "params": "this(Ext.dataview.element.Container) item(Ext.dom.Element) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires whenever an item is tapped</p>"
            },
            {
                "name": "itemtouchend",
                "params": "this(Ext.dataview.element.Container) item(Ext.dom.Element) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires whenever an item is touched</p>"
            },
            {
                "name": "itemtouchmove",
                "params": "this(Ext.dataview.element.Container) item(Ext.dom.Element) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires whenever an item is moved</p>"
            },
            {
                "name": "itemtouchstart",
                "params": "this(Ext.dataview.element.Container) item(Ext.dom.Element) index(Number) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires whenever an item is touched</p>"
            }
        ]
    },
    "Ext.dataview.element.List": {
        "type": "Ext.dataview.element.List",
        "configs": [],
        "events": []
    },
    "Ext.dataview.IndexBar": {
        "type": "Ext.dataview.IndexBar",
        "doc": "<p>IndexBar is a component used to display a list of data (primarily an alphabet) which can then be used to quickly\nnavigate through a list (see Ext.List) of data. When a user taps on an item in the Ext.IndexBar,\nit will fire the index event.</p>",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to\nother elements within this component. To add specific styling for sub-classes, use the cls config.</p>",
                "default": "Ext.baseCSSPrefix + 'indexbar'"
            },
            {
                "name": "direction",
                "type": "string",
                "doc": "<p>Layout direction, can be either 'vertical' or 'horizontal'</p>",
                "default": "'vertical'"
            },
            {
                "name": "letters",
                "type": "array",
                "doc": "<p>The letters to show on the index bar.</p>",
                "default": "['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']"
            },
            {
                "name": "listPrefix",
                "type": "string",
                "doc": "<p>The prefix string to be used at the beginning of the list.\nE.g: useful to add a \"#\" prefix before numbers.</p>",
                "default": null
            },
            {
                "name": "ui",
                "type": "string",
                "doc": "<p>The ui to be used on this Component</p>",
                "default": "'alphabet'"
            }
        ],
        "events": [
            {
                "name": "index",
                "params": "this(Ext.dataview.IndexBar) html(String) target(Ext.dom.Element) eOpts(Object)",
                "doc": "<p>Fires when an item in the index bar display has been tapped.</p>"
            }
        ]
    },
    "Ext.dataview.List": {
        "type": "Ext.dataview.List",
        "doc": "<p>List is a custom styled DataView which allows Grouping, Indexing, Icons, and a Disclosure.</p>",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to\nother elements within this component. To add specific styling for sub-classes, use the cls config.</p>",
                "default": "Ext.baseCSSPrefix + 'list'"
            },
            {
                "name": "bufferSize",
                "type": "number",
                "doc": "<p>The amount of items we render additionally besides the ones currently visible.\nWe try to prevent the rendering of items while scrolling until the next time you stop scrolling.\nIf you scroll close to the end of the buffer, we start rendering individual items to always\nhave the minimumBufferSize prepared.</p>",
                "default": "20"
            },
            {
                "name": "container",
                "type": "object",
                "doc": "<p>This config is used to control the internal Ext.Container created to\nmanage this list's items. One common use for this is to apply a userCls\nto the item container.</p>",
                "default": "{lazy: true, $value: {xtype: 'container', scrollable: {}}}"
            },
            {
                "name": "defaultType",
                "type": "string",
                "doc": "<p>The xtype used for the component based DataView. Defaults to dataitem.\nNote this is only used when useComponents is true.</p>",
                "default": null
            },
            {
                "name": "disclosureProperty",
                "type": "string",
                "doc": "<p>A property to check on each record to display the disclosure on a per record basis.  This\nproperty must be false to prevent the disclosure from being displayed on the item.</p>",
                "default": "'disclosure'"
            },
            {
                "name": "grouped",
                "type": "boolean",
                "doc": "<p>Whether or not to group items in the provided Store with a header for each item.</p>",
                "default": null
            },
            {
                "name": "icon",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "indexBar",
                "type": "boolean/object",
                "doc": "<p><code>true</code> to render an alphabet IndexBar docked on the right.\nThis can also be a config object that will be passed to Ext.IndexBar.</p>",
                "default": "false"
            },
            {
                "name": "infinite",
                "type": "boolean",
                "doc": "<p>Set this to false to render all items in this list, and render them relatively.\nNote that this configuration can not be dynamically changed after the list has instantiated.</p>",
                "default": "false"
            },
            {
                "name": "itemConfig",
                "type": "object",
                "doc": "<p>A configuration object that is passed to every item created by a component based DataView. Because each\nitem that a List renders is a Component, we can pass configuration options to each component to\neasily customize how each child component behaves.</p>",
                "default": null
            },
            {
                "name": "itemHeight",
                "type": "number",
                "doc": "<p>This allows you to set the default item height and is used to roughly calculate the amount\nof items needed to fill the list. By default items are around 50px high.</p>",
                "default": null
            },
            {
                "name": "itemMap",
                "type": "object",
                "doc": "\n",
                "default": "{}"
            },
            {
                "name": "layout",
                "type": "string",
                "doc": "<p>Hide layout config in DataView. It only causes confusion.</p>",
                "default": "'fit'"
            },
            {
                "name": "maxItemCache",
                "type": "number",
                "doc": "<p>Maintains a cache of reusable components when using a component based DataView.  Improving performance at\nthe cost of memory.\nNote this is currently only used when useComponents is true.</p>",
                "default": null
            },
            {
                "name": "minimumBufferDistance",
                "type": "number",
                "doc": "\n",
                "default": "5"
            },
            {
                "name": "onItemDisclosure",
                "type": "boolean/function/object",
                "doc": "<p><code>true</code> to display a disclosure icon on each list item.\nThe list will still fire the disclose event, and the event can be stopped before itemtap.\nBy setting this config to a function, the function passed will be called when the disclosure\nis tapped.\nFinally you can specify an object with a 'scope' and 'handler'\nproperty defined. This will also be bound to the tap event listener\nand is useful when you want to change the scope of the handler.</p>",
                "default": null
            },
            {
                "name": "pinHeaders",
                "type": "boolean",
                "doc": "<p>Whether or not to pin headers on top of item groups while scrolling for an iPhone native list experience.</p>",
                "default": "true"
            },
            {
                "name": "preventSelectionOnDisclose",
                "type": "boolean",
                "doc": "<p><code>true</code> to prevent the item selection when the user\ntaps a disclose icon.</p>",
                "default": "true"
            },
            {
                "name": "refreshHeightOnUpdate",
                "type": "boolean",
                "doc": "<p>Set this to false if you make many updates to your list (like in an interval), but updates\nwon't affect the item's height. Doing this will increase the performance of these updates.</p>",
                "default": "true"
            },
            {
                "name": "scrollable",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "striped",
                "type": "boolean",
                "doc": "<p>Set this to true if you want the items in the list to be zebra striped, alternating their\nbackground color.</p>",
                "default": "false"
            },
            {
                "name": "useComponents",
                "type": "boolean",
                "doc": "<p>Flag the use a component based DataView implementation.  This allows the full use of components in the\nDataView at the cost of some performance.</p>",
                "default": null
            },
            {
                "name": "useSimpleItems",
                "type": "boolean",
                "doc": "<p>Set this to true if you just want to have the list create simple items that use the itemTpl.\nThese simple items still support headers, grouping and disclosure functionality but avoid\ncontainer layouts and deeply nested markup. For many Lists using this configuration will\ndrastically increase the scrolling and render performance.</p>",
                "default": "true"
            },
            {
                "name": "variableHeights",
                "type": "boolean",
                "doc": "<p>This configuration allows you optimize the list by not having it read the DOM heights of list items.\nInstead it will assume (and set) the height to be the itemHeight.</p>",
                "default": "false"
            }
        ],
        "events": [
            {
                "name": "disclose",
                "params": "this(Ext.dataview.List) record(Ext.data.Model) target(HTMLElement) index(Number) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires whenever a disclosure is handled</p>"
            }
        ]
    },
    "Ext.dataview.ListItemHeader": {
        "type": "Ext.dataview.ListItemHeader",
        "doc": "<p>To be made a sample</p>",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to\nother elements within this component. To add specific styling for sub-classes, use the cls config.</p>",
                "default": "Ext.baseCSSPrefix + 'list-header'"
            }
        ],
        "events": []
    },
    "Ext.dataview.NestedList": {
        "type": "Ext.dataview.NestedList",
        "doc": "<p>NestedList provides a miller column interface to navigate between nested sets\nand provide a clean interface with limited screen real-estate.</p>",
        "configs": [
            {
                "name": "allowDeselect",
                "type": "boolean",
                "doc": "<p>Set to <code>true</code> to allow the user to deselect leaf items via interaction.</p>",
                "default": "false"
            },
            {
                "name": "backButton",
                "type": "object",
                "doc": "<p>The configuration for the back button used in the nested list.</p>",
                "default": "{ui: 'back', hidden: true}"
            },
            {
                "name": "backText",
                "type": "string",
                "doc": "<p>The label to display for the back button.</p>",
                "default": "'Back'"
            },
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to\nother elements within this component. To add specific styling for sub-classes, use the cls config.</p>",
                "default": "Ext.baseCSSPrefix + 'nested-list'"
            },
            {
                "name": "cardSwitchAnimation",
                "type": "string/object/boolean",
                "doc": "<p>Animation to be used during transitions of cards.</p>",
                "default": null
            },
            {
                "name": "clearSelectionOnListChange",
                "type": "boolean",
                "doc": "\n",
                "default": "true"
            },
            {
                "name": "detailCard",
                "type": "ext.component",
                "doc": "<p>provides the information for a leaf\nin a Miller column list. In a Miller column, users follow a\nhierarchial tree structure to a leaf, which provides information\nabout the item in the list. The detailCard lists the information at\nthe leaf.</p>",
                "default": null
            },
            {
                "name": "detailContainer",
                "type": "ext.container",
                "doc": "<p>The container of the <code>detailCard</code>.\nA detailContainer is a reference to the container where a detail card\ndisplays.</p>",
                "default": null
            },
            {
                "name": "displayField",
                "type": "string",
                "doc": "<p>Display field to use when setting item text and title.\nThis configuration is ignored when overriding getItemTextTpl or\ngetTitleTextTpl for the item text or title.</p>",
                "default": "'text'"
            },
            {
                "name": "emptyText",
                "type": "string",
                "doc": "<p>Empty text to display when a subtree is empty.</p>",
                "default": "'No items available.'"
            },
            {
                "name": "itemHeight",
                "type": "number",
                "doc": "<p>This allows you to set the default item height and is used to roughly calculate the amount\nof items needed to fill the list. By default items are around 50px high. If you set this\nconfiguration in combination with setting the variableHeights to false you\ncan improve the scrolling speed</p>",
                "default": null
            },
            {
                "name": "lastActiveList",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "lastNode",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "listConfig",
                "type": "object",
                "doc": "<p>An optional config object which is merged with the default\nconfiguration used to create each nested list.</p>",
                "default": null
            },
            {
                "name": "loadingText",
                "type": "string",
                "doc": "<p>Loading text to display when a subtree is loading.</p>",
                "default": "'Loading...'"
            },
            {
                "name": "onItemDisclosure",
                "type": "boolean/function",
                "doc": "<p>Maps to the Ext.List.onItemDisclosure configuration for individual lists.</p>",
                "default": "false"
            },
            {
                "name": "store",
                "type": "ext.data.treestore/string",
                "doc": "<p>The tree store to be used for this nested list.</p>",
                "default": null
            },
            {
                "name": "title",
                "type": "string",
                "doc": "<p>The title of the toolbar</p>",
                "default": "''"
            },
            {
                "name": "toolbar",
                "type": "ext.toolbar/object/boolean",
                "doc": "<p>The configuration to be used for the toolbar displayed in this nested list.</p>",
                "default": "{docked: 'top', xtype: 'titlebar', ui: 'light', inline: true}"
            },
            {
                "name": "ui",
                "type": "string",
                "doc": "<p>The ui to be used on this Component</p>",
                "default": null
            },
            {
                "name": "updateTitleText",
                "type": "boolean",
                "doc": "<p>Update the title with the currently selected category.</p>",
                "default": "true"
            },
            {
                "name": "useSimpleItems",
                "type": "boolean",
                "doc": "<p>Set this to false if you want the lists in this NestedList to create complex container list items.</p>",
                "default": "true"
            },
            {
                "name": "useTitleAsBackText",
                "type": "boolean",
                "doc": "<p><code>true</code> to use title as a label for back button.</p>",
                "default": "true"
            },
            {
                "name": "useToolbar",
                "type": "boolean",
                "doc": "<p><code>true</code> to show the header toolbar.</p>",
                "default": null
            },
            {
                "name": "variableHeights",
                "type": "boolean",
                "doc": "<p>This configuration allows you optimize the picker by not having it read the DOM heights of list items.\nInstead it will assume (and set) the height to be the itemHeight.</p>",
                "default": "false"
            }
        ],
        "events": [
            {
                "name": "back",
                "params": "this(Ext.dataview.NestedList) node(HTMLElement) lastActiveList(Ext.dataview.List) detailCardActive(Boolean) eOpts(Object)",
                "doc": "<p>Fires when the user taps Back.</p>"
            },
            {
                "name": "beforeload",
                "params": "this(Ext.dataview.NestedList) store(Ext.data.Store) operation(Ext.data.Operation) eOpts(Object)",
                "doc": "<p>Fires before a request is made for a new data object.</p>"
            },
            {
                "name": "beforeselectionchange",
                "params": "this(Ext.dataview.NestedList) list(Ext.dataview.List) node(HTMLElement) selections(Array) eOpts(Object)",
                "doc": "<p>Fires before a selection is made.</p>"
            },
            {
                "name": "containertap",
                "params": "this(Ext.dataview.NestedList) list(Ext.dataview.List) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when a tap occurs and it is not on a template node.</p>"
            },
            {
                "name": "itemdoubletap",
                "params": "this(Ext.dataview.NestedList) list(Ext.dataview.List) index(Number) target(Ext.dom.Element) record(Ext.data.Record) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when a node is double tapped on.</p>"
            },
            {
                "name": "itemtap",
                "params": "this(Ext.dataview.NestedList) list(Ext.dataview.List) index(Number) target(Ext.dom.Element) record(Ext.data.Record) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when a node is tapped on.</p>"
            },
            {
                "name": "leafitemtap",
                "params": "this(Ext.dataview.NestedList) list(Ext.List) index(Number) target(Ext.dom.Element) record(Ext.data.Record) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when the user taps a leaf list item.</p>"
            },
            {
                "name": "listchange",
                "params": "this(Ext.dataview.NestedList) listitem(Object) eOpts(Object)",
                "doc": "<p>Fires when the user taps a list item.</p>"
            },
            {
                "name": "load",
                "params": "this(Ext.dataview.NestedList) store(Ext.data.Store) records(Ext.util.Grouper[]) successful(Boolean) operation(Ext.data.Operation) eOpts(Object)",
                "doc": "<p>Fires whenever records have been loaded into the store.</p>"
            },
            {
                "name": "selectionchange",
                "params": "this(Ext.dataview.NestedList) list(Ext.dataview.List) selections(Array) eOpts(Object)",
                "doc": "<p>Fires when the selected nodes change.</p>"
            }
        ]
    },
    "Ext.Date": {
        "type": "Ext.Date",
        "doc": "<p>This class defines some basic methods for handling dates.</p>",
        "configs": [],
        "events": []
    },
    "Ext.Decorator": {
        "type": "Ext.Decorator",
        "doc": "<p>In a few words, a Decorator is a Component that wraps around another Component. A typical example of a Decorator is a\nField. A form field is nothing more than a decorator around another component, and gives the\ncomponent a label, as well as extra styling to make it look good in a form.</p>",
        "configs": [
            {
                "name": "component",
                "type": "object",
                "doc": "<p>The config object to factory the Component that this Decorator wraps around</p>",
                "default": "{}"
            }
        ],
        "events": []
    },
    "Ext.Deferred": {
        "type": "Ext.Deferred",
        "doc": "<p>Deferreds are the mechanism used to create new Promises. A Deferred has a single\nassociated Promise that can be safely returned to external consumers to ensure they do\nnot interfere with the resolution or rejection of the deferred operation.</p>",
        "configs": [],
        "events": []
    },
    "Ext.direct.Event": {
        "type": "Ext.direct.Event",
        "doc": "<p>Base class for all Ext Direct events. An event is\ncreated after some kind of interaction with the server.\nThe event class is essentially just a data structure\nto hold a Direct response.</p>",
        "configs": [],
        "events": []
    },
    "Ext.direct.ExceptionEvent": {
        "type": "Ext.direct.ExceptionEvent",
        "doc": "<p>An event that is fired when an exception is received from a Ext.direct.RemotingProvider</p>",
        "configs": [],
        "events": []
    },
    "Ext.direct.JsonProvider": {
        "type": "Ext.direct.JsonProvider",
        "doc": "<p>A base provider for communicating using JSON. This is an abstract class\nand should not be instanced directly.</p>",
        "configs": [],
        "events": []
    },
    "Ext.direct.Manager": {
        "type": "Ext.direct.Manager",
        "doc": "<p>Ext Direct aims to streamline communication between the client and server\nby providing a single interface that reduces the amount of common code\ntypically required to validate data and handle returned data packets\n(reading data, error conditions, etc).</p>",
        "configs": [
            {
                "name": "varName",
                "type": "string",
                "doc": "<p>Default variable name to use for Ext Direct API declaration.</p>",
                "default": "\"Ext.REMOTING_API\""
            }
        ],
        "events": [
            {
                "name": "event",
                "params": "event(Ext.direct.Event) provider(Ext.direct.Provider) eOpts(Object)",
                "doc": "<p>Fires after an event.</p>"
            },
            {
                "name": "exception",
                "params": "event(Ext.direct.Event) provider(Ext.direct.Provider) eOpts(Object)",
                "doc": "<p>Fires after an event exception.</p>"
            },
            {
                "name": "providerload",
                "params": "url(String) provider(Ext.direct.Provider) eOpts(Object)",
                "doc": "<p>Fired by loadProvider after successfully loading RemotingProvider API\ndeclaration and creating a new Provider instance.</p>"
            },
            {
                "name": "providerloaderror",
                "params": "url(String) error(String) eOpts(Object)",
                "doc": "<p>Fired by loadProvider when remoting API could not be loaded, or\nProvider instance could not be created.</p>"
            }
        ]
    },
    "Ext.direct.PollingProvider": {
        "type": "Ext.direct.PollingProvider",
        "doc": "<p>Provides for repetitive polling of the server at distinct intervals.\nThe initial request for data originates from the client, and then is responded to by the\nserver.</p>",
        "configs": [
            {
                "name": "baseParams",
                "type": "object",
                "doc": "<p>An object containing properties which are to be sent as parameters on every\npolling request. Note that if baseParams are set and url parameter\nis an URL string, poll requests will use POST method instead of default GET.</p>",
                "default": null
            },
            {
                "name": "interval",
                "type": "number",
                "doc": "<p>How often to poll the server-side in milliseconds. Defaults to every 3 seconds.</p>",
                "default": "3000"
            },
            {
                "name": "pollFn",
                "type": "string/function",
                "doc": "<p>Ext Direct method to use for polling. If a method name is provided as a string,\nthe actual function will not be resolved until the first time this provider\nis connected.</p>",
                "default": null
            },
            {
                "name": "url",
                "type": "string/function",
                "doc": "<p>The url which the PollingProvider should contact with each request. This can also be\nan imported Ext Direct method which will be passed baseParams as named arguments.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "beforepoll",
                "params": "this(Ext.direct.PollingProvider) eOpts(Object)",
                "doc": "<p>Fired immediately before a poll takes place.</p>"
            },
            {
                "name": "poll",
                "params": "this(Ext.direct.PollingProvider) eOpts(Object)",
                "doc": "<p>Fired immediately after a poll takes place.</p>"
            }
        ]
    },
    "Ext.direct.Provider": {
        "type": "Ext.direct.Provider",
        "doc": "<p>Ext.direct.Provider is an abstract class meant to be extended.</p>",
        "configs": [
            {
                "name": "id",
                "type": "string",
                "doc": "<p>The unique id of the provider (defaults to an auto-assigned id).\nYou should assign an id if you need to be able to access the provider later and you do\nnot have an object reference available, for example:</p>",
                "default": null
            },
            {
                "name": "relayedEvents",
                "type": "string[]",
                "doc": "<p>List of Provider events that should be relayed by Ext.direct.Manager.\n'data' event is always relayed.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "connect",
                "params": "provider(Ext.direct.Provider) eOpts(Object)",
                "doc": "<p>Fires when the Provider connects to the server-side</p>"
            },
            {
                "name": "data",
                "params": "provider(Ext.direct.Provider) e(Ext.direct.Event) eOpts(Object)",
                "doc": "<p>Fires when the Provider receives data from the server-side</p>"
            },
            {
                "name": "disconnect",
                "params": "provider(Ext.direct.Provider) eOpts(Object)",
                "doc": "<p>Fires when the Provider disconnects from the server-side</p>"
            },
            {
                "name": "exception",
                "params": "eOpts(Object)",
                "doc": "<p>Fires when the Provider receives an exception from the server-side</p>"
            }
        ]
    },
    "Ext.direct.RemotingEvent": {
        "type": "Ext.direct.RemotingEvent",
        "doc": "<p>An event that is fired when data is received from a\nExt.direct.RemotingProvider. Contains a method to the\nrelated transaction for the direct request, see getTransaction</p>",
        "configs": [],
        "events": []
    },
    "Ext.direct.RemotingMethod": {
        "type": "Ext.direct.RemotingMethod",
        "doc": "<p>Small utility class used internally to represent a Direct method.</p>",
        "configs": [],
        "events": []
    },
    "Ext.direct.RemotingProvider": {
        "type": "Ext.direct.RemotingProvider",
        "doc": "<p>The RemotingProvider exposes access to\nserver side methods on the client (a remote procedure call (RPC) type of\nconnection where the client can initiate a procedure on the server).</p>",
        "configs": [
            {
                "name": "actions",
                "type": "object",
                "doc": "<p>Object literal defining the server side actions and methods. For example, if\nthe Provider is configured with:</p>",
                "default": null
            },
            {
                "name": "bufferLimit",
                "type": "number",
                "doc": "<p>The maximum number of requests to batch together.\nBy default, an unlimited number of requests will be batched. This option will\nallow to wait only for a certain number of Direct method calls before\ndispatching a request to the server, even if enableBuffer timeout\nhas not yet expired.</p>",
                "default": null
            },
            {
                "name": "disableNestedActions",
                "type": "boolean",
                "doc": "<p>In versions prior to 4.2, using dotted Action names was not really meaningful,\nbecause it generated flat namespace object with dotted property names.\nFor example, take this API declaration:</p>",
                "default": "false"
            },
            {
                "name": "enableBuffer",
                "type": "number/boolean",
                "doc": "<p><code>true</code> or <code>false</code> to enable or disable combining of method\ncalls. If a number is specified this is the amount of time in milliseconds\nto wait before sending a batched request.</p>",
                "default": "10"
            },
            {
                "name": "enableUrlEncode",
                "type": "string",
                "doc": "<p>Specify which param will hold the arguments for the method.</p>",
                "default": "data"
            },
            {
                "name": "maxRetries",
                "type": "number",
                "doc": "<p>Number of times to re-attempt delivery on failure of a call.</p>",
                "default": "1"
            },
            {
                "name": "namespace",
                "type": "string/object",
                "doc": "<p>Namespace for the Remoting Provider (defaults to <code>Ext.global</code>).\nExplicitly specify the namespace Object, or specify a String to have a\nnamespace created implicitly.</p>",
                "default": null
            },
            {
                "name": "timeout",
                "type": "number",
                "doc": "<p>The timeout to use for each request.</p>",
                "default": null
            },
            {
                "name": "url",
                "type": "string",
                "doc": "<p><strong>Required</strong>. The url to connect to the Ext.direct.Manager server-side router.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "beforecall",
                "params": "provider(Ext.direct.RemotingProvider) transaction(Ext.direct.Transaction) meta(Object) eOpts(Object)",
                "doc": "<p>Fires immediately before the client-side sends off the RPC call. By returning\n<code>false</code> from an event handler you can prevent the call from being made.</p>"
            },
            {
                "name": "beforecallback",
                "params": "provider(Ext.direct.RemotingProvider) event(Ext.direct.Event) transaction(Ext.direct.Transaction) eOpts(Object)",
                "doc": "<p>Fires before callback function is executed. By returning <code>false</code> from an event handler\nyou can prevent the callback from executing.</p>"
            },
            {
                "name": "call",
                "params": "provider(Ext.direct.RemotingProvider) transaction(Ext.direct.Transaction) meta(Object) eOpts(Object)",
                "doc": "<p>Fires immediately after the request to the server-side is sent. This does\nNOT fire after the response has come back from the call.</p>"
            }
        ]
    },
    "Ext.direct.Transaction": {
        "type": "Ext.direct.Transaction",
        "doc": "<p>Supporting Class for Ext Direct (not intended to be used directly).</p>",
        "configs": [
            {
                "name": "provider",
                "type": "ext.direct.provider",
                "doc": "<p>Provider to use with this Transaction.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.dom.CompositeElement": {
        "type": "Ext.dom.CompositeElement",
        "doc": "<p>This class encapsulates a <em>collection</em> of DOM elements, providing methods to filter members, or to perform collective\nactions upon the whole set.</p>",
        "configs": [],
        "events": []
    },
    "Ext.dom.CompositeElementLite": {
        "type": "Ext.dom.CompositeElementLite",
        "doc": "<p>This class encapsulates a <em>collection</em> of DOM elements, providing methods to filter members, or to perform collective\nactions upon the whole set.</p>",
        "configs": [
            {
                "name": "bubbleEvents",
                "type": "object",
                "doc": "\n",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.dom.Element": {
        "type": "Ext.dom.Element",
        "doc": "<p>Encapsulates a DOM element, adding simple DOM manipulation facilities, normalizing for browser differences.</p>",
        "configs": [],
        "events": [
            {
                "name": "DOMActivate",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Where supported. Fires when an element is activated, for instance, through a mouse click or a keypress.</p>"
            },
            {
                "name": "DOMAttrModified",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Where supported. Fires when an attribute has been modified.</p>"
            },
            {
                "name": "DOMCharacterDataModified",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Where supported. Fires when the character data has been modified.</p>"
            },
            {
                "name": "DOMFocusIn",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Where supported. Similar to HTML focus event, but can be applied to any focusable element.</p>"
            },
            {
                "name": "DOMFocusOut",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Where supported. Similar to HTML blur event, but can be applied to any focusable element.</p>"
            },
            {
                "name": "DOMNodeInserted",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Where supported. Fires when a node has been added as a child of another node.</p>"
            },
            {
                "name": "DOMNodeInsertedIntoDocument",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Where supported. Fires when a node is being inserted into a document.</p>"
            },
            {
                "name": "DOMNodeRemoved",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Where supported. Fires when a descendant node of the element is removed.</p>"
            },
            {
                "name": "DOMNodeRemovedFromDocument",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Where supported. Fires when a node is being removed from a document.</p>"
            },
            {
                "name": "DOMSubtreeModified",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Where supported. Fires when the subtree is modified.</p>"
            },
            {
                "name": "abort",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when an object/image is stopped from loading before completely loaded.</p>"
            },
            {
                "name": "blur",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when an element loses focus either via the pointing device or by tabbing navigation.</p>"
            },
            {
                "name": "change",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when a control loses the input focus and its value has been modified since gaining focus.</p>"
            },
            {
                "name": "click",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when a mouse click is detected within the element.</p>"
            },
            {
                "name": "contextmenu",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when a right click is detected within the element.</p>"
            },
            {
                "name": "dblclick",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when a mouse double click is detected within the element.</p>"
            },
            {
                "name": "doubletap",
                "params": "event(Ext.event.Event) node(HTMLElement) options(Object) eOpts(Object)",
                "doc": "<p>Fires when there is a double tap.</p>"
            },
            {
                "name": "error",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when an object/image/frame cannot be loaded properly.</p>"
            },
            {
                "name": "focus",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when an element receives focus either via the pointing device or by tab navigation.</p>"
            },
            {
                "name": "focusmove",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when focus is moved <em>within</em> an element.</p>"
            },
            {
                "name": "keydown",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when a keydown is detected within the element.</p>"
            },
            {
                "name": "keypress",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when a keypress is detected within the element.</p>"
            },
            {
                "name": "keyup",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when a keyup is detected within the element.</p>"
            },
            {
                "name": "load",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when the user agent finishes loading all content within the element. Only supported by window, frames,\nobjects and images.</p>"
            },
            {
                "name": "longpress",
                "params": "event(Ext.event.Event) node(HTMLElement) options(Object) eOpts(Object)",
                "doc": "<p>Fires when you touch and hold still for more than 1 second.</p>"
            },
            {
                "name": "mousedown",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when a mousedown is detected within the element.</p>"
            },
            {
                "name": "mouseenter",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when the mouse enters the element.</p>"
            },
            {
                "name": "mouseleave",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when the mouse leaves the element.</p>"
            },
            {
                "name": "mousemove",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when a mousemove is detected with the element.</p>"
            },
            {
                "name": "mouseout",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when a mouseout is detected with the element.</p>"
            },
            {
                "name": "mouseover",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when a mouseover is detected within the element.</p>"
            },
            {
                "name": "mouseup",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when a mouseup is detected within the element.</p>"
            },
            {
                "name": "painted",
                "params": "this(Ext.dom.Element) eOpts(Object)",
                "doc": "<p>Fires whenever this Element actually becomes visible (painted) on the screen. This is useful when you need to\nperform 'read' operations on the DOM element, i.e: calculating natural sizes and positioning.</p>"
            },
            {
                "name": "pinch",
                "params": "event(Ext.event.Event) node(HTMLElement) options(Object) eOpts(Object)",
                "doc": "<p>Fires continuously when there is pinching (the touch must move for this to be fired).</p>"
            },
            {
                "name": "pinchend",
                "params": "event(Ext.event.Event) node(HTMLElement) options(Object) eOpts(Object)",
                "doc": "<p>Fires when a pinch has ended.</p>"
            },
            {
                "name": "pinchstart",
                "params": "event(Ext.event.Event) node(HTMLElement) options(Object) eOpts(Object)",
                "doc": "<p>Fired once when a pinch has started.</p>"
            },
            {
                "name": "reset",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when a form is reset.</p>"
            },
            {
                "name": "resize",
                "params": "this(Ext.dom.Element) eOpts(Object)",
                "doc": "<p>Important note: For the best performance on mobile devices, use this only when you absolutely need to monitor\na Element's size.</p>"
            },
            {
                "name": "rotate",
                "params": "event(Ext.event.Event) node(HTMLElement) options(Object) eOpts(Object)",
                "doc": "<p>Fires continuously when there is rotation (the touch must move for this to be fired).\nWhen listening to this, ensure you know about the Ext.event.Event.angle and Ext.event.Event.rotation\nproperties in the <code>event</code> object.</p>"
            },
            {
                "name": "rotateend",
                "params": "event(Ext.event.Event) node(HTMLElement) options(Object) eOpts(Object)",
                "doc": "<p>Fires when a rotation event has ended.</p>"
            },
            {
                "name": "rotatestart",
                "params": "event(Ext.event.Event) node(HTMLElement) options(Object) eOpts(Object)",
                "doc": "<p>Fired once when a rotation has started.</p>"
            },
            {
                "name": "scroll",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when a document view is scrolled.</p>"
            },
            {
                "name": "select",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when a user selects some text in a text field, including input and textarea.</p>"
            },
            {
                "name": "singletap",
                "params": "event(Ext.event.Event) node(HTMLElement) options(Object) eOpts(Object)",
                "doc": "<p>Fires when there is a single tap.</p>"
            },
            {
                "name": "submit",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when a form is submitted.</p>"
            },
            {
                "name": "swipe",
                "params": "event(Ext.event.Event) node(HTMLElement) options(Object) eOpts(Object)",
                "doc": "<p>Fires when there is a swipe\nWhen listening to this, ensure you know about the Ext.event.Event.direction property in the <code>event</code> object.</p>"
            },
            {
                "name": "taphold",
                "params": "event(Ext.event.Event) node(HTMLElement) options(Object) eOpts(Object)",
                "doc": "<p>Fires when you touch and hold still for more than 1 second.</p>"
            },
            {
                "name": "unload",
                "params": "e(Ext.event.Event) t(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires when the user agent removes all content from a window or frame. For elements, it fires when the target\nelement or any of its content has been removed.</p>"
            }
        ]
    },
    "Ext.dom.ElementEvent": {
        "type": "Ext.dom.ElementEvent",
        "doc": "<p>A special Ext.util.Event subclass that adds support for capture (top-down propagation)\nlisteners, and non-delegated (directly attached to the dom) listeners.</p>",
        "configs": [],
        "events": []
    },
    "Ext.dom.Fly": {
        "type": "Ext.dom.Fly",
        "doc": "<p>A flyweight Ext.dom.Element that can be dynamically attached to a DOM node.\nIn general this class should not be instantiated directly.  Use Ext.fly\nto create and retrieve Fly instances.</p>",
        "configs": [],
        "events": []
    },
    "Ext.dom.GarbageCollector": {
        "type": "Ext.dom.GarbageCollector",
        "doc": "<p>Garbage collector for Ext.dom.Element instances.  Automatically cleans up Elements\nthat are no longer in the dom, but were not properly destroyed using\ndestroy().  Recommended practice is for Components to\nclean up their own elements, but the GarbageCollector runs on regularly scheduled\nintervals to attempt to clean up orphaned Elements that may have slipped through the cracks.</p>",
        "configs": [],
        "events": []
    },
    "Ext.dom.Helper": {
        "type": "Ext.dom.Helper",
        "doc": "<p>The DomHelper class provides a layer of abstraction from DOM and transparently supports creating elements via DOM or\nusing HTML fragments. It also has the ability to create HTML fragment templates from your DOM building code.</p>",
        "configs": [],
        "events": []
    },
    "Ext.dom.Query": {
        "type": "Ext.dom.Query",
        "doc": "<p>Provides high performance selector/xpath processing by compiling queries into reusable functions. New pseudo classes\nand matchers can be plugged. It works on HTML and XML documents (if a content node is passed in).</p>",
        "configs": [],
        "events": []
    },
    "Ext.dom.Shadow": {
        "type": "Ext.dom.Shadow",
        "doc": "<p>Simple class that can provide a shadow effect for any absolutely positioned Element.</p>",
        "configs": [
            {
                "name": "mode",
                "type": "string",
                "doc": "<p>The shadow display mode.  Supports the following options:</p>",
                "default": "'drop'"
            },
            {
                "name": "offset",
                "type": "number",
                "doc": "<p>The number of pixels to offset the shadow from the element</p>",
                "default": "4"
            }
        ],
        "events": []
    },
    "Ext.dom.Shim": {
        "type": "Ext.dom.Shim",
        "doc": "<p>Simple class that provides an iframe shim for any absolutely positioned Element to prevent windowed objects from showing through.</p>",
        "configs": [],
        "events": []
    },
    "Ext.dom.Underlay": {
        "type": "Ext.dom.Underlay",
        "doc": "<p>A class that provides an underlay element which displays behind an absolutely positioned\ntarget element and tracks its size and position. Abstract base class for\nExt.dom.Shadow and Ext.dom.Shim</p>",
        "configs": [
            {
                "name": "target",
                "type": "ext.dom.element",
                "doc": "<p>The target element</p>",
                "default": null
            },
            {
                "name": "zIndex",
                "type": "number",
                "doc": "<p>The CSS z-index to use for this underlay.  Defaults to the z-index of target.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.dom.UnderlayPool": {
        "type": "Ext.dom.UnderlayPool",
        "doc": "<p>Private utility class that manages the internal cache for Underlays\nand Shims.</p>",
        "configs": [],
        "events": []
    },
    "Ext.draw.Animator": {
        "type": "Ext.draw.Animator",
        "doc": "<p>Singleton class that manages the animation pool.</p>",
        "configs": [],
        "events": []
    },
    "Ext.draw.Color": {
        "type": "Ext.draw.Color",
        "doc": "<p>Represents an RGB color and provides helper functions on it e.g. to get\ncolor components in HSL color space.</p>",
        "configs": [
            {
                "name": "lightnessFactor",
                "type": "number",
                "doc": "<p>The default factor to compute the lighter or darker color.</p>",
                "default": "0.2"
            }
        ],
        "events": []
    },
    "Ext.draw.Container": {
        "type": "Ext.draw.Container",
        "doc": "<p>The container that holds and manages instances of the Ext.draw.Surface\nin which sprites are rendered.</p>",
        "configs": [
            {
                "name": "cls",
                "type": "string",
                "doc": "\n",
                "default": "Ext.baseCSSPrefix + 'draw-container'"
            },
            {
                "name": "engine",
                "type": "string",
                "doc": "<p>Defines the engine (type of surface) used to render draw container contents.</p>",
                "default": "\"Ext.draw.engine.Canvas\""
            },
            {
                "name": "gradients",
                "type": "object[]",
                "doc": "<p>Defines a set of gradients that can be used as color properties\n(fillStyle and strokeStyle, but not shadowColor) in sprites.\nThe gradients array is an array of objects with the following properties:\n- <strong>id</strong> - string - The unique name of the gradient.\n- <strong>type</strong> - string, optional - The type of the gradient. Available types are: 'linear', 'radial'. Defaults to 'linear'.\n- <strong>angle</strong> - number, optional - The angle of the gradient in degrees.\n- <strong>stops</strong> - array - An array of objects with 'color' and 'offset' properties, where 'offset' is a real number from 0 to 1.</p>",
                "default": "[]"
            },
            {
                "name": "resizeHandler",
                "type": "function",
                "doc": "<p>The resize function that can be configured to have a behavior,\ne.g. resize draw surfaces based on new draw container dimensions.</p>",
                "default": null
            },
            {
                "name": "sprites",
                "type": "object[]",
                "doc": "<p>Defines a set of sprites to be added to the drawContainer surface.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "bodyresize",
                "params": "size(Object) eOpts(Object)",
                "doc": "<p>Fires when the size of the draw container body changes.</p>"
            },
            {
                "name": "spriteclick",
                "params": "sprite(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when a click event occurs on a sprite.</p>"
            },
            {
                "name": "spritedblclick",
                "params": "sprite(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when a double click event occurs on a sprite.</p>"
            },
            {
                "name": "spritemousedown",
                "params": "sprite(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when a mousedown event occurs on a sprite.</p>"
            },
            {
                "name": "spritemousemove",
                "params": "sprite(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when the mouse is moved on a sprite.</p>"
            },
            {
                "name": "spritemouseout",
                "params": "sprite(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when the mouse exits a sprite.</p>"
            },
            {
                "name": "spritemouseover",
                "params": "sprite(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when the mouse enters a sprite.</p>"
            },
            {
                "name": "spritemouseup",
                "params": "sprite(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when a mouseup event occurs on a sprite.</p>"
            },
            {
                "name": "spritetap",
                "params": "sprite(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when a tap event occurs on a sprite.</p>"
            }
        ]
    },
    "Ext.draw.Draw": {
        "type": "Ext.draw.Draw",
        "doc": "<p>Utility class providing mathematics functionalities through all the draw package.</p>",
        "configs": [],
        "events": []
    },
    "Ext.draw.engine.Canvas": {
        "type": "Ext.draw.engine.Canvas",
        "doc": "<p>Provides specific methods to draw with 2D Canvas element.</p>",
        "configs": [
            {
                "name": "highPrecision",
                "type": "boolean",
                "doc": "<p>True to have the Canvas use JavaScript Number instead of single precision floating point for transforms.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.draw.engine.excanvas": {
        "type": "Ext.draw.engine.excanvas",
        "doc": "<p>@define Ext.draw.engine.excanvas</p>",
        "configs": [],
        "events": []
    },
    "Ext.draw.engine.Svg": {
        "type": "Ext.draw.engine.Svg",
        "doc": "<p>SVG engine.</p>",
        "configs": [
            {
                "name": "highPrecision",
                "type": "boolean",
                "doc": "<p>Nothing needs to be done in high precision mode.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.draw.engine.SvgContext.Gradient": {
        "type": "Ext.draw.engine.SvgContext.Gradient",
        "configs": [],
        "events": []
    },
    "Ext.draw.engine.SvgContext": {
        "type": "Ext.draw.engine.SvgContext",
        "doc": "<p>A class that imitates a canvas context but generates svg elements instead.</p>",
        "configs": [],
        "events": []
    },
    "Ext.draw.gradient.Gradient": {
        "type": "Ext.draw.gradient.Gradient",
        "doc": "<p>Creates a gradient.</p>",
        "configs": [
            {
                "name": "stops",
                "type": "array",
                "doc": "<p>Defines the stops of the gradient.</p>",
                "default": "[]"
            }
        ],
        "events": []
    },
    "Ext.draw.gradient.GradientDefinition": {
        "type": "Ext.draw.gradient.GradientDefinition",
        "doc": "<p>A global map of all gradient configs.</p>",
        "configs": [],
        "events": []
    },
    "Ext.draw.gradient.Linear": {
        "type": "Ext.draw.gradient.Linear",
        "doc": "<p>Linear gradient.</p>",
        "configs": [
            {
                "name": "degrees",
                "type": "number",
                "doc": "<p>The angle of rotation of the gradient in degrees.</p>",
                "default": "0"
            },
            {
                "name": "radians",
                "type": "number",
                "doc": "<p>The angle of rotation of the gradient in radians.</p>",
                "default": "0"
            }
        ],
        "events": []
    },
    "Ext.draw.gradient.Radial": {
        "type": "Ext.draw.gradient.Radial",
        "doc": "<p>Radial gradient.</p>",
        "configs": [
            {
                "name": "end",
                "type": "object",
                "doc": "<p>The ending circle of the gradient.</p>",
                "default": "{x: 0, y: 0, r: 1}"
            },
            {
                "name": "start",
                "type": "object",
                "doc": "<p>The starting circle of the gradient.</p>",
                "default": "{x: 0, y: 0, r: 0}"
            }
        ],
        "events": []
    },
    "Ext.draw.LimitedCache": {
        "type": "Ext.draw.LimitedCache",
        "doc": "<p>Limited cache is a size limited cache container that stores limited number of objects.</p>",
        "configs": [
            {
                "name": "feeder",
                "type": "function",
                "doc": "<p>Function that generates the object when look-up failed.</p>",
                "default": null
            },
            {
                "name": "limit",
                "type": "number",
                "doc": "<p>The amount limit of the cache.</p>",
                "default": "40"
            },
            {
                "name": "scope",
                "type": "object",
                "doc": "<p>The scope for feeder</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.draw.Matrix": {
        "type": "Ext.draw.Matrix",
        "doc": "<p>Utility class to calculate affine transformation matrix.</p>",
        "configs": [],
        "events": []
    },
    "Ext.draw.modifier.Animation": {
        "type": "Ext.draw.modifier.Animation",
        "doc": "<p>The Animation modifier.</p>",
        "configs": [
            {
                "name": "customDuration",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "customDurations",
                "type": "object",
                "doc": "<p>Overrides the default duration for defined attributes. E.g.:</p>",
                "default": "{}"
            },
            {
                "name": "customEasings",
                "type": "object",
                "doc": "<p>Overrides the default easing function for defined attributes. E.g.:</p>",
                "default": "{}"
            },
            {
                "name": "duration",
                "type": "number",
                "doc": "<p>Default duration time (ms).</p>",
                "default": "0"
            },
            {
                "name": "easing",
                "type": "function",
                "doc": "<p>Default easing function.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.draw.modifier.Highlight": {
        "type": "Ext.draw.modifier.Highlight",
        "doc": "<p>Highlight is a modifier that will override sprite attributes\nwith highlightStyle attributes\nwhen sprite's <code>highlighted</code> attribute is true.</p>",
        "configs": [
            {
                "name": "enabled",
                "type": "boolean",
                "doc": "<p>'true' if the highlight is applied.</p>",
                "default": "false"
            },
            {
                "name": "highlightStyle",
                "type": "object",
                "doc": "<p>The style attributes of the highlight modifier.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.draw.modifier.Modifier": {
        "type": "Ext.draw.modifier.Modifier",
        "doc": "<p>Each sprite has a stack of modifiers. The resulting attributes of sprite is\nthe content of the stack top. When setting attributes to a sprite,\nchanges will be pushed-down though the stack of modifiers and pop-back the\nadditive changes; When modifier is triggered to change the attribute of a\nsprite, it will pop-up the changes to the top.</p>",
        "configs": [
            {
                "name": "next",
                "type": "ext.draw.modifier.modifier",
                "doc": "<p>Next modifier that receives the\npop-up changes.</p>",
                "default": null
            },
            {
                "name": "previous",
                "type": "ext.draw.modifier.modifier",
                "doc": "<p>Previous modifier that receives\nthe push-down changes.</p>",
                "default": null
            },
            {
                "name": "sprite",
                "type": "ext.draw.sprite.sprite",
                "doc": "<p>The sprite to which the modifier belongs.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.draw.modifier.Target": {
        "type": "Ext.draw.modifier.Target",
        "doc": "<p>This is the destination (top) modifier that has to be put at\nthe top of the modifier stack.</p>",
        "configs": [],
        "events": []
    },
    "Ext.draw.Path": {
        "type": "Ext.draw.Path",
        "doc": "<p>Class representing a path.\nDesigned to be compatible with CanvasPathMethods\nand will hopefully be replaced by the browsers' implementation of the Path object.</p>",
        "configs": [],
        "events": []
    },
    "Ext.draw.PathUtil": {
        "type": "Ext.draw.PathUtil",
        "doc": "<p>Singleton that provides methods used by the Ext.draw.Path\nfor hit testing and finding path intersection points.</p>",
        "configs": [],
        "events": []
    },
    "Ext.draw.plugin.SpriteEvents": {
        "type": "Ext.draw.plugin.SpriteEvents",
        "doc": "<p>A draw container plugin that adds ability to listen\nto sprite events. For example:</p>",
        "configs": [],
        "events": [
            {
                "name": "spriteclick",
                "params": "sprite(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when a click event occurs on a sprite.</p>"
            },
            {
                "name": "spritedblclick",
                "params": "sprite(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when a double click event occurs on a sprite.</p>"
            },
            {
                "name": "spritemousedown",
                "params": "sprite(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when a mousedown event occurs on a sprite.</p>"
            },
            {
                "name": "spritemousemove",
                "params": "sprite(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when the mouse is moved on a sprite.</p>"
            },
            {
                "name": "spritemouseout",
                "params": "sprite(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when the mouse exits a sprite.</p>"
            },
            {
                "name": "spritemouseover",
                "params": "sprite(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when the mouse enters a sprite.</p>"
            },
            {
                "name": "spritemouseup",
                "params": "sprite(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when a mouseup event occurs on a sprite.</p>"
            },
            {
                "name": "spritetap",
                "params": "sprite(Object) event(Event) eOpts(Object)",
                "doc": "<p>Fires when a tap event occurs on a sprite.</p>"
            }
        ]
    },
    "Ext.draw.Point": {
        "type": "Ext.draw.Point",
        "doc": "<p>A helper class to facilitate common operations on points and vectors.</p>",
        "configs": [],
        "events": []
    },
    "Ext.draw.SegmentTree": {
        "type": "Ext.draw.SegmentTree",
        "doc": "<p>This class we summarize the data and returns it when required.</p>",
        "configs": [
            {
                "name": "strategy",
                "type": "string",
                "doc": "\n",
                "default": "\"double\""
            }
        ],
        "events": []
    },
    "Ext.draw.sprite.AnimationParser": {
        "type": "Ext.draw.sprite.AnimationParser",
        "doc": "<p>Computes an intermidiate value between two values of the same type for use in animations.\nCan have pre- and post- processor functions if the values need to be processed\nbefore an intermidiate value can be computed (parseInitial), or the computed value\nneeds to be processed before it can be used as a valid attribute value (serve).</p>",
        "configs": [],
        "events": []
    },
    "Ext.draw.sprite.Arc": {
        "type": "Ext.draw.sprite.Arc",
        "doc": "<p>A sprite that represents a circular arc.</p>",
        "configs": [
            {
                "name": "anticlockwise",
                "type": "boolean",
                "doc": "<p>Determines whether or not the arc is drawn clockwise.</p>",
                "default": "false"
            },
            {
                "name": "endAngle",
                "type": "number",
                "doc": "<p>The ending angle of the arc.</p>",
                "default": "Math.PI*2"
            },
            {
                "name": "startAngle",
                "type": "number",
                "doc": "<p>The beginning angle of the arc.</p>",
                "default": "0"
            }
        ],
        "events": []
    },
    "Ext.draw.sprite.Arrow": {
        "type": "Ext.draw.sprite.Arrow",
        "doc": "<p>A sprite that represents an arrow.</p>",
        "configs": [
            {
                "name": "size",
                "type": "number",
                "doc": "<p>The size of the sprite.\nMeant to be comparable to the size of a circle sprite with the same radius.</p>",
                "default": "4"
            }
        ],
        "events": []
    },
    "Ext.draw.sprite.AttributeDefinition": {
        "type": "Ext.draw.sprite.AttributeDefinition",
        "doc": "<p>Flyweight object to process the attributes of a sprite.\nA single instance of the AttributeDefinition is created per sprite class.\nSee <code>onClassCreated</code> and <code>onClassExtended</code> callbacks\nof the Ext.draw.sprite.Sprite for more info.</p>",
        "configs": [
            {
                "name": "aliases",
                "type": "object",
                "doc": "<p>Defines the alternative names for attributes.</p>",
                "default": "{}"
            },
            {
                "name": "animationProcessors",
                "type": "object",
                "doc": "<p>Defines the process used to animate between attributes.\nOne doesn't have to define animation processors for sprite attributes that use\npredefined processors from the Ext.draw.sprite.AttributeParser singleton.\nFor such attributes matching animation processors from the Ext.draw.sprite.AnimationParser\nsingleton will be used automatically.\nHowever, if you have a custom processor for an attribute that should support\nanimation, you must provide a corresponding animation processor for it here.\nFor more information on animation processors please see Ext.draw.sprite.AnimationParser\ndocumentation.</p>",
                "default": "{}"
            },
            {
                "name": "defaults",
                "type": "object",
                "doc": "<p>Defines the default values of attributes.</p>",
                "default": "{$value: {}, lazy: true}"
            },
            {
                "name": "dirtyTriggers",
                "type": "object",
                "doc": "\n",
                "default": "{}"
            },
            {
                "name": "processors",
                "type": "object",
                "doc": "<p>Defines the preprocessing used on the attributes.\nOne can define a custom processor function here or use the name of a predefined\nprocessor from the Ext.draw.sprite.AttributeParser singleton.</p>",
                "default": "{$value: {}, lazy: true}"
            },
            {
                "name": "triggers",
                "type": "object",
                "doc": "<p>Defines which updaters have to be called when an attribute is changed.\nFor example, the config below indicates that the 'size' updater\nof a square sprite has to be called\nwhen the 'size' attribute changes.</p>",
                "default": "{}"
            },
            {
                "name": "updaters",
                "type": "object",
                "doc": "<p>Defines the postprocessing used by the attribute.\nInside the updater function 'this' refers to the sprite that the attributes belong to.\nIn case of an instancing sprite 'this' will refer to the instancing template.\nThe two parameters passed to the updater function are the attributes object\nof the sprite or instance, and the names of attributes that triggered this updater call.</p>",
                "default": "{}"
            }
        ],
        "events": []
    },
    "Ext.draw.sprite.AttributeParser": {
        "type": "Ext.draw.sprite.AttributeParser",
        "doc": "<p>Parsers used for sprite attributes if they are normalized\n(default) when being set.</p>",
        "configs": [],
        "events": []
    },
    "Ext.draw.sprite.Circle": {
        "type": "Ext.draw.sprite.Circle",
        "doc": "<p>A sprite that represents a circle.</p>",
        "configs": [
            {
                "name": "cx",
                "type": "number",
                "doc": "<p>The center coordinate of the sprite on the x-axis.</p>",
                "default": "0"
            },
            {
                "name": "cy",
                "type": "number",
                "doc": "<p>The center coordinate of the sprite on the y-axis.</p>",
                "default": "0"
            },
            {
                "name": "r",
                "type": "number",
                "doc": "<p>The radius of the sprite.</p>",
                "default": "0"
            }
        ],
        "events": []
    },
    "Ext.draw.sprite.Composite": {
        "type": "Ext.draw.sprite.Composite",
        "doc": "<p>Represents a group of sprites.</p>",
        "configs": [
            {
                "name": "sprites",
                "type": "array",
                "doc": "\n",
                "default": "[]"
            }
        ],
        "events": []
    },
    "Ext.draw.sprite.Cross": {
        "type": "Ext.draw.sprite.Cross",
        "doc": "<p>A sprite that represents a cross.</p>",
        "configs": [
            {
                "name": "size",
                "type": "number",
                "doc": "<p>The size of the sprite.\nMeant to be comparable to the size of a circle sprite with the same radius.</p>",
                "default": "4"
            }
        ],
        "events": []
    },
    "Ext.draw.sprite.Diamond": {
        "type": "Ext.draw.sprite.Diamond",
        "doc": "<p>A sprite that represents a diamond.</p>",
        "configs": [
            {
                "name": "size",
                "type": "number",
                "doc": "<p>The size of the sprite.\nMeant to be comparable to the size of a circle sprite with the same radius.</p>",
                "default": "4"
            }
        ],
        "events": []
    },
    "Ext.draw.sprite.Ellipse": {
        "type": "Ext.draw.sprite.Ellipse",
        "doc": "<p>A sprite that represents an ellipse.</p>",
        "configs": [
            {
                "name": "axisRotation",
                "type": "number",
                "doc": "<p>The rotation of the sprite about its axis.</p>",
                "default": "0"
            },
            {
                "name": "cx",
                "type": "number",
                "doc": "<p>The center coordinate of the sprite on the x-axis.</p>",
                "default": "0"
            },
            {
                "name": "cy",
                "type": "number",
                "doc": "<p>The center coordinate of the sprite on the y-axis.</p>",
                "default": "0"
            },
            {
                "name": "rx",
                "type": "number",
                "doc": "<p>The radius of the sprite on the x-axis.</p>",
                "default": "1"
            },
            {
                "name": "ry",
                "type": "number",
                "doc": "<p>The radius of the sprite on the y-axis.</p>",
                "default": "1"
            }
        ],
        "events": []
    },
    "Ext.draw.sprite.EllipticalArc": {
        "type": "Ext.draw.sprite.EllipticalArc",
        "doc": "<p>A sprite that represents an elliptical arc.</p>",
        "configs": [
            {
                "name": "anticlockwise",
                "type": "boolean",
                "doc": "<p>Determines whether or not the arc is drawn clockwise.</p>",
                "default": "false"
            },
            {
                "name": "endAngle",
                "type": "number",
                "doc": "<p>The ending angle of the arc.</p>",
                "default": "Math.PI*2"
            },
            {
                "name": "startAngle",
                "type": "number",
                "doc": "<p>The beginning angle of the arc.</p>",
                "default": "0"
            }
        ],
        "events": []
    },
    "Ext.draw.sprite.Image": {
        "type": "Ext.draw.sprite.Image",
        "doc": "<p>A sprite that represents an image.</p>",
        "configs": [
            {
                "name": "height",
                "type": "number",
                "doc": "<p>The height of the image.\nFor consistent image size on all devices the height must be explicitly set.\nOtherwise the natural image height devided by the device pixel ratio\n(for a crisp looking image) will be used as the height of the sprite.</p>",
                "default": "null"
            },
            {
                "name": "src",
                "type": "string",
                "doc": "<p>The image source of the sprite.</p>",
                "default": "''"
            },
            {
                "name": "width",
                "type": "number",
                "doc": "<p>The width of the image.\nFor consistent image size on all devices the width must be explicitly set.\nOtherwise the natural image width devided by the device pixel ratio\n(for a crisp looking image) will be used as the width of the sprite.</p>",
                "default": "null"
            }
        ],
        "events": []
    },
    "Ext.draw.sprite.Instancing": {
        "type": "Ext.draw.sprite.Instancing",
        "doc": "<p>Sprite that represents multiple instances based on the given template.</p>",
        "configs": [
            {
                "name": "template",
                "type": "object",
                "doc": "<p>The sprite template used by all instances.</p>",
                "default": "null"
            }
        ],
        "events": []
    },
    "Ext.draw.sprite.Line": {
        "type": "Ext.draw.sprite.Line",
        "doc": "<p>A sprite that represents a line.</p>",
        "configs": [],
        "events": []
    },
    "Ext.draw.sprite.Path": {
        "type": "Ext.draw.sprite.Path",
        "doc": "<p>A sprite that represents a path.</p>",
        "configs": [
            {
                "name": "path",
                "type": "string",
                "doc": "<p>The SVG based path string used by the sprite.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.draw.sprite.Plus": {
        "type": "Ext.draw.sprite.Plus",
        "doc": "<p>A sprite that represents a plus.</p>",
        "configs": [
            {
                "name": "size",
                "type": "number",
                "doc": "<p>The size of the sprite.\nMeant to be comparable to the size of a circle sprite with the same radius.</p>",
                "default": "4"
            }
        ],
        "events": []
    },
    "Ext.draw.sprite.Rect": {
        "type": "Ext.draw.sprite.Rect",
        "doc": "<p>A sprite that represents a rectangle.</p>",
        "configs": [
            {
                "name": "height",
                "type": "number",
                "doc": "<p>The height of the sprite.</p>",
                "default": "8"
            },
            {
                "name": "radius",
                "type": "number",
                "doc": "<p>The radius of the rounded corners.</p>",
                "default": "0"
            },
            {
                "name": "width",
                "type": "number",
                "doc": "<p>The width of the sprite.</p>",
                "default": "8"
            },
            {
                "name": "x",
                "type": "number",
                "doc": "<p>The position of the sprite on the x-axis.</p>",
                "default": "0"
            },
            {
                "name": "y",
                "type": "number",
                "doc": "<p>The position of the sprite on the y-axis.</p>",
                "default": "0"
            }
        ],
        "events": []
    },
    "Ext.draw.sprite.Sector": {
        "type": "Ext.draw.sprite.Sector",
        "doc": "<p>A sprite representing a pie slice.</p>",
        "configs": [
            {
                "name": "centerX",
                "type": "number",
                "doc": "<p>The center coordinate of the sprite on the x-axis.</p>",
                "default": "0"
            },
            {
                "name": "centerY",
                "type": "number",
                "doc": "<p>The center coordinate of the sprite on the y-axis.</p>",
                "default": "0"
            },
            {
                "name": "endAngle",
                "type": "number",
                "doc": "<p>The ending angle of the sprite.</p>",
                "default": "0"
            },
            {
                "name": "endRho",
                "type": "number",
                "doc": "<p>The ending point of the radius of the sprite.</p>",
                "default": "150"
            },
            {
                "name": "margin",
                "type": "number",
                "doc": "<p>The margin of the sprite from the center of pie.</p>",
                "default": "0"
            },
            {
                "name": "startAngle",
                "type": "number",
                "doc": "<p>The starting angle of the sprite.</p>",
                "default": "0"
            },
            {
                "name": "startRho",
                "type": "number",
                "doc": "<p>The starting point of the radius of the sprite.</p>",
                "default": "0"
            }
        ],
        "events": []
    },
    "Ext.draw.sprite.Sprite": {
        "type": "Ext.draw.sprite.Sprite",
        "doc": "<p>A sprite is an object rendered in a drawing Ext.draw.Surface.\nThe Sprite class itself is an abstract class and is not meant to be used directly.\nEvery sprite in the Draw and Chart packages is a subclass of the Ext.draw.sprite.Sprite.\nThe standard Sprite subclasses are:</p>",
        "configs": [
            {
                "name": "animation",
                "type": "ext.draw.modifier.animation",
                "doc": "\n",
                "default": null
            },
            {
                "name": "dirty",
                "type": "boolean",
                "doc": "<p>Current state of the sprite.\nSet to <code>true</code> if the sprite needs to be repainted.</p>",
                "default": null
            },
            {
                "name": "fillOpacity",
                "type": "number",
                "doc": "<p>The opacity of the fill. Limited from 0 to 1.</p>",
                "default": "1"
            },
            {
                "name": "fillStyle",
                "type": "string",
                "doc": "<p>The color of the shape (a CSS color value).</p>",
                "default": "\"none\""
            },
            {
                "name": "globalAlpha",
                "type": "number",
                "doc": "<p>The opacity of the sprite. Limited from 0 to 1.</p>",
                "default": "1"
            },
            {
                "name": "globalCompositeOperation",
                "type": "string",
                "doc": "<p>Indicates how source images are drawn onto a destination image.\nglobalCompositeOperation attribute is not supported by the SVG and VML (excanvas) engines.</p>",
                "default": "source-over"
            },
            {
                "name": "hidden",
                "type": "boolean",
                "doc": "<p>Determines whether or not the sprite is hidden.</p>",
                "default": "false"
            },
            {
                "name": "lineCap",
                "type": "string",
                "doc": "<p>The style of the line caps.</p>",
                "default": "\"butt\""
            },
            {
                "name": "lineDash",
                "type": "array",
                "doc": "<p>An even number of non-negative numbers specifying a dash/space sequence.\nNote that while this is supported in IE8 (VML engine), the behavior is\ndifferent from Canvas and SVG. Please refer to this document for details:\nhttp://msdn.microsoft.com/en-us/library/bb264085(v=vs.85).aspx\nAlthough IE9 and IE10 have Canvas support, the 'lineDash'\nattribute is not supported in those browsers.</p>",
                "default": "[]"
            },
            {
                "name": "lineDashOffset",
                "type": "number",
                "doc": "<p>A number specifying how far into the line dash sequence drawing commences.</p>",
                "default": "0"
            },
            {
                "name": "lineJoin",
                "type": "string",
                "doc": "<p>The style of the line join.</p>",
                "default": "\"miter\""
            },
            {
                "name": "lineWidth",
                "type": "number",
                "doc": "<p>The width of the line stroke.</p>",
                "default": "1"
            },
            {
                "name": "miterLimit",
                "type": "number",
                "doc": "<p>Sets the distance between the inner corner and the outer corner where two lines meet.</p>",
                "default": "10"
            },
            {
                "name": "parent",
                "type": "ext.draw.surface/ext.draw.sprite.instancing/ext.draw.sprite.composite",
                "doc": "<p>The immediate parent of the sprite. Not necessarily a surface.</p>",
                "default": null
            },
            {
                "name": "rotationCenterX",
                "type": "number",
                "doc": "<p>The central coordinate of the sprite's scale operation on the x-axis.</p>",
                "default": "null"
            },
            {
                "name": "rotationCenterY",
                "type": "number",
                "doc": "<p>The central coordinate of the sprite's rotate operation on the y-axis.</p>",
                "default": "null"
            },
            {
                "name": "rotationRads",
                "type": "number",
                "doc": "<p>The angle of rotation of the sprite in radians.</p>",
                "default": "0"
            },
            {
                "name": "scalingCenterX",
                "type": "number",
                "doc": "<p>The central coordinate of the sprite's scale operation on the x-axis.</p>",
                "default": "null"
            },
            {
                "name": "scalingCenterY",
                "type": "number",
                "doc": "<p>The central coordinate of the sprite's scale operation on the y-axis.</p>",
                "default": "null"
            },
            {
                "name": "scalingX",
                "type": "number",
                "doc": "<p>The scaling of the sprite on the x-axis.</p>",
                "default": "1"
            },
            {
                "name": "scalingY",
                "type": "number",
                "doc": "<p>The scaling of the sprite on the y-axis.</p>",
                "default": "1"
            },
            {
                "name": "shadowBlur",
                "type": "number",
                "doc": "<p>The amount blur used on the shadow.</p>",
                "default": "0"
            },
            {
                "name": "shadowColor",
                "type": "string",
                "doc": "<p>The color of the shadow (a CSS color value).</p>",
                "default": "\"none\""
            },
            {
                "name": "shadowOffsetX",
                "type": "number",
                "doc": "<p>The offset of the sprite's shadow on the x-axis.</p>",
                "default": "0"
            },
            {
                "name": "shadowOffsetY",
                "type": "number",
                "doc": "<p>The offset of the sprite's shadow on the y-axis.</p>",
                "default": "0"
            },
            {
                "name": "strokeOpacity",
                "type": "number",
                "doc": "<p>The opacity of the stroke. Limited from 0 to 1.</p>",
                "default": "1"
            },
            {
                "name": "strokeStyle",
                "type": "string",
                "doc": "<p>The color of the stroke (a CSS color value).</p>",
                "default": "\"none\""
            },
            {
                "name": "surface",
                "type": "ext.draw.surface",
                "doc": "<p>The surface that this sprite is rendered into.</p>",
                "default": null
            },
            {
                "name": "transformFillStroke",
                "type": "boolean",
                "doc": "<p>Determines whether the fill and stroke are affected by sprite transformations.</p>",
                "default": "false"
            },
            {
                "name": "translationX",
                "type": "number",
                "doc": "<p>The translation of the sprite on the x-axis.</p>",
                "default": "0"
            },
            {
                "name": "translationY",
                "type": "number",
                "doc": "<p>The translation of the sprite on the y-axis.</p>",
                "default": "0"
            },
            {
                "name": "zIndex",
                "type": "number",
                "doc": "<p>The stacking order of the sprite.</p>",
                "default": "0"
            }
        ],
        "events": []
    },
    "Ext.draw.sprite.Square": {
        "type": "Ext.draw.sprite.Square",
        "doc": "<p>A sprite that represents a square.</p>",
        "configs": [
            {
                "name": "size",
                "type": "number",
                "doc": "<p>The size of the sprite.\nMeant to be comparable to the size of a circle sprite with the same radius.</p>",
                "default": "4"
            }
        ],
        "events": []
    },
    "Ext.draw.sprite.Text": {
        "type": "Ext.draw.sprite.Text",
        "doc": "<p>A sprite that represents text.</p>",
        "configs": [
            {
                "name": "font",
                "type": "string",
                "doc": "<p>The font displayed.</p>",
                "default": "'10px sans-serif'"
            },
            {
                "name": "fontFamily",
                "type": "string",
                "doc": "<p>The family of the font displayed.</p>",
                "default": "'sans-serif'"
            },
            {
                "name": "fontSize",
                "type": "string/number",
                "doc": "<p>The size of the font displayed.</p>",
                "default": "'10px'"
            },
            {
                "name": "fontStyle",
                "type": "string",
                "doc": "<p>The style of the font displayed. {normal, italic, oblique}</p>",
                "default": "''"
            },
            {
                "name": "fontVariant",
                "type": "string",
                "doc": "<p>The variant of the font displayed. {normal, small-caps}</p>",
                "default": "''"
            },
            {
                "name": "fontWeight",
                "type": "string",
                "doc": "<p>The weight of the font displayed. {normal, bold, bolder, lighter}</p>",
                "default": "''"
            },
            {
                "name": "text",
                "type": "string",
                "doc": "<p>The text represented in the sprite.</p>",
                "default": "''"
            },
            {
                "name": "textAlign",
                "type": "string",
                "doc": "<p>The alignment of the text displayed.\n{left, right, center, start, end}</p>",
                "default": "'start'"
            },
            {
                "name": "textBaseline",
                "type": "string",
                "doc": "<p>The baseline of the text displayed.\n{top, hanging, middle, alphabetic, ideographic, bottom}</p>",
                "default": "\"alphabetic\""
            },
            {
                "name": "x",
                "type": "number",
                "doc": "<p>The position of the sprite on the x-axis.</p>",
                "default": "0"
            },
            {
                "name": "y",
                "type": "number",
                "doc": "<p>The position of the sprite on the y-axis.</p>",
                "default": "0"
            }
        ],
        "events": []
    },
    "Ext.draw.sprite.Tick": {
        "type": "Ext.draw.sprite.Tick",
        "doc": "<p>A veritical line sprite. The x and y configs set the center of the line with the size\nvalue determining the height of the line (the line will be twice the height of 'size'\nsince 'size' is added to above and below 'y' to set the line endpoints).</p>",
        "configs": [
            {
                "name": "size",
                "type": "number",
                "doc": "<p>The size of the sprite.\nMeant to be comparable to the size of a circle sprite with the same radius.</p>",
                "default": "4"
            },
            {
                "name": "x",
                "type": "object",
                "doc": "<p>The position of the center of the sprite on the x-axis.</p>",
                "default": "'number'"
            },
            {
                "name": "y",
                "type": "object",
                "doc": "<p>The position of the center of the sprite on the y-axis.</p>",
                "default": "'number'"
            }
        ],
        "events": []
    },
    "Ext.draw.sprite.Triangle": {
        "type": "Ext.draw.sprite.Triangle",
        "doc": "<p>A sprite that represents a triangle.</p>",
        "configs": [
            {
                "name": "size",
                "type": "number",
                "doc": "<p>The size of the sprite.\nMeant to be comparable to the size of a circle sprite with the same radius.</p>",
                "default": "4"
            }
        ],
        "events": []
    },
    "Ext.draw.Surface": {
        "type": "Ext.draw.Surface",
        "doc": "<p>A Surface is an interface to render methods inside a draw Ext.draw.Container.\nA Surface contains methods to render sprites, get bounding boxes of sprites, add\nsprites to the canvas, initialize other graphic components, etc. One of the most used\nmethods for this class is the <code>add</code> method, to add Sprites to the surface.</p>",
        "configs": [
            {
                "name": "background",
                "type": "object",
                "doc": "<p>Background sprite config of the surface.</p>",
                "default": null
            },
            {
                "name": "cls",
                "type": "string",
                "doc": "\n",
                "default": "Ext.baseCSSPrefix + 'surface'"
            },
            {
                "name": "dirty",
                "type": "boolean",
                "doc": "<p>Indicates whether the surface needs to redraw.</p>",
                "default": "false"
            },
            {
                "name": "flipRtlText",
                "type": "boolean",
                "doc": "<p>If the surface is in the RTL mode, text will render with the RTL direction,\nbut the alignment and position of the text won't change by default.\nSetting this config to 'true' will get text alignment and its position\nwithin a surface mirrored.</p>",
                "default": "false"
            },
            {
                "name": "items",
                "type": "array",
                "doc": "<p>Array of sprite instances.</p>",
                "default": "[]"
            },
            {
                "name": "rect",
                "type": "array",
                "doc": "<p>The [x, y, width, height] rect of the surface related to its container.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.draw.TextMeasurer": {
        "type": "Ext.draw.TextMeasurer",
        "doc": "<p>Utility class to provide a way to <em>approximately</em> measure the dimension of text\nwithout a drawing context.</p>",
        "configs": [
            {
                "name": "precise",
                "type": "boolean",
                "doc": "<p>This singleton tries not to make use of the Ext.util.TextMetrics because it is\nseveral times slower than TextMeasurer's own solution. TextMetrics is more precise\nthough, so if you have a case where the error is too big, you may want to set\nthis config to <code>true</code> to get perfect results at the expense of performance.\nNote: defaults to <code>true</code> in IE8.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.draw.TimingFunctions": {
        "type": "Ext.draw.TimingFunctions",
        "doc": "<p>Singleton that provides easing functions for use in sprite animations.</p>",
        "configs": [],
        "events": []
    },
    "Ext.env.Browser": {
        "type": "Ext.env.Browser",
        "doc": "<p>Provides information about browser.</p>",
        "configs": [],
        "events": []
    },
    "Ext.env.OS": {
        "type": "Ext.env.OS",
        "doc": "<p>Provides information about operating system environment.</p>",
        "configs": [],
        "events": []
    },
    "Ext.env.Ready": {
        "type": "Ext.env.Ready",
        "doc": "<p>This class manages ready detection and handling. Direct use of this class is not\nrecommended. Instead use <code>Ext.onReady</code>:</p>",
        "configs": [],
        "events": []
    },
    "Ext.Error": {
        "type": "Ext.Error",
        "doc": "<p>A helper class for the native JavaScript Error object that adds a few useful capabilities for handling\nerrors in an application. When you use Ext.Error to raise an error from within any class that\nuses the Class System, the Error class can automatically add the source class and method from which\nthe error was raised. It also includes logic to automatically log the error to the console, if available,\nwith additional metadata about the error. In all cases, the error will always be thrown at the end so that\nexecution will halt.</p>",
        "configs": [],
        "events": []
    },
    "Ext.event.Event": {
        "type": "Ext.event.Event",
        "doc": "<p>Just as Ext.dom.Element wraps around a native DOM node, Ext.event.Event wraps the browser's native\nevent-object normalizing cross-browser differences such as mechanisms to stop event-propagation along with a method\nto prevent default actions from taking place.</p>",
        "configs": [],
        "events": []
    },
    "Ext.event.gesture.DoubleTap": {
        "type": "Ext.event.gesture.DoubleTap",
        "doc": "<p>A simple event recognizer which knows when you double tap.</p>",
        "configs": [
            {
                "name": "maxDuration",
                "type": "number",
                "doc": "\n",
                "default": "300"
            },
            {
                "name": "moveDistance",
                "type": "number",
                "doc": "<p>The maximum distance a touch can move without canceling recognition</p>",
                "default": "8"
            },
            {
                "name": "tapDistance",
                "type": "number",
                "doc": "<p>The minimum distance the second tap can occur from the first tap and still\nbe considered a doubletap</p>",
                "default": "24"
            }
        ],
        "events": []
    },
    "Ext.event.gesture.Drag": {
        "type": "Ext.event.gesture.Drag",
        "configs": [
            {
                "name": "minDistance",
                "type": "number",
                "doc": "<p>The minimum distance of pixels before a touch event becomes a drag event.</p>",
                "default": "8"
            }
        ],
        "events": []
    },
    "Ext.event.gesture.EdgeSwipe": {
        "type": "Ext.event.gesture.EdgeSwipe",
        "doc": "<p>A event recognizer created to recognize swipe movements from the edge of a container.</p>",
        "configs": [
            {
                "name": "minDistance",
                "type": "number",
                "doc": "\n",
                "default": "60"
            }
        ],
        "events": []
    },
    "Ext.event.gesture.LongPress": {
        "type": "Ext.event.gesture.LongPress",
        "doc": "<p>A event recognizer which knows when you tap and hold for more than 1 second.</p>",
        "configs": [
            {
                "name": "minDuration",
                "type": "number",
                "doc": "\n",
                "default": "1000"
            },
            {
                "name": "moveDistance",
                "type": "number",
                "doc": "\n",
                "default": "8"
            }
        ],
        "events": []
    },
    "Ext.event.gesture.MultiTouch": {
        "type": "Ext.event.gesture.MultiTouch",
        "doc": "<p>A base class for gesture recognizers that involve multiple simultaneous contact points\nbetween the screen and the input-device, e.g. 'pinch' and 'rotate'</p>",
        "configs": [],
        "events": []
    },
    "Ext.event.gesture.Pinch": {
        "type": "Ext.event.gesture.Pinch",
        "doc": "<p>A event recognizer which knows when you pinch.</p>",
        "configs": [],
        "events": []
    },
    "Ext.event.gesture.Recognizer": {
        "type": "Ext.event.gesture.Recognizer",
        "doc": "<p>A base class for all gesture recognizers.</p>",
        "configs": [
            {
                "name": "callbackScope",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "onRecognized",
                "type": "object",
                "doc": "\n",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.event.gesture.Rotate": {
        "type": "Ext.event.gesture.Rotate",
        "doc": "<p>A simple event recognizer which knows when you rotate.</p>",
        "configs": [],
        "events": []
    },
    "Ext.event.gesture.SingleTouch": {
        "type": "Ext.event.gesture.SingleTouch",
        "doc": "<p>A base class for gesture recognizers that are only concerned with a single point of\ncontact between the screen and the input-device.</p>",
        "configs": [],
        "events": []
    },
    "Ext.event.gesture.Swipe": {
        "type": "Ext.event.gesture.Swipe",
        "doc": "<p>A gesture recognizer for swipe events</p>",
        "configs": [
            {
                "name": "maxDuration",
                "type": "number",
                "doc": "\n",
                "default": "1000"
            },
            {
                "name": "maxOffset",
                "type": "number",
                "doc": "\n",
                "default": "35"
            },
            {
                "name": "minDistance",
                "type": "number",
                "doc": "\n",
                "default": "80"
            }
        ],
        "events": []
    },
    "Ext.event.gesture.Tap": {
        "type": "Ext.event.gesture.Tap",
        "doc": "<p>A simple event recogniser which knows when you tap.</p>",
        "configs": [
            {
                "name": "moveDistance",
                "type": "number",
                "doc": "<p>The maximimum distance in pixels a touchstart event can travel and still be considered a tap event.</p>",
                "default": "8"
            }
        ],
        "events": []
    },
    "Ext.event.publisher.Dom": {
        "type": "Ext.event.publisher.Dom",
        "configs": [],
        "events": []
    },
    "Ext.event.publisher.ElementPaint": {
        "type": "Ext.event.publisher.ElementPaint",
        "configs": [],
        "events": []
    },
    "Ext.event.publisher.ElementSize": {
        "type": "Ext.event.publisher.ElementSize",
        "configs": [],
        "events": []
    },
    "Ext.event.publisher.Focus": {
        "type": "Ext.event.publisher.Focus",
        "configs": [],
        "events": []
    },
    "Ext.event.publisher.Gesture": {
        "type": "Ext.event.publisher.Gesture",
        "configs": [
            {
                "name": "async",
                "type": "boolean",
                "doc": "<p>By default the gesture publisher runs all handlers on requestAnimationFrame\ntiming for smooth performance of gestures and scrolling.  Set this config\nto false to disable requestAnimationFrame and run handlers immediately.</p>",
                "default": "true"
            }
        ],
        "events": []
    },
    "Ext.event.publisher.Publisher": {
        "type": "Ext.event.publisher.Publisher",
        "doc": "<p>Abstract base class for event publishers</p>",
        "configs": [],
        "events": []
    },
    "Ext.Evented": {
        "type": "Ext.Evented",
        "configs": [],
        "events": []
    },
    "Ext.Factory": {
        "type": "Ext.Factory",
        "doc": "<p>Manages factories for families of classes (classes with a common <code>alias</code> prefix). The\nfactory for a class family is a function stored as a <code>static</code> on <code>Ext.Factory</code>. These\nare created either by directly calling <code>Ext.Factory.define</code> or by using the\n<code>Ext.mixin.Factoryable</code> interface.</p>",
        "configs": [
            {
                "name": "aliasPrefix",
                "type": "string",
                "doc": "<p>The prefix to apply to <code>type</code> values to form a complete alias. This defaults to the\nproper value in most all cases and should not need to be specified.</p>",
                "default": null
            },
            {
                "name": "defaultProperty",
                "type": "string",
                "doc": "<p>The config property to set when the factory is given a config that is a string.</p>",
                "default": "\"type\""
            },
            {
                "name": "defaultType",
                "type": "string",
                "doc": "<p>An optional type to use if none is given to the factory at invocation. This is a\nsuffix added to the <code>aliasPrefix</code>. For example, if <code>aliasPrefix=\"layout.\"</code> and\n<code>defaultType=\"hbox\"</code> the default alias is <code>\"layout.hbox\"</code>. This is an alternative\nto <code>xclass</code> so only one should be provided.</p>",
                "default": "null"
            },
            {
                "name": "instanceProp",
                "type": "string",
                "doc": "<p>The property that identifies an object as instance vs a config.</p>",
                "default": "\"isInstance\""
            },
            {
                "name": "xclass",
                "type": "string",
                "doc": "<p>The full classname of the type of instance to create when none is provided to the\nfactory. This is an alternative to <code>defaultType</code> so only one should be specified.</p>",
                "default": "null"
            }
        ],
        "events": []
    },
    "Ext.feature": {
        "type": "Ext.feature",
        "doc": "<p>A simple class to verify if a browser feature exists or not on the current device.</p>",
        "configs": [],
        "events": []
    },
    "Ext.field.Checkbox": {
        "type": "Ext.field.Checkbox",
        "doc": "<p>The checkbox field is an enhanced version of the native browser checkbox and is great for enabling your user to\nchoose one or more items from a set (for example choosing toppings for a pizza order). It works like any other\nfield and is usually found in the context of a form:</p>",
        "configs": [
            {
                "name": "checked",
                "type": "boolean",
                "doc": "<p><code>true</code> if the checkbox should render initially checked.</p>",
                "default": "false"
            },
            {
                "name": "component",
                "type": "object",
                "doc": "<p>The inner component for this field.</p>",
                "default": "{xtype: 'input', type: 'checkbox', useMask: true, cls: Ext.baseCSSPrefix + 'input-checkbox'}"
            },
            {
                "name": "labelMaskTap",
                "type": "boolean",
                "doc": "\n",
                "default": null
            },
            {
                "name": "publishes",
                "type": "string/string[]/object",
                "doc": "<p>One or more names of config properties that this component should publish\nto its ViewModel. Generally speaking, only properties defined in a class config\nblock (including ancestor config blocks and mixins) are eligible for publishing\nto the viewModel. Some components override this and publish their most useful\nconfigs by default.</p>",
                "default": "{checked: 1}"
            },
            {
                "name": "twoWayBindable",
                "type": "string/string[]/object",
                "doc": "<p>This object holds a map of <code>config</code> properties that will update their binding\nas they are modified. For example, <code>value</code> is a key added by form fields. The\nform of this config is the same as <code>publishes</code>.</p>",
                "default": "{checked: 1}"
            },
            {
                "name": "ui",
                "type": "string",
                "doc": "<p>The ui to be used on this Component</p>",
                "default": "'checkbox'"
            },
            {
                "name": "value",
                "type": "string",
                "doc": "<p>The string value to submit if the item is in a checked state.</p>",
                "default": "''"
            }
        ],
        "events": [
            {
                "name": "change",
                "params": "this(Ext.field.Checkbox) newValue(Boolean) oldValue(Boolean) eOpts(Object)",
                "doc": "<p>Fires when the field value changes.</p>"
            },
            {
                "name": "check",
                "params": "this(Ext.field.Checkbox) eOpts(Object)",
                "doc": "<p>Fires when the checkbox is checked.</p>"
            },
            {
                "name": "uncheck",
                "params": "this(Ext.field.Checkbox) eOpts(Object)",
                "doc": "<p>Fires when the checkbox is unchecked.</p>"
            }
        ]
    },
    "Ext.field.DatePicker": {
        "type": "Ext.field.DatePicker",
        "doc": "<p>This is a specialized field which shows a Ext.picker.Date when tapped. If it has a predefined value,\nor a value is selected in the Ext.picker.Date, it will be displayed like a normal Ext.field.Text\n(but not selectable/changable).</p>",
        "configs": [
            {
                "name": "dateFormat",
                "type": "string",
                "doc": "<p>The format to be used when displaying the date in this field.\nAccepts any valid date format. You can view formats over in the Ext.Date documentation.</p>",
                "default": "Ext.util.Format.defaultDateFormat"
            },
            {
                "name": "destroyPickerOnHide",
                "type": "boolean",
                "doc": "<p>Whether or not to destroy the picker widget on hide. This save memory if it's not used frequently,\nbut increase delay time on the next show due to re-instantiation.</p>",
                "default": "false"
            },
            {
                "name": "picker",
                "type": "object/ext.picker.date",
                "doc": "<p>An object that is used when creating the internal Ext.picker.Date component or a direct instance of Ext.picker.Date.</p>",
                "default": "true"
            },
            {
                "name": "ui",
                "type": "string",
                "doc": "<p>The ui to be used on this Component</p>",
                "default": "'select'"
            },
            {
                "name": "value",
                "type": "object/date",
                "doc": "<p>Default value for the field and the internal Ext.picker.Date component. Accepts an object of 'year',\n'month' and 'day' values, all of which should be numbers, or a Date.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "change",
                "params": "this(Ext.field.DatePicker) newDate(Date) oldDate(Date) eOpts(Object)",
                "doc": "<p>Fires when a date is selected</p>"
            }
        ]
    },
    "Ext.field.DatePickerNative": {
        "type": "Ext.field.DatePickerNative",
        "configs": [],
        "events": []
    },
    "Ext.field.Email": {
        "type": "Ext.field.Email",
        "doc": "<p>The Email field creates an HTML5 email input and is usually created inside a form. Because it creates an HTML email\ninput field, most browsers will show a specialized virtual keyboard for email address input. Aside from that, the\nemail field is just a normal text field. Here's an example of how to use it in a form:</p>",
        "configs": [
            {
                "name": "autoCapitalize",
                "type": "boolean",
                "doc": "<p>True to set the field's DOM element autocapitalize attribute to \"on\", false to set to \"off\".</p>",
                "default": "false"
            },
            {
                "name": "component",
                "type": "object",
                "doc": "<p>The inner component for this field, which defaults to an input text.</p>",
                "default": "{type: 'email'}"
            }
        ],
        "events": []
    },
    "Ext.field.Field": {
        "type": "Ext.field.Field",
        "doc": "<p>Field is the base class for all form fields. It provides a lot of shared functionality to all\nfield subclasses (for example labels, simple validation, clearing and tab index management), but\nis rarely used directly. Instead, it is much more common to use one of the field subclasses:</p>",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to\nother elements within this component. To add specific styling for sub-classes, use the cls config.</p>",
                "default": "Ext.baseCSSPrefix + 'field'"
            },
            {
                "name": "clearIcon",
                "type": "boolean",
                "doc": "<p><code>true</code> to use a clear icon in this field.</p>",
                "default": null
            },
            {
                "name": "component",
                "type": "object",
                "doc": "<p>The inner component for this field.</p>",
                "default": null
            },
            {
                "name": "inputCls",
                "type": "string",
                "doc": "<p>CSS class to add to the input element of this fields component</p>",
                "default": null
            },
            {
                "name": "inputType",
                "type": "string",
                "doc": "<p>The type attribute for input fields -- e.g. radio, text, password, file.\nThe types 'file' and 'password' must be used to render those field types currently -- there are\nno separate Ext components for those.</p>",
                "default": "'text'"
            },
            {
                "name": "isFocused",
                "type": "boolean",
                "doc": "<p><code>true</code> if this field is currently focused.</p>",
                "default": null
            },
            {
                "name": "label",
                "type": "string",
                "doc": "<p>The label of this field</p>",
                "default": null
            },
            {
                "name": "labelAlign",
                "type": "string",
                "doc": "<p>The position to render the label relative to the field input.\nAvailable options are: 'top', 'left', 'bottom' and 'right'</p>",
                "default": "'left'"
            },
            {
                "name": "labelCls",
                "type": "string",
                "doc": "<p>Optional CSS class to add to the Label element.</p>",
                "default": null
            },
            {
                "name": "labelWidth",
                "type": "number/string",
                "doc": "<p>The width to make this field's label.</p>",
                "default": "'30%'"
            },
            {
                "name": "labelWrap",
                "type": "boolean",
                "doc": "<p><code>true</code> to allow the label to wrap. If set to <code>false</code>, the label will be truncated with\nan ellipsis.</p>",
                "default": "false"
            },
            {
                "name": "name",
                "type": "string",
                "doc": "<p>The field's HTML name attribute.</p>",
                "default": null
            },
            {
                "name": "required",
                "type": "boolean",
                "doc": "<p><code>true</code> to make this field required.</p>",
                "default": "false"
            },
            {
                "name": "requiredCls",
                "type": "string",
                "doc": "<p>The <code>className</code> to be applied to this Field when the required configuration is set to <code>true</code>.</p>",
                "default": "Ext.baseCSSPrefix + 'field-required'"
            },
            {
                "name": "tabIndex",
                "type": "number",
                "doc": "<p>The <code>tabIndex</code> for this field. Note this only applies to fields that are rendered,\nnot those which are built via <code>applyTo</code>.</p>",
                "default": null
            },
            {
                "name": "value",
                "type": "mixed",
                "doc": "<p>A value to initialize this field with.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.field.File": {
        "type": "Ext.field.File",
        "doc": "<p>Creates an HTML file input field on the page. This is usually used to upload files to remote server. File fields are usually\ncreated inside a form like this:</p>",
        "configs": [
            {
                "name": "accept",
                "type": "string",
                "doc": "<p>File input accept attribute documented here (http://www.w3schools.com/tags/att_input_accept.asp)\nAlso can be simple strings -- e.g. audio, video, image</p>",
                "default": null
            },
            {
                "name": "capture",
                "type": "string",
                "doc": "<p>File input capture attribute. Accepts values such as \"camera\", \"camcorder\", \"microphone\"</p>",
                "default": null
            },
            {
                "name": "component",
                "type": "object",
                "doc": "<p>The inner component for this field.</p>",
                "default": "{xtype: 'fileinput', fastFocus: false}"
            },
            {
                "name": "multiple",
                "type": "boolean",
                "doc": "<p>Allow selection of multiple files</p>",
                "default": "false"
            }
        ],
        "events": [
            {
                "name": "change",
                "params": "this(Ext.field.File) newValue(Mixed) oldValue(Mixed) eOpts(Object)",
                "doc": "<p>Fires when a file has been selected</p>"
            }
        ]
    },
    "Ext.field.FileInput": {
        "type": "Ext.field.FileInput",
        "configs": [
            {
                "name": "accept",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "capture",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "me",
                "type": "function",
                "doc": "<p>Called when the value changes on this input item{Ext.field.FileInput}</p>",
                "default": null
            },
            {
                "name": "multiple",
                "type": "boolean",
                "doc": "\n",
                "default": "false"
            },
            {
                "name": "name",
                "type": "string",
                "doc": "<p>The field's HTML name attribute.\n<strong>Note:</strong> This property must be set if this field is to be automatically included with\nform submit().</p>",
                "default": null
            },
            {
                "name": "newValue",
                "type": "function",
                "doc": "<p>Sets the internal value. Security restrictions prevent setting file values on the input element{string} New Value</p>",
                "default": null
            },
            {
                "name": "type",
                "type": "string",
                "doc": "<p>The type attribute for input fields -- e.g. radio, text, password.</p>",
                "default": "\"file\""
            },
            {
                "name": "value",
                "type": "function",
                "doc": "<p>Applies the multiple attribute to the input{boolean}</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "change",
                "params": "this(Ext.field.Text) newValue(Mixed) oldValue(Mixed) eOpts(Object)",
                "doc": "<p>Fires just before the field blurs if the field value has changed</p>"
            }
        ]
    },
    "Ext.field.Hidden": {
        "type": "Ext.field.Hidden",
        "doc": "<p>Hidden fields allow you to easily inject additional data into a form without displaying\nadditional fields on the screen. This is often useful for sending dynamic or previously collected data back to the\nserver in the same request as the normal form submission. For example, here is how we might set up a form to send\nback a hidden userId field:</p>",
        "configs": [
            {
                "name": "component",
                "type": "object",
                "doc": "<p>The inner component for this field, which defaults to an input text.</p>",
                "default": "{xtype: 'input', type: 'hidden'}"
            },
            {
                "name": "ui",
                "type": "string",
                "doc": "<p>The ui to be used on this Component</p>",
                "default": "'hidden'"
            }
        ],
        "events": []
    },
    "Ext.field.Input": {
        "type": "Ext.field.Input",
        "configs": [
            {
                "name": "autoCapitalize",
                "type": "boolean",
                "doc": "<p><code>true</code> to set the field's DOM element <code>autocapitalize</code> attribute to <code>\"on\"</code>, <code>false</code> to set to <code>\"off\"</code>. Defaults to <code>undefined</code>, leaving the attribute unset</p>",
                "default": "undefined"
            },
            {
                "name": "autoComplete",
                "type": "boolean",
                "doc": "<p><code>true</code> to set the field's DOM element <code>autocomplete</code> attribute to <code>\"on\"</code>, <code>false</code> to set to <code>\"off\"</code>. Defaults to <code>undefined</code>, leaving the attribute unset.</p>",
                "default": "undefined"
            },
            {
                "name": "autoCorrect",
                "type": "boolean",
                "doc": "<p><code>true</code> to set the field DOM element <code>autocorrect</code> attribute to <code>\"on\"</code>, <code>false</code> to set to <code>\"off\"</code>. Defaults to <code>undefined</code>, leaving the attribute unset.</p>",
                "default": null
            },
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to\nother elements within this component. To add specific styling for sub-classes, use the cls config.</p>",
                "default": "Ext.baseCSSPrefix + 'field-input'"
            },
            {
                "name": "checked",
                "type": "boolean",
                "doc": "<p><code>true</code> if the checkbox should render initially checked.</p>",
                "default": "false"
            },
            {
                "name": "cls",
                "type": "string",
                "doc": "<p>The <code>className</code> to be applied to this input.</p>",
                "default": "Ext.baseCSSPrefix + 'form-field'"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "doc": "<p><code>true</code> to disable the field.</p>",
                "default": "false"
            },
            {
                "name": "fastFocus",
                "type": "boolean",
                "doc": "<p>Enable Fast Input Focusing on iOS, using this workaround will stop some touchstart events in order to prevent\ndelayed focus issues.</p>",
                "default": "false"
            },
            {
                "name": "focusCls",
                "type": "string",
                "doc": "<p>The CSS class to use when the field receives focus.</p>",
                "default": "Ext.baseCSSPrefix + 'field-focus'"
            },
            {
                "name": "maskCls",
                "type": "string",
                "doc": "\n",
                "default": "Ext.baseCSSPrefix + 'field-mask'"
            },
            {
                "name": "maxLength",
                "type": "number",
                "doc": "<p>The maximum number of permitted input characters.</p>",
                "default": "0"
            },
            {
                "name": "maxRows",
                "type": "number",
                "doc": "<p>Sets the field DOM element <code>maxRows</code> attribute. Defaults to <code>undefined</code>, leaving the attribute unset.</p>",
                "default": "undefined"
            },
            {
                "name": "maxValue",
                "type": "number",
                "doc": "<p>The maximum value that this Number field can accept (defaults to <code>undefined</code>, e.g. no maximum).</p>",
                "default": "undefined"
            },
            {
                "name": "minValue",
                "type": "number",
                "doc": "<p>The minimum value that this Number field can accept (defaults to <code>undefined</code>, e.g. no minimum).</p>",
                "default": "undefined"
            },
            {
                "name": "name",
                "type": "string",
                "doc": "<p>The field's HTML name attribute.\n<strong>Note:</strong> This property must be set if this field is to be automatically included with\nform submit().</p>",
                "default": null
            },
            {
                "name": "originalValue",
                "type": "string/number",
                "doc": "<p>The original value when the input is rendered.</p>",
                "default": null
            },
            {
                "name": "pattern",
                "type": "string",
                "doc": "<p>The value for the HTML5 <code>pattern</code> attribute.\nYou can use this to change which keyboard layout will be used.</p>",
                "default": null
            },
            {
                "name": "placeHolder",
                "type": "string",
                "doc": "<p>A string value displayed in the input (if supported) when the control is empty.</p>",
                "default": null
            },
            {
                "name": "readOnly",
                "type": "boolean",
                "doc": "<p><code>true</code> to set the field DOM element <code>readonly</code> attribute to <code>\"true\"</code>. Defaults to <code>undefined</code>, leaving the attribute unset.</p>",
                "default": "undefined"
            },
            {
                "name": "startValue",
                "type": "mixed",
                "doc": "<p>The value that the Field had at the time it was last focused. This is the value that is passed\nto the Ext.field.Text.change event which is fired if the value has been changed when the Field is blurred.</p>",
                "default": "false"
            },
            {
                "name": "stepValue",
                "type": "number",
                "doc": "<p>The amount by which the field is incremented or decremented each time the spinner is tapped.\nDefaults to <code>undefined</code>, which means that the field goes up or down by 1 each time the spinner is tapped.</p>",
                "default": "undefined"
            },
            {
                "name": "tabIndex",
                "type": "number",
                "doc": "<p>The <code>tabIndex</code> for this field.</p>",
                "default": null
            },
            {
                "name": "type",
                "type": "string",
                "doc": "<p>The type attribute for input fields -- e.g. radio, text, password.</p>",
                "default": "'text'"
            },
            {
                "name": "useMask",
                "type": "string/boolean",
                "doc": "<p><code>true</code> to use a mask on this field, or <code>auto</code> to automatically select when you should use it.</p>",
                "default": "'auto'"
            },
            {
                "name": "value",
                "type": "mixed",
                "doc": "<p>A value to initialize this field with.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "blur",
                "params": "e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires whenever the input loses focus.</p>"
            },
            {
                "name": "clearicontap",
                "params": "this(Ext.field.Input) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires whenever the clear icon is tapped.</p>"
            },
            {
                "name": "click",
                "params": "e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires whenever the input is clicked.</p>"
            },
            {
                "name": "focus",
                "params": "e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires whenever the input get focus.</p>"
            },
            {
                "name": "keyup",
                "params": "e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires whenever keyup is detected.</p>"
            },
            {
                "name": "masktap",
                "params": "this(Ext.field.Input) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires whenever a mask is tapped.</p>"
            },
            {
                "name": "mousedown",
                "params": "e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires whenever the input has a mousedown occur.</p>"
            },
            {
                "name": "paste",
                "params": "e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires whenever paste is detected.</p>"
            }
        ]
    },
    "Ext.field.Number": {
        "type": "Ext.field.Number",
        "doc": "<p>The Number field creates an HTML5 number input and is usually created inside a form. Because it creates an HTML\nnumber input field, most browsers will show a specialized virtual keyboard for entering numbers. The Number field\nonly accepts numerical input and also provides additional spinner UI that increases or decreases the current value\nby a configured step value. Here's how we might use one in a form:</p>",
        "configs": [
            {
                "name": "component",
                "type": "object",
                "doc": "<p>The inner component for this field, which defaults to an input text.</p>",
                "default": "{type: 'number'}"
            },
            {
                "name": "maxValue",
                "type": "number",
                "doc": "<p>The maximum value that this Number field can accept</p>",
                "default": null
            },
            {
                "name": "minValue",
                "type": "number",
                "doc": "<p>The minimum value that this Number field can accept</p>",
                "default": null
            },
            {
                "name": "stepValue",
                "type": "number",
                "doc": "<p>The amount by which the field is incremented or decremented each time the spinner is tapped.\nDefaults to undefined, which means that the field goes up or down by 1 each time the spinner is tapped</p>",
                "default": null
            },
            {
                "name": "ui",
                "type": "string",
                "doc": "<p>The ui to be used on this Component</p>",
                "default": "'number'"
            }
        ],
        "events": [
            {
                "name": "change",
                "params": "this(Ext.field.Text) newValue(Number) oldValue(Number) eOpts(Object)",
                "doc": "<p>Fires when the value has changed.</p>"
            }
        ]
    },
    "Ext.field.Password": {
        "type": "Ext.field.Password",
        "doc": "<p>The Password field creates a password input and is usually created inside a form. Because it creates a password\nfield, when the user enters text it will show up as stars. Aside from that, the password field is just a normal text\nfield. Here's an example of how to use it in a form:</p>",
        "configs": [
            {
                "name": "autoCapitalize",
                "type": "boolean",
                "doc": "<p>True to set the field's DOM element autocapitalize attribute to \"on\", false to set to \"off\".</p>",
                "default": "false"
            },
            {
                "name": "component",
                "type": "object",
                "doc": "<p>The inner component for this field, which defaults to an input text.</p>",
                "default": "{type: 'password'}"
            },
            {
                "name": "revealable",
                "type": "boolean",
                "doc": "<p>{Boolean}\nEnables the reveal toggle button that will show the password in clear text. This is currently only implemented in the Blackberry theme</p>",
                "default": "false"
            },
            {
                "name": "revealed",
                "type": "boolean",
                "doc": "<p>{Boolean}\nA value of 'true' for this config will show the password from clear text</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.field.Picker": {
        "type": "Ext.field.Picker",
        "doc": "<p>An abstract class for fields that have a single trigger which opens a \"picker\" popup\nabove the field. It provides a base implementation for toggling the picker's\nvisibility when the trigger is tapped.</p>",
        "configs": [
            {
                "name": "defaultPhonePickerConfig",
                "type": "object",
                "doc": "<p>The default configuration for the picker component when you are on a phone.</p>",
                "default": null
            },
            {
                "name": "defaultTabletPickerConfig",
                "type": "object",
                "doc": "<p>The default configuration for the picker component when you are on a tablet.</p>",
                "default": null
            },
            {
                "name": "pickerSlotAlign",
                "type": "string",
                "doc": "<p>The alignment of text in the picker created by this Select</p>",
                "default": "'center'"
            },
            {
                "name": "usePicker",
                "type": "string/boolean",
                "doc": "<p><code>true</code> if you want this component to always use a Ext.picker.Picker.\n<code>false</code> if you want it to use a popup overlay Ext.List.\n<code>auto</code> if you want to show a Ext.picker.Picker only on phones.</p>",
                "default": "'auto'"
            }
        ],
        "events": []
    },
    "Ext.field.Radio": {
        "type": "Ext.field.Radio",
        "doc": "<p>The radio field is an enhanced version of the native browser radio controls and is a good way of allowing your user\nto choose one option out of a selection of several (for example, choosing a favorite color):</p>",
        "configs": [
            {
                "name": "component",
                "type": "object",
                "doc": "<p>The inner component for this field.</p>",
                "default": "{type: 'radio', cls: Ext.baseCSSPrefix + 'input-radio'}"
            },
            {
                "name": "ui",
                "type": "string",
                "doc": "<p>The ui to be used on this Component</p>",
                "default": "'radio'"
            }
        ],
        "events": []
    },
    "Ext.field.Search": {
        "type": "Ext.field.Search",
        "doc": "<p>The Search field creates an HTML5 search input and is usually created inside a form. Because it creates an HTML\nsearch input type, the visual styling of this input is slightly different to normal text input controls (the corners\nare rounded), though the virtual keyboard displayed by the operating system is the standard keyboard control.</p>",
        "configs": [
            {
                "name": "component",
                "type": "object",
                "doc": "<p>The inner component for this field, which defaults to an input text.</p>",
                "default": "{type: 'search'}"
            },
            {
                "name": "ui",
                "type": "string",
                "doc": "<p>The ui to be used on this Component</p>",
                "default": "'search'"
            }
        ],
        "events": []
    },
    "Ext.field.Select": {
        "type": "Ext.field.Select",
        "doc": "<p>Simple Select field wrapper. Example usage:</p>",
        "configs": [
            {
                "name": "autoSelect",
                "type": "boolean",
                "doc": "<p><code>true</code> to auto select the first value in the store or options when they are changed. Only happens when\nthe value is set to <code>null</code>.</p>",
                "default": "true"
            },
            {
                "name": "displayField",
                "type": "string/number",
                "doc": "<p>The underlying data value name (or numeric Array index) to bind to this\nSelect control. This resolved value is the visibly rendered value of the available selection options.</p>",
                "default": "'text'"
            },
            {
                "name": "hiddenName",
                "type": "string",
                "doc": "<p>Specify a <code>hiddenName</code> if you're using the standardSubmit option.\nThis name will be used to post the underlying value of the select to the server.</p>",
                "default": null
            },
            {
                "name": "name",
                "type": "string",
                "doc": "<p>The field's HTML name attribute.</p>",
                "default": "'picker'"
            },
            {
                "name": "options",
                "type": "array",
                "doc": "<p>An array of select options.</p>",
                "default": null
            },
            {
                "name": "publishes",
                "type": "string/string[]/object",
                "doc": "<p>One or more names of config properties that this component should publish\nto its ViewModel. Generally speaking, only properties defined in a class config\nblock (including ancestor config blocks and mixins) are eligible for publishing\nto the viewModel. Some components override this and publish their most useful\nconfigs by default.</p>",
                "default": "{selection: 1}"
            },
            {
                "name": "selection",
                "type": "ext.data.model",
                "doc": "<p>The selected model. <code>null</code> if no value exists.</p>",
                "default": null
            },
            {
                "name": "store",
                "type": "ext.data.store/object/string",
                "doc": "<p>The store to provide selection options data.\nEither a Store instance, configuration object or store ID.</p>",
                "default": null
            },
            {
                "name": "twoWayBindable",
                "type": "string/string[]/object",
                "doc": "<p>This object holds a map of <code>config</code> properties that will update their binding\nas they are modified. For example, <code>value</code> is a key added by form fields. The\nform of this config is the same as <code>publishes</code>.</p>",
                "default": "{selection: 1}"
            },
            {
                "name": "ui",
                "type": "string",
                "doc": "<p>The ui to be used on this Component</p>",
                "default": "'select'"
            },
            {
                "name": "useClearIcon",
                "type": "boolean",
                "doc": "\n",
                "default": null
            },
            {
                "name": "valueField",
                "type": "string/number",
                "doc": "<p>The underlying data value name (or numeric Array index) to bind to this\nSelect control.</p>",
                "default": "'value'"
            }
        ],
        "events": [
            {
                "name": "change",
                "params": "this(Ext.field.Select) newValue(Mixed) oldValue(Mixed) eOpts(Object)",
                "doc": "<p>Fires when an option selection has changed</p>"
            },
            {
                "name": "focus",
                "params": "this(Ext.field.Select) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when this field receives input focus. This happens both when you tap on the field and when you focus on the field by using\n'next' or 'tab' on a keyboard.</p>"
            }
        ]
    },
    "Ext.field.SingleSlider": {
        "type": "Ext.field.SingleSlider",
        "doc": "<p>The slider is a way to allow the user to select a value from a given numerical range. You might use it for choosing</p>",
        "configs": [
            {
                "name": "publishes",
                "type": "string/string[]/object",
                "doc": "<p>One or more names of config properties that this component should publish\nto its ViewModel. Generally speaking, only properties defined in a class config\nblock (including ancestor config blocks and mixins) are eligible for publishing\nto the viewModel. Some components override this and publish their most useful\nconfigs by default.</p>",
                "default": "{value: 1}"
            },
            {
                "name": "value",
                "type": "number",
                "doc": "<p>The value(s) of this slider's thumbs. If you pass\na number, it will assume you have just 1 thumb.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "drag",
                "params": "this(Ext.field.Slider) sl(Ext.slider.Slider) thumb(Ext.slider.Thumb) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when the slider thumb starts a drag operation.</p>"
            },
            {
                "name": "dragchange",
                "params": "me(Ext.field.Slider) sl(Ext.slider.Slider) newValue(Number) oldValue(Number) eOpts(Object)",
                "doc": "<p>Fires when the value changes via drag.</p>"
            },
            {
                "name": "dragend",
                "params": "this(Ext.field.Slider) sl(Ext.slider.Slider) thumb(Ext.slider.Thumb) value(Array) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when the slider thumb ends a drag operation.</p>"
            },
            {
                "name": "dragstart",
                "params": "this(Ext.field.Slider) sl(Ext.slider.Slider) thumb(Ext.slider.Thumb) value(Array) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when the slider thumb starts a drag operation.</p>"
            }
        ]
    },
    "Ext.field.Slider": {
        "type": "Ext.field.Slider",
        "doc": "<p>The slider is a way to allow the user to select a value from a given numerical range. You might use it for choosing\na percentage, combine two of them to get min and max values, or use three of them to specify the hex values for a\ncolor. Each slider contains a single 'thumb' that can be dragged along the slider's length to change the value.\nSliders are equally useful inside forms and standalone. Here's how to quickly create a\nslider in form, in this case enabling a user to choose a percentage:</p>",
        "configs": [
            {
                "name": "cls",
                "type": "string/string[]",
                "doc": "<p>The CSS class to add to this component's element, in\naddition to the baseCls. In many cases, this property will be specified\nby the derived component class. See userCls for adding additional CSS\nclasses to component instances (such as items in a Ext.Container).</p>",
                "default": "Ext.baseCSSPrefix + 'slider-field'"
            },
            {
                "name": "increment",
                "type": "number",
                "doc": "<p>The increment by which to snap each thumb when its value changes. Any thumb movement\nwill be snapped to the nearest value that is a multiple of the increment (e.g. if increment is 10 and the user\ntries to move the thumb to 67, it will be snapped to 70 instead)</p>",
                "default": "1"
            },
            {
                "name": "liveUpdate",
                "type": "boolean",
                "doc": "<p><code>true</code> to fire change events while the slider is dragging. <code>false</code> will\nonly fire a change once the drag is complete.</p>",
                "default": "false"
            },
            {
                "name": "maxValue",
                "type": "number",
                "doc": "<p>The highest value any thumb on this slider can be set to.</p>",
                "default": "100"
            },
            {
                "name": "minValue",
                "type": "number",
                "doc": "<p>The lowest value any thumb on this slider can be set to.</p>",
                "default": "0"
            },
            {
                "name": "readOnly",
                "type": "boolean",
                "doc": "<p>Will make this field read only, meaning it cannot be changed with used interaction.</p>",
                "default": "false"
            },
            {
                "name": "tabIndex",
                "type": "number",
                "doc": "<p>The <code>tabIndex</code> for this field. Note this only applies to fields that are rendered,\nnot those which are built via <code>applyTo</code>.</p>",
                "default": null
            },
            {
                "name": "twoWayBindable",
                "type": "string/string[]/object",
                "doc": "<p>This object holds a map of <code>config</code> properties that will update their binding\nas they are modified. For example, <code>value</code> is a key added by form fields. The\nform of this config is the same as <code>publishes</code>.</p>",
                "default": "{values: 1, value: 1}"
            },
            {
                "name": "value",
                "type": "number/number[]",
                "doc": "<p>The value(s) of this slider's thumbs. If you pass\na number, it will assume you have just 1 thumb.</p>",
                "default": "0"
            },
            {
                "name": "values",
                "type": "number/number[]",
                "doc": "<p>Alias to value</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "change",
                "params": "me(Ext.field.Slider) newValue(Number[]) oldValue(Number[]) eOpts(Object)",
                "doc": "<p>Fires when the value changes.</p>"
            },
            {
                "name": "drag",
                "params": "this(Ext.field.Slider) sl(Ext.slider.Slider) thumb(Ext.slider.Thumb) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when the slider thumb starts a drag operation.</p>"
            },
            {
                "name": "dragchange",
                "params": "me(Ext.field.Slider) sl(Ext.slider.Slider) thumb(Ext.slider.Thumb) newValue(Number[]) oldValue(Number[]) eOpts(Object)",
                "doc": "<p>Fires when a thumb value changes via drag.</p>"
            },
            {
                "name": "dragend",
                "params": "this(Ext.field.Slider) sl(Ext.slider.Slider) thumb(Ext.slider.Thumb) value(Array) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when the slider thumb ends a drag operation.</p>"
            },
            {
                "name": "dragstart",
                "params": "this(Ext.field.Slider) sl(Ext.slider.Slider) thumb(Ext.slider.Thumb) value(Array) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when the slider thumb starts a drag operation.</p>"
            }
        ]
    },
    "Ext.field.Spinner": {
        "type": "Ext.field.Spinner",
        "doc": "<p>Wraps an HTML5 number field. Example usage:</p>",
        "configs": [
            {
                "name": "accelerateOnTapHold",
                "type": "boolean",
                "doc": "<p>True if autorepeating should start slowly and accelerate.</p>",
                "default": "true"
            },
            {
                "name": "cls",
                "type": "string/string[]",
                "doc": "<p>The CSS class to add to this component's element, in\naddition to the baseCls. In many cases, this property will be specified\nby the derived component class. See userCls for adding additional CSS\nclasses to component instances (such as items in a Ext.Container).</p>",
                "default": "Ext.baseCSSPrefix + 'spinner'"
            },
            {
                "name": "component",
                "type": "object",
                "doc": "<p>The inner component for this field, which defaults to an input text.</p>",
                "default": "{disabled: true}"
            },
            {
                "name": "cycle",
                "type": "boolean",
                "doc": "<p>When set to <code>true</code>, it will loop the values of a minimum or maximum is reached.\nIf the maximum value is reached, the value will be set to the minimum.</p>",
                "default": "false"
            },
            {
                "name": "defaultValue",
                "type": "number",
                "doc": "<p>The default value for this field when no value has been set.\nIt is also used when the value is set to <code>NaN</code>.</p>",
                "default": "0"
            },
            {
                "name": "groupButtons",
                "type": "boolean",
                "doc": "<p><code>true</code> if you want to group the buttons to the right of the fields. <code>false</code> if you want the buttons\nto be at either side of the field.</p>",
                "default": "true"
            },
            {
                "name": "maxValue",
                "type": "number",
                "doc": "<p>The maximum allowed value.</p>",
                "default": "Infinity"
            },
            {
                "name": "minValue",
                "type": "number",
                "doc": "<p>The minimum allowed value.</p>",
                "default": "-Infinity"
            },
            {
                "name": "stepValue",
                "type": "number",
                "doc": "<p>Value that is added or subtracted from the current value when a spinner is used.</p>",
                "default": "0.1"
            },
            {
                "name": "value",
                "type": "number",
                "doc": "\n",
                "default": null
            }
        ],
        "events": [
            {
                "name": "spin",
                "params": "this(Ext.field.Spinner) value(Number) direction(String) eOpts(Object)",
                "doc": "<p>Fires when the value is changed via either spinner buttons.</p>"
            },
            {
                "name": "spindown",
                "params": "this(Ext.field.Spinner) value(Number) eOpts(Object)",
                "doc": "<p>Fires when the value is changed via the spinner down button.</p>"
            },
            {
                "name": "spinup",
                "params": "this(Ext.field.Spinner) value(Number) eOpts(Object)",
                "doc": "<p>Fires when the value is changed via the spinner up button.</p>"
            }
        ]
    },
    "Ext.field.Text": {
        "type": "Ext.field.Text",
        "doc": "<p>The text field is the basis for most of the input fields. It provides a baseline of shared\nfunctionality such as input validation, standard events, state management and look and feel. Typically we create\ntext fields inside a form, like this:</p>",
        "configs": [
            {
                "name": "autoCapitalize",
                "type": "boolean",
                "doc": "<p>True to set the field's DOM element autocapitalize attribute to \"on\", false to set to \"off\".</p>",
                "default": null
            },
            {
                "name": "autoComplete",
                "type": "boolean",
                "doc": "<p>True to set the field's DOM element autocomplete attribute to \"on\", false to set to \"off\".</p>",
                "default": null
            },
            {
                "name": "autoCorrect",
                "type": "boolean",
                "doc": "<p>True to set the field DOM element autocorrect attribute to \"on\", false to set to \"off\".</p>",
                "default": null
            },
            {
                "name": "bubbleEvents",
                "type": "array",
                "doc": "\n",
                "default": "['action']"
            },
            {
                "name": "clearIcon",
                "type": "boolean",
                "doc": "<p><code>true</code> to use a clear icon in this field.</p>",
                "default": "true"
            },
            {
                "name": "component",
                "type": "object",
                "doc": "<p>The inner component for this field, which defaults to an input text.</p>",
                "default": "{xtype: 'input', type: 'text', fastFocus: false}"
            },
            {
                "name": "maxLength",
                "type": "number",
                "doc": "<p>The maximum number of permitted input characters.</p>",
                "default": null
            },
            {
                "name": "placeHolder",
                "type": "string",
                "doc": "<p>A string value displayed in the input (if supported) when the control is empty.</p>",
                "default": null
            },
            {
                "name": "publishes",
                "type": "string/string[]/object",
                "doc": "<p>One or more names of config properties that this component should publish\nto its ViewModel. Generally speaking, only properties defined in a class config\nblock (including ancestor config blocks and mixins) are eligible for publishing\nto the viewModel. Some components override this and publish their most useful\nconfigs by default.</p>",
                "default": "{value: 1}"
            },
            {
                "name": "readOnly",
                "type": "boolean",
                "doc": "<p>True to set the field DOM element readonly attribute to true.</p>",
                "default": null
            },
            {
                "name": "twoWayBindable",
                "type": "string/string[]/object",
                "doc": "<p>This object holds a map of <code>config</code> properties that will update their binding\nas they are modified. For example, <code>value</code> is a key added by form fields. The\nform of this config is the same as <code>publishes</code>.</p>",
                "default": "{value: 1}"
            },
            {
                "name": "ui",
                "type": "string",
                "doc": "<p>The ui to be used on this Component</p>",
                "default": "'text'"
            }
        ],
        "events": [
            {
                "name": "action",
                "params": "this(Ext.field.Text) e(Mixed) eOpts(Object)",
                "doc": "<p>Fires whenever the return key or go is pressed. FormPanel listeners\nfor this event, and submits itself whenever it fires. Also note\nthat this event bubbles up to parent containers.</p>"
            },
            {
                "name": "blur",
                "params": "this(Ext.field.Text) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when this field loses input focus</p>"
            },
            {
                "name": "change",
                "params": "this(Ext.field.Text) newValue(String) oldValue(String) eOpts(Object)",
                "doc": "<p>Fires when the value has changed.</p>"
            },
            {
                "name": "clearicontap",
                "params": "this(Ext.field.Text) input(Ext.field.Input) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when the clear icon is tapped</p>"
            },
            {
                "name": "focus",
                "params": "this(Ext.field.Text) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when this field receives input focus</p>"
            },
            {
                "name": "keyup",
                "params": "this(Ext.field.Text) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when a key is released on the input element</p>"
            },
            {
                "name": "mousedown",
                "params": "this(Ext.field.Text) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when this field receives a mousedown</p>"
            },
            {
                "name": "paste",
                "params": "this(Ext.field.Text) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when this field is pasted.</p>"
            }
        ]
    },
    "Ext.field.TextArea": {
        "type": "Ext.field.TextArea",
        "doc": "<p>Creates an HTML textarea field on the page. This is useful whenever you need the user to enter large amounts of text\n(i.e. more than a few words). Typically, text entry on mobile devices is not a pleasant experience for the user so\nit's good to limit your use of text areas to only those occasions when free form text is required or alternative\ninput methods like select boxes or radio buttons are not possible. Text Areas are usually created inside forms, like\nthis:</p>",
        "configs": [
            {
                "name": "autoCapitalize",
                "type": "boolean",
                "doc": "<p>True to set the field's DOM element autocapitalize attribute to \"on\", false to set to \"off\".</p>",
                "default": "false"
            },
            {
                "name": "component",
                "type": "object",
                "doc": "<p>The inner component for this field, which defaults to an input text.</p>",
                "default": "{xtype: 'textareainput'}"
            },
            {
                "name": "maxRows",
                "type": "number",
                "doc": "<p>The maximum number of lines made visible by the input.</p>",
                "default": null
            },
            {
                "name": "ui",
                "type": "string",
                "doc": "<p>The ui to be used on this Component</p>",
                "default": "'textarea'"
            }
        ],
        "events": []
    },
    "Ext.field.TextAreaInput": {
        "type": "Ext.field.TextAreaInput",
        "configs": [],
        "events": []
    },
    "Ext.field.Toggle": {
        "type": "Ext.field.Toggle",
        "doc": "<p>Specialized Ext.field.Slider with a single thumb which only supports two values.</p>",
        "configs": [
            {
                "name": "activeLabel",
                "type": "string",
                "doc": "<p>The label to add to the toggle field when it is toggled on.\nOnly available in the Blackberry theme.</p>",
                "default": null
            },
            {
                "name": "cls",
                "type": "string",
                "doc": "<p>The CSS class to add to this component's element, in\naddition to the baseCls. In many cases, this property will be specified\nby the derived component class. See userCls for adding additional CSS\nclasses to component instances (such as items in a Ext.Container).</p>",
                "default": "'x-toggle-field'"
            },
            {
                "name": "inactiveLabel",
                "type": "string",
                "doc": "<p>The label to add to the toggle field when it is toggled off.\nOnly available in the Blackberry theme.</p>",
                "default": null
            },
            {
                "name": "labelAlign",
                "type": "string",
                "doc": "<p>The position to render the label relative to the field input.\nAvailable options are: 'top', 'left', 'bottom' and 'right'</p>",
                "default": "'left'"
            },
            {
                "name": "maxValueCls",
                "type": "string",
                "doc": "<p>See Ext.slider.Toggle.maxValueCls</p>",
                "default": "Ext.baseCSSPrefix + 'toggle-on'"
            },
            {
                "name": "minValueCls",
                "type": "string",
                "doc": "<p>See Ext.slider.Toggle.minValueCls</p>",
                "default": "Ext.baseCSSPrefix + 'toggle-off'"
            },
            {
                "name": "value",
                "type": "boolean",
                "doc": "<p>The value(s) of this slider's thumbs. If you pass\na number, it will assume you have just 1 thumb.</p>",
                "default": "false"
            }
        ],
        "events": [
            {
                "name": "change",
                "params": "this(Ext.field.Toggle) newValue(Number) oldValue(Number) eOpts(Object)",
                "doc": "<p>Fires when an option selection has changed.</p>"
            }
        ]
    },
    "Ext.field.Url": {
        "type": "Ext.field.Url",
        "doc": "<p>The Url field creates an HTML5 url input and is usually created inside a form. Because it creates an HTML url input\nfield, most browsers will show a specialized virtual keyboard for web address input. Aside from that, the url field\nis just a normal text field. Here's an example of how to use it in a form:</p>",
        "configs": [
            {
                "name": "autoCapitalize",
                "type": "boolean",
                "doc": "<p>True to set the field's DOM element autocapitalize attribute to \"on\", false to set to \"off\".</p>",
                "default": "false"
            },
            {
                "name": "component",
                "type": "object",
                "doc": "<p>The inner component for this field, which defaults to an input text.</p>",
                "default": "{type: 'url'}"
            }
        ],
        "events": []
    },
    "Ext.form.FieldSet": {
        "type": "Ext.form.FieldSet",
        "doc": "<p>A FieldSet is a great way to visually separate elements of a form. It's normally used when you have a form with\nfields that can be divided into groups - for example a customer's billing details in one fieldset and their shipping\naddress in another. A fieldset can be used inside a form or on its own elsewhere in your app. Fieldsets can\noptionally have a title at the top and instructions at the bottom. Here's how we might create a FieldSet inside a\nform:</p>",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to\nother elements within this component. To add specific styling for sub-classes, use the cls config.</p>",
                "default": "Ext.baseCSSPrefix + 'form-fieldset'"
            },
            {
                "name": "instructions",
                "type": "string",
                "doc": "<p>Optional fieldset instructions, rendered just below the grouped fields.</p>",
                "default": null
            },
            {
                "name": "title",
                "type": "string",
                "doc": "<p>Optional fieldset title, rendered just above the grouped fields.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.form.Panel": {
        "type": "Ext.form.Panel",
        "doc": "<p>The Form panel presents a set of form fields and provides convenient ways to load and save data. Usually a form\npanel just contains the set of fields you want to display, ordered inside the items configuration like this:</p>",
        "configs": [
            {
                "name": "api",
                "type": "object",
                "doc": "<p>If specified, load and submit actions will be loaded and submitted via Ext Direct.  Methods which have been imported by\nExt.direct.Manager can be specified here to load and submit forms. API methods may also be\nspecified as strings and will be parsed into the actual functions when the first submit or load has occurred. Such as the following:</p>",
                "default": null
            },
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to\nother elements within this component. To add specific styling for sub-classes, use the cls config.</p>",
                "default": "Ext.baseCSSPrefix + 'form'"
            },
            {
                "name": "baseParams",
                "type": "object",
                "doc": "<p>Optional hash of params to be sent (when <code>standardSubmit</code> configuration is <code>false</code>) on every submit.</p>",
                "default": null
            },
            {
                "name": "enableSubmissionForm",
                "type": "boolean",
                "doc": "<p>The submission form is generated but never added to the dom. It is a submittable version of your form panel, allowing for fields\nthat are not simple textfields to be properly submitted to servers. It will also send values that are easier to parse\nwith server side code.</p>",
                "default": "true"
            },
            {
                "name": "enctype",
                "type": "string",
                "doc": "<p>The enctype attribute for the form, specifies how the form should be encoded when submitting</p>",
                "default": null
            },
            {
                "name": "method",
                "type": "string",
                "doc": "<p>The method which this form will be submitted. <code>post</code> or <code>get</code>.</p>",
                "default": "'post'"
            },
            {
                "name": "multipartDetection",
                "type": "boolean",
                "doc": "<p>If this is enabled the form will automatically detect the need to use 'multipart/form-data' during submission.</p>",
                "default": "true"
            },
            {
                "name": "paramOrder",
                "type": "string/string[]",
                "doc": "<p>A list of params to be executed server side. Only used for the api <code>load</code>\nconfiguration.</p>",
                "default": null
            },
            {
                "name": "paramsAsHash",
                "type": "boolean",
                "doc": "<p>Only used for the api <code>load</code> configuration. If true, parameters will be sent as a\nsingle hash collection of named arguments. Providing a paramOrder nullifies this\nconfiguration.</p>",
                "default": null
            },
            {
                "name": "record",
                "type": "ext.data.model",
                "doc": "<p>The model instance of this form. Can by dynamically set at any time.</p>",
                "default": null
            },
            {
                "name": "scrollable",
                "type": "boolean/string/object",
                "doc": "<p>Configuration options to make this Component scrollable. Acceptable values are:</p>",
                "default": "true"
            },
            {
                "name": "standardSubmit",
                "type": "boolean",
                "doc": "<p>Whether or not we want to perform a standard form submit.</p>",
                "default": "false"
            },
            {
                "name": "submitOnAction",
                "type": "object",
                "doc": "<p>When this is set to <code>true</code>, the form will automatically submit itself whenever the <code>action</code>\nevent fires on a field in this form. The action event usually fires whenever you press\ngo or enter inside a textfield.</p>",
                "default": "false"
            },
            {
                "name": "timeout",
                "type": "number",
                "doc": "<p>Timeout for form actions in seconds.</p>",
                "default": "30"
            },
            {
                "name": "trackResetOnLoad",
                "type": "boolean",
                "doc": "<p>If set to true, reset() resets to the last loaded or setValues() data instead of\nwhen the form was first created.</p>",
                "default": "false"
            },
            {
                "name": "url",
                "type": "string",
                "doc": "<p>The default url for submit actions.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "beforesubmit",
                "params": "this(Ext.form.Panel) values(Object) options(Object) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires immediately preceding any Form submit action.\nImplementations may adjust submitted form values or options prior to execution.\nA return value of <code>false</code> from this listener will abort the submission\nattempt (regardless of <code>standardSubmit</code> configuration).</p>"
            },
            {
                "name": "exception",
                "params": "this(Ext.form.Panel) result(Object) eOpts(Object)",
                "doc": "<p>Fires when either the Ajax HTTP request reports a failure OR the server returns a <code>success:false</code>\nresponse in the result payload.</p>"
            },
            {
                "name": "submit",
                "params": "this(Ext.form.Panel) result(Object) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires upon successful (Ajax-based) form submission.</p>"
            }
        ]
    },
    "Ext.Function": {
        "type": "Ext.Function",
        "doc": "<p>A collection of useful static methods to deal with function callbacks.</p>",
        "configs": [],
        "events": []
    },
    "Ext.fx.animation.Abstract": {
        "type": "Ext.fx.animation.Abstract",
        "configs": [
            {
                "name": "after",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "before",
                "type": "object",
                "doc": "<p>Before configuration.</p>",
                "default": null
            },
            {
                "name": "callback",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "delay",
                "type": "number",
                "doc": "\n",
                "default": "0"
            },
            {
                "name": "direction",
                "type": "string",
                "doc": "\n",
                "default": "'normal'"
            },
            {
                "name": "duration",
                "type": "number",
                "doc": "\n",
                "default": "300"
            },
            {
                "name": "easing",
                "type": "string",
                "doc": "<p>Easing type.</p>",
                "default": "'linear'"
            },
            {
                "name": "element",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "from",
                "type": "object",
                "doc": "\n",
                "default": "{}"
            },
            {
                "name": "iteration",
                "type": "number",
                "doc": "\n",
                "default": "1"
            },
            {
                "name": "name",
                "type": "string",
                "doc": "\n",
                "default": "''"
            },
            {
                "name": "onBeforeEnd",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "onBeforeStart",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "onEnd",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "preserveEndState",
                "type": "boolean",
                "doc": "\n",
                "default": "false"
            },
            {
                "name": "replacePrevious",
                "type": "boolean",
                "doc": "\n",
                "default": "true"
            },
            {
                "name": "reverse",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "scope",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "states",
                "type": "object",
                "doc": "\n",
                "default": "{}"
            },
            {
                "name": "to",
                "type": "object",
                "doc": "\n",
                "default": "{}"
            }
        ],
        "events": []
    },
    "Ext.fx.animation.Cube": {
        "type": "Ext.fx.animation.Cube",
        "configs": [
            {
                "name": "after",
                "type": "object",
                "doc": "\n",
                "default": "{}"
            },
            {
                "name": "before",
                "type": "object",
                "doc": "<p>Before configuration.</p>",
                "default": "{}"
            },
            {
                "name": "direction",
                "type": "string",
                "doc": "<p>The direction of which the slide animates</p>",
                "default": "'right'"
            },
            {
                "name": "out",
                "type": "boolean",
                "doc": "\n",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.fx.animation.Fade": {
        "type": "Ext.fx.animation.Fade",
        "configs": [
            {
                "name": "after",
                "type": "object",
                "doc": "\n",
                "default": "{opacity: null}"
            },
            {
                "name": "before",
                "type": "object",
                "doc": "<p>Before configuration.</p>",
                "default": "{display: null, opacity: 0}"
            },
            {
                "name": "out",
                "type": "boolean",
                "doc": "<p>True if you want to make this animation fade out, instead of fade in.</p>",
                "default": "false"
            },
            {
                "name": "reverse",
                "type": "object",
                "doc": "\n",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.fx.animation.FadeOut": {
        "type": "Ext.fx.animation.FadeOut",
        "configs": [
            {
                "name": "before",
                "type": "object",
                "doc": "<p>Before configuration.</p>",
                "default": "{}"
            }
        ],
        "events": []
    },
    "Ext.fx.animation.Flip": {
        "type": "Ext.fx.animation.Flip",
        "configs": [
            {
                "name": "direction",
                "type": "string",
                "doc": "<p>The direction of which the slide animates</p>",
                "default": "'right'"
            },
            {
                "name": "easing",
                "type": "string",
                "doc": "<p>Easing type.</p>",
                "default": "'ease-in'"
            },
            {
                "name": "half",
                "type": "boolean",
                "doc": "\n",
                "default": "false"
            },
            {
                "name": "out",
                "type": "object",
                "doc": "\n",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.fx.Animation": {
        "type": "Ext.fx.Animation",
        "doc": "<p>This class is a factory class that will create and return an animation class based on the type configuration.</p>",
        "configs": [
            {
                "name": "type",
                "type": "string",
                "doc": "<p>The type of animation to use. The possible values are:</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.fx.animation.Pop": {
        "type": "Ext.fx.animation.Pop",
        "configs": [
            {
                "name": "after",
                "type": "object",
                "doc": "\n",
                "default": "{opacity: null}"
            },
            {
                "name": "before",
                "type": "object",
                "doc": "<p>Before configuration.</p>",
                "default": "{display: null, opacity: 0}"
            },
            {
                "name": "out",
                "type": "boolean",
                "doc": "<p>True if you want to make this animation pop out, instead of pop in.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.fx.animation.PopOut": {
        "type": "Ext.fx.animation.PopOut",
        "configs": [
            {
                "name": "before",
                "type": "object",
                "doc": "<p>Before configuration.</p>",
                "default": "{}"
            }
        ],
        "events": []
    },
    "Ext.fx.animation.Slide": {
        "type": "Ext.fx.animation.Slide",
        "configs": [
            {
                "name": "containerBox",
                "type": "string",
                "doc": "\n",
                "default": "'auto'"
            },
            {
                "name": "direction",
                "type": "string",
                "doc": "<p>The direction of which the slide animates</p>",
                "default": "'left'"
            },
            {
                "name": "easing",
                "type": "string",
                "doc": "<p>Easing type.</p>",
                "default": "'auto'"
            },
            {
                "name": "elementBox",
                "type": "string",
                "doc": "\n",
                "default": "'auto'"
            },
            {
                "name": "isElementBoxFit",
                "type": "boolean",
                "doc": "\n",
                "default": "true"
            },
            {
                "name": "offset",
                "type": "number",
                "doc": "<p>The offset that the animation should go offscreen before entering (or when exiting)</p>",
                "default": "0"
            },
            {
                "name": "out",
                "type": "boolean",
                "doc": "<p>True if you want to make this animation slide out, instead of slide in.</p>",
                "default": "false"
            },
            {
                "name": "useCssTransform",
                "type": "boolean",
                "doc": "\n",
                "default": "true"
            }
        ],
        "events": []
    },
    "Ext.fx.animation.SlideOut": {
        "type": "Ext.fx.animation.SlideOut",
        "configs": [],
        "events": []
    },
    "Ext.fx.animation.Wipe": {
        "type": "Ext.fx.animation.Wipe",
        "configs": [
            {
                "name": "direction",
                "type": "string",
                "doc": "<p>The direction of which the slide animates</p>",
                "default": "'right'"
            },
            {
                "name": "easing",
                "type": "string",
                "doc": "<p>Valid values are 'ease', 'linear', ease-in', 'ease-out', 'ease-in-out',\nor a cubic-bezier curve as defined by CSS.</p>",
                "default": "'ease-out'"
            },
            {
                "name": "out",
                "type": "boolean",
                "doc": "<p>True if you want to make this animation wipe out, instead of slide in.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.fx.animation.WipeOut": {
        "type": "Ext.fx.animation.WipeOut",
        "configs": [],
        "events": []
    },
    "Ext.fx.easing.Abstract": {
        "type": "Ext.fx.easing.Abstract",
        "configs": [
            {
                "name": "startTime",
                "type": "number",
                "doc": "\n",
                "default": "0"
            },
            {
                "name": "startValue",
                "type": "number",
                "doc": "\n",
                "default": "0"
            }
        ],
        "events": []
    },
    "Ext.fx.easing.Bounce": {
        "type": "Ext.fx.easing.Bounce",
        "configs": [
            {
                "name": "acceleration",
                "type": "number",
                "doc": "\n",
                "default": "30"
            },
            {
                "name": "springTension",
                "type": "number",
                "doc": "\n",
                "default": "0.3"
            },
            {
                "name": "startVelocity",
                "type": "number",
                "doc": "\n",
                "default": "0"
            }
        ],
        "events": []
    },
    "Ext.fx.easing.BoundMomentum": {
        "type": "Ext.fx.easing.BoundMomentum",
        "doc": "<p>This easing is typically used for Ext.scroll.Scroller. It's a combination of\nExt.fx.easing.Momentum and Ext.fx.easing.Bounce, which emulates deceleration when the animated element\nis still within its boundary, then bouncing back (snapping) when it's out-of-bound.</p>",
        "configs": [
            {
                "name": "bounce",
                "type": "object",
                "doc": "<p>A valid config object for Ext.fx.easing.Bounce</p>",
                "default": null
            },
            {
                "name": "maxMomentumValue",
                "type": "number",
                "doc": "\n",
                "default": "0"
            },
            {
                "name": "minMomentumValue",
                "type": "number",
                "doc": "\n",
                "default": "0"
            },
            {
                "name": "minVelocity",
                "type": "number",
                "doc": "<p>The minimum velocity to end this easing</p>",
                "default": "0.01"
            },
            {
                "name": "momentum",
                "type": "object",
                "doc": "<p>A valid config object for Ext.fx.easing.Momentum</p>",
                "default": null
            },
            {
                "name": "startVelocity",
                "type": "number",
                "doc": "<p>The start velocity</p>",
                "default": "0"
            }
        ],
        "events": []
    },
    "Ext.fx.easing.EaseIn": {
        "type": "Ext.fx.easing.EaseIn",
        "configs": [
            {
                "name": "duration",
                "type": "number",
                "doc": "\n",
                "default": "1500"
            },
            {
                "name": "exponent",
                "type": "number",
                "doc": "\n",
                "default": "4"
            }
        ],
        "events": []
    },
    "Ext.fx.easing.EaseOut": {
        "type": "Ext.fx.easing.EaseOut",
        "configs": [
            {
                "name": "duration",
                "type": "number",
                "doc": "\n",
                "default": "1500"
            },
            {
                "name": "exponent",
                "type": "number",
                "doc": "\n",
                "default": "4"
            }
        ],
        "events": []
    },
    "Ext.fx.easing.Easing": {
        "type": "Ext.fx.easing.Easing",
        "configs": [],
        "events": []
    },
    "Ext.fx.easing.Linear": {
        "type": "Ext.fx.easing.Linear",
        "configs": [
            {
                "name": "duration",
                "type": "number",
                "doc": "\n",
                "default": "0"
            },
            {
                "name": "endValue",
                "type": "number",
                "doc": "\n",
                "default": "0"
            }
        ],
        "events": []
    },
    "Ext.fx.easing.Momentum": {
        "type": "Ext.fx.easing.Momentum",
        "configs": [
            {
                "name": "acceleration",
                "type": "number",
                "doc": "\n",
                "default": "30"
            },
            {
                "name": "friction",
                "type": "number",
                "doc": "\n",
                "default": "0"
            },
            {
                "name": "startVelocity",
                "type": "number",
                "doc": "\n",
                "default": "0"
            }
        ],
        "events": []
    },
    "Ext.fx.layout.card.Abstract": {
        "type": "Ext.fx.layout.card.Abstract",
        "configs": [
            {
                "name": "direction",
                "type": "string",
                "doc": "\n",
                "default": "'left'"
            },
            {
                "name": "duration",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "layout",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "reverse",
                "type": "object",
                "doc": "\n",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.fx.layout.card.Cover": {
        "type": "Ext.fx.layout.card.Cover",
        "configs": [
            {
                "name": "inAnimation",
                "type": "object",
                "doc": "\n",
                "default": "{before: {'z-index': 100}, after: {'z-index': 0}, type: 'slide', easing: 'ease-out'}"
            },
            {
                "name": "outAnimation",
                "type": "object",
                "doc": "\n",
                "default": "{easing: 'ease-out', from: {opacity: 0.99}, to: {opacity: 1}, out: true}"
            },
            {
                "name": "reverse",
                "type": "object",
                "doc": "\n",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.fx.layout.card.Cube": {
        "type": "Ext.fx.layout.card.Cube",
        "configs": [
            {
                "name": "inAnimation",
                "type": "object",
                "doc": "\n",
                "default": "{type: 'cube'}"
            },
            {
                "name": "outAnimation",
                "type": "object",
                "doc": "\n",
                "default": "{type: 'cube', out: true}"
            },
            {
                "name": "reverse",
                "type": "object",
                "doc": "\n",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.fx.layout.card.Fade": {
        "type": "Ext.fx.layout.card.Fade",
        "configs": [
            {
                "name": "inAnimation",
                "type": "object",
                "doc": "\n",
                "default": "{type: 'fade', easing: 'ease-out'}"
            },
            {
                "name": "outAnimation",
                "type": "object",
                "doc": "\n",
                "default": "{type: 'fade', easing: 'ease-out', out: true}"
            },
            {
                "name": "reverse",
                "type": "object",
                "doc": "\n",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.fx.layout.card.Flip": {
        "type": "Ext.fx.layout.card.Flip",
        "configs": [
            {
                "name": "duration",
                "type": "number",
                "doc": "\n",
                "default": "500"
            },
            {
                "name": "inAnimation",
                "type": "object",
                "doc": "\n",
                "default": "{type: 'flip', half: true, easing: 'ease-out', before: {'backface-visibility': 'hidden'}, after: {'backface-visibility': null}}"
            },
            {
                "name": "outAnimation",
                "type": "object",
                "doc": "\n",
                "default": "{type: 'flip', half: true, easing: 'ease-in', before: {'backface-visibility': 'hidden'}, after: {'backface-visibility': null}, out: true}"
            }
        ],
        "events": []
    },
    "Ext.fx.layout.Card": {
        "type": "Ext.fx.layout.Card",
        "configs": [],
        "events": []
    },
    "Ext.fx.layout.card.Pop": {
        "type": "Ext.fx.layout.card.Pop",
        "configs": [
            {
                "name": "duration",
                "type": "number",
                "doc": "\n",
                "default": "500"
            },
            {
                "name": "inAnimation",
                "type": "object",
                "doc": "\n",
                "default": "{type: 'pop', easing: 'ease-out'}"
            },
            {
                "name": "outAnimation",
                "type": "object",
                "doc": "\n",
                "default": "{type: 'pop', easing: 'ease-in', out: true}"
            }
        ],
        "events": []
    },
    "Ext.fx.layout.card.Reveal": {
        "type": "Ext.fx.layout.card.Reveal",
        "configs": [
            {
                "name": "inAnimation",
                "type": "object",
                "doc": "\n",
                "default": "{easing: 'ease-out', from: {opacity: 0.99}, to: {opacity: 1}}"
            },
            {
                "name": "outAnimation",
                "type": "object",
                "doc": "\n",
                "default": "{before: {'z-index': 100}, after: {'z-index': 0}, type: 'slide', easing: 'ease-out', out: true}"
            }
        ],
        "events": []
    },
    "Ext.fx.layout.card.Scroll": {
        "type": "Ext.fx.layout.card.Scroll",
        "configs": [
            {
                "name": "duration",
                "type": "number",
                "doc": "\n",
                "default": "150"
            }
        ],
        "events": []
    },
    "Ext.fx.layout.card.ScrollCover": {
        "type": "Ext.fx.layout.card.ScrollCover",
        "configs": [],
        "events": []
    },
    "Ext.fx.layout.card.ScrollReveal": {
        "type": "Ext.fx.layout.card.ScrollReveal",
        "configs": [],
        "events": []
    },
    "Ext.fx.layout.card.Slide": {
        "type": "Ext.fx.layout.card.Slide",
        "configs": [
            {
                "name": "inAnimation",
                "type": "object",
                "doc": "\n",
                "default": "{type: 'slide', easing: 'ease-out'}"
            },
            {
                "name": "outAnimation",
                "type": "object",
                "doc": "\n",
                "default": "{type: 'slide', easing: 'ease-out', out: true}"
            }
        ],
        "events": []
    },
    "Ext.fx.layout.card.Style": {
        "type": "Ext.fx.layout.card.Style",
        "configs": [
            {
                "name": "inAnimation",
                "type": "object",
                "doc": "\n",
                "default": "{before: {visibility: null}, preserveEndState: false, replacePrevious: true}"
            },
            {
                "name": "outAnimation",
                "type": "object",
                "doc": "\n",
                "default": "{preserveEndState: false, replacePrevious: true}"
            }
        ],
        "events": []
    },
    "Ext.fx.runner.Css": {
        "type": "Ext.fx.runner.Css",
        "configs": [],
        "events": []
    },
    "Ext.fx.runner.CssAnimation": {
        "type": "Ext.fx.runner.CssAnimation",
        "configs": [],
        "events": []
    },
    "Ext.fx.runner.CssTransition": {
        "type": "Ext.fx.runner.CssTransition",
        "configs": [],
        "events": []
    },
    "Ext.fx.Runner": {
        "type": "Ext.fx.Runner",
        "configs": [],
        "events": []
    },
    "Ext.fx.State": {
        "type": "Ext.fx.State",
        "configs": [],
        "events": []
    },
    "Ext.GlobalEvents": {
        "type": "Ext.GlobalEvents",
        "doc": "<p>An <code>Observable</code> through which Ext fires global events.</p>",
        "configs": [],
        "events": [
            {
                "name": "added",
                "params": "component(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires when a Component is added to a Container.</p>"
            },
            {
                "name": "beforebindnotify",
                "params": "scheduler(Ext.util.Scheduler) eOpts(Object)",
                "doc": "<p>Fires before a scheduled set of bindings are fired. This allows interested parties\nto react and do any required work.</p>"
            },
            {
                "name": "beforeresponsiveupdate",
                "params": "context(Object) eOpts(Object)",
                "doc": "<p>Fires before Ext.mixin.Responsive perform any updates in response to\ndynamic changes. This is prior to refreshing <code>responsiveFormulas</code>.</p>"
            },
            {
                "name": "beginresponsiveupdate",
                "params": "context(Object) eOpts(Object)",
                "doc": "<p>Fires when Ext.mixin.Responsive is about to perform updates in response to\ndynamic changes. At this point all <code>responsiveFormulas</code> have been refreshed.</p>"
            },
            {
                "name": "collapse",
                "params": "component(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires when a Component is collapsed (e.g., a panel).</p>"
            },
            {
                "name": "expand",
                "params": "component(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires when a Component is expanded (e.g., a panel).</p>"
            },
            {
                "name": "hide",
                "params": "component(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires when a Component is hidden.</p>"
            },
            {
                "name": "idle",
                "params": "eOpts(Object)",
                "doc": "<p>Fires when an event handler finishes its run, just before returning to\nbrowser control.</p>"
            },
            {
                "name": "mousedown",
                "params": "e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>A mousedown listener on the document that is immune to stopPropagation()\nused in cases where we need to know if a mousedown event occurred on the\ndocument regardless of whether some other handler tried to stop it.  An\nexample where this is useful is a menu that needs to be hidden whenever\nthere is a mousedown event on the document.</p>"
            },
            {
                "name": "removed",
                "params": "component(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires when a Component is removed from a Container.</p>"
            },
            {
                "name": "resize",
                "params": "width(Number) height(Number) eOpts(Object)",
                "doc": "<p>Fires when the browser window is resized.  To avoid running resize handlers\ntoo often resulting in sluggish window resizing, resize events use a buffer\nof 100 milliseconds.</p>"
            },
            {
                "name": "responsiveupdate",
                "params": "context(Object) eOpts(Object)",
                "doc": "<p>Fires after Ext.mixin.Responsive has performed updates in response to\ndynamic changes.</p>"
            },
            {
                "name": "show",
                "params": "component(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires when a Component is shown.</p>"
            }
        ]
    },
    "Ext.grid.cell.Base": {
        "type": "Ext.grid.cell.Base",
        "doc": "<p>This is the base class for grid cells.</p>",
        "configs": [
            {
                "name": "align",
                "type": "\"left\"/\"center\"/\"right\"",
                "doc": "<p>The value for the <code>text-align</code> of the cell content.</p>",
                "default": "'left'"
            },
            {
                "name": "cls",
                "type": "string",
                "doc": "<p>An arbitrary CSS class to add to the cell's outermost element.</p>",
                "default": null
            },
            {
                "name": "column",
                "type": "ext.grid.column.column",
                "doc": "<p>The grid column that created this cell.</p>",
                "default": null
            },
            {
                "name": "hidden",
                "type": "boolean",
                "doc": "<p>The hidden state of this cell (propagated from the column's hidden state).</p>",
                "default": "false"
            },
            {
                "name": "innerCls",
                "type": "string",
                "doc": "<p>An arbitrary CSS class to add to the cell's inner element (the element that\ntypically contains the cell's text).</p>",
                "default": null
            },
            {
                "name": "record",
                "type": "ext.data.model",
                "doc": "<p>The currently associated record.</p>",
                "default": null
            },
            {
                "name": "value",
                "type": "mixed",
                "doc": "<p>The value of the dataIndex field of\nthe associated record. Application code should not need to set this value.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.grid.cell.Boolean": {
        "type": "Ext.grid.cell.Boolean",
        "doc": "<p>This class displays a boolean value in a grid cell. This cell type\nis typically used by specifying Ext.grid.column.Boolean column type.</p>",
        "configs": [
            {
                "name": "falseText",
                "type": "string",
                "doc": "<p>The string to display when the value is falsey (but not undefined).</p>",
                "default": "'False'"
            },
            {
                "name": "trueText",
                "type": "string",
                "doc": "<p>The string to display when the value is not falsey.</p>",
                "default": "'True'"
            },
            {
                "name": "undefinedText",
                "type": "string",
                "doc": "<p>The string to display when the column value is <code>undefined</code>.</p>",
                "default": "''"
            }
        ],
        "events": []
    },
    "Ext.grid.cell.Cell": {
        "type": "Ext.grid.cell.Cell",
        "doc": "<p>This is the default cell class for grid cells. Use this class if\nyou use the Ext.grid.column.Column.renderer or Ext.grid.column.Column.tpl\nconfigs for a column.</p>",
        "configs": [],
        "events": []
    },
    "Ext.grid.cell.Date": {
        "type": "Ext.grid.cell.Date",
        "doc": "<p>This class displays a date value in a grid cell. This cell type\nis typically used by specifying Ext.grid.column.Date column type.</p>",
        "configs": [
            {
                "name": "format",
                "type": "string",
                "doc": "<p>A format string as used by Ext.Date.format to format values for this\ncolumn.</p>",
                "default": "''"
            }
        ],
        "events": []
    },
    "Ext.grid.cell.Number": {
        "type": "Ext.grid.cell.Number",
        "doc": "<p>This class displays a numeric value in a grid cell. This cell type\nis typically used by specifying Ext.grid.column.Number column type.</p>",
        "configs": [
            {
                "name": "format",
                "type": "string",
                "doc": "<p>A format string as used by Ext.util.Format.number to format values for\nthis column.</p>",
                "default": "'0,000.00'"
            }
        ],
        "events": []
    },
    "Ext.grid.cell.Text": {
        "type": "Ext.grid.cell.Text",
        "doc": "<p>This is the base class for grid cells that contain only text.</p>",
        "configs": [
            {
                "name": "encodeHtml",
                "type": "boolean",
                "doc": "<p>Specify <code>false</code> to write HTML directly to the cell. Be aware that doing this\ncan expose your application to security issues if that content is not known to\nbe safe. User input can contain malicious content such as <code>script</code> tags and\nshould be scrubbed before directly rendering that HTML.</p>",
                "default": "true"
            },
            {
                "name": "rawValue",
                "type": "string",
                "doc": "<p>The text value of the cell. This value will be written to the cell differently\nbased on the encodeHtml config. This config is automatically set as a\nresult of setting the value config and is rarely set directly. This is\na separate config to avoid writting the same formatted result to the DOM.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.grid.cell.Widget": {
        "type": "Ext.grid.cell.Widget",
        "doc": "<p>This class is used for grid cells that contain a child\nExt.Component or Ext.Widget. This cell type is typically used by\nspecifying Ext.grid.column.Widget column type.</p>",
        "configs": [
            {
                "name": "widget",
                "type": "object",
                "doc": "<p>The config object for a Ext.Component or Ext.Widget.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.grid.column.Boolean": {
        "type": "Ext.grid.column.Boolean",
        "doc": "<p>A Column definition class which renders boolean data fields.  See the xtype\nconfig option of Ext.grid.column.Column for more details.</p>",
        "configs": [
            {
                "name": "cell",
                "type": "object",
                "doc": "<p>The config object used to create cells for this column.\nBy default, cells use the gridcell <code>xtype</code>. To create\na different type of cell, simply provide this config and the desired <code>xtype</code>.</p>",
                "default": "{xtype: 'booleancell'}"
            },
            {
                "name": "defaultEditor",
                "type": "object/ext.field.field",
                "doc": "<p>An optional config object that should not really be modified. This is used to create\na default editor used by the Editable plugin when no\neditor is specified.</p>",
                "default": "{xtype: 'checkboxfield'}"
            },
            {
                "name": "falseText",
                "type": "string",
                "doc": "<p>The string returned by the renderer when the column value is falsey (but not undefined).</p>",
                "default": null
            },
            {
                "name": "trueText",
                "type": "string",
                "doc": "<p>The string returned by the renderer when the column value is not falsey.</p>",
                "default": null
            },
            {
                "name": "undefinedText",
                "type": "string",
                "doc": "<p>The string returned by the renderer when the column value is undefined.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.grid.column.Column": {
        "type": "Ext.grid.column.Column",
        "doc": "<p>This class specifies the definition for a column inside a Ext.grid.Grid. It\nencompasses both the grid header configuration as well as displaying data within the\ngrid itself.</p>",
        "configs": [
            {
                "name": "align",
                "type": "string",
                "doc": "<p>Sets the alignment of the header and rendered columns.\nPossible values are: <code>'left'</code>, <code>'center'</code>, and <code>'right'</code>.</p>",
                "default": "'left'"
            },
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to\nother elements within this component. To add specific styling for sub-classes, use the cls config.</p>",
                "default": "Ext.baseCSSPrefix + 'grid-column'"
            },
            {
                "name": "cell",
                "type": "object",
                "doc": "<p>The config object used to create cells for this column.\nBy default, cells use the gridcell <code>xtype</code>. To create\na different type of cell, simply provide this config and the desired <code>xtype</code>.</p>",
                "default": "{xtype: 'gridcell'}"
            },
            {
                "name": "computedWidth",
                "type": "number",
                "doc": "<p>The computed width for this column, may come from either\nwidth or flex.</p>",
                "default": null
            },
            {
                "name": "dataIndex",
                "type": "string",
                "doc": "<p>The name of the field in the grid's Ext.data.Store's Ext.data.Model definition from\nwhich to draw the column's value. <strong>Required.</strong></p>",
                "default": null
            },
            {
                "name": "defaultEditor",
                "type": "object/ext.field.field",
                "doc": "<p>An optional config object that should not really be modified. This is used to create\na default editor used by the Editable plugin when no\neditor is specified.</p>",
                "default": "{xtype: 'textfield', required: true}"
            },
            {
                "name": "editable",
                "type": "boolean",
                "doc": "<p>Set this to true to make this column editable.\nOnly applicable if the grid is using an Editable plugin.</p>",
                "default": "false"
            },
            {
                "name": "editor",
                "type": "object/string",
                "doc": "<p>An optional xtype or config object for a Field to use for editing.\nOnly applicable if the grid is using an Editable plugin.\nNote also that editable has to be set to true if you want to make this column editable.\nIf this configuration is not set, and editable is set to true, the defaultEditor is used.</p>",
                "default": null
            },
            {
                "name": "groupable",
                "type": "boolean",
                "doc": "<p>If the grid is grouped, and uses a\nViewOptions plugin this option may be used to\ndisable the option to group by this column. By default, the group option is enabled.</p>",
                "default": "true"
            },
            {
                "name": "hideable",
                "type": "boolean",
                "doc": "<p>False to prevent the user from hiding this column.\nTODO: Not implemented yet</p>",
                "default": "true"
            },
            {
                "name": "ignore",
                "type": "boolean",
                "doc": "<p>This configuration should be left alone in most cases. This is used to prevent certain columns\n(like the MultiSelection plugin column) to show up in plugins (like the Ext.grid.plugin.ViewOptions plugin).</p>",
                "default": "false"
            },
            {
                "name": "minWidth",
                "type": "number/string",
                "doc": "<p>The minimum width of this Component; must be a valid CSS length value, e.g: <code>300</code>, <code>100px</code>, <code>30%</code>, etc.\nIf set to <code>auto</code>, it will set the width to <code>null</code> meaning it will have its own natural size.</p>",
                "default": "40"
            },
            {
                "name": "renderer",
                "type": "function/string",
                "doc": "<p>A renderer is a method which can be used to transform data (value, appearance, etc.)\nbefore it is rendered.</p>",
                "default": "false"
            },
            {
                "name": "resizable",
                "type": "boolean",
                "doc": "<p>False to prevent the column from being resizable.\nNote that this configuration only works when the ColumnResizing plugin\nis enabled on the Grid.</p>",
                "default": "true"
            },
            {
                "name": "scope",
                "type": "object",
                "doc": "<p>The scope to use when calling the renderer function.</p>",
                "default": null
            },
            {
                "name": "sortDirection",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "sortable",
                "type": "boolean",
                "doc": "<p>False to disable sorting of this column. Whether local/remote sorting is used is specified in\n<code>Ext.data.Store.remoteSort</code>.</p>",
                "default": "true"
            },
            {
                "name": "sortedCls",
                "type": "string",
                "doc": "\n",
                "default": "Ext.baseCSSPrefix + 'column-sorted'"
            },
            {
                "name": "summaryRenderer",
                "type": "string/function",
                "doc": "<p>This summaryRenderer is called before displaying a value in the SummaryRow. The\nfunction is optional, if not specified the default calculated value is shown. The\nsummaryRenderer is called with:</p>",
                "default": null
            },
            {
                "name": "summaryType",
                "type": "string/function",
                "doc": "<p>This configuration specifies the type of summary. There are several built in\nsummary types. These call underlying methods on the store:</p>",
                "default": null
            },
            {
                "name": "text",
                "type": "string",
                "doc": "<p>The header text to be used as innerHTML (html tags are accepted) to display in the Grid.\n<strong>Note</strong>: to have a clickable header with no text displayed you can use the default of <code>&amp;#160;</code> aka <code>&amp;nbsp;</code>.</p>",
                "default": "'&nbsp;'"
            },
            {
                "name": "tpl",
                "type": "string/string[]/ext.xtemplate",
                "doc": "<p>An XTemplate, or an XTemplate <em>definition string</em> to use\nto process a records data to produce a cell's rendered\nvalue.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.grid.column.Date": {
        "type": "Ext.grid.column.Date",
        "doc": "<p>A Column definition class which renders a passed date according to the default locale, or a configured\nformat.</p>",
        "configs": [
            {
                "name": "cell",
                "type": "object",
                "doc": "<p>The config object used to create cells for this column.\nBy default, cells use the gridcell <code>xtype</code>. To create\na different type of cell, simply provide this config and the desired <code>xtype</code>.</p>",
                "default": "{xtype: 'datecell'}"
            },
            {
                "name": "format",
                "type": "string",
                "doc": "<p>A format string as used by Ext.Date.format to format values for this\ncolumn.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.grid.column.Number": {
        "type": "Ext.grid.column.Number",
        "doc": "<p>A Column definition class which renders a numeric data field according to a format string.</p>",
        "configs": [
            {
                "name": "cell",
                "type": "object",
                "doc": "<p>The config object used to create cells for this column.\nBy default, cells use the gridcell <code>xtype</code>. To create\na different type of cell, simply provide this config and the desired <code>xtype</code>.</p>",
                "default": "{xtype: 'numbercell'}"
            },
            {
                "name": "defaultEditor",
                "type": "object/ext.field.field",
                "doc": "<p>An optional config object that should not really be modified. This is used to create\na default editor used by the Editable plugin when no\neditor is specified.</p>",
                "default": "{xtype: 'numberfield'}"
            },
            {
                "name": "format",
                "type": "string",
                "doc": "<p>A format string as used by Ext.util.Format.number to format values\nfor this column.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.grid.Grid": {
        "type": "Ext.grid.Grid",
        "doc": "<p>Grids are an excellent way of showing large amounts of tabular data on the client side.\nEssentially a supercharged <code>&lt;table&gt;</code>, Grid makes it easy to fetch, sort and filter large\namounts of data.</p>",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to\nother elements within this component. To add specific styling for sub-classes, use the cls config.</p>",
                "default": "Ext.baseCSSPrefix + 'grid'"
            },
            {
                "name": "columns",
                "type": "ext.grid.column.column[]",
                "doc": "<p>An array of column definition objects which define all columns that appear in this grid.\nEach column definition provides the header text for the column, and a definition of where\nthe data for that column comes from.</p>",
                "default": null
            },
            {
                "name": "defaultType",
                "type": "string",
                "doc": "<p>The xtype used for the component based DataView. Defaults to dataitem.\nNote this is only used when useComponents is true.</p>",
                "default": "'gridrow'"
            },
            {
                "name": "headerContainer",
                "type": "object",
                "doc": "\n",
                "default": "{xtype: 'headercontainer'}"
            },
            {
                "name": "hideHeaders",
                "type": "boolean",
                "doc": "<p><code>true</code> to hide the grid column headers.</p>",
                "default": "false"
            },
            {
                "name": "itemCls",
                "type": "string",
                "doc": "<p>An additional CSS class to apply to items within the DataView.</p>",
                "default": "Ext.baseCSSPrefix + 'list-item'"
            },
            {
                "name": "scrollToTopOnRefresh",
                "type": "boolean",
                "doc": "<p>Scroll the DataView to the top when the DataView is refreshed.</p>",
                "default": "false"
            },
            {
                "name": "striped",
                "type": "boolean",
                "doc": "<p>@inherit</p>",
                "default": "true"
            },
            {
                "name": "title",
                "type": "string",
                "doc": "<p>The title that will be displayed in the TitleBar at the top of this Grid.</p>",
                "default": "''"
            },
            {
                "name": "titleBar",
                "type": "object",
                "doc": "\n",
                "default": "{xtype: 'titlebar', docked: 'top'}"
            },
            {
                "name": "variableHeights",
                "type": "boolean",
                "doc": "<p>This configuration is best left to false on a Grid for performance reasons.</p>",
                "default": "false"
            }
        ],
        "events": [
            {
                "name": "columnadd",
                "params": "this(Ext.grid.Grid) column(Ext.grid.column.Column) index(Number) eOpts(Object)",
                "doc": "<p>Fires whenever a column is added to the Grid.</p>"
            },
            {
                "name": "columnhide",
                "params": "this(Ext.grid.Grid) column(Ext.grid.column.Column) eOpts(Object)",
                "doc": "<p>Fires whenever a column is hidden in the Grid.</p>"
            },
            {
                "name": "columnmove",
                "params": "this(Ext.grid.Grid) column(Ext.grid.column.Column) fromIndex(Number) toIndex(Number) eOpts(Object)",
                "doc": "<p>Fires whenever a column is moved in the grid.</p>"
            },
            {
                "name": "columnremove",
                "params": "this(Ext.grid.Grid) column(Ext.grid.column.Column) eOpts(Object)",
                "doc": "<p>Fires whenever a column is removed from the Grid.</p>"
            },
            {
                "name": "columnresize",
                "params": "this(Ext.grid.Grid) column(Ext.grid.column.Column) width(Number) eOpts(Object)",
                "doc": "<p>Fires whenever a column is resized in the Grid.</p>"
            },
            {
                "name": "columnshow",
                "params": "this(Ext.grid.Grid) column(Ext.grid.column.Column) eOpts(Object)",
                "doc": "<p>Fires whenever a column is shown in the Grid.</p>"
            },
            {
                "name": "columnsort",
                "params": "this(Ext.grid.Grid) column(Ext.grid.column.Column) direction(String) eOpts(Object)",
                "doc": "<p>Fires whenever a column is sorted in the Grid.</p>"
            }
        ]
    },
    "Ext.grid.HeaderContainer": {
        "type": "Ext.grid.HeaderContainer",
        "doc": "<p>Description</p>",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to\nother elements within this component. To add specific styling for sub-classes, use the cls config.</p>",
                "default": "Ext.baseCSSPrefix + 'grid-header-container'"
            },
            {
                "name": "defaultType",
                "type": "string",
                "doc": "<p>The default xtype of child Components to create in this Container when a child item\nis specified as a raw configuration object, rather than as an instantiated Component.</p>",
                "default": "'column'"
            },
            {
                "name": "docked",
                "type": "string",
                "doc": "<p>The dock position of this component in its container. Can be <code>left</code>, <code>top</code>, <code>right</code> or <code>bottom</code>.</p>",
                "default": "'top'"
            },
            {
                "name": "grid",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "layout",
                "type": "object/string",
                "doc": "<p>Configuration for this Container's layout. Example:</p>",
                "default": "{type: 'hbox', align: 'stretch'}"
            },
            {
                "name": "scrollable",
                "type": "boolean/string/object",
                "doc": "<p>Configuration options to make this Component scrollable. Acceptable values are:</p>",
                "default": "{autoRefresh: null, x: false, y: false}"
            },
            {
                "name": "sortable",
                "type": "boolean",
                "doc": "<p>Set this to <code>false</code> to disable sorting via tap on all column headers</p>",
                "default": "true"
            }
        ],
        "events": []
    },
    "Ext.grid.HeaderGroup": {
        "type": "Ext.grid.HeaderGroup",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to\nother elements within this component. To add specific styling for sub-classes, use the cls config.</p>",
                "default": "Ext.baseCSSPrefix + 'grid-headergroup'"
            },
            {
                "name": "columns",
                "type": "object[]",
                "doc": "<p>The columns in this group.</p>",
                "default": null
            },
            {
                "name": "defaultType",
                "type": "string",
                "doc": "<p>The default xtype of child Components to create in this Container when a child item\nis specified as a raw configuration object, rather than as an instantiated Component.</p>",
                "default": "'column'"
            },
            {
                "name": "items",
                "type": "array/object",
                "doc": "<p>Default items to undefined here so that we get processed initially, allows\nus to check the columns config.</p>",
                "default": null
            },
            {
                "name": "layout",
                "type": "object/string",
                "doc": "<p>Configuration for this Container's layout. Example:</p>",
                "default": "{type: 'hbox', align: 'stretch'}"
            },
            {
                "name": "text",
                "type": "string",
                "doc": "<p>The header text to be used as innerHTML (html tags are accepted) to display in the Grid.</p>",
                "default": "'&nbsp;'"
            }
        ],
        "events": []
    },
    "Ext.grid.plugin.ColumnResizing": {
        "type": "Ext.grid.plugin.ColumnResizing",
        "doc": "<p>Description</p>",
        "configs": [
            {
                "name": "grid",
                "type": "object",
                "doc": "\n",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.grid.plugin.Editable": {
        "type": "Ext.grid.plugin.Editable",
        "doc": "<p>The Editable plugin injects editing at a row level for Modern Toolkit's\nGrid. Editing begins by double-tapping a row.  This can be set to any event, which we'll\ndiscuss below. The editor consists of a small floating dialog that be shown on the right\nside of your viewport.</p>",
        "configs": [
            {
                "name": "defaultFormConfig",
                "type": "object",
                "doc": "<p>Configures the default form appended to the editable panel.</p>",
                "default": "{xtype: 'formpanel', modal: true, scrollable: true, items: {xtype: 'fieldset'}}"
            },
            {
                "name": "enableDeleteButton",
                "type": "boolean",
                "doc": "<p>Creates a delete button, which allows the user to delete the selected row.</p>",
                "default": "true"
            },
            {
                "name": "formConfig",
                "type": "object",
                "doc": "<p>By changing the formConfig you can hardcode the form that gets created when editing a row.\nNote that the fields are not set on this form, so you will have to define them yourself in this config.\nIf you want to alter certain form configurations, but still have the default editor fields applied, use\nthe defaultFormConfig instead.</p>",
                "default": null
            },
            {
                "name": "grid",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "toolbarConfig",
                "type": "object",
                "doc": "<p>Configures the toolbar appended to the editable panel.</p>",
                "default": "{xtype: 'titlebar', docked: 'top', items: [{xtype: 'button', ui: 'decline', text: 'Cancel', align: 'left', action: 'cancel'}, {xtype: 'button', ui: 'confirm', text: 'Submit', align: 'right', action: 'submit'}]}"
            },
            {
                "name": "triggerEvent",
                "type": "string",
                "doc": "<p>The event used to trigger the showing of the editor form.</p>",
                "default": "'doubletap'"
            }
        ],
        "events": []
    },
    "Ext.grid.plugin.MultiSelection": {
        "type": "Ext.grid.plugin.MultiSelection",
        "doc": "<p>The MultiSelection plugin injects a multiselector for Modern Toolkit's Grid. Users may\nactivate MultiSelection by tapping the \"Select\" button in the top right corner of the header bar.</p>",
        "configs": [
            {
                "name": "cancelText",
                "type": "string",
                "doc": "<p>The text of the button used to cancel the selectionColumn.</p>",
                "default": "'Cancel'"
            },
            {
                "name": "deleteText",
                "type": "string",
                "doc": "<p>The text of the button used to delete selected rows.</p>",
                "default": "'Delete'"
            },
            {
                "name": "grid",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "selectionColumn",
                "type": "object",
                "doc": "<p>The default settings for the selection column.  You may create your\nown selectionColumn config within your plugin object in order to:</p>",
                "default": "{width: 60, xtype: 'column', cls: Ext.baseCSSPrefix + 'grid-multiselection-column', cell: {cls: Ext.baseCSSPrefix + 'grid-multiselection-cell'}, ignore: true, hidden: true}"
            },
            {
                "name": "triggerText",
                "type": "string",
                "doc": "<p>The text of the button used to display the selectionColumn.</p>",
                "default": "'Select'"
            },
            {
                "name": "useTriggerButton",
                "type": "boolean",
                "doc": "<p>Determines whether or not the trigger button is show when the grid is loaded.\nThis most commonly be set to false if you wanted to have the selectionColumn\nshown 100% of the time instead of hidden by default. You could show the selectionColumn\nby modifying its hidden value to be false.</p>",
                "default": "true"
            }
        ],
        "events": []
    },
    "Ext.grid.plugin.PagingToolbar": {
        "type": "Ext.grid.plugin.PagingToolbar",
        "configs": [
            {
                "name": "currentPage",
                "type": "number",
                "doc": "\n",
                "default": "1"
            },
            {
                "name": "grid",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "pageSize",
                "type": "number",
                "doc": "\n",
                "default": "0"
            },
            {
                "name": "toolbar",
                "type": "object",
                "doc": "\n",
                "default": "{xtype: 'toolbar', docked: 'bottom', ui: 'gray', cls: Ext.baseCSSPrefix + 'grid-pagingtoolbar', items: [{xtype: 'button', ui: 'plain', iconCls: Ext.baseCSSPrefix + 'grid-pagingtoolbar-prev', action: 'previouspage'}, {xtype: 'component', role: 'currentpage', width: 20, cls: Ext.baseCSSPrefix + 'grid-pagingtoolbar-currentpage'}, {xtype: 'component', role: 'totalpages', width: 50, tpl: '&nbsp;/ {totalPages}'}, {xtype: 'singlesliderfield', value: 1, flex: 1, minValue: 1, role: 'pageslider'}, {xtype: 'button', ui: 'plain', iconCls: Ext.baseCSSPrefix + 'grid-pagingtoolbar-next', action: 'nextpage'}]}"
            },
            {
                "name": "totalCount",
                "type": "number",
                "doc": "\n",
                "default": "0"
            },
            {
                "name": "totalPages",
                "type": "number",
                "doc": "\n",
                "default": "0"
            }
        ],
        "events": []
    },
    "Ext.grid.plugin.SummaryRow": {
        "type": "Ext.grid.plugin.SummaryRow",
        "configs": [
            {
                "name": "cls",
                "type": "string/string[]",
                "doc": "<p>The CSS class to add to this component's element, in\naddition to the baseCls. In many cases, this property will be specified\nby the derived component class. See userCls for adding additional CSS\nclasses to component instances (such as items in a Ext.Container).</p>",
                "default": "Ext.baseCSSPrefix + 'grid-summaryrow'"
            },
            {
                "name": "docked",
                "type": "string",
                "doc": "<p>The dock position of this component in its container. Can be <code>left</code>, <code>top</code>, <code>right</code> or <code>bottom</code>.</p>",
                "default": "'top'"
            },
            {
                "name": "emptyCls",
                "type": "string",
                "doc": "\n",
                "default": "Ext.baseCSSPrefix + 'grid-summaryrow-empty'"
            },
            {
                "name": "emptyText",
                "type": "string",
                "doc": "\n",
                "default": "''"
            },
            {
                "name": "grid",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "translatable",
                "type": "object",
                "doc": "\n",
                "default": "{translationMethod: 'csstransform'}"
            }
        ],
        "events": []
    },
    "Ext.grid.plugin.ViewOptions": {
        "type": "Ext.grid.plugin.ViewOptions",
        "doc": "<p>The Modern Grid's ViewOptions plugin produces a menu that slides in from the right (by default)\nwhen you drag your finger or cursor right-to-left over the grid's column headers. The\nmenu displays the column header names which represents the order of the grid's columns.\nThis allows users to easily reorder the grid's columns by reordering the rows. Items may\nbe dragged by grabbing the furthest left side of the row and moving the item vertically.</p>",
        "configs": [
            {
                "name": "columnList",
                "type": "object",
                "doc": "<p>The column's configuration</p>",
                "default": "{xtype: 'nestedlist', title: 'Column', listConfig: {plugins: [{type: 'sortablelist', handleSelector: '.' + Ext.baseCSSPrefix + 'column-options-sortablehandle'}], mode: 'MULTI', infinite: true, itemTpl: ['<div class=\"' + Ext.baseCSSPrefix + 'column-options-itemwrap<tpl if=\"hidden\"> {hiddenCls}</tpl>', '<tpl if=\"grouped\"> {groupedCls}</tpl>\">', '<div class=\"' + Ext.baseCSSPrefix + 'column-options-sortablehandle\"></div>', '<tpl if=\"header\">', '<div class=\"' + Ext.baseCSSPrefix + 'column-options-folder\"></div>', '<tpl else>', '<div class=\"' + Ext.baseCSSPrefix + 'column-options-leaf\"></div>', '</tpl>', '<div class=\"' + Ext.baseCSSPrefix + 'column-options-text\">{text}</div>', '<tpl if=\"groupable && dataIndex\">', '<div class=\"' + Ext.baseCSSPrefix + 'column-options-groupindicator\"></div>', '</tpl>', '<div class=\"' + Ext.baseCSSPrefix + 'column-options-visibleindicator\"></div>', '</div>'], triggerEvent: null, bufferSize: 1, minimumBufferSize: 1}, store: {type: 'tree', fields: ['id', 'text', 'dataIndex', 'header', 'hidden', 'hiddenCls', 'grouped', 'groupedCls', 'groupable'], root: {text: 'Columns'}}, clearSelectionOnListChange: false}"
            },
            {
                "name": "grid",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "groupIndicatorSelector",
                "type": "string",
                "doc": "<p>The CSS class responsible for displaying the grouping indicator.</p>",
                "default": "'.' + Ext.baseCSSPrefix + 'column-options-groupindicator'"
            },
            {
                "name": "sheet",
                "type": "object",
                "doc": "<p>The configuration of the menu</p>",
                "default": "{baseCls: Ext.baseCSSPrefix + 'grid-viewoptions', xtype: 'sheet', items: [{docked: 'top', xtype: 'titlebar', title: 'Customize', items: {xtype: 'button', text: 'Done', ui: 'action', align: 'right', role: 'donebutton'}}], hideOnMaskTap: false, enter: 'right', exit: 'right', modal: false, translatable: {translationMethod: 'csstransform'}, right: 0, layout: 'fit', stretchY: true}"
            },
            {
                "name": "sheetWidth",
                "type": "number",
                "doc": "<p>The width of the menu</p>",
                "default": "320"
            },
            {
                "name": "visibleIndicatorSelector",
                "type": "string",
                "doc": "<p>The CSS class responsible for displaying the visibility indicator.</p>",
                "default": "'.' + Ext.baseCSSPrefix + 'column-options-visibleindicator'"
            }
        ],
        "events": []
    },
    "Ext.grid.Row": {
        "type": "Ext.grid.Row",
        "doc": "<p>This class is created by a grid to manage each record. Rows act\nas containers for cells.</p>",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to\nother elements within this component. To add specific styling for sub-classes, use the cls config.</p>",
                "default": "Ext.baseCSSPrefix + 'grid-row'"
            },
            {
                "name": "grid",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "header",
                "type": "object",
                "doc": "\n",
                "default": "{xtype: 'component', cls: 'x-grid-header', html: ' '}"
            }
        ],
        "events": []
    },
    "Ext.Img": {
        "type": "Ext.Img",
        "doc": "<p>This is a simple way to add an image of any size to your application and have it participate in the layout system\nlike any other component. This component typically takes between 1 and 3 configurations - a src, and\noptionally a height and a width:</p>",
        "configs": [
            {
                "name": "backgroundCls",
                "type": "string",
                "doc": "<p>The CSS class to be used when mode is set to 'background'</p>",
                "default": "Ext.baseCSSPrefix + 'img-background'"
            },
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to\nother elements within this component. To add specific styling for sub-classes, use the cls config.</p>",
                "default": "Ext.baseCSSPrefix + 'img'"
            },
            {
                "name": "imageCls",
                "type": "string",
                "doc": "<p>The CSS class to be used when mode is not set to 'background'</p>",
                "default": "Ext.baseCSSPrefix + 'img-image'"
            },
            {
                "name": "mode",
                "type": "string",
                "doc": "<p>If set to 'background', uses a background-image CSS property instead of an\n<code>&lt;img&gt;</code> tag to display the image.</p>",
                "default": "'background'"
            },
            {
                "name": "src",
                "type": "string",
                "doc": "<p>The source of this image. See Ext.resolveResource for\ndetails on locating application resources.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "error",
                "params": "this(Ext.Img) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires if an error occured when trying to load the image</p>"
            },
            {
                "name": "load",
                "params": "this(Ext.Img) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when the image is loaded</p>"
            },
            {
                "name": "tap",
                "params": "this(Ext.Img) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires whenever the component is tapped</p>"
            }
        ]
    },
    "Ext.Inventory": {
        "type": "Ext.Inventory",
        "configs": [],
        "events": []
    },
    "Ext.JSON": {
        "type": "Ext.JSON",
        "doc": "<p>Modified version of Douglas Crockford's JSON.js that doesn't\nmess with the Object prototype.</p>",
        "configs": [],
        "events": []
    },
    "Ext.Label": {
        "type": "Ext.Label",
        "doc": "<p>A simple label component which allows you to insert content using html configuration.</p>",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to\nother elements within this component. To add specific styling for sub-classes, use the cls config.</p>",
                "default": "Ext.baseCSSPrefix + 'label'"
            },
            {
                "name": "html",
                "type": "string",
                "doc": "<p>The label of this component.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.layout.Abstract": {
        "type": "Ext.layout.Abstract",
        "configs": [],
        "events": []
    },
    "Ext.layout.Box": {
        "type": "Ext.layout.Box",
        "doc": "<p>Box is a superclass for the two box layouts:</p>",
        "configs": [
            {
                "name": "align",
                "type": "string",
                "doc": "<p>Controls how the child items of the container are aligned. Acceptable configuration values for this property are:</p>",
                "default": "'start'"
            },
            {
                "name": "orient",
                "type": "string",
                "doc": "\n",
                "default": "'horizontal'"
            },
            {
                "name": "pack",
                "type": "string",
                "doc": "<p>Controls how the child items of the container are packed together. Acceptable configuration values\nfor this property are:</p>",
                "default": "'start'"
            }
        ],
        "events": []
    },
    "Ext.layout.Card": {
        "type": "Ext.layout.Card",
        "doc": "<p>Sometimes you want to show several screens worth of information but you've only got a small screen to work with.\nTabPanels and Carousels both enable you to see one screen of many at a time, and underneath they both use a Card\nLayout.</p>",
        "configs": [],
        "events": [
            {
                "name": "activeitemchange",
                "params": "this(Ext.layout.Card) newActiveItem(Mixed) oldActiveItem(Mixed) eOpts(Object)",
                "doc": "<p>Fires when an card is made active</p>"
            }
        ]
    },
    "Ext.layout.Default": {
        "type": "Ext.layout.Default",
        "configs": [
            {
                "name": "animation",
                "type": "ext.fx.layout.card",
                "doc": "<p>Layout animation configuration\nControls how layout transitions are animated.  Currently only available for\nCard Layouts.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.layout.Fit": {
        "type": "Ext.layout.Fit",
        "configs": [],
        "events": []
    },
    "Ext.layout.FlexBox": {
        "type": "Ext.layout.FlexBox",
        "doc": "<p>AbstractBox is a superclass for the two box layouts:</p>",
        "configs": [
            {
                "name": "align",
                "type": "string",
                "doc": "<p>Controls how the child items of the container are aligned. Acceptable configuration values for this property are:</p>",
                "default": "'stretch'"
            }
        ],
        "events": []
    },
    "Ext.layout.Float": {
        "type": "Ext.layout.Float",
        "configs": [
            {
                "name": "direction",
                "type": "string",
                "doc": "\n",
                "default": "'left'"
            }
        ],
        "events": []
    },
    "Ext.layout.HBox": {
        "type": "Ext.layout.HBox",
        "doc": "<p>The HBox (short for horizontal box) layout makes it easy to position items horizontally in a\nContainer. It can size items based on a fixed width or a fraction of the total width\navailable.</p>",
        "configs": [],
        "events": []
    },
    "Ext.layout.VBox": {
        "type": "Ext.layout.VBox",
        "doc": "<p>The VBox (short for vertical box) layout makes it easy to position items horizontally in a\nContainer. It can size items based on a fixed height or a fraction of the total height\navailable.</p>",
        "configs": [
            {
                "name": "orient",
                "type": "string",
                "doc": "\n",
                "default": "'vertical'"
            }
        ],
        "events": []
    },
    "Ext.layout.wrapper.BoxDock": {
        "type": "Ext.layout.wrapper.BoxDock",
        "configs": [
            {
                "name": "bodyElement",
                "type": "object",
                "doc": "\n",
                "default": "{className: Ext.baseCSSPrefix + 'dock-body'}"
            },
            {
                "name": "container",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "direction",
                "type": "string",
                "doc": "\n",
                "default": "'horizontal'"
            },
            {
                "name": "element",
                "type": "object",
                "doc": "\n",
                "default": "{className: Ext.baseCSSPrefix + 'dock'}"
            },
            {
                "name": "innerWrapper",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "sizeState",
                "type": "boolean",
                "doc": "\n",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.layout.wrapper.Dock": {
        "type": "Ext.layout.wrapper.Dock",
        "configs": [
            {
                "name": "bodyElement",
                "type": "object",
                "doc": "\n",
                "default": "{className: 'x-dock-body'}"
            },
            {
                "name": "container",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "direction",
                "type": "string",
                "doc": "\n",
                "default": "'horizontal'"
            },
            {
                "name": "element",
                "type": "object",
                "doc": "\n",
                "default": "{className: 'x-dock'}"
            },
            {
                "name": "innerWrapper",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "sizeState",
                "type": "boolean",
                "doc": "\n",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.layout.wrapper.Inner": {
        "type": "Ext.layout.wrapper.Inner",
        "configs": [
            {
                "name": "container",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "sizeState",
                "type": "object",
                "doc": "\n",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.list.AbstractTreeItem": {
        "type": "Ext.list.AbstractTreeItem",
        "doc": "<p>The base class for all items in the <code>treelist</code>.</p>",
        "configs": [
            {
                "name": "expandable",
                "type": "boolean",
                "doc": "<p><code>true</code> if this item is expandable. This value is taken from\nthe underlying node.</p>",
                "default": "false"
            },
            {
                "name": "expanded",
                "type": "boolean",
                "doc": "<p><code>true</code> if this item is expanded. This value is taken from\nthe underlying node.</p>",
                "default": "false"
            },
            {
                "name": "floated",
                "type": "boolean",
                "doc": "<p><code>true</code> if this item is current floated. This mode applies when the owning\n<code>treelist</code> is in <code>micro</code>\nmode and the sub-tree under this item should be presented as a floating\nelement.</p>",
                "default": "false"
            },
            {
                "name": "iconCls",
                "type": "string",
                "doc": "<p>One or more space separated CSS classes to be applied to the icon element.\nThe CSS rule(s) applied should specify a background image to be used as the\nicon.</p>",
                "default": "''"
            },
            {
                "name": "iconClsProperty",
                "type": "string",
                "doc": "<p>The property from the node to map for the iconCls config.</p>",
                "default": "'iconCls'"
            },
            {
                "name": "indent",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "leaf",
                "type": "boolean",
                "doc": "<p><code>true</code> if this item is a leaf. This value is taken from\nthe underlying node.</p>",
                "default": "true"
            },
            {
                "name": "loading",
                "type": "boolean",
                "doc": "<p><code>true</code> if this item is currently loading data. This value is taken from\nthe underlying node.</p>",
                "default": "false"
            },
            {
                "name": "node",
                "type": "ext.data.treemodel",
                "doc": "<p>The backing node for this item.</p>",
                "default": null
            },
            {
                "name": "over",
                "type": "number",
                "doc": "<p>One of three possible values:</p>",
                "default": null
            },
            {
                "name": "owner",
                "type": "ext.list.tree",
                "doc": "<p>The owning list for this container.</p>",
                "default": null
            },
            {
                "name": "parentItem",
                "type": "ext.list.abstracttreeitem",
                "doc": "<p>The parent item for this item.</p>",
                "default": null
            },
            {
                "name": "selected",
                "type": "boolean",
                "doc": "<p><code>true</code> if this is the selected item in the tree.</p>",
                "default": "false"
            },
            {
                "name": "selectedParent",
                "type": "boolean",
                "doc": "<p><code>true</code> if this item contains the selected item in the tree.</p>",
                "default": "false"
            },
            {
                "name": "text",
                "type": "string",
                "doc": "<p>The text for this item. This value is taken from\nthe underlying node.</p>",
                "default": "{lazy: true, $value: ''}"
            },
            {
                "name": "textProperty",
                "type": "string",
                "doc": "<p>The property from the node to map for the text config.</p>",
                "default": "'text'"
            }
        ],
        "events": [
            {
                "name": "itemclick",
                "params": "sender(Ext.list.Tree) info(Object) eOpts(Object)",
                "doc": "\n"
            }
        ]
    },
    "Ext.list.RootTreeItem": {
        "type": "Ext.list.RootTreeItem",
        "doc": "<p>This class implements the top-level node in a <code>treelist</code>. Unlike\nother nodes, this item is only a container for other items. It does not correspond to\na data record.</p>",
        "configs": [],
        "events": []
    },
    "Ext.list.Tree": {
        "type": "Ext.list.Tree",
        "doc": "<p>A lightweight component to display data in a simple tree structure.</p>",
        "configs": [
            {
                "name": "animation",
                "type": "object",
                "doc": "\n",
                "default": "{duration: 500, easing: 'ease'}"
            },
            {
                "name": "defaults",
                "type": "object",
                "doc": "<p>The default configuration for the widgets created for tree items.</p>",
                "default": "{xtype: 'treelistitem'}"
            },
            {
                "name": "expanderFirst",
                "type": "boolean",
                "doc": "\n",
                "default": "true"
            },
            {
                "name": "expanderOnly",
                "type": "boolean",
                "doc": "<p><code>true</code> to expand only on the click of the expander element. Setting this to\n<code>false</code> will allow expansion on click of any part of the element.</p>",
                "default": "true"
            },
            {
                "name": "highlightPath",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "iconSize",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "indent",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "micro",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "overItem",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "publishes",
                "type": "string/string[]/object",
                "doc": "<p>One or more names of config properties that this component should publish\nto its ViewModel. Generally speaking, only properties defined in a class config\nblock (including ancestor config blocks and mixins) are eligible for publishing\nto the viewModel. Some components override this and publish their most useful\nconfigs by default.</p>",
                "default": "{selection: 1}"
            },
            {
                "name": "selectOnExpander",
                "type": "boolean",
                "doc": "<p><code>true</code> to select the node when clicking the expander.</p>",
                "default": "false"
            },
            {
                "name": "selection",
                "type": "ext.data.treemodel",
                "doc": "<p>The current selected node.</p>",
                "default": null
            },
            {
                "name": "singleExpand",
                "type": "boolean",
                "doc": "<p><code>true</code> if only 1 node per branch may be expanded.</p>",
                "default": "false"
            },
            {
                "name": "store",
                "type": "string/object/ext.data.treestore",
                "doc": "<p>The data source to which this component is bound.</p>",
                "default": null
            },
            {
                "name": "twoWayBindable",
                "type": "string/string[]/object",
                "doc": "<p>This object holds a map of <code>config</code> properties that will update their binding\nas they are modified. For example, <code>value</code> is a key added by form fields. The\nform of this config is the same as <code>publishes</code>.</p>",
                "default": "{selection: 1}"
            },
            {
                "name": "ui",
                "type": "object",
                "doc": "\n",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.list.TreeItem": {
        "type": "Ext.list.TreeItem",
        "doc": "<p>The default implementation of the class used for <code>Ext.list.Tree</code>.</p>",
        "configs": [
            {
                "name": "rowCls",
                "type": "string",
                "doc": "<p>One or more CSS classes to add to the tree item's logical \"row\" element. This\nelement fills from left-to-right of the line.</p>",
                "default": null
            },
            {
                "name": "rowClsProperty",
                "type": "string",
                "doc": "<p>The name of the associated record's field to map to the rowCls config.</p>",
                "default": "\"rowCls\""
            }
        ],
        "events": []
    },
    "Ext.Loader": {
        "type": "Ext.Loader",
        "doc": "<p>This class provides dynamic loading support for JavaScript classes. Application code\ndoes not typically need to call <code>Ext.Loader</code> except perhaps to configure path mappings\nwhen not using Sencha Cmd.</p>",
        "configs": [
            {
                "name": "disableCaching",
                "type": "boolean",
                "doc": "<p>Appends current timestamp to script files to prevent caching.</p>",
                "default": "true"
            },
            {
                "name": "disableCachingParam",
                "type": "string",
                "doc": "<p>The get parameter name for the cache buster's timestamp.</p>",
                "default": "\"_dc\""
            },
            {
                "name": "enabled",
                "type": "boolean",
                "doc": "<p>Whether or not to enable the dynamic dependency loading feature.</p>",
                "default": "true"
            },
            {
                "name": "paths",
                "type": "object",
                "doc": "<p>The mapping from namespaces to file paths</p>",
                "default": null
            },
            {
                "name": "preserveScripts",
                "type": "boolean",
                "doc": "<p><code>false</code> to remove asynchronously loaded scripts, <code>true</code> to retain script\nelement for browser debugger compatibility and improved load performance.</p>",
                "default": "true"
            },
            {
                "name": "scriptChainDelay",
                "type": "boolean",
                "doc": "<p>millisecond delay between asynchronous script injection (prevents stack\noverflow on some user agents) 'false' disables delay but potentially\nincreases stack load.</p>",
                "default": "false"
            },
            {
                "name": "scriptCharset",
                "type": "string",
                "doc": "<p>Optional charset to specify encoding of dynamic script content.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.LoadMask": {
        "type": "Ext.LoadMask",
        "doc": "<p>A simple class used to mask any Ext.Container.</p>",
        "configs": [
            {
                "name": "cls",
                "type": "string",
                "doc": "<p>The CSS Class for this component</p>",
                "default": "Ext.baseCSSPrefix + 'loading-mask'"
            },
            {
                "name": "indicator",
                "type": "boolean",
                "doc": "<p>True to show the loading indicator on this Ext.LoadMask.</p>",
                "default": "true"
            },
            {
                "name": "message",
                "type": "string",
                "doc": "<p>The text to display in a centered loading message box.</p>",
                "default": "'Loading...'"
            },
            {
                "name": "messageCls",
                "type": "string",
                "doc": "<p>The CSS class to apply to the loading message element.</p>",
                "default": "Ext.baseCSSPrefix + 'mask-message'"
            }
        ],
        "events": []
    },
    "Ext.Map": {
        "type": "Ext.Map",
        "doc": "<p>Wraps a Google Map in an Ext.Component using the Google Maps API.</p>",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to the Map's element</p>",
                "default": "Ext.baseCSSPrefix + 'map'"
            },
            {
                "name": "geo",
                "type": "ext.util.geolocation",
                "doc": "<p>Geolocation provider for the map.</p>",
                "default": null
            },
            {
                "name": "map",
                "type": "google.maps.map",
                "doc": "<p>The wrapped map.</p>",
                "default": null
            },
            {
                "name": "mapListeners",
                "type": "object",
                "doc": "<p>Listeners for any Google Maps events specified by the Google Documentation:\nhttp://code.google.com/apis/maps/documentation/v3/reference.html</p>",
                "default": null
            },
            {
                "name": "mapOptions",
                "type": "object",
                "doc": "<p>MapOptions as specified by the Google Documentation:\nhttp://code.google.com/apis/maps/documentation/v3/reference.html</p>",
                "default": "{}"
            },
            {
                "name": "useCurrentLocation",
                "type": "boolean/ext.util.geolocation",
                "doc": "<p>Pass in true to center the map based on the geolocation coordinates or pass a\nGeoLocation config to have more control over your GeoLocation options</p>",
                "default": "false"
            }
        ],
        "events": [
            {
                "name": "centerchange",
                "params": "this(Ext.Map) map(google.maps.Map) center(google.maps.LatLng) eOpts(Object)",
                "doc": "<p>Fired when map is panned around.</p>"
            },
            {
                "name": "maprender",
                "params": "this(Ext.Map) map(google.maps.Map) eOpts(Object)",
                "doc": "<p>Fired when Map initially rendered.</p>"
            },
            {
                "name": "typechange",
                "params": "this(Ext.Map) map(google.maps.Map) mapType(Number) eOpts(Object)",
                "doc": "<p>Fired when display type of the map changes.</p>"
            },
            {
                "name": "zoomchange",
                "params": "this(Ext.Map) map(google.maps.Map) zoomLevel(Number) eOpts(Object)",
                "doc": "<p>Fired when map is zoomed.</p>"
            }
        ]
    },
    "Ext.Mask": {
        "type": "Ext.Mask",
        "doc": "<p>A simple class used to mask any Ext.Container.</p>",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to\nother elements within this component. To add specific styling for sub-classes, use the cls config.</p>",
                "default": "Ext.baseCSSPrefix + 'mask'"
            },
            {
                "name": "transparent",
                "type": "boolean",
                "doc": "<p>True to make this mask transparent.</p>",
                "default": "false"
            }
        ],
        "events": [
            {
                "name": "tap",
                "params": "this(Ext.Mask) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>A tap event fired when a user taps on this mask</p>"
            }
        ]
    },
    "Ext.Media": {
        "type": "Ext.Media",
        "doc": "<p>Provides a base class for audio/visual controls. Should not be used directly.</p>",
        "configs": [
            {
                "name": "autoPause",
                "type": "boolean",
                "doc": "<p>Will automatically pause the media when the container is deactivated.</p>",
                "default": "true"
            },
            {
                "name": "autoResume",
                "type": "boolean",
                "doc": "<p>Will automatically start playing the media when the container is activated.</p>",
                "default": "false"
            },
            {
                "name": "enableControls",
                "type": "boolean",
                "doc": "<p>Set this to <code>false</code> to turn off the native media controls.\nDefaults to <code>false</code> when you are on Android, as it doesn't support controls.</p>",
                "default": null
            },
            {
                "name": "loop",
                "type": "boolean",
                "doc": "<p>Will loop the media forever.</p>",
                "default": "false"
            },
            {
                "name": "media",
                "type": "ext.element",
                "doc": "<p>A reference to the underlying audio/video element.</p>",
                "default": null
            },
            {
                "name": "muted",
                "type": "boolean",
                "doc": "<p>Whether or not the media is muted. This will also set the volume to zero.</p>",
                "default": "false"
            },
            {
                "name": "preload",
                "type": "boolean",
                "doc": "<p>Will begin preloading the media immediately.</p>",
                "default": "true"
            },
            {
                "name": "url",
                "type": "string",
                "doc": "<p>Location of the media to play.</p>",
                "default": "''"
            },
            {
                "name": "volume",
                "type": "number",
                "doc": "<p>The volume of the media from 0.0 to 1.0.</p>",
                "default": "1"
            }
        ],
        "events": [
            {
                "name": "ended",
                "params": "this(Ext.Media) time(Number) eOpts(Object)",
                "doc": "<p>Fires whenever the media playback has ended.</p>"
            },
            {
                "name": "mutedchange",
                "params": "this(Ext.Media) muted(Boolean) eOpts(Object)",
                "doc": "<p>Fires whenever the muted status is changed.\nThe volumechange event will also fire after the <code>mutedchange</code> event fires.</p>"
            },
            {
                "name": "pause",
                "params": "this(Ext.Media) time(Number) eOpts(Object)",
                "doc": "<p>Fires whenever the media is paused.</p>"
            },
            {
                "name": "play",
                "params": "this(Ext.Media) eOpts(Object)",
                "doc": "<p>Fires whenever the media is played.</p>"
            },
            {
                "name": "stop",
                "params": "this(Ext.Media) eOpts(Object)",
                "doc": "<p>Fires whenever the media is stopped.\nThe <code>pause</code> event will also fire after the <code>stop</code> event if the media is currently playing.\nThe <code>timeupdate</code> event will also fire after the <code>stop</code> event regardless of playing status.</p>"
            },
            {
                "name": "timeupdate",
                "params": "this(Ext.Media) time(Number) eOpts(Object)",
                "doc": "<p>Fires when the media is playing every 15 to 250ms.</p>"
            },
            {
                "name": "volumechange",
                "params": "this(Ext.Media) volume(Number) eOpts(Object)",
                "doc": "<p>Fires whenever the volume is changed.</p>"
            }
        ]
    },
    "Ext.Menu": {
        "type": "Ext.Menu",
        "doc": "<p>Ext.Menu's are used with Ext.Viewport.setMenu. A menu can be linked with any side of the screen (top, left, bottom or right)\n and will simply describe the contents of your menu. To use this menu you will call various menu related functions on the Ext.Viewport\nsuch as Ext.Viewport.showMenu, Ext.Viewport.hideMenu, Ext.Viewport.toggleMenu, Ext.Viewport.hideOtherMenus,\nor Ext.Viewport.hideAllMenus.</p>",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to\nother elements within this component. To add specific styling for sub-classes, use the cls config.</p>",
                "default": "Ext.baseCSSPrefix + 'menu'"
            },
            {
                "name": "bottom",
                "type": "number/string",
                "doc": "<p>The absolute bottom position of this Component; must be a valid CSS length value, e.g: <code>300</code>, <code>100px</code>, <code>30%</code>, etc.\nExplicitly setting this value will make this Component become 'floating', which means its layout will no\nlonger be affected by the Container that it resides in.</p>",
                "default": "0"
            },
            {
                "name": "defaultType",
                "type": "string",
                "doc": "<p>The default xtype of child Components to create in this Container when a child item\nis specified as a raw configuration object, rather than as an instantiated Component.</p>",
                "default": "'button'"
            },
            {
                "name": "height",
                "type": "number/string",
                "doc": "<p>The height of this Component; must be a valid CSS length value, e.g: <code>300</code>, <code>100px</code>, <code>30%</code>, etc.\nBy default, if this is not explicitly set, this Component's element will simply have its own natural size.\nIf set to <code>auto</code>, it will set the width to <code>null</code> meaning it will have its own natural size.</p>",
                "default": "'auto'"
            },
            {
                "name": "left",
                "type": "number/string",
                "doc": "<p>The absolute left position of this Component; must be a valid CSS length value, e.g: <code>300</code>, <code>100px</code>, <code>30%</code>, etc.\nExplicitly setting this value will make this Component become 'floating', which means its layout will no\nlonger be affected by the Container that it resides in.</p>",
                "default": "0"
            },
            {
                "name": "right",
                "type": "number/string",
                "doc": "<p>The absolute right position of this Component; must be a valid CSS length value, e.g: <code>300</code>, <code>100px</code>, <code>30%</code>, etc.\nExplicitly setting this value will make this Component become 'floating', which means its layout will no\nlonger be affected by the Container that it resides in.</p>",
                "default": "0"
            },
            {
                "name": "width",
                "type": "number/string",
                "doc": "<p>The width of this Component; must be a valid CSS length value, e.g: <code>300</code>, <code>100px</code>, <code>30%</code>, etc.\nBy default, if this is not explicitly set, this Component's element will simply have its own natural size.\nIf set to <code>auto</code>, it will set the width to <code>null</code> meaning it will have its own natural size.</p>",
                "default": "'auto'"
            }
        ],
        "events": []
    },
    "Ext.MessageBox": {
        "type": "Ext.MessageBox",
        "doc": "<p>Utility class for generating different styles of message boxes. The framework provides a global singleton\nExt.Msg for common usage which you should use in most cases.</p>",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to\nother elements within this component. To add specific styling for sub-classes, use the cls config.</p>",
                "default": "Ext.baseCSSPrefix + 'msgbox'"
            },
            {
                "name": "buttons",
                "type": "array/object",
                "doc": "<p>An array of buttons, or an object of a button to be displayed in the toolbar of this Ext.MessageBox.</p>",
                "default": null
            },
            {
                "name": "defaultTextHeight",
                "type": "number",
                "doc": "<p>The default height in pixels of the message box's multiline textarea if displayed.</p>",
                "default": "75"
            },
            {
                "name": "hideAnimation",
                "type": "object",
                "doc": "<p>Animation effect to apply when the Component is being hidden.  Typically you want to use an\noutbound animation type such as 'fadeOut' or 'slideOut'. For more animations, check the Ext.fx.Animation.type config.</p>",
                "default": "{type: 'popOut', duration: 250, easing: 'ease-out'}"
            },
            {
                "name": "iconCls",
                "type": "string",
                "doc": "<p>One or more space separated CSS classes to be applied to the icon element.<br/>\nThe CSS rule(s) applied should specify a background image to be used as the\nicon.</p>",
                "default": null
            },
            {
                "name": "layout",
                "type": "object/string",
                "doc": "<p>Configuration for this Container's layout. Example:</p>",
                "default": "{type: 'vbox', pack: 'center'}"
            },
            {
                "name": "message",
                "type": "string",
                "doc": "<p>The message to be displayed in the Ext.MessageBox.</p>",
                "default": null
            },
            {
                "name": "modal",
                "type": "boolean",
                "doc": "\n",
                "default": "true"
            },
            {
                "name": "msg",
                "type": "string",
                "doc": "<p>The message to be displayed in the Ext.MessageBox.</p>",
                "default": null
            },
            {
                "name": "prompt",
                "type": "object",
                "doc": "<p>The configuration to be passed if you want an Ext.field.Text or Ext.field.TextArea field\nin your Ext.MessageBox.</p>",
                "default": null
            },
            {
                "name": "showAnimation",
                "type": "object",
                "doc": "<p>Animation effect to apply when the Component is being shown.  Typically you want to use an\ninbound animation type such as 'fadeIn' or 'slideIn'. For more animations, check the Ext.fx.Animation.type config.</p>",
                "default": "{type: 'popIn', duration: 250, easing: 'ease-out'}"
            },
            {
                "name": "title",
                "type": "string",
                "doc": "<p>The title of this Ext.MessageBox.</p>",
                "default": null
            },
            {
                "name": "zIndex",
                "type": "number",
                "doc": "<p>Override the default <code>zIndex</code> so it is normally always above floating components.</p>",
                "default": "999"
            }
        ],
        "events": []
    },
    "Ext.mixin.Accessible": {
        "type": "Ext.mixin.Accessible",
        "doc": "<p>This mixin defines certain config options, properties, and APIs to be used\nby Components that implement accessible traits according to WAI-ARIA 1.0 specification.</p>",
        "configs": [
            {
                "name": "ariaAttributes",
                "type": "object",
                "doc": "<p>An object containing ARIA attributes to be set\non this Component's ARIA element. Use this to set the attributes that cannot be\ndetermined by the Component's state, such as <code>aria-live</code>, <code>aria-flowto</code>, etc.</p>",
                "default": "{$value: null, lazy: true}"
            },
            {
                "name": "ariaDescribedBy",
                "type": "string",
                "doc": "<p>DOM selector for a child element that is to be used\nas description for this Component, set in <code>aria-describedby</code> attribute.\nThe selector works the same way as ariaLabelledBy.</p>",
                "default": null
            },
            {
                "name": "ariaLabel",
                "type": "string",
                "doc": "<p>ARIA label for this Component. It is best to use\nariaLabelledBy option instead, because screen readers prefer\n<code>aria-labelledby</code> attribute to <code>aria-label</code>. ariaLabel and\nariaLabelledBy config options are mutually exclusive.</p>",
                "default": null
            },
            {
                "name": "ariaLabelledBy",
                "type": "string",
                "doc": "<p>DOM selector for a child element that is to be used\nas label for this Component, set in <code>aria-labelledby</code> attribute.\nIf the selector is by <code>#id</code>, the label element can be any existing element,\nnot necessarily a child of the main Component element.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.mixin.Bindable": {
        "type": "Ext.mixin.Bindable",
        "doc": "<p>This class is intended as a mixin for classes that want to provide a \"bind\" config that\nconnects to a <code>ViewModel</code>.</p>",
        "configs": [
            {
                "name": "bind",
                "type": "object",
                "doc": "<p>Setting this config option adds or removes data bindings for other configs.\nFor example, to bind the <code>title</code> config:</p>",
                "default": "{$value: null, lazy: true}"
            },
            {
                "name": "controller",
                "type": "string/object/ext.app.viewcontroller",
                "doc": "<p>A string alias, a configuration object or an instance of a <code>ViewController</code> for\nthis container. Sample usage:</p>",
                "default": null
            },
            {
                "name": "defaultListenerScope",
                "type": "boolean",
                "doc": "<p>If <code>true</code>, this component will be the default scope (this pointer) for events\nspecified with string names so that the scope can be dynamically resolved. The\ncomponent will automatically become the defaultListenerScope if a\ncontroller is specified.</p>",
                "default": "false"
            },
            {
                "name": "publishes",
                "type": "string/string[]/object",
                "doc": "<p>One or more names of config properties that this component should publish\nto its ViewModel. Generally speaking, only properties defined in a class config\nblock (including ancestor config blocks and mixins) are eligible for publishing\nto the viewModel. Some components override this and publish their most useful\nconfigs by default.</p>",
                "default": null
            },
            {
                "name": "reference",
                "type": "string",
                "doc": "<p>Specifies a name for this component inside its component hierarchy. This name\nmust be unique within its view\nor its ViewController. See the documentation in\nExt.container.Container for more information about references.</p>",
                "default": null
            },
            {
                "name": "session",
                "type": "boolean/object/ext.data.session",
                "doc": "<p>If provided this creates a new <code>Session</code> instance for this component. If this\nis a <code>Container</code>, this will then be inherited by all child components.</p>",
                "default": "null"
            },
            {
                "name": "twoWayBindable",
                "type": "string/string[]/object",
                "doc": "<p>This object holds a map of <code>config</code> properties that will update their binding\nas they are modified. For example, <code>value</code> is a key added by form fields. The\nform of this config is the same as <code>publishes</code>.</p>",
                "default": null
            },
            {
                "name": "viewModel",
                "type": "string/object/ext.app.viewmodel",
                "doc": "<p>The <code>ViewModel</code> is a data provider for this component and its children. The\ndata contained in the <code>ViewModel</code> is typically used by adding <code>bind</code> configs\nto the components that want present or edit this data.</p>",
                "default": "{$value: null, lazy: true}"
            }
        ],
        "events": []
    },
    "Ext.mixin.ComponentDelegation": {
        "type": "Ext.mixin.ComponentDelegation",
        "doc": "<p>A mixin that gives Ext.Component and Ext.Widget the ability to process the \"delegate\"\nevent option.</p>",
        "configs": [],
        "events": []
    },
    "Ext.mixin.Container": {
        "type": "Ext.mixin.Container",
        "doc": "<p>Common methods for both classic &amp; modern containers</p>",
        "configs": [
            {
                "name": "referenceHolder",
                "type": "boolean",
                "doc": "<p>If <code>true</code>, this container will be marked as being a point in the hierarchy where\nreferences to items with a specified <code>reference</code> config will be held. The container\nwill automatically become a referenceHolder if a controller is specified.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.mixin.Factoryable": {
        "type": "Ext.mixin.Factoryable",
        "doc": "<p>This mixin automates use of <code>Ext.Factory</code>. When mixed in to a class, the <code>alias</code> of the\nclass is retrieved and combined with an optional <code>factoryConfig</code> property on that class\nto produce the configuration to pass to <code>Ext.Factory</code>.</p>",
        "configs": [],
        "events": []
    },
    "Ext.mixin.Hookable": {
        "type": "Ext.mixin.Hookable",
        "configs": [],
        "events": []
    },
    "Ext.mixin.Identifiable": {
        "type": "Ext.mixin.Identifiable",
        "doc": "<p>An Identifiable mixin.</p>",
        "configs": [],
        "events": []
    },
    "Ext.mixin.Inheritable": {
        "type": "Ext.mixin.Inheritable",
        "doc": "<p>A mixin that provides the functionality for inheritable configs. This allows linking\ncomponents and containers via a prototype-chained object for accessing inherited\nvalues.</p>",
        "configs": [],
        "events": []
    },
    "Ext.Mixin": {
        "type": "Ext.Mixin",
        "doc": "<p>This class is a base class for mixins. These are classes that extend this class and are\ndesigned to be used as a <code>mixin</code> by user code.</p>",
        "configs": [],
        "events": []
    },
    "Ext.mixin.Mashup": {
        "type": "Ext.mixin.Mashup",
        "doc": "<p>This mixin allows users to easily require external scripts in their classes. This load\nprocess delays application launch (<code>Ext.onReady</code>) until all such scripts are loaded\nensuring that your class will have access to its required scripts from the start.</p>",
        "configs": [],
        "events": []
    },
    "Ext.mixin.Observable": {
        "type": "Ext.mixin.Observable",
        "doc": "<p>Base class that provides a common interface for publishing events. Subclasses are\nexpected to have a property \"events\" which is populated as event listeners register,\nand, optionally, a property \"listeners\" with configured listeners defined.</p>",
        "configs": [
            {
                "name": "listeners",
                "type": "object",
                "doc": "<p>A config object containing one or more event handlers to be added to this object during initialization. This\nshould be a valid listeners config object as specified in the\naddListener example for attaching\nmultiple handlers at once.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.mixin.Progressable": {
        "type": "Ext.mixin.Progressable",
        "doc": "<p>A Traversable mixin.</p>",
        "configs": [
            {
                "name": "dynamic",
                "type": "boolean",
                "doc": "<p>When false this indicator will only receive progressStart and progressEnd commands, no progressUpdate commands will be sent.</p>",
                "default": "true"
            },
            {
                "name": "maxProgressInput",
                "type": "number",
                "doc": "<p>Maximum input value for this indicator</p>",
                "default": "1"
            },
            {
                "name": "maxProgressOutput",
                "type": "number",
                "doc": "<p>Maximum output value for this indicator</p>",
                "default": "100"
            },
            {
                "name": "minProgressInput",
                "type": "number",
                "doc": "<p>Minimum input value for this indicator</p>",
                "default": "0"
            },
            {
                "name": "minProgressOutput",
                "type": "number",
                "doc": "<p>Minimum output value for this indicator</p>",
                "default": "0"
            },
            {
                "name": "state",
                "type": "string",
                "doc": "<p>Current state of the progressIndicator. Should be used for switching progress states like download to upload.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.mixin.Queryable": {
        "type": "Ext.mixin.Queryable",
        "doc": "<p>A mixin for providing query related methods for Ext.ComponentQuery for classes that\nimplement getRefItems.</p>",
        "configs": [],
        "events": []
    },
    "Ext.mixin.Responsive": {
        "type": "Ext.mixin.Responsive",
        "doc": "<p>This mixin provides its user with a <code>responsiveConfig</code> config that allows the class\nto conditionally control config properties.</p>",
        "configs": [
            {
                "name": "responsiveConfig",
                "type": "object",
                "doc": "<p>This object consists of keys that represent the conditions on which configs\nwill be applied. For example:</p>",
                "default": null
            },
            {
                "name": "responsiveFormulas",
                "type": "object",
                "doc": "<p>It is common when using <code>responsiveConfig</code> to have recurring expressions that\nmake for complex configurations. Using <code>responsiveFormulas</code> allows you to cut\ndown on this repetition by adding new properties to the \"scope\" for the rules\nin a <code>responsiveConfig</code>.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.mixin.Selectable": {
        "type": "Ext.mixin.Selectable",
        "doc": "<p>Tracks what records are currently selected in a databound widget. This class is mixed in to\ndataview and all subclasses.</p>",
        "configs": [
            {
                "name": "allowDeselect",
                "type": "boolean",
                "doc": "<p>Allow users to deselect a record in a DataView, List or Grid. Only applicable when the Selectable's <code>mode</code> is\n<code>'SINGLE'</code>.</p>",
                "default": "false"
            },
            {
                "name": "deselectOnContainerClick",
                "type": "boolean",
                "doc": "<p><code>true</code> to deselect current selection when the container body is\nclicked.</p>",
                "default": "true"
            },
            {
                "name": "disableSelection",
                "type": "boolean",
                "doc": "<p><code>true</code> to disable selection.\nThis configuration will lock the selection model that the DataView uses.</p>",
                "default": null
            },
            {
                "name": "lastFocused",
                "type": "ext.data.model",
                "doc": "\n",
                "default": null
            },
            {
                "name": "lastSelected",
                "type": "ext.data.model",
                "doc": "\n",
                "default": null
            },
            {
                "name": "locked",
                "type": "boolean",
                "doc": "<p><code>true</code> to disable selection.\nThis configuration will lock the selection model that the DataView uses.</p>",
                "default": null
            },
            {
                "name": "mode",
                "type": "string",
                "doc": "<p>Modes of selection.\nValid values are <code>'SINGLE'</code>, <code>'SIMPLE'</code>, and <code>'MULTI'</code>.</p>",
                "default": "'SINGLE'"
            },
            {
                "name": "publishes",
                "type": "object",
                "doc": "\n",
                "default": "{selection: 1}"
            },
            {
                "name": "selection",
                "type": "ext.data.model",
                "doc": "<p>The selected record.</p>",
                "default": null
            },
            {
                "name": "twoWayBindable",
                "type": "object",
                "doc": "\n",
                "default": "{selection: 1}"
            }
        ],
        "events": [
            {
                "name": "beforeselectionchange",
                "params": "this(Ext.mixin.Selectable) eOpts(Object)",
                "doc": "<p>Fires before an item is selected.</p>"
            },
            {
                "name": "selectionchange",
                "params": "this(Ext.mixin.Selectable) records(Ext.data.Model[]) eOpts(Object)",
                "doc": "<p>Fires when a selection changes.</p>"
            }
        ]
    },
    "Ext.mixin.Templatable": {
        "type": "Ext.mixin.Templatable",
        "configs": [],
        "events": []
    },
    "Ext.mixin.Traversable": {
        "type": "Ext.mixin.Traversable",
        "doc": "<p>A Traversable mixin.</p>",
        "configs": [],
        "events": []
    },
    "Ext.Msg": {
        "type": "Ext.Msg",
        "doc": "<p>A global shared singleton instance of the Ext.MessageBox class.</p>",
        "configs": [],
        "events": []
    },
    "Ext.navigation.Bar": {
        "type": "Ext.navigation.Bar",
        "doc": "<p>This component is used in Ext.navigation.View to control animations in the toolbar. You should never need to\ninteract with the component directly, unless you are subclassing it.</p>",
        "configs": [
            {
                "name": "androidAnimation",
                "type": "boolean",
                "doc": "<p>Optionally enable CSS transforms on Android 2\nfor NavigationBar animations.  Note that this may cause flickering if the\nNavigationBar is hidden.</p>",
                "default": null
            },
            {
                "name": "animation",
                "type": "object",
                "doc": "\n",
                "default": "{duration: 300}"
            },
            {
                "name": "backButton",
                "type": "ext.button/object",
                "doc": "<p>The configuration for the back button</p>",
                "default": "{align: 'left', ui: 'back', hidden: true}"
            },
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to\nother elements within this component. To add specific styling for sub-classes, use the cls config.</p>",
                "default": "Ext.baseCSSPrefix + 'toolbar'"
            },
            {
                "name": "cls",
                "type": "string",
                "doc": "<p>The CSS class to add to this component's element, in\naddition to the baseCls. In many cases, this property will be specified\nby the derived component class. See userCls for adding additional CSS\nclasses to component instances (such as items in a Ext.Container).</p>",
                "default": "Ext.baseCSSPrefix + 'navigation-bar'"
            },
            {
                "name": "defaultBackButtonText",
                "type": "string",
                "doc": "<p>The text to be displayed on the back button if:\na) The previous view does not have a title\nb) The useTitleForBackButtonText configuration is true.</p>",
                "default": "'Back'"
            },
            {
                "name": "title",
                "type": "string",
                "doc": "<p>The title of the toolbar. You should NEVER set this, it is used internally. You set the title of the\nnavigation bar by giving a navigation views children a title configuration.</p>",
                "default": null
            },
            {
                "name": "ui",
                "type": "string",
                "doc": "<p>Style options for Toolbar. Either 'light' or 'dark'.</p>",
                "default": "'dark'"
            },
            {
                "name": "useTitleForBackButtonText",
                "type": "boolean",
                "doc": "<p>Set to false if you always want to display the defaultBackButtonText as the text\non the back button. True if you want to use the previous views title.</p>",
                "default": null
            },
            {
                "name": "view",
                "type": "ext.navigation.view",
                "doc": "<p>A reference to the navigation view this bar is linked to.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "back",
                "params": "this(Ext.navigation.Bar) eOpts(Object)",
                "doc": "<p>Fires when the back button was tapped.</p>"
            }
        ]
    },
    "Ext.navigation.View": {
        "type": "Ext.navigation.View",
        "doc": "<p>NavigationView is basically a Ext.Container with a card layout, so only one view\ncan be visible at a time. However, NavigationView also adds extra functionality on top of this to allow\nyou to <code>push</code> and <code>pop</code> views at any time. When you do this, your NavigationView will automatically animate\nbetween your current active view, and the new view you want to <code>push</code>, or the previous view you want to <code>pop</code>.</p>",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to\nother elements within this component. To add specific styling for sub-classes, use the cls config.</p>",
                "default": "Ext.baseCSSPrefix + 'navigationview'"
            },
            {
                "name": "defaultBackButtonText",
                "type": "string",
                "doc": "<p>The text to be displayed on the back button if:</p>",
                "default": "'Back'"
            },
            {
                "name": "items",
                "type": "array/object",
                "doc": "<p>The child items to add to this NavigationView. This is usually an array of Component\nconfigurations or instances, for example:</p>",
                "default": null
            },
            {
                "name": "layout",
                "type": "object",
                "doc": "<p>Layout used in this navigation view, type must be set to 'card'.\n<strong>Android NOTE:</strong> Older Android devices have poor animation performance. It is recommended to set the animation to null, for example:</p>",
                "default": "{type: 'card', animation: {duration: 300, easing: 'ease-out', type: 'slide', direction: 'left'}}"
            },
            {
                "name": "navigationBar",
                "type": "boolean/object",
                "doc": "<p>The NavigationBar used in this navigation view. It defaults to be docked to the top.</p>",
                "default": "{docked: 'top'}"
            },
            {
                "name": "useTitleForBackButtonText",
                "type": "boolean",
                "doc": "<p>Set to <code>false</code> if you always want to display the defaultBackButtonText as the text\non the back button. <code>true</code> if you want to use the previous views title.</p>",
                "default": "false"
            }
        ],
        "events": [
            {
                "name": "back",
                "params": "this(Ext.navigation.View) eOpts(Object)",
                "doc": "<p>Fires when the back button in the navigation view was tapped.</p>"
            },
            {
                "name": "pop",
                "params": "this(Ext.navigation.View) view(Mixed) eOpts(Object)",
                "doc": "<p>Fires when a view is popped from this navigation view</p>"
            },
            {
                "name": "push",
                "params": "this(Ext.navigation.View) view(Mixed) eOpts(Object)",
                "doc": "<p>Fires when a view is pushed into this navigation view</p>"
            }
        ]
    },
    "Ext.Number": {
        "type": "Ext.Number",
        "doc": "<p>A collection of useful static methods to deal with numbers</p>",
        "configs": [],
        "events": []
    },
    "Ext.Object": {
        "type": "Ext.Object",
        "doc": "<p>A collection of useful static methods to deal with objects.</p>",
        "configs": [],
        "events": []
    },
    "Ext.os": {
        "type": "Ext.os",
        "doc": "<p>Provides useful information about the current operating system environment.</p>",
        "configs": [],
        "events": []
    },
    "Ext.panel.Header": {
        "type": "Ext.panel.Header",
        "doc": "<p>This container class is used to manage the items (such as title and tools) for <code>Ext.Panel</code>.</p>",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to\nother elements within this component. To add specific styling for sub-classes, use the cls config.</p>",
                "default": "Ext.baseCSSPrefix + 'panel-header'"
            },
            {
                "name": "glyph",
                "type": "number/string",
                "doc": "<p>A numeric unicode character code to use as the icon.  The default font-family\nfor glyphs can be set globally using\nglyphFontFamily application\nconfig or the Ext.setGlyphFontFamily() method.</p>",
                "default": null
            },
            {
                "name": "icon",
                "type": "string",
                "doc": "<p>Path to an image to use as an icon.</p>",
                "default": null
            },
            {
                "name": "iconAlign",
                "type": "'top'/'right'/'bottom'/'left'",
                "doc": "<p>The side of the title to render the icon.</p>",
                "default": "'left'"
            },
            {
                "name": "iconCls",
                "type": "string",
                "doc": "<p>One or more space separated CSS classes to be applied to the icon element.\nThe CSS rule(s) applied should specify a background image to be used as the\nicon.</p>",
                "default": null
            },
            {
                "name": "layout",
                "type": "object/string",
                "doc": "<p>Configuration for this Container's layout. Example:</p>",
                "default": "{type: 'hbox', align: 'center'}"
            },
            {
                "name": "title",
                "type": "string/ext.panel.title",
                "doc": "<p>The title text or config object for the Title component.</p>",
                "default": null
            },
            {
                "name": "titleAlign",
                "type": "'left'/'center'/'right'",
                "doc": "<p>The alignment of the title text within the available space between the\nicon and the tools.</p>",
                "default": "'left'"
            }
        ],
        "events": []
    },
    "Ext.Panel": {
        "type": "Ext.Panel",
        "doc": "<p>Panels are most useful as Overlays - containers that float over your application. They contain extra styling such\nthat when you showBy another component, the container will appear in a rounded black box with a 'tip'\npointing to a reference component.</p>",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to\nother elements within this component. To add specific styling for sub-classes, use the cls config.</p>",
                "default": "Ext.baseCSSPrefix + 'panel'"
            },
            {
                "name": "bodyBorder",
                "type": "boolean",
                "doc": "<ul>\n<li><p><code>true</code> to enable the border around the panel body (as defined by the theme)\nNote that even when enabled, the bodyBorder is only visible when there are docked\nitems around the edges of the panel.  Where the bodyBorder touches the panel's outer\nborder it is automatically collapsed into a single border.</p>",
                "default": null
            },
            {
                "name": "bodyPadding",
                "type": "number/boolean/string",
                "doc": "<p>A shortcut for setting a padding style on the body element. The value can either be\na number to be applied to all sides, or a normal CSS string describing padding.</p>",
                "default": null
            },
            {
                "name": "border",
                "type": "boolean",
                "doc": "<p>Enables or disables bordering on this component.\nThe following values are accepted:</p>",
                "default": "false"
            },
            {
                "name": "header",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "icon",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "iconCls",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "manageBorders",
                "type": "boolean",
                "doc": "<p><code>true</code> to enable border management of docked items.  When enabled, borders of docked\nitems will collapse where they meet to avoid duplicated borders.</p>",
                "default": "true"
            },
            {
                "name": "title",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "tools",
                "type": "object",
                "doc": "\n",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.panel.Title": {
        "type": "Ext.panel.Title",
        "doc": "<p>A basic title component for a Panel Header.</p>",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to\nother elements within this component. To add specific styling for sub-classes, use the cls config.</p>",
                "default": "Ext.baseCSSPrefix + 'panel-title'"
            },
            {
                "name": "glyph",
                "type": "number/string",
                "doc": "<p>A numeric unicode character code to use as the icon.  The default font-family\nfor glyphs can be set globally using\nglyphFontFamily application\nconfig or the Ext.setGlyphFontFamily() method.</p>",
                "default": null
            },
            {
                "name": "icon",
                "type": "string",
                "doc": "<p>Path to an image to use as an icon.</p>",
                "default": null
            },
            {
                "name": "iconAlign",
                "type": "'top'/'right'/'bottom'/'left'",
                "doc": "<p>alignment of the icon</p>",
                "default": "'left'"
            },
            {
                "name": "iconCls",
                "type": "string",
                "doc": "<p>One or more space separated CSS classes to be applied to the icon element.\nThe CSS rule(s) applied should specify a background image to be used as the\nicon.</p>",
                "default": null
            },
            {
                "name": "text",
                "type": "string",
                "doc": "<p>The title's text (can contain html tags/entities)</p>",
                "default": null
            },
            {
                "name": "textAlign",
                "type": "'left'/'center'/'right'",
                "doc": "<p>The alignment of the title text within the available space between the\nicon and the tools.</p>",
                "default": "'left'"
            }
        ],
        "events": []
    },
    "Ext.panel.Tool": {
        "type": "Ext.panel.Tool",
        "doc": "<p>This class is used to display small visual icons in the header of a panel. There are a set of\n25 icons that can be specified by using the type config. The handler config\ncan be used to provide a function that will respond to any click events. In general, this class\nwill not be instantiated directly, rather it will be created by specifying the Ext.Panel.tools\nconfiguration on the Panel itself.</p>",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to\nother elements within this component. To add specific styling for sub-classes, use the cls config.</p>",
                "default": "Ext.baseCSSPrefix + 'tool'"
            },
            {
                "name": "disabledCls",
                "type": "string",
                "doc": "<p>The CSS class to add to the component when it is disabled</p>",
                "default": "Ext.baseCSSPrefix + 'tool-disabled'"
            },
            {
                "name": "handler",
                "type": "function/string",
                "doc": "<p>A function to execute when the tool is clicked.</p>",
                "default": null
            },
            {
                "name": "iconCls",
                "type": "string",
                "doc": "<p>An alternative to the standard list of types.</p>",
                "default": null
            },
            {
                "name": "scope",
                "type": "object",
                "doc": "<p>The scope to execute the handler function. Defaults to the tool.</p>",
                "default": null
            },
            {
                "name": "stopEvent",
                "type": "boolean",
                "doc": "<p>Specify as false to allow click event to propagate.</p>",
                "default": "true"
            },
            {
                "name": "toolOwner",
                "type": "ext.component",
                "doc": "<p>The owner to report to the <code>handler</code> method. Default is <code>null</code> for the <code>parent</code>.\nThis is automatically set to the owning <code>Ext.Panel</code> when a tool is created as a\nmember of a panel's <code>tools</code>.</p>",
                "default": null
            },
            {
                "name": "type",
                "type": "string",
                "doc": "<p>The type of tool to render. The following types are available:</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "click",
                "params": "this(Ext.panel.Tool) e(Ext.event.Event) owner(Ext.Component) eOpts(Object)",
                "doc": "<p>Fires when the tool is clicked</p>"
            }
        ]
    },
    "Ext.perf.Accumulator": {
        "type": "Ext.perf.Accumulator",
        "configs": [],
        "events": []
    },
    "Ext.perf.Monitor": {
        "type": "Ext.perf.Monitor",
        "configs": [],
        "events": []
    },
    "Ext.picker.Date": {
        "type": "Ext.picker.Date",
        "doc": "<p>A date picker component which shows a Date Picker on the screen. This class extends from Ext.picker.Picker\nand Ext.Sheet so it is a popup.</p>",
        "configs": [
            {
                "name": "dayText",
                "type": "string",
                "doc": "<p>The label to show for the day column.</p>",
                "default": "'Day'"
            },
            {
                "name": "doneButton",
                "type": "string/mixed",
                "doc": "<p>Can be either:</p>",
                "default": "true"
            },
            {
                "name": "monthText",
                "type": "string",
                "doc": "<p>The label to show for the month column.</p>",
                "default": "'Month'"
            },
            {
                "name": "slotOrder",
                "type": "array",
                "doc": "<p>An array of strings that specifies the order of the slots.</p>",
                "default": "['month', 'day', 'year']"
            },
            {
                "name": "value",
                "type": "object/date",
                "doc": "<p>Default value for the field and the internal Ext.picker.Date component. Accepts an object of 'year',\n'month' and 'day' values, all of which should be numbers, or a Date.</p>",
                "default": null
            },
            {
                "name": "yearFrom",
                "type": "number",
                "doc": "<p>The start year for the date picker. If yearFrom is greater than\nyearTo then the order of years will be reversed.</p>",
                "default": "1980"
            },
            {
                "name": "yearText",
                "type": "string",
                "doc": "<p>The label to show for the year column.</p>",
                "default": "'Year'"
            },
            {
                "name": "yearTo",
                "type": "number",
                "doc": "<p>The last year for the date picker. If yearFrom is greater than\nyearTo then the order of years will be reversed.</p>",
                "default": "new Date().getFullYear()"
            }
        ],
        "events": [
            {
                "name": "change",
                "params": "this(Ext.picker.Date) value(Date) eOpts(Object)",
                "doc": "<p>Fired when the value of this picker has changed and the done button is pressed.</p>"
            }
        ]
    },
    "Ext.picker.Picker": {
        "type": "Ext.picker.Picker",
        "doc": "<p>A general picker class. Ext.picker.Slots are used to organize multiple scrollable slots into a single picker. slots is\nthe only necessary configuration.</p>",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to\nother elements within this component. To add specific styling for sub-classes, use the cls config.</p>",
                "default": "Ext.baseCSSPrefix + 'picker'"
            },
            {
                "name": "bottom",
                "type": "number/string",
                "doc": "<p>The absolute bottom position of this Component; must be a valid CSS length value, e.g: <code>300</code>, <code>100px</code>, <code>30%</code>, etc.\nExplicitly setting this value will make this Component become 'floating', which means its layout will no\nlonger be affected by the Container that it resides in.</p>",
                "default": "0"
            },
            {
                "name": "cancelButton",
                "type": "string/mixed",
                "doc": "<p>Can be either:</p>",
                "default": "true"
            },
            {
                "name": "defaultType",
                "type": "string",
                "doc": "\n",
                "default": "'pickerslot'"
            },
            {
                "name": "doneButton",
                "type": "string/mixed",
                "doc": "<p>Can be either:</p>",
                "default": "true"
            },
            {
                "name": "height",
                "type": "number",
                "doc": "<p>The height of the picker.</p>",
                "default": "220"
            },
            {
                "name": "layout",
                "type": "object/string",
                "doc": "<p>Configuration for this Container's layout. Example:</p>",
                "default": "{type: 'hbox', align: 'stretch'}"
            },
            {
                "name": "left",
                "type": "number/string",
                "doc": "<p>The absolute left position of this Component; must be a valid CSS length value, e.g: <code>300</code>, <code>100px</code>, <code>30%</code>, etc.\nExplicitly setting this value will make this Component become 'floating', which means its layout will no\nlonger be affected by the Container that it resides in.</p>",
                "default": "0"
            },
            {
                "name": "right",
                "type": "number/string",
                "doc": "<p>The absolute right position of this Component; must be a valid CSS length value, e.g: <code>300</code>, <code>100px</code>, <code>30%</code>, etc.\nExplicitly setting this value will make this Component become 'floating', which means its layout will no\nlonger be affected by the Container that it resides in.</p>",
                "default": "0"
            },
            {
                "name": "slots",
                "type": "array",
                "doc": "<p>An array of slot configurations.</p>",
                "default": null
            },
            {
                "name": "toolbar",
                "type": "ext.titlebar/ext.toolbar/object",
                "doc": "<p>The toolbar which contains the doneButton and cancelButton buttons.\nYou can override this if you wish, and add your own configurations. Just ensure that you take into account\nthe doneButton and cancelButton configurations.</p>",
                "default": "{xtype: 'titlebar'}"
            },
            {
                "name": "toolbarPosition",
                "type": "string",
                "doc": "\n",
                "default": "'top'"
            },
            {
                "name": "useTitles",
                "type": "boolean",
                "doc": "<p>Generate a title header for each individual slot and use\nthe title configuration of the slot.</p>",
                "default": "false"
            },
            {
                "name": "value",
                "type": "string/number",
                "doc": "<p>The value to initialize the picker with.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "cancel",
                "params": "this(Ext.Picker) eOpts(Object)",
                "doc": "<p>Fired when the cancel button is tapped and the values are reverted back to\nwhat they were.</p>"
            },
            {
                "name": "change",
                "params": "this(Ext.picker.Picker) values(Object) eOpts(Object)",
                "doc": "<p>Fired when the value of this picker has changed the Done button has been pressed.</p>"
            },
            {
                "name": "pick",
                "params": "this(Ext.Picker) values(Object) slot(Ext.picker.Slot) eOpts(Object)",
                "doc": "<p>Fired when a slot has been picked</p>"
            }
        ]
    },
    "Ext.picker.Slot": {
        "type": "Ext.picker.Slot",
        "doc": "<p>A general Ext.picker.Picker slot class.  Slots are used to organize multiple scrollable slots into\na single Ext.picker.Picker.</p>",
        "configs": [
            {
                "name": "align",
                "type": "string",
                "doc": "<p>The horizontal alignment of the slot's contents.</p>",
                "default": "'left'"
            },
            {
                "name": "cls",
                "type": "string",
                "doc": "<p>The main component class</p>",
                "default": "Ext.baseCSSPrefix + 'picker-slot'"
            },
            {
                "name": "displayField",
                "type": "string",
                "doc": "<p>The display field in the store.</p>",
                "default": "'text'"
            },
            {
                "name": "flex",
                "type": "number",
                "doc": "\n",
                "default": "1"
            },
            {
                "name": "itemTpl",
                "type": "string",
                "doc": "<p>The template to be used in this slot.\nIf you set this, displayField will be ignored.</p>",
                "default": null
            },
            {
                "name": "name",
                "type": "string",
                "doc": "<p>The name of this slot.</p>",
                "default": null
            },
            {
                "name": "showTitle",
                "type": "boolean",
                "doc": "\n",
                "default": "true"
            },
            {
                "name": "title",
                "type": "string",
                "doc": "<p>The title to use for this slot, or <code>null</code> for no title.</p>",
                "default": null
            },
            {
                "name": "value",
                "type": "number",
                "doc": "<p>The value of this slot</p>",
                "default": null
            },
            {
                "name": "valueField",
                "type": "string",
                "doc": "<p>The value field in the store.</p>",
                "default": "'value'"
            },
            {
                "name": "verticallyCenterItems",
                "type": "boolean",
                "doc": "\n",
                "default": "true"
            }
        ],
        "events": [
            {
                "name": "slotpick",
                "params": "this(Ext.picker.Slot) value(Mixed) node(HTMLElement) eOpts(Object)",
                "doc": "<p>Fires whenever an slot is picked</p>"
            }
        ]
    },
    "Ext.plugin.Abstract": {
        "type": "Ext.plugin.Abstract",
        "doc": "<p>The AbstractPlugin class is the base class from which user-implemented plugins should inherit.</p>",
        "configs": [
            {
                "name": "pluginId",
                "type": "string",
                "doc": "<p>A name for the plugin that can be set at creation time to then retrieve the plugin\nthrough getPlugin method.  For example:</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.plugin.field.PlaceHolderLabel": {
        "type": "Ext.plugin.field.PlaceHolderLabel",
        "doc": "<p>A plugin to be used on form fields to show the field's label as the placeHolder text\nwhen the field has no value. When the field has a value, the label will show above the field\nwith an animation.</p>",
        "configs": [
            {
                "name": "cls",
                "type": "string",
                "doc": "<p>The CSS class to be applied on the form field.</p>",
                "default": "x-placeholderlabel"
            },
            {
                "name": "field",
                "type": "ext.form.field",
                "doc": "<p>The field this plugin is bound too.</p>",
                "default": null
            },
            {
                "name": "labelVisible",
                "type": "boolean",
                "doc": "<p>A boolean value whether the label is shown or hidden.\nThe label should only be shown if the form field has a value.</p>",
                "default": "false"
            },
            {
                "name": "showCls",
                "type": "string",
                "doc": "<p>The CSS class to be applied on the form field when the label\nis to be shown.</p>",
                "default": "x-show-label"
            }
        ],
        "events": []
    },
    "Ext.plugin.LazyItems": {
        "type": "Ext.plugin.LazyItems",
        "doc": "<p>This plugin defers the execution cost of the instantiation and initialization of child components of un-rendered items.</p>",
        "configs": [],
        "events": []
    },
    "Ext.plugin.ListPaging": {
        "type": "Ext.plugin.ListPaging",
        "doc": "<p>Adds a Load More button at the bottom of the list. When the user presses this button,\nthe next page of data will be loaded into the store and appended to the List.</p>",
        "configs": [
            {
                "name": "autoPaging",
                "type": "boolean",
                "doc": "<p>True to automatically load the next page when you scroll to the bottom of the list.</p>",
                "default": "false"
            },
            {
                "name": "list",
                "type": "ext.list",
                "doc": "<p>Local reference to the List this plugin is bound to</p>",
                "default": null
            },
            {
                "name": "loadMoreCmp",
                "type": "object",
                "doc": "\n",
                "default": "{xtype: 'component', baseCls: Ext.baseCSSPrefix + 'list-paging', scrollDock: 'bottom', hidden: true}"
            },
            {
                "name": "loadMoreCmpAdded",
                "type": "boolean",
                "doc": "<p>Indicates whether or not the load more component has been added to the List\nyet.</p>",
                "default": "false"
            },
            {
                "name": "loadMoreText",
                "type": "string",
                "doc": "<p>The text used as the label of the Load More button.</p>",
                "default": "'Load More...'"
            },
            {
                "name": "loadTpl",
                "type": "string",
                "doc": "<p>The template used to render the load more text</p>",
                "default": null
            },
            {
                "name": "loading",
                "type": "boolean",
                "doc": "<p>True if the plugin has initiated a Store load that has not yet completed</p>",
                "default": "false"
            },
            {
                "name": "loadingCls",
                "type": "string",
                "doc": "<p>The CSS class that is added to the loadMoreCmp while the Store is loading</p>",
                "default": "Ext.baseCSSPrefix + 'loading'"
            },
            {
                "name": "noMoreRecordsText",
                "type": "string",
                "doc": "<p>The text used as the label of the Load More button when the Store's\ntotalCount indicates that all of the records available on the server are\nalready loaded</p>",
                "default": "'No More Records'"
            },
            {
                "name": "scroller",
                "type": "ext.scroll.scroller",
                "doc": "<p>Local reference to the List's Scroller</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "loadmorecmpadded",
                "params": "this(Ext.plugin.ListPaging) list(Ext.List) eOpts(Object)",
                "doc": "<p>Fired when the Load More component is added to the list. Fires on the List.</p>"
            }
        ]
    },
    "Ext.plugin.PullRefresh": {
        "type": "Ext.plugin.PullRefresh",
        "doc": "<p>This plugin adds pull to refresh functionality to the List.</p>",
        "configs": [
            {
                "name": "autoSnapBack",
                "type": "boolean",
                "doc": "<p>Determines whether the pulldown should automatically snap back after data has been loaded.\nIf false call snapBack() to manually snap the pulldown back.</p>",
                "default": "true"
            },
            {
                "name": "lastUpdatedDateFormat",
                "type": "string",
                "doc": "<p>The format to be used on the last updated date.</p>",
                "default": "'m/d/Y h:iA'"
            },
            {
                "name": "lastUpdatedText",
                "type": "string",
                "doc": "<p>The text to be shown in front of the last updated time.</p>",
                "default": "'Last Updated:&nbsp;'"
            },
            {
                "name": "list",
                "type": "ext.dataview.list",
                "doc": "<p>The list to which this PullRefresh plugin is connected.\nThis will usually by set automatically when configuring the list with this plugin.</p>",
                "default": null
            },
            {
                "name": "loadedText",
                "type": "string",
                "doc": "<p>The text that will be when data has been loaded.</p>",
                "default": "'Loaded.'"
            },
            {
                "name": "loadingText",
                "type": "string",
                "doc": "<p>The text that will be shown while the list is refreshing.</p>",
                "default": "'Loading...'"
            },
            {
                "name": "overpullSnapBackDuration",
                "type": "number",
                "doc": "<p>The duration for snapping back when pulldown has been lowered further then its height.</p>",
                "default": "300"
            },
            {
                "name": "pullText",
                "type": "string",
                "doc": "<p>The text that will be shown while you are pulling down.</p>",
                "default": "'Pull down to refresh...'"
            },
            {
                "name": "pullTpl",
                "type": "ext.xtemplate/string/array",
                "doc": "<p>The template being used for the pull to refresh markup.\nWill be passed a config object with properties state, message and updated</p>",
                "default": null
            },
            {
                "name": "releaseText",
                "type": "string",
                "doc": "<p>The text that will be shown after you have pulled down enough to show the release message.</p>",
                "default": "'Release to refresh...'"
            },
            {
                "name": "scrollerAutoRefresh",
                "type": "boolean",
                "doc": "<p>Determines whether the attached scroller should automatically track size changes of its container.\nEnabling this will have performance impacts but will be necessary if your list size changes dynamically. For example if your list contains images\nthat will be loading and have unspecified heights.</p>",
                "default": "false"
            },
            {
                "name": "snappingAnimationDuration",
                "type": "number",
                "doc": "<p>The duration for snapping back animation after the data has been refreshed</p>",
                "default": "300"
            },
            {
                "name": "translatable",
                "type": "object",
                "doc": "\n",
                "default": "true"
            },
            {
                "name": "width",
                "type": "number/string",
                "doc": "<p>The width of this Component; must be a valid CSS length value, e.g: <code>300</code>, <code>100px</code>, <code>30%</code>, etc.\nBy default, if this is not explicitly set, this Component's element will simply have its own natural size.\nIf set to <code>auto</code>, it will set the width to <code>null</code> meaning it will have its own natural size.</p>",
                "default": "'100%'"
            }
        ],
        "events": []
    },
    "Ext.plugin.Responsive": {
        "type": "Ext.plugin.Responsive",
        "doc": "<p>This plugin can be added to component instances to process a <code>responsiveConfig</code>. For\nexample:</p>",
        "configs": [],
        "events": []
    },
    "Ext.plugin.SortableList": {
        "type": "Ext.plugin.SortableList",
        "doc": "<p>The SortableList plugin gives your list items the ability to be reordered by tapping and\ndragging elements within the item.</p>",
        "configs": [
            {
                "name": "handleSelector",
                "type": "string",
                "doc": "\n",
                "default": "'.' + Ext.baseCSSPrefix + 'list-sortablehandle'"
            },
            {
                "name": "list",
                "type": "object",
                "doc": "\n",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.Progress": {
        "type": "Ext.Progress",
        "doc": "<p>A simple progress bar widget.</p>",
        "configs": [
            {
                "name": "animate",
                "type": "boolean",
                "doc": "<p>Specify as <code>true</code> to have this progress bar animate to new extent when updated.</p>",
                "default": "false"
            },
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to the progress bar's wrapper element.</p>",
                "default": "'x-progress'"
            },
            {
                "name": "cls",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "text",
                "type": "string",
                "doc": "<p>The background text</p>",
                "default": null
            },
            {
                "name": "textCls",
                "type": "string",
                "doc": "\n",
                "default": "Ext.baseCSSPrefix + 'progress-text'"
            },
            {
                "name": "ui",
                "type": "object",
                "doc": "\n",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.ProgressBase": {
        "type": "Ext.ProgressBase",
        "configs": [
            {
                "name": "textTpl",
                "type": "string/ext.xtemplate",
                "doc": "<p>A template used to create this ProgressBar's background text given two values:</p>",
                "default": null
            },
            {
                "name": "value",
                "type": "number",
                "doc": "<p>A floating point value between 0 and 1 (e.g., .5)</p>",
                "default": "0"
            }
        ],
        "events": []
    },
    "Ext.ProgressIndicator": {
        "type": "Ext.ProgressIndicator",
        "doc": "<p>Ext.ProgressIndicator provides a progress indicator for file uploads.</p>",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to\nother elements within this component. To add specific styling for sub-classes, use the cls config.</p>",
                "default": "Ext.baseCSSPrefix + 'progressindicator'"
            },
            {
                "name": "centered",
                "type": "boolean",
                "doc": "<p>Whether or not this Component is absolutely centered inside its Container</p>",
                "default": "true"
            },
            {
                "name": "fallbackText",
                "type": "string/object",
                "doc": "<p>This String is used when progress is not dynamic (only start and end events will be received).</p>",
                "default": "{any: 'Loading', upload: 'Uploading', download: 'Downloading'}"
            },
            {
                "name": "hidden",
                "type": "boolean",
                "doc": "<p>Whether or not this Component is hidden (its CSS <code>display</code> property is set to <code>none</code>)</p>",
                "default": "true"
            },
            {
                "name": "hideAnimation",
                "type": "string/mixed",
                "doc": "<p>Animation effect to apply when the Component is being hidden.  Typically you want to use an\noutbound animation type such as 'fadeOut' or 'slideOut'. For more animations, check the Ext.fx.Animation.type config.</p>",
                "default": null
            },
            {
                "name": "loadingText",
                "type": "string/ext.xtemplate/object",
                "doc": "<p>This template is used when progress is dynamic (many updates will be received). Template will be passed\nand object with properties percent and state.</p>",
                "default": "{any: 'Loading: {percent}%', upload: 'Uploading: {percent}%', download: 'Downloading: {percent}%'}"
            },
            {
                "name": "maxProgressOutput",
                "type": "number",
                "doc": "\n",
                "default": "1"
            },
            {
                "name": "minProgressOutput",
                "type": "number",
                "doc": "\n",
                "default": "0"
            },
            {
                "name": "modal",
                "type": "boolean",
                "doc": "<p><code>true</code> to make this Container modal. This will create a mask underneath the Container\nthat covers its parent and does not allow the user to interact with any other Components until this\nContainer is dismissed.</p>",
                "default": "true"
            },
            {
                "name": "monitoredStates",
                "type": "object",
                "doc": "<p>Object with the properties of 'upload' and 'download'. To disable progress monitoring of any state simply set\nit to false. For example:</p>",
                "default": "{upload: true, download: true}"
            },
            {
                "name": "showAnimation",
                "type": "string/mixed",
                "doc": "<p>Animation effect to apply when the Component is being shown.  Typically you want to use an\ninbound animation type such as 'fadeIn' or 'slideIn'. For more animations, check the Ext.fx.Animation.type config.</p>",
                "default": null
            },
            {
                "name": "state",
                "type": "object",
                "doc": "\n",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.promise.Consequence": {
        "type": "Ext.promise.Consequence",
        "doc": "<p>Consequences are used internally by a Deferred to capture and notify callbacks, and\npropagate their transformed results as fulfillment or rejection.</p>",
        "configs": [],
        "events": []
    },
    "Ext.promise.Deferred": {
        "type": "Ext.promise.Deferred",
        "doc": "<p>Deferreds are the mechanism used to create new Promises. A Deferred has a single\nassociated Promise that can be safely returned to external consumers to ensure they do\nnot interfere with the resolution or rejection of the deferred operation.</p>",
        "configs": [],
        "events": []
    },
    "Ext.Promise": {
        "type": "Ext.Promise",
        "doc": "<p>This class provides an API compatible implementation of the ECMAScript 6 Promises API\n(providing an implementation as necessary for browsers that do not natively support the\n<code>Promise</code> class).</p>",
        "configs": [],
        "events": []
    },
    "Ext.promise.Promise": {
        "type": "Ext.promise.Promise",
        "doc": "<p>Promises represent a future value; i.e., a value that may not yet be available.</p>",
        "configs": [],
        "events": []
    },
    "Ext.scroll.DomScroller": {
        "type": "Ext.scroll.DomScroller",
        "configs": [],
        "events": []
    },
    "Ext.scroll.Indicator": {
        "type": "Ext.scroll.Indicator",
        "doc": "<p>Provides a visual indicator of scroll position while scrolling using a TouchScroller.  This class should not be created directly.\nTo configure scroll indicators please use the indicators config of the Scroller.</p>",
        "configs": [
            {
                "name": "axis",
                "type": "string",
                "doc": "<p>('x' or 'y')</p>",
                "default": null
            },
            {
                "name": "hideAnimation",
                "type": "boolean/object",
                "doc": "\n",
                "default": "true"
            },
            {
                "name": "hideDelay",
                "type": "number",
                "doc": "<p>Number of milliseconds to delay hiding Indicators when scrolling ends.</p>",
                "default": "0"
            },
            {
                "name": "minLength",
                "type": "number",
                "doc": "<p>The minimum length for the indicator. Defaults to the\nindicator's \"size\" (the width of vertical or height of horizontal indicators)</p>",
                "default": "24"
            },
            {
                "name": "scroller",
                "type": "ext.scroll.touchscroller",
                "doc": "<p>The scroller instance</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.scroll.Scroller": {
        "type": "Ext.scroll.Scroller",
        "doc": "<p>Ext.scroll.Scroller allows any element to have scrollable content, both on desktop and\ntouch-screen devices, and defines a set of useful methods for manipulating the scroll\nposition and controlling the scrolling behavior.  Ext.scroll.Scroller should not be\ndirectly instantiated.  Always use the static <code>create</code> method to create a\nScroller instance:</p>",
        "configs": [
            {
                "name": "direction",
                "type": "'auto'/'vertical'/'horizontal'/'both'",
                "doc": "\n",
                "default": "'auto'"
            },
            {
                "name": "directionLock",
                "type": "boolean",
                "doc": "<p><code>true</code> to lock the direction of the scroller when the user starts scrolling.\nOnly applicable when interacting with the Scroller via touch-screen.</p>",
                "default": "false"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "doc": "<p><code>true</code> to disable this scroller.\nOnly applicable when using a TouchScroller</p>",
                "default": null
            },
            {
                "name": "element",
                "type": "string/htmlelement/ext.dom.element",
                "doc": "<p>The element to make scrollable.</p>",
                "default": null
            },
            {
                "name": "indicators",
                "type": "boolean/object",
                "doc": "<p><code>false</code> to hide scroll indicators while scrolling, <code>true</code> to show scroll indicators,\nor a config object for Ext.scroll.Indicator to configure the scroll indicators.</p>",
                "default": "true"
            },
            {
                "name": "maxPosition",
                "type": "object",
                "doc": "<p>The max scroll position</p>",
                "default": "{x: 0, y: 0}"
            },
            {
                "name": "maxUserPosition",
                "type": "object",
                "doc": "<p>The max scroll position that can be achieved via user interaction.</p>",
                "default": "{x: 0, y: 0}"
            },
            {
                "name": "minPosition",
                "type": "object",
                "doc": "<p>The min scroll position.</p>",
                "default": "{x: 0, y: 0}"
            },
            {
                "name": "minUserPosition",
                "type": "object",
                "doc": "<p>The min scroll position that can be achieved via user interaction.</p>",
                "default": "{x: 0, y: 0}"
            },
            {
                "name": "momentumEasing",
                "type": "object",
                "doc": "<p>A Ext.fx.easing.BoundMomentum config object for configuring the momentum\nof the Scroller.  Only applicable when interacting with the Scroller via\ntouch-screen.</p>",
                "default": null
            },
            {
                "name": "size",
                "type": "object",
                "doc": "<p>The size of the scrollable content expressed as an object with x and y properties</p>",
                "default": null
            },
            {
                "name": "slotSnapSize",
                "type": "number/object",
                "doc": "<p>The size of each slot to snap to in 'px', can be either an object with <code>x</code> and <code>y</code> values, i.e:</p>",
                "default": "{x: 0, y: 0}"
            },
            {
                "name": "spacerXY",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "x",
                "type": "boolean/string",
                "doc": "<ul>\n<li><code>true</code> or <code>'auto'</code> to enable horizontal auto-scrolling. In auto-scrolling mode\nscrolling is only enabled when the element has overflowing content.</li>\n<li><code>false</code> to disable horizontal scrolling</li>\n<li><code>'scroll'</code> to always enable horizontal scrolling regardless of content size.</li>\n</ul>\n\n",
                "default": "true"
            },
            {
                "name": "y",
                "type": "boolean/string",
                "doc": "<ul>\n<li><code>true</code> or <code>'auto'</code> to enable vertical auto-scrolling. In auto-scrolling mode\nscrolling is only enabled when the element has overflowing content.</li>\n<li><code>false</code> to disable vertical scrolling</li>\n<li><code>'scroll'</code> to always enable vertical scrolling regardless of content size.</li>\n</ul>\n\n",
                "default": "true"
            }
        ],
        "events": [
            {
                "name": "refresh",
                "params": "this(Ext.scroll.Scroller) eOpts(Object)",
                "doc": "<p>Fires whenever the Scroller is refreshed.</p>"
            },
            {
                "name": "scroll",
                "params": "this(Ext.scroll.Scroller) x(Number) y(Number) eOpts(Object)",
                "doc": "<p>Fires whenever the Scroller is scrolled.</p>"
            },
            {
                "name": "scrollend",
                "params": "this(Ext.scroll.Scroller) x(Number) y(Number) eOpts(Object)",
                "doc": "<p>Fires whenever the scrolling is ended.</p>"
            },
            {
                "name": "scrollstart",
                "params": "this(Ext.scroll.Scroller) x(Number) y(Number) eOpts(Object)",
                "doc": "<p>Fires whenever the scrolling is started.</p>"
            }
        ]
    },
    "Ext.scroll.TouchScroller": {
        "type": "Ext.scroll.TouchScroller",
        "doc": "<p>Momentum scrolling is one of the most important parts of the user experience on touch-screen\ndevices.  Depending on the device and browser, Ext JS will select one of several different\nscrolling implementations for best performance.</p>",
        "configs": [
            {
                "name": "autoRefresh",
                "type": "boolean",
                "doc": "<p>Accepted values:</p>",
                "default": "true"
            },
            {
                "name": "bounceEasing",
                "type": "object",
                "doc": "\n",
                "default": "{duration: 400}"
            },
            {
                "name": "elementSize",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "fps",
                "type": "string",
                "doc": "\n",
                "default": "'auto'"
            },
            {
                "name": "indicators",
                "type": "boolean/object",
                "doc": "<p><code>false</code> to hide scroll indicators while scrolling, <code>true</code> to show scroll indicators,\nor a config object for Ext.scroll.Indicator to configure the scroll indicators.</p>",
                "default": "true"
            },
            {
                "name": "innerElement",
                "type": "ext.dom.element",
                "doc": "<p>The element that wraps the content of element and is translated in\nresponse to user interaction.  If not configured, one will be automatically\ngenerated.</p>",
                "default": null
            },
            {
                "name": "maxAbsoluteVelocity",
                "type": "number",
                "doc": "\n",
                "default": "6"
            },
            {
                "name": "momentumEasing",
                "type": "object",
                "doc": "<p>The default value is:</p>",
                "default": "{momentum: {acceleration: 30, friction: 0.5}, bounce: {acceleration: 30, springTension: 0.3}, minVelocity: 1}"
            },
            {
                "name": "outOfBoundRestrictFactor",
                "type": "number",
                "doc": "\n",
                "default": "0.5"
            },
            {
                "name": "size",
                "type": "object",
                "doc": "<p>The size of the scrollable content expressed as an object with x and y properties</p>",
                "default": null
            },
            {
                "name": "slotSnapEasing",
                "type": "object",
                "doc": "\n",
                "default": "{duration: 150}"
            },
            {
                "name": "slotSnapOffset",
                "type": "object",
                "doc": "\n",
                "default": "{x: 0, y: 0}"
            },
            {
                "name": "startMomentumResetTime",
                "type": "number",
                "doc": "\n",
                "default": "300"
            },
            {
                "name": "translatable",
                "type": "object",
                "doc": "\n",
                "default": "{translationMethod: 'auto', useWrapper: false}"
            }
        ],
        "events": []
    },
    "Ext.SegmentedButton": {
        "type": "Ext.SegmentedButton",
        "doc": "<p>SegmentedButton is a container for a group of Ext.Buttons. Generally a SegmentedButton would be\na child of a Ext.Toolbar and would be used to switch between different views.</p>",
        "configs": [
            {
                "name": "allowDepress",
                "type": "boolean",
                "doc": "<p>Allow toggling the pressed state of each button.\nDefaults to <code>true</code> when allowMultiple is <code>true</code>.</p>",
                "default": "false"
            },
            {
                "name": "allowMultiple",
                "type": "boolean",
                "doc": "<p>Allow multiple pressed buttons.</p>",
                "default": "false"
            },
            {
                "name": "allowToggle",
                "type": "boolean",
                "doc": "<p>Allow child buttons to be pressed when tapped on. Set to <code>false</code> to allow tapping but not toggling of the buttons.</p>",
                "default": "true"
            },
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to\nother elements within this component. To add specific styling for sub-classes, use the cls config.</p>",
                "default": "Ext.baseCSSPrefix + 'segmentedbutton'"
            },
            {
                "name": "defaultType",
                "type": "string",
                "doc": "<p>The default xtype of child Components to create in this Container when a child item\nis specified as a raw configuration object, rather than as an instantiated Component.</p>",
                "default": "'button'"
            },
            {
                "name": "defaultUI",
                "type": "string",
                "doc": "<p>Default ui to use for buttons in this segmented button.\nButtons can override this default by specifying their own UI</p>",
                "default": null
            },
            {
                "name": "layout",
                "type": "object/string",
                "doc": "<p>Configuration for this Container's layout. Example:</p>",
                "default": "{type: 'hbox', align: 'stretch'}"
            },
            {
                "name": "pressedButtons",
                "type": "array",
                "doc": "<p>The pressed buttons for this segmented button.</p>",
                "default": "[]"
            },
            {
                "name": "pressedCls",
                "type": "string",
                "doc": "<p>CSS class when a button is in pressed state.</p>",
                "default": "Ext.baseCSSPrefix + 'button-pressed'"
            }
        ],
        "events": [
            {
                "name": "toggle",
                "params": "this(Ext.SegmentedButton) button(Ext.Button) isPressed(Boolean) eOpts(Object)",
                "doc": "<p>Fires when any child button's pressed state has changed.</p>"
            }
        ]
    },
    "Ext.Sheet": {
        "type": "Ext.Sheet",
        "doc": "<p>A general sheet class. This renderable container provides base support for orientation-aware transitions for popup or\nside-anchored sliding Panels.</p>",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to\nother elements within this component. To add specific styling for sub-classes, use the cls config.</p>",
                "default": "Ext.baseCSSPrefix + 'sheet'"
            },
            {
                "name": "border",
                "type": "object",
                "doc": "<p>Enables or disables bordering on this component.\nThe following values are accepted:</p>",
                "default": null
            },
            {
                "name": "centered",
                "type": "boolean",
                "doc": "<p>Whether or not this component is absolutely centered inside its container.</p>",
                "default": "true"
            },
            {
                "name": "enter",
                "type": "string",
                "doc": "<p>The viewport side used as the enter point when shown. Valid values are 'top', 'bottom', 'left', and 'right'.\nApplies to sliding animation effects only.</p>",
                "default": "'bottom'"
            },
            {
                "name": "exit",
                "type": "string",
                "doc": "<p>The viewport side used as the exit point when hidden. Valid values are 'top', 'bottom', 'left', and 'right'.\nApplies to sliding animation effects only.</p>",
                "default": "'bottom'"
            },
            {
                "name": "hideAnimation",
                "type": "string/mixed",
                "doc": "<p>Animation effect to apply when the Component is being hidden.  Typically you want to use an\noutbound animation type such as 'fadeOut' or 'slideOut'. For more animations, check the Ext.fx.Animation.type config.</p>",
                "default": "{type: 'slideOut', duration: 250, easing: 'ease-in'}"
            },
            {
                "name": "manageBorders",
                "type": "boolean",
                "doc": "<p><code>true</code> to enable border management of docked items.  When enabled, borders of docked\nitems will collapse where they meet to avoid duplicated borders.</p>",
                "default": "false"
            },
            {
                "name": "modal",
                "type": "boolean",
                "doc": "<p><code>true</code> to make this Container modal. This will create a mask underneath the Container\nthat covers its parent and does not allow the user to interact with any other Components until this\nContainer is dismissed.</p>",
                "default": "true"
            },
            {
                "name": "showAnimation",
                "type": "string/mixed",
                "doc": "<p>Animation effect to apply when the Component is being shown.  Typically you want to use an\ninbound animation type such as 'fadeIn' or 'slideIn'. For more animations, check the Ext.fx.Animation.type config.</p>",
                "default": "{type: 'slideIn', duration: 250, easing: 'ease-out'}"
            },
            {
                "name": "stretchX",
                "type": "boolean",
                "doc": "<p><code>true</code> to stretch this sheet horizontally.</p>",
                "default": null
            },
            {
                "name": "stretchY",
                "type": "boolean",
                "doc": "<p><code>true</code> to stretch this sheet vertically.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "centeredchange",
                "params": "this(Ext.Sheet) value(Boolean) oldValue(Boolean) eOpts(Object)",
                "doc": "<p>Fires when the centered configuration is changed by setCentered.</p>"
            }
        ]
    },
    "Ext.slider.Slider": {
        "type": "Ext.slider.Slider",
        "doc": "<p>Utility class used by Ext.field.Slider.</p>",
        "configs": [
            {
                "name": "allowThumbsOverlapping",
                "type": "boolean",
                "doc": "<p>Whether or not to allow multiple thumbs to overlap each other.\nSetting this to true guarantees the ability to select every possible value in between minValue\nand maxValue that satisfies increment</p>",
                "default": "false"
            },
            {
                "name": "animation",
                "type": "boolean/object",
                "doc": "<p>The animation to use when moving the slider. Possible properties are:</p>",
                "default": "true"
            },
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to\nother elements within this component. To add specific styling for sub-classes, use the cls config.</p>",
                "default": "'x-slider'"
            },
            {
                "name": "increment",
                "type": "number",
                "doc": "<p>The increment by which to snap each thumb when its value changes. Any thumb movement\nwill be snapped to the nearest value that is a multiple of the increment (e.g. if increment is 10 and the user\ntries to move the thumb to 67, it will be snapped to 70 instead)</p>",
                "default": "1"
            },
            {
                "name": "maxValue",
                "type": "number",
                "doc": "<p>The highest value any thumb on this slider can be set to.</p>",
                "default": "100"
            },
            {
                "name": "minValue",
                "type": "number",
                "doc": "<p>The lowest value any thumb on this slider can be set to.</p>",
                "default": "0"
            },
            {
                "name": "readOnly",
                "type": "boolean",
                "doc": "<p>Will make this field read only, meaning it cannot be changed with used interaction.</p>",
                "default": "false"
            },
            {
                "name": "thumbConfig",
                "type": "object",
                "doc": "<p>The config object to factory Ext.slider.Thumb instances</p>",
                "default": "{draggable: {translatable: {easingX: {duration: 300, type: 'ease-out'}}}}"
            },
            {
                "name": "value",
                "type": "number/number[]",
                "doc": "<p>The value(s) of this slider's thumbs. If you pass\na number, it will assume you have just 1 thumb.</p>",
                "default": "0"
            },
            {
                "name": "values",
                "type": "number/number[]",
                "doc": "<p>Alias to value</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "change",
                "params": "this(Ext.slider.Slider) thumb(Ext.slider.Thumb) newValue(Number) oldValue(Number) eOpts(Object)",
                "doc": "<p>Fires when the value changes</p>"
            },
            {
                "name": "drag",
                "params": "this(Ext.slider.Slider) thumb(Ext.slider.Thumb) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires when the slider thumb starts a drag</p>"
            },
            {
                "name": "dragend",
                "params": "this(Ext.slider.Slider) thumb(Ext.slider.Thumb) value(Array) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires when the slider thumb starts a drag</p>"
            },
            {
                "name": "dragstart",
                "params": "this(Ext.slider.Slider) thumb(Ext.slider.Thumb) value(Array) e(Ext.EventObject) eOpts(Object)",
                "doc": "<p>Fires when the slider thumb starts a drag</p>"
            }
        ]
    },
    "Ext.slider.Thumb": {
        "type": "Ext.slider.Thumb",
        "doc": "<p>Utility class used by Ext.slider.Slider - should never need to be used directly.</p>",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to\nother elements within this component. To add specific styling for sub-classes, use the cls config.</p>",
                "default": "Ext.baseCSSPrefix + 'thumb'"
            },
            {
                "name": "draggable",
                "type": "object",
                "doc": "<p>Configuration options to make this Component draggable</p>",
                "default": "{direction: 'horizontal'}"
            },
            {
                "name": "pressedCls",
                "type": "string",
                "doc": "<p>The CSS class to add to the Slider when it is pressed.</p>",
                "default": "Ext.baseCSSPrefix + 'thumb-pressing'"
            }
        ],
        "events": []
    },
    "Ext.slider.Toggle": {
        "type": "Ext.slider.Toggle",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to\nother elements within this component. To add specific styling for sub-classes, use the cls config.</p>",
                "default": "'x-toggle'"
            },
            {
                "name": "maxValueCls",
                "type": "string",
                "doc": "<p>CSS class added to the field when toggled to its maxValue</p>",
                "default": "'x-toggle-on'"
            },
            {
                "name": "minValueCls",
                "type": "string",
                "doc": "<p>CSS class added to the field when toggled to its minValue</p>",
                "default": "'x-toggle-off'"
            }
        ],
        "events": []
    },
    "Ext.Spacer": {
        "type": "Ext.Spacer",
        "doc": "<p>The Ext.Spacer component is generally used to put space between items in Ext.Toolbar components.</p>",
        "configs": [
            {
                "name": "flex",
                "type": "number",
                "doc": "<p>The flex value of this spacer. This defaults to 1, if no width has been set.</p>",
                "default": null
            },
            {
                "name": "width",
                "type": "number",
                "doc": "<p>The width of this spacer. If this is set, the value of flex will be ignored.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.String": {
        "type": "Ext.String",
        "doc": "<p>A collection of useful static methods to deal with strings.</p>",
        "configs": [],
        "events": []
    },
    "Ext.supports": {
        "type": "Ext.supports",
        "doc": "<p>Contains information about features supported in the current environment as well\nas bugs detected.</p>",
        "configs": [],
        "events": []
    },
    "Ext.tab.Bar": {
        "type": "Ext.tab.Bar",
        "doc": "<p>Ext.tab.Bar is used internally by Ext.tab.Panel to create the bar of tabs that appears at the top of the tab\npanel. It's unusual to use it directly, instead see the tab panel docs for usage instructions.</p>",
        "configs": [
            {
                "name": "activeTab",
                "type": "number/string/ext.component",
                "doc": "<p>The initially activated tab. Can be specified as numeric index,\ncomponent ID or as the component instance itself.</p>",
                "default": null
            },
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to\nother elements within this component. To add specific styling for sub-classes, use the cls config.</p>",
                "default": "Ext.baseCSSPrefix + 'tabbar'"
            },
            {
                "name": "defaultTabUI",
                "type": "string",
                "doc": "<p>A default ui to use for Tab items.</p>",
                "default": null
            },
            {
                "name": "defaultType",
                "type": "string",
                "doc": "\n",
                "default": "'tab'"
            },
            {
                "name": "layout",
                "type": "object",
                "doc": "\n",
                "default": "{type: 'hbox', align: 'middle'}"
            }
        ],
        "events": [
            {
                "name": "activetabchange",
                "params": "this(Ext.tab.Bar) value(Number/String/Ext.Component) oldValue(Number/String/Ext.Component) eOpts(Object)",
                "doc": "<p>Fires when the activeTab configuration is changed by setActiveTab.</p>"
            },
            {
                "name": "tabchange",
                "params": "this(Ext.tab.Bar) newTab(Ext.tab.Tab) oldTab(Ext.tab.Tab) eOpts(Object)",
                "doc": "<p>Fired when active tab changes.</p>"
            }
        ]
    },
    "Ext.tab.Panel": {
        "type": "Ext.tab.Panel",
        "doc": "<p>Tab Panels are a great way to allow the user to switch between several pages that are all full screen. Each\nComponent in the Tab Panel gets its own Tab, which shows the Component when tapped on. Tabs can be positioned at\nthe top or the bottom of the Tab Panel, and can optionally accept title and icon\nconfigurations (see iconCls for additional information).</p>",
        "configs": [
            {
                "name": "cls",
                "type": "string/string[]",
                "doc": "<p>The CSS class to add to this component's element, in\naddition to the baseCls. In many cases, this property will be specified\nby the derived component class. See userCls for adding additional CSS\nclasses to component instances (such as items in a Ext.Container).</p>",
                "default": "Ext.baseCSSPrefix + 'tabpanel'"
            },
            {
                "name": "layout",
                "type": "object/string",
                "doc": "<p>Configuration for this Container's layout. Example:</p>",
                "default": "{type: 'card', animation: {type: 'slide', direction: 'left'}}"
            },
            {
                "name": "scroll",
                "type": "boolean/string/object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "tabBar",
                "type": "object",
                "doc": "<p>An Ext.tab.Bar configuration.</p>",
                "default": "true"
            },
            {
                "name": "tabBarPosition",
                "type": "string",
                "doc": "<p>The docked position for the tabBar instance.\nPossible values are 'top' and 'bottom'.</p>",
                "default": "'top'"
            }
        ],
        "events": []
    },
    "Ext.tab.Tab": {
        "type": "Ext.tab.Tab",
        "doc": "<p>Used in the Ext.tab.Bar component. This shouldn't be used directly, instead use\nExt.tab.Bar or Ext.tab.Panel.</p>",
        "configs": [
            {
                "name": "active",
                "type": "boolean",
                "doc": "<p>Set this to <code>true</code> to have the tab be active by default.</p>",
                "default": "false"
            },
            {
                "name": "activeCls",
                "type": "string",
                "doc": "<p>The CSS class to be applied to a Tab when it is active.\nProviding your own CSS for this class enables you to customize the active state.</p>",
                "default": "Ext.baseCSSPrefix + 'tab-active'"
            },
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to\nother elements within this component. To add specific styling for sub-classes, use the cls config.</p>",
                "default": "Ext.baseCSSPrefix + 'tab'"
            },
            {
                "name": "pressedCls",
                "type": "string",
                "doc": "<p>The CSS class to be applied to a Tab when it is pressed.\nProviding your own CSS for this class enables you to customize the pressed state.</p>",
                "default": "Ext.baseCSSPrefix + 'tab-pressed'"
            },
            {
                "name": "title",
                "type": "string",
                "doc": "<p>The title of the card that this tab is bound to.</p>",
                "default": "'&nbsp;'"
            }
        ],
        "events": [
            {
                "name": "activate",
                "params": "this(Ext.tab.Tab) eOpts(Object)",
                "doc": "<p>Fires when a tab is activated</p>"
            },
            {
                "name": "deactivate",
                "params": "this(Ext.tab.Tab) eOpts(Object)",
                "doc": "<p>Fires when a tab is deactivated</p>"
            }
        ]
    },
    "Ext.TaskQueue": {
        "type": "Ext.TaskQueue",
        "doc": "<p>Handle batch read / write of DOMs, currently used in SizeMonitor + PaintMonitor</p>",
        "configs": [],
        "events": []
    },
    "Ext.Template": {
        "type": "Ext.Template",
        "doc": "<p>Represents an HTML fragment template. Templates may be precompiled for greater performance.</p>",
        "configs": [
            {
                "name": "compiled",
                "type": "boolean",
                "doc": "<p>True to immediately compile the template. Defaults to false.</p>",
                "default": null
            },
            {
                "name": "disableFormats",
                "type": "boolean",
                "doc": "<p>True to disable format functions in the template. If the template doesn't contain\nformat functions, setting disableFormats to true will reduce apply time. Defaults to false.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.Title": {
        "type": "Ext.Title",
        "doc": "<p>Ext.Title is used for the Ext.Toolbar.title configuration in the Ext.Toolbar component.</p>",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to\nother elements within this component. To add specific styling for sub-classes, use the cls config.</p>",
                "default": "'x-title'"
            },
            {
                "name": "title",
                "type": "string",
                "doc": "<p>The title text</p>",
                "default": "''"
            }
        ],
        "events": []
    },
    "Ext.TitleBar": {
        "type": "Ext.TitleBar",
        "doc": "<p>Ext.TitleBar's are most commonly used as a docked item within an Ext.Container.</p>",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to\nother elements within this component. To add specific styling for sub-classes, use the cls config.</p>",
                "default": "Ext.baseCSSPrefix + 'toolbar'"
            },
            {
                "name": "cls",
                "type": "string/string[]",
                "doc": "<p>The CSS class to add to this component's element, in\naddition to the baseCls. In many cases, this property will be specified\nby the derived component class. See userCls for adding additional CSS\nclasses to component instances (such as items in a Ext.Container).</p>",
                "default": "Ext.baseCSSPrefix + 'navigation-bar'"
            },
            {
                "name": "defaultType",
                "type": "string",
                "doc": "<p>The default xtype to create.</p>",
                "default": "'button'"
            },
            {
                "name": "items",
                "type": "array/object",
                "doc": "<p>The child items to add to this TitleBar. The defaultType of\na TitleBar is Ext.Button, so you do not need to specify an <code>xtype</code> if you are adding\nbuttons.</p>",
                "default": "[]"
            },
            {
                "name": "maxButtonWidth",
                "type": "string",
                "doc": "<p>The maximum width of the button by percentage</p>",
                "default": "'40%'"
            },
            {
                "name": "minHeight",
                "type": "string",
                "doc": "<p>The minimum height height of the Toolbar.</p>",
                "default": null
            },
            {
                "name": "title",
                "type": "string",
                "doc": "<p>The title of the toolbar.</p>",
                "default": null
            },
            {
                "name": "titleAlign",
                "type": "string",
                "doc": "<p>The alignment for the title of the toolbar.</p>",
                "default": "'center'"
            },
            {
                "name": "ui",
                "type": "string",
                "doc": "<p>Style options for Toolbar. Either 'light' or 'dark'.</p>",
                "default": "'dark'"
            }
        ],
        "events": []
    },
    "Ext.Toast": {
        "type": "Ext.Toast",
        "doc": "<p>A 'Toast' is a simple modal message that is displayed on the screen and then automatically closed by a timeout or by a user tapping\noutside of the toast itself. Think about it like a text only alert box that will self destruct. <strong>A Toast should not be instantiated manually</strong>\nbut creating by calling 'Ext.toast(message, timeout)'. This will create one reusable toast container and content will be swapped out as\ntoast messages are queued or displayed.</p>",
        "configs": [
            {
                "name": "animation",
                "type": "boolean/object",
                "doc": "<p>The animation that should be used between toast messages when they are queued up</p>",
                "default": null
            },
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to\nother elements within this component. To add specific styling for sub-classes, use the cls config.</p>",
                "default": "Ext.baseCSSPrefix + 'toast'"
            },
            {
                "name": "hideAnimation",
                "type": "object",
                "doc": "<p>Animation effect to apply when the Component is being hidden.  Typically you want to use an\noutbound animation type such as 'fadeOut' or 'slideOut'. For more animations, check the Ext.fx.Animation.type config.</p>",
                "default": "{type: 'popOut', duration: 250, easing: 'ease-out'}"
            },
            {
                "name": "hideOnMaskTap",
                "type": "boolean",
                "doc": "<p>When using a modal Component, setting this to <code>true</code> will hide the modal\nmask and the Container when the mask is tapped on.</p>",
                "default": "true"
            },
            {
                "name": "layout",
                "type": "object/string",
                "doc": "<p>Configuration for this Container's layout. Example:</p>",
                "default": "{type: 'vbox', pack: 'center'}"
            },
            {
                "name": "message",
                "type": "string",
                "doc": "<p>The message to be displayed in the Ext.Toast.</p>",
                "default": null
            },
            {
                "name": "modal",
                "type": "boolean",
                "doc": "\n",
                "default": "true"
            },
            {
                "name": "showAnimation",
                "type": "object",
                "doc": "<p>Animation effect to apply when the Component is being shown.  Typically you want to use an\ninbound animation type such as 'fadeIn' or 'slideIn'. For more animations, check the Ext.fx.Animation.type config.</p>",
                "default": "{type: 'popIn', duration: 250, easing: 'ease-out'}"
            },
            {
                "name": "timeout",
                "type": "number",
                "doc": "<p>The amount of time in milliseconds to wait before destroying the toast automatically</p>",
                "default": "1000"
            },
            {
                "name": "ui",
                "type": "string",
                "doc": "<p>The ui to be used on this Component</p>",
                "default": "'dark'"
            },
            {
                "name": "zIndex",
                "type": "number",
                "doc": "<p>Override the default <code>zIndex</code> so it is normally always above floating components.</p>",
                "default": "999"
            }
        ],
        "events": []
    },
    "Ext.Toolbar": {
        "type": "Ext.Toolbar",
        "doc": "<p>Ext.Toolbars are most commonly used as docked items as within a Ext.Container. They can be docked either <code>top</code> or <code>bottom</code> using the docked configuration.</p>",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to\nother elements within this component. To add specific styling for sub-classes, use the cls config.</p>",
                "default": "Ext.baseCSSPrefix + 'toolbar'"
            },
            {
                "name": "defaultButtonUI",
                "type": "string",
                "doc": "<p>A default ui to use for Button items.</p>",
                "default": null
            },
            {
                "name": "defaultType",
                "type": "string",
                "doc": "<p>The default xtype to create.</p>",
                "default": "'button'"
            },
            {
                "name": "docked",
                "type": "string",
                "doc": "<p>The docked position for this Ext.Toolbar.\nIf you specify <code>left</code> or <code>right</code>, the layout configuration will automatically change to a <code>vbox</code>. It's also\nrecommended to adjust the width of the toolbar if you do this.</p>",
                "default": null
            },
            {
                "name": "layout",
                "type": "object/string",
                "doc": "<p>Configuration for this Container's layout. Example:</p>",
                "default": "{type: 'hbox', align: 'center'}"
            },
            {
                "name": "minHeight",
                "type": "string",
                "doc": "<p>The minimum height height of the Toolbar.</p>",
                "default": null
            },
            {
                "name": "title",
                "type": "string/ext.title",
                "doc": "<p>The title of the toolbar.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.util.AbstractMixedCollection": {
        "type": "Ext.util.AbstractMixedCollection",
        "configs": [
            {
                "name": "allowFunctions",
                "type": "boolean",
                "doc": "<p>Specify <code>true</code> if the addAll\nfunction should add function references to the collection. Defaults to\n<code>false</code>.</p>",
                "default": "false"
            }
        ],
        "events": [
            {
                "name": "add",
                "params": "index(Number) o(Object) key(String) eOpts(Object)",
                "doc": "<p>Fires when an item is added to the collection.</p>"
            },
            {
                "name": "clear",
                "params": "eOpts(Object)",
                "doc": "<p>Fires when the collection is cleared.</p>"
            },
            {
                "name": "remove",
                "params": "o(Object) key(String) eOpts(Object)",
                "doc": "<p>Fires when an item is removed from the collection.</p>"
            },
            {
                "name": "replace",
                "params": "key(String) old(Object) new(Object) eOpts(Object)",
                "doc": "<p>Fires when an item is replaced in the collection.</p>"
            }
        ]
    },
    "Ext.util.Audio": {
        "type": "Ext.util.Audio",
        "configs": [],
        "events": []
    },
    "Ext.util.Bag": {
        "type": "Ext.util.Bag",
        "doc": "<p>This class provides an <strong>unordered</strong> collection similar to <code>Ext.util.Collection</code>. The\nremoval of order maintenance provides a significant performance increase. Further, this\nclass does not provide events or other high-level features. It maintains an array of\n<code>items</code> and a map to quickly find items by their <code>id</code>.</p>",
        "configs": [],
        "events": []
    },
    "Ext.util.Base64": {
        "type": "Ext.util.Base64",
        "doc": "<p>Base64 is a group of similar binary-to-text encoding schemes that represent binary data in an ASCII string format by\ntranslating it into a radix-64 representation.</p>",
        "configs": [],
        "events": []
    },
    "Ext.util.BufferedCollection": {
        "type": "Ext.util.BufferedCollection",
        "doc": "<p>Description</p>",
        "configs": [
            {
                "name": "autoFilter",
                "type": "boolean",
                "doc": "\n",
                "default": "false"
            },
            {
                "name": "autoSort",
                "type": "boolean",
                "doc": "\n",
                "default": "false"
            },
            {
                "name": "pageSize",
                "type": "number",
                "doc": "\n",
                "default": "0"
            },
            {
                "name": "totalCount",
                "type": "number",
                "doc": "\n",
                "default": "0"
            }
        ],
        "events": []
    },
    "Ext.util.Cache": {
        "type": "Ext.util.Cache",
        "doc": "<p>This class is used to manage simple, LRU caches. It provides an absolutely minimal\ncontainer interface. It is created like this:</p>",
        "configs": [
            {
                "name": "maxSize",
                "type": "number",
                "doc": "<p>The maximum size the cache is allowed to grow to before\nfurther additions cause removal of the least recently used entry.</p>",
                "default": "100"
            }
        ],
        "events": []
    },
    "Ext.util.Collection": {
        "type": "Ext.util.Collection",
        "doc": "<p>This class manages uniquely keyed objects such as records or\ncomponents.</p>",
        "configs": [
            {
                "name": "autoFilter",
                "type": "boolean",
                "doc": "\n",
                "default": "true"
            },
            {
                "name": "autoGroup",
                "type": "boolean",
                "doc": "<p><code>true</code> to sort by the grouper</p>",
                "default": "true"
            },
            {
                "name": "autoSort",
                "type": "boolean",
                "doc": "\n",
                "default": "true"
            },
            {
                "name": "decoder",
                "type": "function",
                "doc": "<p>A function that can convert newly added items to a proper type before being\nadded to this collection.</p>",
                "default": null
            },
            {
                "name": "defaultSortDirection",
                "type": "string",
                "doc": "<p>The default sort direction to use if one is not specified.</p>",
                "default": "'ASC'"
            },
            {
                "name": "extraKeys",
                "type": "object",
                "doc": "<p>One or more <code>Ext.util.CollectionKey' configuration objects or key properties.\nEach property of the given object is the name of the</code>CollectionKey<code>instance\nthat is stored on this collection. The value of each property configures the\n</code>CollectionKey` instance.</p>",
                "default": null
            },
            {
                "name": "filters",
                "type": "array/ext.util.filtercollection",
                "doc": "<p>The collection of Filters for this collection. At the\ntime a collection is created <code>filters</code> can be specified as a unit. After that\ntime the normal <code>setFilters</code> method can also be given a set of replacement\nfilters for the collection.</p>",
                "default": null
            },
            {
                "name": "grouper",
                "type": "object",
                "doc": "<p>A configuration object for this collection's grouper.</p>",
                "default": null
            },
            {
                "name": "groups",
                "type": "ext.util.groupcollection",
                "doc": "<p>The collection of to hold each group container. This collection is created and\nremoved dynamically based on <code>grouper</code>. Application code should only need to\ncall <code>getGroups</code> to retrieve the collection and not <code>setGroups</code>.</p>",
                "default": null
            },
            {
                "name": "keyFn",
                "type": "function",
                "doc": "<p>A function to retrieve the key of an item in the collection. If provided,\nthis replaces the default <code>getKey</code> method. The default <code>getKey</code> method handles\nitems that have either an \"id\" or \"_id\" property or failing that a <code>getId</code>\nmethod to call.</p>",
                "default": null
            },
            {
                "name": "multiSortLimit",
                "type": "number",
                "doc": "<p>The maximum number of sorters which may be applied to this Sortable when using\nthe \"multi\" insertion position when adding sorters.</p>",
                "default": "3"
            },
            {
                "name": "rootProperty",
                "type": "string",
                "doc": "<p>The root property to use for aggregation, filtering and sorting. By default\nthis is <code>null</code> but when containing things like records\nthis config would likely be set to \"data\" so that property names are applied\nto the fields of each record.</p>",
                "default": null
            },
            {
                "name": "sorters",
                "type": "array/ext.util.sortercollection",
                "doc": "<p>Array of sorters for this collection. At the time a\ncollection is created the <code>sorters</code> can be specified as a unit. After that time\nthe normal <code>setSorters</code> method can be also be given a set of replacement\nsorters.</p>",
                "default": null
            },
            {
                "name": "source",
                "type": "ext.util.collection",
                "doc": "<p>The base <code>Collection</code>. This collection contains the items to which filters\nare applied to populate this collection. In this configuration, only the\nroot <code>source</code> collection can have items truly added or removed.</p>",
                "default": null
            },
            {
                "name": "trackGroups",
                "type": "boolean",
                "doc": "<p><code>true</code> to track individual groups in a Ext.util.GroupCollection</p>",
                "default": "true"
            }
        ],
        "events": [
            {
                "name": "add",
                "params": "collection(Ext.util.Collection) details(Object) eOpts(Object)",
                "doc": "<p>Fires after items have been added to the collection.</p>"
            },
            {
                "name": "beforeitemchange",
                "params": "collection(Ext.util.Collection) details(Object) eOpts(Object)",
                "doc": "<p>This event fires before an item change is reflected in the collection. This event\nis always followed by an <code>itemchange</code> event and, depending on the change, possibly\nan <code>add</code>, <code>remove</code> and/or <code>updatekey</code> event.</p>"
            },
            {
                "name": "beforesort",
                "params": "collection(Ext.util.Collection) sorters(Ext.util.Sorter[]) eOpts(Object)",
                "doc": "<p>This event fires before the contents of the collection have been sorted.</p>"
            },
            {
                "name": "beginupdate",
                "params": "collection(Ext.util.Collection) eOpts(Object)",
                "doc": "<p>Fired before changes are made to the collection. This event fires when the\n<code>beginUpdate</code> method is called and the counter it manages transitions from 0 to 1.</p>"
            },
            {
                "name": "endupdate",
                "params": "collection(Ext.util.Collection) eOpts(Object)",
                "doc": "<p>Fired after changes are made to the collection. This event fires when the <code>endUpdate</code>\nmethod is called and the counter it manages transitions from 1 to 0.</p>"
            },
            {
                "name": "itemchange",
                "params": "collection(Ext.util.Collection) details(Object) eOpts(Object)",
                "doc": "<p>This event fires after an item change is reflected in the collection. This event\nalways follows a <code>beforeitemchange</code> event and its corresponding <code>add</code>, <code>remove</code>\nand/or <code>updatekey</code> events.</p>"
            },
            {
                "name": "refresh",
                "params": "collection(Ext.util.Collection) eOpts(Object)",
                "doc": "<p>This event fires when the collection has changed entirely. This event is fired in\ncases where the collection's filter is updated or the items are sorted. While the\nitems previously in the collection may remain the same, the order at a minimum has\nchanged in ways that cannot be simply translated to other events.</p>"
            },
            {
                "name": "remove",
                "params": "collection(Ext.util.Collection) details(Object) eOpts(Object)",
                "doc": "<p>Fires after items have been removed from the collection. Some properties of this\nobject may not be present if calculating them is deemed too expensive. These are\nmarked as \"optional\".</p>"
            },
            {
                "name": "sort",
                "params": "collection(Ext.util.Collection) eOpts(Object)",
                "doc": "<p>This event fires after the contents of the collection have been sorted.</p>"
            },
            {
                "name": "updatekey",
                "params": "collection(Ext.util.Collection) details(Object) eOpts(Object)",
                "doc": "<p>Fires after the key for an item has changed.</p>"
            }
        ]
    },
    "Ext.util.CollectionKey": {
        "type": "Ext.util.CollectionKey",
        "doc": "<p>Maintains an additional key map for an <code>Ext.util.Collection</code>. Instances of this class\nare seldom created manually. Rather they are created by the <code>Ext.util.Collection' when\ngiven an</code>extraKeys` config.</p>",
        "configs": [
            {
                "name": "collection",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "keyFn",
                "type": "function/string",
                "doc": "<p>A function to retrieve the key of an item in the collection. This can be normal\nfunction that takes an item and returns the key or it can be the name of the\nmethod to call on an item to get the key.</p>",
                "default": null
            },
            {
                "name": "property",
                "type": "string",
                "doc": "<p>The name of the property on each item that is its key.</p>",
                "default": null
            },
            {
                "name": "rootProperty",
                "type": "string",
                "doc": "<p>The name of the sub-object property on each item that is its key. This value\noverrides <code>Ext.util.Collection.rootProperty</code>.</p>",
                "default": null
            },
            {
                "name": "unique",
                "type": "boolean",
                "doc": "\n",
                "default": "true"
            }
        ],
        "events": []
    },
    "Ext.util.CSV": {
        "type": "Ext.util.CSV",
        "doc": "<p>This class contains utility methods for dealing with CSV (Comma Separated Values) as\nspecified in RFC 4180.</p>",
        "configs": [
            {
                "name": "delimiter",
                "type": "string",
                "doc": "<p>The string used to separate the values in a row. Common values for this config\nare comma (\",\") and tab (\"\\t\"). See <code>Ext.util.CSV</code> and  <code>Ext.util.TSV</code>\nfor pre-configured instances of these formats.</p>",
                "default": "','"
            }
        ],
        "events": []
    },
    "Ext.util.DelayedTask": {
        "type": "Ext.util.DelayedTask",
        "doc": "<p>The DelayedTask class provides a convenient way to \"buffer\" the execution of a method,\nperforming setTimeout where a new timeout cancels the old timeout. When called, the\ntask will wait the specified time period before executing. If durng that time period,\nthe task is called again, the original call will be cancelled. This continues so that\nthe function is only called a single time for each iteration.</p>",
        "configs": [],
        "events": []
    },
    "Ext.util.DelimitedValue": {
        "type": "Ext.util.DelimitedValue",
        "doc": "<p>This base class contains utility methods for dealing with formats such as CSV (Comma\nSeparated Values) as specified in RFC 4180.</p>",
        "configs": [
            {
                "name": "dateFormat",
                "type": "string",
                "doc": "<p>The format to use for dates</p>",
                "default": "'C'"
            },
            {
                "name": "delimiter",
                "type": "string",
                "doc": "<p>The string used to separate the values in a row. Common values for this config\nare comma (\",\") and tab (\"\\t\"). See <code>Ext.util.CSV</code> and  <code>Ext.util.TSV</code>\nfor pre-configured instances of these formats.</p>",
                "default": "'\\t'"
            },
            {
                "name": "lineBreak",
                "type": "string",
                "doc": "<p>The string used by <code>encode</code> to separate each row. The <code>decode</code>\nmethod accepts all forms of line break.</p>",
                "default": "'\\n'"
            },
            {
                "name": "quote",
                "type": "string",
                "doc": "<p>The character to use as to quote values that contain the special <code>delimiter</code>\nor <code>lineBreak</code> characters.</p>",
                "default": "'\"'"
            }
        ],
        "events": []
    },
    "Ext.util.Draggable": {
        "type": "Ext.util.Draggable",
        "doc": "<p>A core util class to bring Draggable behavior to a Component. This class is specifically designed only for\nabsolutely positioned elements starting from top: 0, left: 0. The initialOffset can then be set via configuration\nto have the elements in a different position.</p>",
        "configs": [
            {
                "name": "cls",
                "type": "string",
                "doc": "\n",
                "default": "Ext.baseCSSPrefix + 'draggable'"
            },
            {
                "name": "constraint",
                "type": "string",
                "doc": "\n",
                "default": "'container'"
            },
            {
                "name": "direction",
                "type": "string",
                "doc": "<p>Possible values: 'vertical', 'horizontal', or 'both'</p>",
                "default": "'both'"
            },
            {
                "name": "disabled",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "draggingCls",
                "type": "string",
                "doc": "\n",
                "default": "Ext.baseCSSPrefix + 'dragging'"
            },
            {
                "name": "element",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "initialOffset",
                "type": "object/number",
                "doc": "<p>The initial draggable offset.  When specified as Number,\nboth x and y will be set to that value.</p>",
                "default": "{x: 0, y: 0}"
            },
            {
                "name": "translatable",
                "type": "object",
                "doc": "\n",
                "default": "{}"
            }
        ],
        "events": [
            {
                "name": "drag",
                "params": "this(Ext.util.Draggable) e(Ext.event.Event) offsetX(Number) offsetY(Number) eOpts(Object)",
                "doc": "<p>Fires whenever the component is dragged</p>"
            },
            {
                "name": "dragend",
                "params": "this(Ext.util.Draggable) e(Ext.event.Event) offsetX(Number) offsetY(Number) eOpts(Object)",
                "doc": "<p>Fires whenever the component is dragged</p>"
            },
            {
                "name": "dragstart",
                "params": "this(Ext.util.Draggable) e(Ext.event.Event) offsetX(Number) offsetY(Number) eOpts(Object)",
                "doc": "<p>Fires whenever the component starts to be dragged</p>"
            }
        ]
    },
    "Ext.util.Droppable": {
        "type": "Ext.util.Droppable",
        "configs": [
            {
                "name": "activeCls",
                "type": "string",
                "doc": "<p>The CSS added to a Droppable when a Draggable in the same group is being\ndragged.</p>",
                "default": "Ext.baseCSSPrefix + 'drop-active'"
            },
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element.\nThis will also be prepended to other elements within this component.</p>",
                "default": "Ext.baseCSSPrefix + 'droppable'"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "doc": "\n",
                "default": "false"
            },
            {
                "name": "group",
                "type": "string",
                "doc": "<p>Draggable and Droppable objects can participate in a group which are\ncapable of interacting.</p>",
                "default": "'base'"
            },
            {
                "name": "hoverCls",
                "type": "string",
                "doc": "<p>The CSS class to add to the droppable when hovering over a valid drop.</p>",
                "default": "Ext.baseCSSPrefix + 'drop-hover'"
            },
            {
                "name": "invalidCls",
                "type": "string",
                "doc": "<p>The CSS class to add to the droppable when dragging a draggable that is\nnot in the same group.</p>",
                "default": "Ext.baseCSSPrefix + 'drop-invalid'"
            },
            {
                "name": "validDropMode",
                "type": "string",
                "doc": "<p>Determines when a drop is considered 'valid' whether it simply need to\nintersect the region or if it needs to be contained within the region.\nValid values are: 'intersects' or 'contains'</p>",
                "default": "'intersect'"
            }
        ],
        "events": [
            {
                "name": "drop",
                "params": "this(Ext.util.Droppable) draggable(Ext.util.Draggable) e(Ext.event.Event) eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "dropactivate",
                "params": "this(Ext.util.Droppable) draggable(Ext.util.Draggable) e(Ext.event.Event) eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "dropdeactivate",
                "params": "this(Ext.util.Droppable) draggable(Ext.util.Draggable) e(Ext.event.Event) eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "dropenter",
                "params": "this(Ext.util.Droppable) draggable(Ext.util.Draggable) e(Ext.event.Event) eOpts(Object)",
                "doc": "\n"
            },
            {
                "name": "dropleave",
                "params": "this(Ext.util.Droppable) draggable(Ext.util.Draggable) e(Ext.event.Event) eOpts(Object)",
                "doc": "\n"
            }
        ]
    },
    "Ext.util.Event": {
        "type": "Ext.util.Event",
        "doc": "<p>Represents single event type that an Observable object listens to.\nAll actual listeners are tracked inside here.  When the event fires,\nit calls all the registered listener functions.</p>",
        "configs": [],
        "events": []
    },
    "Ext.util.Filter": {
        "type": "Ext.util.Filter",
        "doc": "<p>Represents a filter that can be applied to a MixedCollection. Can either simply\nfilter on a property/value pair or pass in a filter function with custom logic. Filters are always used in the\ncontext of MixedCollections, though Stores frequently create them when filtering and searching\non their records. Example usage:</p>",
        "configs": [
            {
                "name": "anyMatch",
                "type": "boolean",
                "doc": "<p>True to allow any match - no regex start/end line anchors will be added.</p>",
                "default": "false"
            },
            {
                "name": "caseSensitive",
                "type": "boolean",
                "doc": "<p>True to make the regex case sensitive (adds 'i' switch to regex).</p>",
                "default": "false"
            },
            {
                "name": "convert",
                "type": "function",
                "doc": "<p>A function to do any conversion on the value before comparison. For example,\nsomething that returns the date only part of a date.</p>",
                "default": null
            },
            {
                "name": "disableOnEmpty",
                "type": "boolean",
                "doc": "<p><code>true</code> to not have this filter participate in the filtering process when the value of\nthis the filter is empty according to Ext.isEmpty.</p>",
                "default": "false"
            },
            {
                "name": "disabled",
                "type": "boolean",
                "doc": "<p>Setting this property to <code>true</code> disables this individual Filter so that it no longer contributes to a Store&#39;s filter set</p>",
                "default": "false"
            },
            {
                "name": "exactMatch",
                "type": "boolean",
                "doc": "<p>True to force exact match (^ and $ characters added to the regex). Ignored if anyMatch is true.</p>",
                "default": "false"
            },
            {
                "name": "filterFn",
                "type": "function",
                "doc": "<p>A custom filter function which is passed each item in the Ext.util.MixedCollection in turn. Should return\n<code>true</code> to accept each item or <code>false</code> to reject it.</p>",
                "default": null
            },
            {
                "name": "id",
                "type": "string",
                "doc": "<p>An identifier by which this Filter is indexed in a Store&#39;s filters collection</p>",
                "default": null
            },
            {
                "name": "operator",
                "type": "string",
                "doc": "<p>The operator to use to compare the property to this Filter's value</p>",
                "default": null
            },
            {
                "name": "property",
                "type": "string",
                "doc": "<p>The property to filter on. Required unless a filterFn is passed.</p>",
                "default": "null"
            },
            {
                "name": "root",
                "type": "string",
                "doc": "<p>Optional root property. This is mostly useful when filtering a Store, in which case we set the root to 'data' to\nmake the filter pull the property out of the data object of each item</p>",
                "default": "null"
            },
            {
                "name": "scope",
                "type": "object",
                "doc": "<p>The context (<code>this</code> property) in which the filtering function is called. Defaults\nto this Filter object.</p>",
                "default": null
            },
            {
                "name": "serializer",
                "type": "function",
                "doc": "<p>A function to post-process any serialization.</p>",
                "default": null
            },
            {
                "name": "value",
                "type": "regexp/mixed",
                "doc": "<p>The value you want to match against. Required unless a filterFn is passed.</p>",
                "default": "null"
            }
        ],
        "events": []
    },
    "Ext.util.FilterCollection": {
        "type": "Ext.util.FilterCollection",
        "configs": [],
        "events": []
    },
    "Ext.util.Format": {
        "type": "Ext.util.Format",
        "doc": "<p>This class is a centralized place for formatting functions. It includes\nfunctions to format various different types of data, such as text, dates and numeric values.</p>",
        "configs": [],
        "events": []
    },
    "Ext.util.Geolocation": {
        "type": "Ext.util.Geolocation",
        "doc": "<p>Provides a cross browser class for retrieving location information.</p>",
        "configs": [
            {
                "name": "accuracy",
                "type": "number",
                "doc": "<p>Read-only property representing the last retrieved\naccuracy level of the latitude and longitude coordinates,\nspecified in meters.</p>",
                "default": null
            },
            {
                "name": "allowHighAccuracy",
                "type": "boolean",
                "doc": "<p>When set to <code>true</code>, provide a hint that the application would like to receive\nthe best possible results. This may result in slower response times or increased power consumption.\nThe user might also deny this capability, or the device might not be able to provide more accurate\nresults than if this option was set to <code>false</code>.</p>",
                "default": "false"
            },
            {
                "name": "altitude",
                "type": "number",
                "doc": "<p>Read-only property representing the last retrieved\nheight of the position, specified in meters above the ellipsoid\nWGS84.</p>",
                "default": null
            },
            {
                "name": "altitudeAccuracy",
                "type": "number",
                "doc": "<p>Read-only property representing the last retrieved\naccuracy level of the altitude coordinate, specified in meters.</p>",
                "default": null
            },
            {
                "name": "autoUpdate",
                "type": "boolean",
                "doc": "<p>When set to <code>true</code>, continually monitor the location of the device (beginning immediately)\nand fire locationupdate and locationerror events.</p>",
                "default": "true"
            },
            {
                "name": "frequency",
                "type": "number",
                "doc": "<p>The frequency of each update if autoUpdate is set to <code>true</code>.</p>",
                "default": "10000"
            },
            {
                "name": "heading",
                "type": "number",
                "doc": "<p>Read-only property representing the last retrieved\ndirection of travel of the hosting device,\nspecified in non-negative degrees between 0 and 359,\ncounting clockwise relative to the true north.</p>",
                "default": null
            },
            {
                "name": "latitude",
                "type": "number",
                "doc": "<p>Read-only property representing the last retrieved\ngeographical coordinate specified in degrees.</p>",
                "default": null
            },
            {
                "name": "longitude",
                "type": "number",
                "doc": "<p>Read-only property representing the last retrieved\ngeographical coordinate specified in degrees.</p>",
                "default": null
            },
            {
                "name": "maximumAge",
                "type": "number",
                "doc": "<p>This option indicates that the application is willing to accept cached location information whose age\nis no greater than the specified time in milliseconds. If <code>maximumAge</code> is set to 0, an attempt to retrieve\nnew location information is made immediately.</p>",
                "default": "0"
            },
            {
                "name": "provider",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "speed",
                "type": "number",
                "doc": "<p>Read-only property representing the last retrieved\ncurrent ground speed of the device, specified in meters per second.</p>",
                "default": null
            },
            {
                "name": "timeout",
                "type": "number",
                "doc": "<p>The maximum number of milliseconds allowed to elapse between a location update operation\nand the corresponding locationupdate event being raised.  If a location was not successfully\nacquired before the given timeout elapses (and no other internal errors have occurred in this interval),\nthen a locationerror event will be raised indicating a timeout as the cause.</p>",
                "default": null
            },
            {
                "name": "timestamp",
                "type": "date",
                "doc": "<p>Read-only property representing when the last retrieved\npositioning information was acquired by the device.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "locationerror",
                "params": "this(Ext.util.Geolocation) timeout(Boolean) permissionDenied(Boolean) locationUnavailable(Boolean) message(String) eOpts(Object)",
                "doc": "<p>Raised when a location retrieval operation failed.</p>"
            },
            {
                "name": "locationupdate",
                "params": "this(Ext.util.Geolocation) eOpts(Object)",
                "doc": "<p>Raised when a location retrieval operation has been completed successfully.</p>"
            }
        ]
    },
    "Ext.util.Group": {
        "type": "Ext.util.Group",
        "doc": "<p>Encapsulates a grouped collection of records within a Ext.util.Collection</p>",
        "configs": [
            {
                "name": "groupKey",
                "type": "object",
                "doc": "\n",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.util.GroupCollection": {
        "type": "Ext.util.GroupCollection",
        "doc": "<p>A collection containing the result of applying grouping to the records in the store.</p>",
        "configs": [
            {
                "name": "grouper",
                "type": "object",
                "doc": "<p>A configuration object for this collection's grouper.</p>",
                "default": null
            },
            {
                "name": "itemRoot",
                "type": "object",
                "doc": "\n",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.util.Grouper": {
        "type": "Ext.util.Grouper",
        "doc": "<p>Represents a grouping of items. The grouper works in a similar fashion as the\n<code>Ext.util.Sorter</code> except that groups must be able to extract a value by which all items\nin the group can be collected. By default this is derived from the <code>property</code> config\nbut can be customized using the <code>groupFn</code> if necessary.</p>",
        "configs": [
            {
                "name": "groupFn",
                "type": "function",
                "doc": "<p>This function is called for each item in the collection\nto determine the group to which it belongs. By default the <code>property</code> value is\nused to group items.</p>",
                "default": null
            },
            {
                "name": "property",
                "type": "string",
                "doc": "<p>The field by which records are grouped. Groups are\nsorted alphabetically by group value as the default. To sort groups by a different\nproperty, use the sortProperty configuration.</p>",
                "default": null
            },
            {
                "name": "sortProperty",
                "type": "string",
                "doc": "<p>You can set this configuration if you want the groups\nto be sorted on something other then the group string returned by the <code>groupFn</code>.\nThis serves the same role as <code>property</code> on a normal <code>Ext.util.Sorter</code>.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.util.HashMap": {
        "type": "Ext.util.HashMap",
        "doc": "<p>Represents a collection of a set of key and value pairs. Each key in the HashMap\nmust be unique, the same key cannot exist twice. Access to items is provided via\nthe key only. Sample usage:</p>",
        "configs": [
            {
                "name": "keyFn",
                "type": "function",
                "doc": "<p>A function that is used to retrieve a default key for a passed object.\nA default is provided that returns the <code>id</code> property on the object. This function is only used\nif the <code>add</code> method is called with a single argument.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "add",
                "params": "this(Ext.util.HashMap) key(String) value(Object) eOpts(Object)",
                "doc": "<p>Fires when a new item is added to the hash.</p>"
            },
            {
                "name": "clear",
                "params": "this(Ext.util.HashMap) eOpts(Object)",
                "doc": "<p>Fires when the hash is cleared.</p>"
            },
            {
                "name": "remove",
                "params": "this(Ext.util.HashMap) key(String) value(Object) eOpts(Object)",
                "doc": "<p>Fires when an item is removed from the hash.</p>"
            },
            {
                "name": "replace",
                "params": "this(Ext.util.HashMap) key(String) value(Object) old(Object) eOpts(Object)",
                "doc": "<p>Fires when an item is replaced in the hash.</p>"
            }
        ]
    },
    "Ext.util.History": {
        "type": "Ext.util.History",
        "doc": "<p>History management component that allows you to register arbitrary tokens that signify application\nhistory state on navigation actions.  You can then handle the history change event in order\nto reset your application UI to the appropriate state when the user navigates forward or backward through\nthe browser history stack.</p>",
        "configs": [],
        "events": [
            {
                "name": "change",
                "params": "token(String) eOpts(Object)",
                "doc": "<p>Fires when navigation back or forwards within the local page's history occurs.</p>"
            },
            {
                "name": "ready",
                "params": "history(Ext.util.History) eOpts(Object)",
                "doc": "<p>Fires when the Ext.util.History singleton has been initialized and is ready for use.</p>"
            }
        ]
    },
    "Ext.util.Inflector": {
        "type": "Ext.util.Inflector",
        "doc": "<p>General purpose inflector class that pluralizes, singularizes and\nordinalizes words. Sample usage:</p>",
        "configs": [],
        "events": []
    },
    "Ext.util.InputBlocker": {
        "type": "Ext.util.InputBlocker",
        "doc": "<p>A utility class to disable input fields in WP7,8 because they stay still clickable even if they are under other elements.</p>",
        "configs": [],
        "events": []
    },
    "Ext.util.ItemCollection": {
        "type": "Ext.util.ItemCollection",
        "configs": [],
        "events": []
    },
    "Ext.util.LineSegment": {
        "type": "Ext.util.LineSegment",
        "doc": "<p>Utility class that represents a line segment, constructed by two Ext.util.Point</p>",
        "configs": [],
        "events": []
    },
    "Ext.util.LocalStorage": {
        "type": "Ext.util.LocalStorage",
        "doc": "<p>This class provides a common API to LocalStorage with backwards compatibility for IE.</p>",
        "configs": [
            {
                "name": "flushDelay",
                "type": "number",
                "doc": "<p>The number of milliseconds to delay writing changes to the underlying store.\nThis applies only to legacy IE mode and helps batch multiple writes into one\nflush to storage.</p>",
                "default": "1"
            },
            {
                "name": "id",
                "type": "string",
                "doc": "<p>The unique identifier for this store. This config is required to scope this storage\ndistinctly from others. Ultimately, this is used to set a prefix on all keys.</p>",
                "default": null
            },
            {
                "name": "lazyKeys",
                "type": "boolean",
                "doc": "<p>Determines if the keys collection is continuously maintained by this object. By\ndefault the keys array is lazily fetched from the underlying store and when keys\nare removed, the array is discarded. This heuristic tends to be safer than doing\nthe linear removal and array rippling to remove keys from the array on each call\nto <code>removeItem</code>. If the cost of scanning <code>localStorage</code> for keys is high enough\nand if the keys are frequently needed, then this flag can be set to <code>false</code> to\ninstruct this class to maintain the keys array once it has been determined.</p>",
                "default": "true"
            },
            {
                "name": "prefix",
                "type": "string",
                "doc": "<p>The prefix to apply to all <code>localStorage</code> keys manages by this instance. This does\nnot apply to the legacy IE mechanism but only to the HTML5 <code>localStorage</code> keys. If\nnot provided, the <code>id</code> property initializes this value with <code>\"id-\"</code>.</p>",
                "default": "''"
            },
            {
                "name": "session",
                "type": "boolean",
                "doc": "<p>Specify this as <code>true</code> to use <code>sessionStorage</code> instead of the default <code>localStoreage</code>.\nThis option is not supported in legacy IE browsers (IE 6 and 7) and is ignored.</p>",
                "default": "false"
            }
        ],
        "events": []
    },
    "Ext.util.LruCache": {
        "type": "Ext.util.LruCache",
        "doc": "<p>A linked HashMap implementation which maintains most recently accessed\nitems at the end of the list, and purges the cache down to the most recently accessed maxSize items\nupon add.</p>",
        "configs": [
            {
                "name": "maxSize",
                "type": "number",
                "doc": "<p>The maximum size the cache is allowed to grow to before further additions cause\nremoval of the least recently used entry.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.util.MixedCollection": {
        "type": "Ext.util.MixedCollection",
        "doc": "<p>Represents a collection of a set of key and value pairs. Each key in the MixedCollection\nmust be unique, the same key cannot exist twice. This collection is ordered, items in the\ncollection can be accessed by index  or via the key. Newly added items are added to\nthe end of the collection. This class is similar to Ext.util.HashMap however it\nis heavier and provides more functionality. Sample usage:</p>",
        "configs": [
            {
                "name": "allowFunctions",
                "type": "boolean",
                "doc": "<p>Configure as <code>true</code> if the addAll function should add function references to the collection.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.util.ObjectTemplate": {
        "type": "Ext.util.ObjectTemplate",
        "doc": "<p>This class accepts an object that serves as a template for creating new objects. Like\nother templates (<code>Ext.XTemplate</code>) this creation step requires a context object to give\nthe template its values.</p>",
        "configs": [],
        "events": []
    },
    "Ext.util.Observable": {
        "type": "Ext.util.Observable",
        "doc": "<p>A Ext.mixin.Observable subclass that is provided for backward compatibility.\nApplications should avoid using this class, and use Ext.mixin.Observable instead.</p>",
        "configs": [],
        "events": []
    },
    "Ext.util.Offset": {
        "type": "Ext.util.Offset",
        "configs": [],
        "events": []
    },
    "Ext.util.Operators": {
        "type": "Ext.util.Operators",
        "doc": "<p>This class defines the operators that are shared by DomQuery and ComponentQuery</p>",
        "configs": [],
        "events": []
    },
    "Ext.util.paintmonitor.Abstract": {
        "type": "Ext.util.paintmonitor.Abstract",
        "configs": [
            {
                "name": "args",
                "type": "array",
                "doc": "\n",
                "default": "[]"
            },
            {
                "name": "callback",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "element",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "scope",
                "type": "object",
                "doc": "\n",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.util.paintmonitor.CssAnimation": {
        "type": "Ext.util.paintmonitor.CssAnimation",
        "configs": [],
        "events": []
    },
    "Ext.util.PaintMonitor": {
        "type": "Ext.util.PaintMonitor",
        "configs": [],
        "events": []
    },
    "Ext.util.paintmonitor.OverflowChange": {
        "type": "Ext.util.paintmonitor.OverflowChange",
        "configs": [],
        "events": []
    },
    "Ext.util.Point": {
        "type": "Ext.util.Point",
        "doc": "<p>Represents a 2D point with x and y properties, useful for comparison and instantiation\nfrom an event:</p>",
        "configs": [],
        "events": []
    },
    "Ext.util.Positionable": {
        "type": "Ext.util.Positionable",
        "doc": "<p>This mixin provides a common interface for objects that can be positioned, e.g.\nComponents and Elements</p>",
        "configs": [],
        "events": []
    },
    "Ext.util.PositionMap": {
        "type": "Ext.util.PositionMap",
        "configs": [
            {
                "name": "minimumHeight",
                "type": "object",
                "doc": "\n",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.util.Region": {
        "type": "Ext.util.Region",
        "doc": "<p>This class represents a rectangular region in X,Y space, and performs geometric\ntransformations or tests upon the region.</p>",
        "configs": [],
        "events": []
    },
    "Ext.util.Schedulable": {
        "type": "Ext.util.Schedulable",
        "doc": "<p>This is a base class for objects that can be managed by <code>Ext.util.Scheduler</code>.</p>",
        "configs": [],
        "events": []
    },
    "Ext.util.Scheduler": {
        "type": "Ext.util.Scheduler",
        "doc": "<p>This class is used to bulk schedule a set of <code>Ext.util.Schedulable</code> items. The items\nin the scheduler request time by calling their <code>schedule</code> method and when the time has\narrived its <code>react</code> method is called.</p>",
        "configs": [
            {
                "name": "cycleLimit",
                "type": "number",
                "doc": "<p>The maximum number of iterations to make over the items in one <code>notify</code> call.\nThis is used to prevent run away logic from looping infinitely. If this limit\nis exceeded, an error is thrown (in development builds).</p>",
                "default": "5"
            },
            {
                "name": "preSort",
                "type": "string/function",
                "doc": "<p>If provided the <code>Schedulable</code> items will be pre-sorted by this function or\nproperty value before the dependency sort.</p>",
                "default": null
            },
            {
                "name": "tickDelay",
                "type": "number",
                "doc": "<p>The number of milliseconds to delay notification after the first <code>schedule</code>\nrequest.</p>",
                "default": "5"
            }
        ],
        "events": []
    },
    "Ext.util.sizemonitor.Abstract": {
        "type": "Ext.util.sizemonitor.Abstract",
        "configs": [
            {
                "name": "args",
                "type": "array",
                "doc": "\n",
                "default": "[]"
            },
            {
                "name": "callback",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "element",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "scope",
                "type": "object",
                "doc": "\n",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.util.SizeMonitor": {
        "type": "Ext.util.SizeMonitor",
        "configs": [],
        "events": []
    },
    "Ext.util.sizemonitor.OverflowChange": {
        "type": "Ext.util.sizemonitor.OverflowChange",
        "configs": [],
        "events": []
    },
    "Ext.util.sizemonitor.Scroll": {
        "type": "Ext.util.sizemonitor.Scroll",
        "configs": [],
        "events": []
    },
    "Ext.util.Sortable": {
        "type": "Ext.util.Sortable",
        "doc": "<p>A mixin which allows a data component to be sorted. This is used by e.g. Ext.data.Store and Ext.data.TreeStore.</p>",
        "configs": [
            {
                "name": "defaultSortDirection",
                "type": "string",
                "doc": "<p>The default sort direction to use if one is not specified.</p>",
                "default": "\"ASC\""
            },
            {
                "name": "multiSortLimit",
                "type": "number",
                "doc": "<p>The maximum number of sorters which may be applied to this Sortable when using the \"multi\" insertion position\nwhen adding sorters.</p>",
                "default": "3"
            },
            {
                "name": "sortRoot",
                "type": "string",
                "doc": "<p>The property in each item that contains the data to sort.</p>",
                "default": null
            },
            {
                "name": "sorters",
                "type": "ext.util.sorter[]/object[]",
                "doc": "<p>The initial set of Sorters.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "beforesort",
                "params": "me(Ext.util.Sortable) sorters(Ext.util.Sorter[]) eOpts(Object)",
                "doc": "<p>Fires before a sort occurs.</p>"
            }
        ]
    },
    "Ext.util.Sorter": {
        "type": "Ext.util.Sorter",
        "doc": "<p>Represents a single sorter that can be used as part of the sorters configuration in Ext.mixin.Sortable.</p>",
        "configs": [
            {
                "name": "direction",
                "type": "string",
                "doc": "<p>The direction to sort by. Valid values are \"ASC\", and \"DESC\".</p>",
                "default": "\"ASC\""
            },
            {
                "name": "id",
                "type": "mixed",
                "doc": "<p>An optional id this sorter can be keyed by in Collections. If\nno id is specified it will use the property name used in this Sorter. If no\nproperty is specified, e.g. when adding a custom sorter function we will generate\na random id.</p>",
                "default": null
            },
            {
                "name": "property",
                "type": "string",
                "doc": "<p>The property to sort by. Required unless <code>sorterFn</code> is provided</p>",
                "default": null
            },
            {
                "name": "root",
                "type": "string",
                "doc": "<p>Optional root property. This is mostly useful when sorting a Store, in which case we set the\nroot to 'data' to make the filter pull the property out of the data object of each item</p>",
                "default": null
            },
            {
                "name": "sorterFn",
                "type": "function",
                "doc": "<p>A specific sorter function to execute. Can be passed instead of property.\nThis function should compare the two passed arguments, returning -1, 0 or 1 depending on if item 1 should be\nsorted before, at the same level, or after item 2.</p>",
                "default": null
            },
            {
                "name": "transform",
                "type": "function",
                "doc": "<p>A function that will be run on each value before\nit is compared in the sorter. The function will receive a single argument,\nthe value.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.util.SorterCollection": {
        "type": "Ext.util.SorterCollection",
        "configs": [
            {
                "name": "applySorterOptionsFn",
                "type": "function",
                "doc": "<p>A template method that can be used to apply options to a sorter during creation</p>",
                "default": null
            },
            {
                "name": "applySorterOptionsScope",
                "type": "object",
                "doc": "<p>The scope to execute the applySorterOptionsFn</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.util.TapRepeater": {
        "type": "Ext.util.TapRepeater",
        "doc": "<p>A wrapper class which can be applied to any element. Fires a \"tap\" event while\ntouching the device. The interval between firings may be specified in the config but\ndefaults to 20 milliseconds.</p>",
        "configs": [
            {
                "name": "accelerate",
                "type": "boolean",
                "doc": "\n",
                "default": "true"
            },
            {
                "name": "delay",
                "type": "number",
                "doc": "\n",
                "default": "250"
            },
            {
                "name": "el",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "interval",
                "type": "number",
                "doc": "\n",
                "default": "10"
            },
            {
                "name": "pressCls",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "preventDefault",
                "type": "boolean",
                "doc": "\n",
                "default": "true"
            },
            {
                "name": "stopDefault",
                "type": "boolean",
                "doc": "\n",
                "default": "false"
            },
            {
                "name": "timer",
                "type": "number",
                "doc": "\n",
                "default": "0"
            }
        ],
        "events": [
            {
                "name": "tap",
                "params": "this(Ext.util.TapRepeater) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires on a specified interval during the time the element is pressed.</p>"
            },
            {
                "name": "touchend",
                "params": "this(Ext.util.TapRepeater) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when the touch is ended.</p>"
            },
            {
                "name": "touchstart",
                "params": "this(Ext.util.TapRepeater) e(Ext.event.Event) eOpts(Object)",
                "doc": "<p>Fires when the touch is started.</p>"
            }
        ]
    },
    "Ext.util.TaskManager": {
        "type": "Ext.util.TaskManager",
        "doc": "<p>A static Ext.util.TaskRunner instance that can be used to start and stop\narbitrary tasks. See Ext.util.TaskRunner for supported methods and task\nconfig properties.</p>",
        "configs": [],
        "events": []
    },
    "Ext.util.TaskRunner": {
        "type": "Ext.util.TaskRunner",
        "doc": "<p>Provides the ability to execute one or more arbitrary tasks in an asynchronous manner.</p>",
        "configs": [
            {
                "name": "fireIdleEvent",
                "type": "boolean",
                "doc": "<p>This may be configured <code>false</code> to inhibit firing of the idle event after task invocation.</p>",
                "default": "true"
            },
            {
                "name": "interval",
                "type": "number",
                "doc": "<p>How often to run the task in milliseconds. Defaults to every 10ms.</p>",
                "default": "10"
            }
        ],
        "events": []
    },
    "Ext.util.TaskRunner.Task": {
        "type": "Ext.util.TaskRunner.Task",
        "doc": "<p>Instances of this class are created by Ext.util.TaskRunner.newTask method.</p>",
        "configs": [],
        "events": []
    },
    "Ext.util.TextMetrics": {
        "type": "Ext.util.TextMetrics",
        "doc": "<p>Provides precise pixel measurements for blocks of text so that you can determine\nthe exact pixel height and width of a block of text.</p>",
        "configs": [],
        "events": []
    },
    "Ext.util.translatable.Abstract": {
        "type": "Ext.util.translatable.Abstract",
        "doc": "<p>The abstract class. Sub-classes are expected, at the very least, to implement translation logics inside\nthe 'translate' method</p>",
        "configs": [
            {
                "name": "easing",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "easingX",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "easingY",
                "type": "object",
                "doc": "\n",
                "default": null
            },
            {
                "name": "useWrapper",
                "type": "object",
                "doc": "\n",
                "default": null
            }
        ],
        "events": [
            {
                "name": "animationend",
                "params": "this(Ext.util.translatable.Abstract) x(Number) y(Number) eOpts(Object)",
                "doc": "<p>Fires whenever the animation is ended</p>"
            },
            {
                "name": "animationframe",
                "params": "this(Ext.util.translatable.Abstract) x(Number) y(Number) eOpts(Object)",
                "doc": "<p>Fires for each animation frame</p>"
            },
            {
                "name": "animationstart",
                "params": "this(Ext.util.translatable.Abstract) x(Number) y(Number) eOpts(Object)",
                "doc": "<p>Fires whenever the animation is started</p>"
            }
        ]
    },
    "Ext.util.translatable.CssPosition": {
        "type": "Ext.util.translatable.CssPosition",
        "configs": [],
        "events": []
    },
    "Ext.util.translatable.CssTransform": {
        "type": "Ext.util.translatable.CssTransform",
        "doc": "<p>CSS Transform implementation</p>",
        "configs": [],
        "events": []
    },
    "Ext.util.translatable.Dom": {
        "type": "Ext.util.translatable.Dom",
        "configs": [
            {
                "name": "element",
                "type": "object",
                "doc": "\n",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.util.Translatable": {
        "type": "Ext.util.Translatable",
        "doc": "<p>The utility class to abstract different implementations to have the best performance when applying 2D translation\non any DOM element.</p>",
        "configs": [],
        "events": []
    },
    "Ext.util.translatable.ScrollParent": {
        "type": "Ext.util.translatable.ScrollParent",
        "doc": "<p>Translates the element by setting the scroll position of its parent node.</p>",
        "configs": [],
        "events": []
    },
    "Ext.util.translatable.ScrollPosition": {
        "type": "Ext.util.translatable.ScrollPosition",
        "doc": "<p>Scroll position implementation</p>",
        "configs": [
            {
                "name": "useWrapper",
                "type": "boolean",
                "doc": "\n",
                "default": "true"
            }
        ],
        "events": []
    },
    "Ext.util.TranslatableGroup": {
        "type": "Ext.util.TranslatableGroup",
        "configs": [
            {
                "name": "activeIndex",
                "type": "number",
                "doc": "\n",
                "default": "0"
            },
            {
                "name": "itemLength",
                "type": "object",
                "doc": "\n",
                "default": "{x: 0, y: 0}"
            },
            {
                "name": "items",
                "type": "array",
                "doc": "\n",
                "default": "[]"
            }
        ],
        "events": []
    },
    "Ext.util.TranslatableList": {
        "type": "Ext.util.TranslatableList",
        "configs": [
            {
                "name": "items",
                "type": "array",
                "doc": "\n",
                "default": "[]"
            }
        ],
        "events": []
    },
    "Ext.util.TSV": {
        "type": "Ext.util.TSV",
        "doc": "<p>This class contains utility methods for dealing with TSV (Tab Separated Values) as\nspecified in RFC 4180.</p>",
        "configs": [
            {
                "name": "delimiter",
                "type": "string",
                "doc": "<p>The string used to separate the values in a row. Common values for this config\nare comma (\",\") and tab (\"\\t\"). See <code>Ext.util.CSV</code> and  <code>Ext.util.TSV</code>\nfor pre-configured instances of these formats.</p>",
                "default": "'\\t'"
            }
        ],
        "events": []
    },
    "Ext.util.Wrapper": {
        "type": "Ext.util.Wrapper",
        "configs": [],
        "events": []
    },
    "Ext.util.XTemplateCompiler": {
        "type": "Ext.util.XTemplateCompiler",
        "doc": "<p>This class compiles the XTemplate syntax into a function object. The function is used\nlike so:</p>",
        "configs": [],
        "events": []
    },
    "Ext.util.XTemplateParser": {
        "type": "Ext.util.XTemplateParser",
        "doc": "<p>This class parses the XTemplate syntax and calls abstract methods to process the parts.</p>",
        "configs": [],
        "events": []
    },
    "Ext.Version": {
        "type": "Ext.Version",
        "doc": "<p>A utility class that wraps around a version number string and provides convenient methods\nto perform comparisons. A version number is expressed in the following general format:</p>",
        "configs": [],
        "events": []
    },
    "Ext.Video": {
        "type": "Ext.Video",
        "doc": "<p>Provides a simple Container for HTML5 Video.</p>",
        "configs": [
            {
                "name": "baseCls",
                "type": "string",
                "doc": "<p>The base CSS class to apply to this component's element. This will also be prepended to\nother elements within this component. To add specific styling for sub-classes, use the cls config.</p>",
                "default": "Ext.baseCSSPrefix + 'video'"
            },
            {
                "name": "controls",
                "type": "boolean",
                "doc": "<p>Determines if native controls should be shown for this video player.</p>",
                "default": "true"
            },
            {
                "name": "posterUrl",
                "type": "string",
                "doc": "<p>Location of a poster image to be shown before showing the video.</p>",
                "default": null
            },
            {
                "name": "url",
                "type": "string/array",
                "doc": "<p>Location of the video to play. This should be in H.264 format and in a .mov file format.</p>",
                "default": null
            }
        ],
        "events": []
    },
    "Ext.viewport.Android": {
        "type": "Ext.viewport.Android",
        "doc": "<p>Android version of viewport.</p>",
        "configs": [
            {
                "name": "translatable",
                "type": "object",
                "doc": "\n",
                "default": "{translationMethod: 'csstransform'}"
            }
        ],
        "events": []
    },
    "Ext.viewport.Default": {
        "type": "Ext.viewport.Default",
        "doc": "<p>Base class for iOS and Android viewports.</p>",
        "configs": [
            {
                "name": "autoBlurInput",
                "type": "boolean",
                "doc": "<p>Auto blur the focused element when touching on a non-input. This is used to work around Android bugs\nwhere the virtual keyboard is not hidden when tapping outside an input.</p>",
                "default": "true"
            },
            {
                "name": "autoMaximize",
                "type": "boolean",
                "doc": "\n",
                "default": "false"
            },
            {
                "name": "autoRender",
                "type": "boolean",
                "doc": "\n",
                "default": "true"
            },
            {
                "name": "height",
                "type": "string",
                "doc": "\n",
                "default": "'100%'"
            },
            {
                "name": "layout",
                "type": "object/string",
                "doc": "<p>Configuration for this Container's layout. Example:</p>",
                "default": "'card'"
            },
            {
                "name": "menus",
                "type": "object",
                "doc": "<p>An object of all the menus on this viewport.</p>",
                "default": "{}"
            },
            {
                "name": "preventPanning",
                "type": "boolean",
                "doc": "<p>Whether or not to always prevent default panning behavior of the\nbrowser's viewport.</p>",
                "default": "true"
            },
            {
                "name": "preventZooming",
                "type": "boolean",
                "doc": "<p><code>true</code> to attempt to stop zooming when you double tap on the screen on mobile devices,\ntypically HTC devices with HTC Sense UI.</p>",
                "default": "false"
            },
            {
                "name": "useBodyElement",
                "type": "boolean",
                "doc": "\n",
                "default": "true"
            },
            {
                "name": "width",
                "type": "string",
                "doc": "\n",
                "default": "'100%'"
            }
        ],
        "events": [
            {
                "name": "maximize",
                "params": "this(Ext.Viewport) eOpts(Object)",
                "doc": "<p>Fires when the Viewport is maximized.</p>"
            },
            {
                "name": "orientationchange",
                "params": "this(Ext.Viewport) newOrientation(String) width(Number) height(Number) eOpts(Object)",
                "doc": "<p>Fires when the Viewport orientation has changed.</p>"
            },
            {
                "name": "ready",
                "params": "this(Ext.Viewport) eOpts(Object)",
                "doc": "<p>Fires when the Viewport is in the DOM and ready.</p>"
            }
        ]
    },
    "Ext.viewport.Ios": {
        "type": "Ext.viewport.Ios",
        "doc": "<p>iOS version of viewport.</p>",
        "configs": [],
        "events": []
    },
    "Ext.Viewport": {
        "type": "Ext.Viewport",
        "doc": "<p>Ext.Viewport is a instance created when you use Ext.setup. Because Ext.Viewport extends from\nExt.Container, it has as layout (which defaults to Ext.layout.Card). This means you\ncan add items to it at any time, from anywhere in your code. The Ext.Viewport fullscreen\nconfiguration is <code>true</code> by default, so it will take up your whole screen.</p>",
        "configs": [],
        "events": []
    },
    "Ext.viewport.Viewport": {
        "type": "Ext.viewport.Viewport",
        "doc": "<p>This class acts as a factory for environment-specific viewport implementations.</p>",
        "configs": [],
        "events": []
    },
    "Ext.viewport.WindowsPhone": {
        "type": "Ext.viewport.WindowsPhone",
        "doc": "<p>Windows Phone version of Viewport.</p>",
        "configs": [
            {
                "name": "translatable",
                "type": "object",
                "doc": "\n",
                "default": "{translationMethod: 'csstransform'}"
            }
        ],
        "events": []
    },
    "Ext.Widget": {
        "type": "Ext.Widget",
        "doc": "<p>Ext.Widget is a light-weight Component that consists of nothing more than a template\nElement that can be cloned to quickly and efficiently replicate many instances.\nExt.Widget is typically not instantiated directly, because the default template is\njust a single element with no listeners. Instead Ext.Widget should be extended to\ncreate Widgets that have a useful markup structure and event listeners.</p>",
        "configs": [
            {
                "name": "height",
                "type": "number/string",
                "doc": "<p>The height of this Component; must be a valid CSS length value, e.g: <code>300</code>, <code>100px</code>, <code>30%</code>, etc.\nBy default, if this is not explicitly set, this Component's element will simply have its own natural size.\nIf set to <code>auto</code>, it will set the width to <code>null</code> meaning it will have its own natural size.</p>",
                "default": null
            },
            {
                "name": "style",
                "type": "string/object",
                "doc": "<p>Additional CSS styles that will be rendered into an inline style attribute when\nthe widget is rendered.</p>",
                "default": null
            },
            {
                "name": "userCls",
                "type": "string/string[]",
                "doc": "<p>One or more CSS classes to add to the component's primary element. This config\nis intended solely for use by the component instantiator (the \"user\"), not by\nderived classes.</p>",
                "default": null
            },
            {
                "name": "width",
                "type": "number/string",
                "doc": "<p>The width of this Component; must be a valid CSS length value, e.g: <code>300</code>, <code>100px</code>, <code>30%</code>, etc.\nBy default, if this is not explicitly set, this Component's element will simply have its own natural size.\nIf set to <code>auto</code>, it will set the width to <code>null</code> meaning it will have its own natural size.</p>",
                "default": null
            }
        ],
        "events": [
            {
                "name": "heightchange",
                "params": "this(Ext.Widget) value(Number/String) oldValue(Number/String) eOpts(Object)",
                "doc": "<p>Fires when the height configuration is changed by setHeight.</p>"
            },
            {
                "name": "widthchange",
                "params": "this(Ext.Widget) value(Number/String) oldValue(Number/String) eOpts(Object)",
                "doc": "<p>Fires when the width configuration is changed by setWidth.</p>"
            }
        ]
    },
    "Ext.XTemplate": {
        "type": "Ext.XTemplate",
        "doc": "<p>A template class that supports advanced functionality like:</p>",
        "configs": [
            {
                "name": "definitions",
                "type": "string/array",
                "doc": "<p>Optional. A statement, or array of statements which set up <code>var</code>s which may then\nbe accessed within the scope of the generated function.</p>",
                "default": null
            },
            {
                "name": "strict",
                "type": "boolean",
                "doc": "<p>Expressions in templates that traverse \"dot paths\" and fail (due to <code>null</code> at some\nstage) have always been expanded as empty strings. This is convenient in most cases\nbut doing so can also mask errors in the template. Setting this to <code>true</code> changes\nthis default so that any expression errors will be thrown as exceptions.</p>",
                "default": "false"
            }
        ],
        "events": []
    }
}